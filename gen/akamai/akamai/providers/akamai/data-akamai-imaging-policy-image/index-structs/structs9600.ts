import * as cdktf from 'cdktf';
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationAppendImage {
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationAppendImageToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationAppendImageOutputReference | DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationAppendImage): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationAppendImageToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationAppendImageOutputReference | DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationAppendImage): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
  };
  return attrs;
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationAppendImageOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false, 0);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationAppendImage | undefined {
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationAppendImage | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
    }
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationAppend {
  /**
  * Specifies where to place the `image` relative to the source image. The available values represent the eight cardinal directions (`North`, `South`, `East`, `West`, `NorthEast`, `NorthWest`, `SouthEast`, `SouthWest`) and a `Center` by default.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#gravity DataAkamaiImagingPolicyImage#gravity}
  */
  readonly gravity?: string;
  /**
  * Determines the exact placement of the `image` when `gravity` is `Center` or a diagonal. The value is either `horizontal` or `vertical`. Use `horizontal` to append an `image` east or west of the source image. This aligns the `image` on the vertical gravity component, placing `Center` gravity east. Use `vertical` to append an `image` north or south of the source image. This aligns the `image` on the horizontal gravity component, placing `Center` gravity south.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#gravity_priority DataAkamaiImagingPolicyImage#gravity_priority}
  */
  readonly gravityPriority?: string;
  /**
  * Determines the exact placement of the `image` when `gravity` is `Center` or a diagonal. The value is either `horizontal` or `vertical`. Use `horizontal` to append an `image` east or west of the source image. This aligns the `image` on the vertical gravity component, placing `Center` gravity east. Use `vertical` to append an `image` north or south of the source image. This aligns the `image` on the horizontal gravity component, placing `Center` gravity south.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#gravity_priority_var DataAkamaiImagingPolicyImage#gravity_priority_var}
  */
  readonly gravityPriorityVar?: string;
  /**
  * Specifies where to place the `image` relative to the source image. The available values represent the eight cardinal directions (`North`, `South`, `East`, `West`, `NorthEast`, `NorthWest`, `SouthEast`, `SouthWest`) and a `Center` by default.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#gravity_var DataAkamaiImagingPolicyImage#gravity_var}
  */
  readonly gravityVar?: string;
  /**
  * Whether to preserve the source image's minor dimension, `false` by default. The minor dimension is the dimension opposite the dimension that the appending `image` is placed. For example, the dimensions of the source image are 100 &times; 100 pixels. The dimensions of the appending `image` are 50 &times; 150 pixels. The `gravity` is set to `East`. This makes the major dimension horizontal and the source image's minor dimension vertical. To preserve the source image's minor dimension at 100 pixels, the `preserveMinorDimension` is set to `true`. As a result of the append, the major dimension expanded with the appended image to 150 pixels. The source image's minor dimension was maintained at 100 pixels. The total combined dimension of the image is 150 &times; 100 pixels.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#preserve_minor_dimension DataAkamaiImagingPolicyImage#preserve_minor_dimension}
  */
  readonly preserveMinorDimension?: string;
  /**
  * Whether to preserve the source image's minor dimension, `false` by default. The minor dimension is the dimension opposite the dimension that the appending `image` is placed. For example, the dimensions of the source image are 100 &times; 100 pixels. The dimensions of the appending `image` are 50 &times; 150 pixels. The `gravity` is set to `East`. This makes the major dimension horizontal and the source image's minor dimension vertical. To preserve the source image's minor dimension at 100 pixels, the `preserveMinorDimension` is set to `true`. As a result of the append, the major dimension expanded with the appended image to 150 pixels. The source image's minor dimension was maintained at 100 pixels. The total combined dimension of the image is 150 &times; 100 pixels.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#preserve_minor_dimension_var DataAkamaiImagingPolicyImage#preserve_minor_dimension_var}
  */
  readonly preserveMinorDimensionVar?: string;
  /**
  * image block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#image DataAkamaiImagingPolicyImage#image}
  */
  readonly image: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationAppendImage;
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationAppendToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationAppend | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    gravity: cdktf.stringToTerraform(struct!.gravity),
    gravity_priority: cdktf.stringToTerraform(struct!.gravityPriority),
    gravity_priority_var: cdktf.stringToTerraform(struct!.gravityPriorityVar),
    gravity_var: cdktf.stringToTerraform(struct!.gravityVar),
    preserve_minor_dimension: cdktf.stringToTerraform(struct!.preserveMinorDimension),
    preserve_minor_dimension_var: cdktf.stringToTerraform(struct!.preserveMinorDimensionVar),
    image: dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationAppendImageToTerraform(struct!.image),
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationAppendToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationAppend | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    gravity: {
      value: cdktf.stringToHclTerraform(struct!.gravity),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    gravity_priority: {
      value: cdktf.stringToHclTerraform(struct!.gravityPriority),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    gravity_priority_var: {
      value: cdktf.stringToHclTerraform(struct!.gravityPriorityVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    gravity_var: {
      value: cdktf.stringToHclTerraform(struct!.gravityVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    preserve_minor_dimension: {
      value: cdktf.stringToHclTerraform(struct!.preserveMinorDimension),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    preserve_minor_dimension_var: {
      value: cdktf.stringToHclTerraform(struct!.preserveMinorDimensionVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    image: {
      value: dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationAppendImageToHclTerraform(struct!.image),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationAppendImageList",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationAppendOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationAppend | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._gravity !== undefined) {
      hasAnyValues = true;
      internalValueResult.gravity = this._gravity;
    }
    if (this._gravityPriority !== undefined) {
      hasAnyValues = true;
      internalValueResult.gravityPriority = this._gravityPriority;
    }
    if (this._gravityPriorityVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.gravityPriorityVar = this._gravityPriorityVar;
    }
    if (this._gravityVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.gravityVar = this._gravityVar;
    }
    if (this._preserveMinorDimension !== undefined) {
      hasAnyValues = true;
      internalValueResult.preserveMinorDimension = this._preserveMinorDimension;
    }
    if (this._preserveMinorDimensionVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.preserveMinorDimensionVar = this._preserveMinorDimensionVar;
    }
    if (this._image?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.image = this._image?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationAppend | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._gravity = undefined;
      this._gravityPriority = undefined;
      this._gravityPriorityVar = undefined;
      this._gravityVar = undefined;
      this._preserveMinorDimension = undefined;
      this._preserveMinorDimensionVar = undefined;
      this._image.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._gravity = value.gravity;
      this._gravityPriority = value.gravityPriority;
      this._gravityPriorityVar = value.gravityPriorityVar;
      this._gravityVar = value.gravityVar;
      this._preserveMinorDimension = value.preserveMinorDimension;
      this._preserveMinorDimensionVar = value.preserveMinorDimensionVar;
      this._image.internalValue = value.image;
    }
  }

  // gravity - computed: false, optional: true, required: false
  private _gravity?: string; 
  public get gravity() {
    return this.getStringAttribute('gravity');
  }
  public set gravity(value: string) {
    this._gravity = value;
  }
  public resetGravity() {
    this._gravity = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get gravityInput() {
    return this._gravity;
  }

  // gravity_priority - computed: false, optional: true, required: false
  private _gravityPriority?: string; 
  public get gravityPriority() {
    return this.getStringAttribute('gravity_priority');
  }
  public set gravityPriority(value: string) {
    this._gravityPriority = value;
  }
  public resetGravityPriority() {
    this._gravityPriority = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get gravityPriorityInput() {
    return this._gravityPriority;
  }

  // gravity_priority_var - computed: false, optional: true, required: false
  private _gravityPriorityVar?: string; 
  public get gravityPriorityVar() {
    return this.getStringAttribute('gravity_priority_var');
  }
  public set gravityPriorityVar(value: string) {
    this._gravityPriorityVar = value;
  }
  public resetGravityPriorityVar() {
    this._gravityPriorityVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get gravityPriorityVarInput() {
    return this._gravityPriorityVar;
  }

  // gravity_var - computed: false, optional: true, required: false
  private _gravityVar?: string; 
  public get gravityVar() {
    return this.getStringAttribute('gravity_var');
  }
  public set gravityVar(value: string) {
    this._gravityVar = value;
  }
  public resetGravityVar() {
    this._gravityVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get gravityVarInput() {
    return this._gravityVar;
  }

  // preserve_minor_dimension - computed: false, optional: true, required: false
  private _preserveMinorDimension?: string; 
  public get preserveMinorDimension() {
    return this.getStringAttribute('preserve_minor_dimension');
  }
  public set preserveMinorDimension(value: string) {
    this._preserveMinorDimension = value;
  }
  public resetPreserveMinorDimension() {
    this._preserveMinorDimension = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get preserveMinorDimensionInput() {
    return this._preserveMinorDimension;
  }

  // preserve_minor_dimension_var - computed: false, optional: true, required: false
  private _preserveMinorDimensionVar?: string; 
  public get preserveMinorDimensionVar() {
    return this.getStringAttribute('preserve_minor_dimension_var');
  }
  public set preserveMinorDimensionVar(value: string) {
    this._preserveMinorDimensionVar = value;
  }
  public resetPreserveMinorDimensionVar() {
    this._preserveMinorDimensionVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get preserveMinorDimensionVarInput() {
    return this._preserveMinorDimensionVar;
  }

  // image - computed: false, optional: false, required: true
  private _image = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationAppendImageOutputReference(this, "image");
  public get image() {
    return this._image;
  }
  public putImage(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationAppendImage) {
    this._image.internalValue = value;
  }
  // Temporarily expose input value. Use with caution.
  public get imageInput() {
    return this._image.internalValue;
  }
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationAppendList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationAppend[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationAppendOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationAppendOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationAspectCrop {
  /**
  * Increases the size of the image canvas to achieve the requested aspect ratio instead of cropping the image. Use the Horizontal Offset and Vertical Offset settings to determine where to add the fully transparent pixels on the expanded image canvas.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#allow_expansion DataAkamaiImagingPolicyImage#allow_expansion}
  */
  readonly allowExpansion?: string;
  /**
  * Increases the size of the image canvas to achieve the requested aspect ratio instead of cropping the image. Use the Horizontal Offset and Vertical Offset settings to determine where to add the fully transparent pixels on the expanded image canvas.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#allow_expansion_var DataAkamaiImagingPolicyImage#allow_expansion_var}
  */
  readonly allowExpansionVar?: string;
  /**
  * The height term of the aspect ratio to crop.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#height DataAkamaiImagingPolicyImage#height}
  */
  readonly height?: string;
  /**
  * The height term of the aspect ratio to crop.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#height_var DataAkamaiImagingPolicyImage#height_var}
  */
  readonly heightVar?: string;
  /**
  * The width term of the aspect ratio to crop.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#width DataAkamaiImagingPolicyImage#width}
  */
  readonly width?: string;
  /**
  * The width term of the aspect ratio to crop.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#width_var DataAkamaiImagingPolicyImage#width_var}
  */
  readonly widthVar?: string;
  /**
  * Specifies the horizontal portion of the image you want to keep when the aspect ratio cropping is applied. When using Allow Expansion this setting defines the horizontal position of the image on the new expanded image canvas.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#x_position DataAkamaiImagingPolicyImage#x_position}
  */
  readonly xPosition?: string;
  /**
  * Specifies the horizontal portion of the image you want to keep when the aspect ratio cropping is applied. When using Allow Expansion this setting defines the horizontal position of the image on the new expanded image canvas.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#x_position_var DataAkamaiImagingPolicyImage#x_position_var}
  */
  readonly xPositionVar?: string;
  /**
  * Specifies the horizontal portion of the image you want to keep when the aspect ratio cropping is applied. When using Allow Expansion this setting defines the horizontal position of the image on the new expanded image canvas.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#y_position DataAkamaiImagingPolicyImage#y_position}
  */
  readonly yPosition?: string;
  /**
  * Specifies the horizontal portion of the image you want to keep when the aspect ratio cropping is applied. When using Allow Expansion this setting defines the horizontal position of the image on the new expanded image canvas.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#y_position_var DataAkamaiImagingPolicyImage#y_position_var}
  */
  readonly yPositionVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationAspectCropToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationAspectCrop | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    allow_expansion: cdktf.stringToTerraform(struct!.allowExpansion),
    allow_expansion_var: cdktf.stringToTerraform(struct!.allowExpansionVar),
    height: cdktf.stringToTerraform(struct!.height),
    height_var: cdktf.stringToTerraform(struct!.heightVar),
    width: cdktf.stringToTerraform(struct!.width),
    width_var: cdktf.stringToTerraform(struct!.widthVar),
    x_position: cdktf.stringToTerraform(struct!.xPosition),
    x_position_var: cdktf.stringToTerraform(struct!.xPositionVar),
    y_position: cdktf.stringToTerraform(struct!.yPosition),
    y_position_var: cdktf.stringToTerraform(struct!.yPositionVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationAspectCropToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationAspectCrop | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    allow_expansion: {
      value: cdktf.stringToHclTerraform(struct!.allowExpansion),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    allow_expansion_var: {
      value: cdktf.stringToHclTerraform(struct!.allowExpansionVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    height: {
      value: cdktf.stringToHclTerraform(struct!.height),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    height_var: {
      value: cdktf.stringToHclTerraform(struct!.heightVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    width: {
      value: cdktf.stringToHclTerraform(struct!.width),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    width_var: {
      value: cdktf.stringToHclTerraform(struct!.widthVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    x_position: {
      value: cdktf.stringToHclTerraform(struct!.xPosition),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    x_position_var: {
      value: cdktf.stringToHclTerraform(struct!.xPositionVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    y_position: {
      value: cdktf.stringToHclTerraform(struct!.yPosition),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    y_position_var: {
      value: cdktf.stringToHclTerraform(struct!.yPositionVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationAspectCropOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationAspectCrop | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._allowExpansion !== undefined) {
      hasAnyValues = true;
      internalValueResult.allowExpansion = this._allowExpansion;
    }
    if (this._allowExpansionVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.allowExpansionVar = this._allowExpansionVar;
    }
    if (this._height !== undefined) {
      hasAnyValues = true;
      internalValueResult.height = this._height;
    }
    if (this._heightVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.heightVar = this._heightVar;
    }
    if (this._width !== undefined) {
      hasAnyValues = true;
      internalValueResult.width = this._width;
    }
    if (this._widthVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.widthVar = this._widthVar;
    }
    if (this._xPosition !== undefined) {
      hasAnyValues = true;
      internalValueResult.xPosition = this._xPosition;
    }
    if (this._xPositionVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.xPositionVar = this._xPositionVar;
    }
    if (this._yPosition !== undefined) {
      hasAnyValues = true;
      internalValueResult.yPosition = this._yPosition;
    }
    if (this._yPositionVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.yPositionVar = this._yPositionVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationAspectCrop | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._allowExpansion = undefined;
      this._allowExpansionVar = undefined;
      this._height = undefined;
      this._heightVar = undefined;
      this._width = undefined;
      this._widthVar = undefined;
      this._xPosition = undefined;
      this._xPositionVar = undefined;
      this._yPosition = undefined;
      this._yPositionVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._allowExpansion = value.allowExpansion;
      this._allowExpansionVar = value.allowExpansionVar;
      this._height = value.height;
      this._heightVar = value.heightVar;
      this._width = value.width;
      this._widthVar = value.widthVar;
      this._xPosition = value.xPosition;
      this._xPositionVar = value.xPositionVar;
      this._yPosition = value.yPosition;
      this._yPositionVar = value.yPositionVar;
    }
  }

  // allow_expansion - computed: false, optional: true, required: false
  private _allowExpansion?: string; 
  public get allowExpansion() {
    return this.getStringAttribute('allow_expansion');
  }
  public set allowExpansion(value: string) {
    this._allowExpansion = value;
  }
  public resetAllowExpansion() {
    this._allowExpansion = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get allowExpansionInput() {
    return this._allowExpansion;
  }

  // allow_expansion_var - computed: false, optional: true, required: false
  private _allowExpansionVar?: string; 
  public get allowExpansionVar() {
    return this.getStringAttribute('allow_expansion_var');
  }
  public set allowExpansionVar(value: string) {
    this._allowExpansionVar = value;
  }
  public resetAllowExpansionVar() {
    this._allowExpansionVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get allowExpansionVarInput() {
    return this._allowExpansionVar;
  }

  // height - computed: false, optional: true, required: false
  private _height?: string; 
  public get height() {
    return this.getStringAttribute('height');
  }
  public set height(value: string) {
    this._height = value;
  }
  public resetHeight() {
    this._height = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get heightInput() {
    return this._height;
  }

  // height_var - computed: false, optional: true, required: false
  private _heightVar?: string; 
  public get heightVar() {
    return this.getStringAttribute('height_var');
  }
  public set heightVar(value: string) {
    this._heightVar = value;
  }
  public resetHeightVar() {
    this._heightVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get heightVarInput() {
    return this._heightVar;
  }

  // width - computed: false, optional: true, required: false
  private _width?: string; 
  public get width() {
    return this.getStringAttribute('width');
  }
  public set width(value: string) {
    this._width = value;
  }
  public resetWidth() {
    this._width = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get widthInput() {
    return this._width;
  }

  // width_var - computed: false, optional: true, required: false
  private _widthVar?: string; 
  public get widthVar() {
    return this.getStringAttribute('width_var');
  }
  public set widthVar(value: string) {
    this._widthVar = value;
  }
  public resetWidthVar() {
    this._widthVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get widthVarInput() {
    return this._widthVar;
  }

  // x_position - computed: false, optional: true, required: false
  private _xPosition?: string; 
  public get xPosition() {
    return this.getStringAttribute('x_position');
  }
  public set xPosition(value: string) {
    this._xPosition = value;
  }
  public resetXPosition() {
    this._xPosition = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get xPositionInput() {
    return this._xPosition;
  }

  // x_position_var - computed: false, optional: true, required: false
  private _xPositionVar?: string; 
  public get xPositionVar() {
    return this.getStringAttribute('x_position_var');
  }
  public set xPositionVar(value: string) {
    this._xPositionVar = value;
  }
  public resetXPositionVar() {
    this._xPositionVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get xPositionVarInput() {
    return this._xPositionVar;
  }

  // y_position - computed: false, optional: true, required: false
  private _yPosition?: string; 
  public get yPosition() {
    return this.getStringAttribute('y_position');
  }
  public set yPosition(value: string) {
    this._yPosition = value;
  }
  public resetYPosition() {
    this._yPosition = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get yPositionInput() {
    return this._yPosition;
  }

  // y_position_var - computed: false, optional: true, required: false
  private _yPositionVar?: string; 
  public get yPositionVar() {
    return this.getStringAttribute('y_position_var');
  }
  public set yPositionVar(value: string) {
    this._yPositionVar = value;
  }
  public resetYPositionVar() {
    this._yPositionVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get yPositionVarInput() {
    return this._yPositionVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationAspectCropList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationAspectCrop[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationAspectCropOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationAspectCropOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationBackgroundColor {
  /**
  * The hexadecimal CSS color value for the background.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#color DataAkamaiImagingPolicyImage#color}
  */
  readonly color?: string;
  /**
  * The hexadecimal CSS color value for the background.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#color_var DataAkamaiImagingPolicyImage#color_var}
  */
  readonly colorVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationBackgroundColorToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationBackgroundColor | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    color: cdktf.stringToTerraform(struct!.color),
    color_var: cdktf.stringToTerraform(struct!.colorVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationBackgroundColorToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationBackgroundColor | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    color: {
      value: cdktf.stringToHclTerraform(struct!.color),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    color_var: {
      value: cdktf.stringToHclTerraform(struct!.colorVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationBackgroundColorOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationBackgroundColor | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._color !== undefined) {
      hasAnyValues = true;
      internalValueResult.color = this._color;
    }
    if (this._colorVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.colorVar = this._colorVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationBackgroundColor | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._color = undefined;
      this._colorVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._color = value.color;
      this._colorVar = value.colorVar;
    }
  }

  // color - computed: false, optional: true, required: false
  private _color?: string; 
  public get color() {
    return this.getStringAttribute('color');
  }
  public set color(value: string) {
    this._color = value;
  }
  public resetColor() {
    this._color = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get colorInput() {
    return this._color;
  }

  // color_var - computed: false, optional: true, required: false
  private _colorVar?: string; 
  public get colorVar() {
    return this.getStringAttribute('color_var');
  }
  public set colorVar(value: string) {
    this._colorVar = value;
  }
  public resetColorVar() {
    this._colorVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get colorVarInput() {
    return this._colorVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationBackgroundColorList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationBackgroundColor[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationBackgroundColorOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationBackgroundColorOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationBlur {
  /**
  * The number of pixels to scatter the original pixel by to create the blur effect. Resulting images may be larger than the original as pixels at the edge of the image might scatter outside the image's original dimensions.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#sigma DataAkamaiImagingPolicyImage#sigma}
  */
  readonly sigma?: string;
  /**
  * The number of pixels to scatter the original pixel by to create the blur effect. Resulting images may be larger than the original as pixels at the edge of the image might scatter outside the image's original dimensions.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#sigma_var DataAkamaiImagingPolicyImage#sigma_var}
  */
  readonly sigmaVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationBlurToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationBlur | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    sigma: cdktf.stringToTerraform(struct!.sigma),
    sigma_var: cdktf.stringToTerraform(struct!.sigmaVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationBlurToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationBlur | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    sigma: {
      value: cdktf.stringToHclTerraform(struct!.sigma),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    sigma_var: {
      value: cdktf.stringToHclTerraform(struct!.sigmaVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationBlurOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationBlur | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._sigma !== undefined) {
      hasAnyValues = true;
      internalValueResult.sigma = this._sigma;
    }
    if (this._sigmaVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.sigmaVar = this._sigmaVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationBlur | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._sigma = undefined;
      this._sigmaVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._sigma = value.sigma;
      this._sigmaVar = value.sigmaVar;
    }
  }

  // sigma - computed: false, optional: true, required: false
  private _sigma?: string; 
  public get sigma() {
    return this.getStringAttribute('sigma');
  }
  public set sigma(value: string) {
    this._sigma = value;
  }
  public resetSigma() {
    this._sigma = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get sigmaInput() {
    return this._sigma;
  }

  // sigma_var - computed: false, optional: true, required: false
  private _sigmaVar?: string; 
  public get sigmaVar() {
    return this.getStringAttribute('sigma_var');
  }
  public set sigmaVar(value: string) {
    this._sigmaVar = value;
  }
  public resetSigmaVar() {
    this._sigmaVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get sigmaVarInput() {
    return this._sigmaVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationBlurList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationBlur[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationBlurOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationBlurOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationChromaKey {
  /**
  * The hue to remove. Enter the degree of rotation between 0 and 360 degrees around the color wheel. By default Chroma Key removes a green hue, 120° on the color wheel.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hue DataAkamaiImagingPolicyImage#hue}
  */
  readonly hue?: string;
  /**
  * How much additional hue to make semi-transparent beyond the Hue Tolerance. By default Hue Feather is 0.083 which applies semi-transparency to hues 30° around the Hue Tolerance.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hue_feather DataAkamaiImagingPolicyImage#hue_feather}
  */
  readonly hueFeather?: string;
  /**
  * How much additional hue to make semi-transparent beyond the Hue Tolerance. By default Hue Feather is 0.083 which applies semi-transparency to hues 30° around the Hue Tolerance.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hue_feather_var DataAkamaiImagingPolicyImage#hue_feather_var}
  */
  readonly hueFeatherVar?: string;
  /**
  * How close a color's hue needs to be to the selected hue for it to be changed to fully transparent. If you enter the maximum value of 1.0 the entire image is made transparent. By default Hue Tolerance is approximately 0.083 or 8.3% of the color wheel. This value corresponds to 30° around the specified hue.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hue_tolerance DataAkamaiImagingPolicyImage#hue_tolerance}
  */
  readonly hueTolerance?: string;
  /**
  * How close a color's hue needs to be to the selected hue for it to be changed to fully transparent. If you enter the maximum value of 1.0 the entire image is made transparent. By default Hue Tolerance is approximately 0.083 or 8.3% of the color wheel. This value corresponds to 30° around the specified hue.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hue_tolerance_var DataAkamaiImagingPolicyImage#hue_tolerance_var}
  */
  readonly hueToleranceVar?: string;
  /**
  * The hue to remove. Enter the degree of rotation between 0 and 360 degrees around the color wheel. By default Chroma Key removes a green hue, 120° on the color wheel.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hue_var DataAkamaiImagingPolicyImage#hue_var}
  */
  readonly hueVar?: string;
  /**
  * How much additional lightness to make semi-transparent beyond the Lightness Tolerance. The default value of 0.1 corresponds to 10% away from the tolerated lightness towards full black or full white.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#lightness_feather DataAkamaiImagingPolicyImage#lightness_feather}
  */
  readonly lightnessFeather?: string;
  /**
  * How much additional lightness to make semi-transparent beyond the Lightness Tolerance. The default value of 0.1 corresponds to 10% away from the tolerated lightness towards full black or full white.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#lightness_feather_var DataAkamaiImagingPolicyImage#lightness_feather_var}
  */
  readonly lightnessFeatherVar?: string;
  /**
  * How much of the lightest part and darkest part of a color to preserve. For example, you can space this value out from the middle (i.e. 0.5 lightness or full color) to help preserve the splash lighting impact in the image. You can define how close the color needs to be to the full color to remove it from your image. The default value of 0.75 means that a colour must be within 75% of the full color to full white or full black for full removal.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#lightness_tolerance DataAkamaiImagingPolicyImage#lightness_tolerance}
  */
  readonly lightnessTolerance?: string;
  /**
  * How much of the lightest part and darkest part of a color to preserve. For example, you can space this value out from the middle (i.e. 0.5 lightness or full color) to help preserve the splash lighting impact in the image. You can define how close the color needs to be to the full color to remove it from your image. The default value of 0.75 means that a colour must be within 75% of the full color to full white or full black for full removal.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#lightness_tolerance_var DataAkamaiImagingPolicyImage#lightness_tolerance_var}
  */
  readonly lightnessToleranceVar?: string;
  /**
  * How much additional saturation to make semi-transparent beyond the Saturation Tolerance. By default Saturation Feather is 0.1 which applies semi-transparency to hues 10% below the saturationTolerance.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#saturation_feather DataAkamaiImagingPolicyImage#saturation_feather}
  */
  readonly saturationFeather?: string;
  /**
  * How much additional saturation to make semi-transparent beyond the Saturation Tolerance. By default Saturation Feather is 0.1 which applies semi-transparency to hues 10% below the saturationTolerance.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#saturation_feather_var DataAkamaiImagingPolicyImage#saturation_feather_var}
  */
  readonly saturationFeatherVar?: string;
  /**
  * How close a color's saturation needs to be to full saturation for it to be changed to fully transparent. For example, you can define how green the color needs to be to remove it from your image. The default value of 0.75 means that a color must be within 75% of full saturation in order to be made fully transparent.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#saturation_tolerance DataAkamaiImagingPolicyImage#saturation_tolerance}
  */
  readonly saturationTolerance?: string;
  /**
  * How close a color's saturation needs to be to full saturation for it to be changed to fully transparent. For example, you can define how green the color needs to be to remove it from your image. The default value of 0.75 means that a color must be within 75% of full saturation in order to be made fully transparent.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#saturation_tolerance_var DataAkamaiImagingPolicyImage#saturation_tolerance_var}
  */
  readonly saturationToleranceVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationChromaKeyToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationChromaKey | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    hue: cdktf.stringToTerraform(struct!.hue),
    hue_feather: cdktf.stringToTerraform(struct!.hueFeather),
    hue_feather_var: cdktf.stringToTerraform(struct!.hueFeatherVar),
    hue_tolerance: cdktf.stringToTerraform(struct!.hueTolerance),
    hue_tolerance_var: cdktf.stringToTerraform(struct!.hueToleranceVar),
    hue_var: cdktf.stringToTerraform(struct!.hueVar),
    lightness_feather: cdktf.stringToTerraform(struct!.lightnessFeather),
    lightness_feather_var: cdktf.stringToTerraform(struct!.lightnessFeatherVar),
    lightness_tolerance: cdktf.stringToTerraform(struct!.lightnessTolerance),
    lightness_tolerance_var: cdktf.stringToTerraform(struct!.lightnessToleranceVar),
    saturation_feather: cdktf.stringToTerraform(struct!.saturationFeather),
    saturation_feather_var: cdktf.stringToTerraform(struct!.saturationFeatherVar),
    saturation_tolerance: cdktf.stringToTerraform(struct!.saturationTolerance),
    saturation_tolerance_var: cdktf.stringToTerraform(struct!.saturationToleranceVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationChromaKeyToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationChromaKey | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    hue: {
      value: cdktf.stringToHclTerraform(struct!.hue),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    hue_feather: {
      value: cdktf.stringToHclTerraform(struct!.hueFeather),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    hue_feather_var: {
      value: cdktf.stringToHclTerraform(struct!.hueFeatherVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    hue_tolerance: {
      value: cdktf.stringToHclTerraform(struct!.hueTolerance),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    hue_tolerance_var: {
      value: cdktf.stringToHclTerraform(struct!.hueToleranceVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    hue_var: {
      value: cdktf.stringToHclTerraform(struct!.hueVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    lightness_feather: {
      value: cdktf.stringToHclTerraform(struct!.lightnessFeather),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    lightness_feather_var: {
      value: cdktf.stringToHclTerraform(struct!.lightnessFeatherVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    lightness_tolerance: {
      value: cdktf.stringToHclTerraform(struct!.lightnessTolerance),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    lightness_tolerance_var: {
      value: cdktf.stringToHclTerraform(struct!.lightnessToleranceVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    saturation_feather: {
      value: cdktf.stringToHclTerraform(struct!.saturationFeather),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    saturation_feather_var: {
      value: cdktf.stringToHclTerraform(struct!.saturationFeatherVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    saturation_tolerance: {
      value: cdktf.stringToHclTerraform(struct!.saturationTolerance),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    saturation_tolerance_var: {
      value: cdktf.stringToHclTerraform(struct!.saturationToleranceVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationChromaKeyOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationChromaKey | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._hue !== undefined) {
      hasAnyValues = true;
      internalValueResult.hue = this._hue;
    }
    if (this._hueFeather !== undefined) {
      hasAnyValues = true;
      internalValueResult.hueFeather = this._hueFeather;
    }
    if (this._hueFeatherVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.hueFeatherVar = this._hueFeatherVar;
    }
    if (this._hueTolerance !== undefined) {
      hasAnyValues = true;
      internalValueResult.hueTolerance = this._hueTolerance;
    }
    if (this._hueToleranceVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.hueToleranceVar = this._hueToleranceVar;
    }
    if (this._hueVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.hueVar = this._hueVar;
    }
    if (this._lightnessFeather !== undefined) {
      hasAnyValues = true;
      internalValueResult.lightnessFeather = this._lightnessFeather;
    }
    if (this._lightnessFeatherVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.lightnessFeatherVar = this._lightnessFeatherVar;
    }
    if (this._lightnessTolerance !== undefined) {
      hasAnyValues = true;
      internalValueResult.lightnessTolerance = this._lightnessTolerance;
    }
    if (this._lightnessToleranceVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.lightnessToleranceVar = this._lightnessToleranceVar;
    }
    if (this._saturationFeather !== undefined) {
      hasAnyValues = true;
      internalValueResult.saturationFeather = this._saturationFeather;
    }
    if (this._saturationFeatherVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.saturationFeatherVar = this._saturationFeatherVar;
    }
    if (this._saturationTolerance !== undefined) {
      hasAnyValues = true;
      internalValueResult.saturationTolerance = this._saturationTolerance;
    }
    if (this._saturationToleranceVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.saturationToleranceVar = this._saturationToleranceVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationChromaKey | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._hue = undefined;
      this._hueFeather = undefined;
      this._hueFeatherVar = undefined;
      this._hueTolerance = undefined;
      this._hueToleranceVar = undefined;
      this._hueVar = undefined;
      this._lightnessFeather = undefined;
      this._lightnessFeatherVar = undefined;
      this._lightnessTolerance = undefined;
      this._lightnessToleranceVar = undefined;
      this._saturationFeather = undefined;
      this._saturationFeatherVar = undefined;
      this._saturationTolerance = undefined;
      this._saturationToleranceVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._hue = value.hue;
      this._hueFeather = value.hueFeather;
      this._hueFeatherVar = value.hueFeatherVar;
      this._hueTolerance = value.hueTolerance;
      this._hueToleranceVar = value.hueToleranceVar;
      this._hueVar = value.hueVar;
      this._lightnessFeather = value.lightnessFeather;
      this._lightnessFeatherVar = value.lightnessFeatherVar;
      this._lightnessTolerance = value.lightnessTolerance;
      this._lightnessToleranceVar = value.lightnessToleranceVar;
      this._saturationFeather = value.saturationFeather;
      this._saturationFeatherVar = value.saturationFeatherVar;
      this._saturationTolerance = value.saturationTolerance;
      this._saturationToleranceVar = value.saturationToleranceVar;
    }
  }

  // hue - computed: false, optional: true, required: false
  private _hue?: string; 
  public get hue() {
    return this.getStringAttribute('hue');
  }
  public set hue(value: string) {
    this._hue = value;
  }
  public resetHue() {
    this._hue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hueInput() {
    return this._hue;
  }

  // hue_feather - computed: false, optional: true, required: false
  private _hueFeather?: string; 
  public get hueFeather() {
    return this.getStringAttribute('hue_feather');
  }
  public set hueFeather(value: string) {
    this._hueFeather = value;
  }
  public resetHueFeather() {
    this._hueFeather = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hueFeatherInput() {
    return this._hueFeather;
  }

  // hue_feather_var - computed: false, optional: true, required: false
  private _hueFeatherVar?: string; 
  public get hueFeatherVar() {
    return this.getStringAttribute('hue_feather_var');
  }
  public set hueFeatherVar(value: string) {
    this._hueFeatherVar = value;
  }
  public resetHueFeatherVar() {
    this._hueFeatherVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hueFeatherVarInput() {
    return this._hueFeatherVar;
  }

  // hue_tolerance - computed: false, optional: true, required: false
  private _hueTolerance?: string; 
  public get hueTolerance() {
    return this.getStringAttribute('hue_tolerance');
  }
  public set hueTolerance(value: string) {
    this._hueTolerance = value;
  }
  public resetHueTolerance() {
    this._hueTolerance = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hueToleranceInput() {
    return this._hueTolerance;
  }

  // hue_tolerance_var - computed: false, optional: true, required: false
  private _hueToleranceVar?: string; 
  public get hueToleranceVar() {
    return this.getStringAttribute('hue_tolerance_var');
  }
  public set hueToleranceVar(value: string) {
    this._hueToleranceVar = value;
  }
  public resetHueToleranceVar() {
    this._hueToleranceVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hueToleranceVarInput() {
    return this._hueToleranceVar;
  }

  // hue_var - computed: false, optional: true, required: false
  private _hueVar?: string; 
  public get hueVar() {
    return this.getStringAttribute('hue_var');
  }
  public set hueVar(value: string) {
    this._hueVar = value;
  }
  public resetHueVar() {
    this._hueVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hueVarInput() {
    return this._hueVar;
  }

  // lightness_feather - computed: false, optional: true, required: false
  private _lightnessFeather?: string; 
  public get lightnessFeather() {
    return this.getStringAttribute('lightness_feather');
  }
  public set lightnessFeather(value: string) {
    this._lightnessFeather = value;
  }
  public resetLightnessFeather() {
    this._lightnessFeather = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get lightnessFeatherInput() {
    return this._lightnessFeather;
  }

  // lightness_feather_var - computed: false, optional: true, required: false
  private _lightnessFeatherVar?: string; 
  public get lightnessFeatherVar() {
    return this.getStringAttribute('lightness_feather_var');
  }
  public set lightnessFeatherVar(value: string) {
    this._lightnessFeatherVar = value;
  }
  public resetLightnessFeatherVar() {
    this._lightnessFeatherVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get lightnessFeatherVarInput() {
    return this._lightnessFeatherVar;
  }

  // lightness_tolerance - computed: false, optional: true, required: false
  private _lightnessTolerance?: string; 
  public get lightnessTolerance() {
    return this.getStringAttribute('lightness_tolerance');
  }
  public set lightnessTolerance(value: string) {
    this._lightnessTolerance = value;
  }
  public resetLightnessTolerance() {
    this._lightnessTolerance = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get lightnessToleranceInput() {
    return this._lightnessTolerance;
  }

  // lightness_tolerance_var - computed: false, optional: true, required: false
  private _lightnessToleranceVar?: string; 
  public get lightnessToleranceVar() {
    return this.getStringAttribute('lightness_tolerance_var');
  }
  public set lightnessToleranceVar(value: string) {
    this._lightnessToleranceVar = value;
  }
  public resetLightnessToleranceVar() {
    this._lightnessToleranceVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get lightnessToleranceVarInput() {
    return this._lightnessToleranceVar;
  }

  // saturation_feather - computed: false, optional: true, required: false
  private _saturationFeather?: string; 
  public get saturationFeather() {
    return this.getStringAttribute('saturation_feather');
  }
  public set saturationFeather(value: string) {
    this._saturationFeather = value;
  }
  public resetSaturationFeather() {
    this._saturationFeather = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get saturationFeatherInput() {
    return this._saturationFeather;
  }

  // saturation_feather_var - computed: false, optional: true, required: false
  private _saturationFeatherVar?: string; 
  public get saturationFeatherVar() {
    return this.getStringAttribute('saturation_feather_var');
  }
  public set saturationFeatherVar(value: string) {
    this._saturationFeatherVar = value;
  }
  public resetSaturationFeatherVar() {
    this._saturationFeatherVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get saturationFeatherVarInput() {
    return this._saturationFeatherVar;
  }

  // saturation_tolerance - computed: false, optional: true, required: false
  private _saturationTolerance?: string; 
  public get saturationTolerance() {
    return this.getStringAttribute('saturation_tolerance');
  }
  public set saturationTolerance(value: string) {
    this._saturationTolerance = value;
  }
  public resetSaturationTolerance() {
    this._saturationTolerance = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get saturationToleranceInput() {
    return this._saturationTolerance;
  }

  // saturation_tolerance_var - computed: false, optional: true, required: false
  private _saturationToleranceVar?: string; 
  public get saturationToleranceVar() {
    return this.getStringAttribute('saturation_tolerance_var');
  }
  public set saturationToleranceVar(value: string) {
    this._saturationToleranceVar = value;
  }
  public resetSaturationToleranceVar() {
    this._saturationToleranceVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get saturationToleranceVarInput() {
    return this._saturationToleranceVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationChromaKeyList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationChromaKey[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationChromaKeyOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationChromaKeyOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationCompositeImage {
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationCompositeImageToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationCompositeImageOutputReference | DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationCompositeImage): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationCompositeImageToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationCompositeImageOutputReference | DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationCompositeImage): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
  };
  return attrs;
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationCompositeImageOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false, 0);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationCompositeImage | undefined {
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationCompositeImage | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
    }
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationComposite {
  /**
  * Compass direction indicating the corner or edge of the base image to place the applied image. Use Horizontal and Vertical Offset to adjust the applied image's gravity position
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#gravity DataAkamaiImagingPolicyImage#gravity}
  */
  readonly gravity?: string;
  /**
  * Compass direction indicating the corner or edge of the base image to place the applied image. Use Horizontal and Vertical Offset to adjust the applied image's gravity position
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#gravity_var DataAkamaiImagingPolicyImage#gravity_var}
  */
  readonly gravityVar?: string;
  /**
  * Place applied image on top of or underneath the base image. Watermarks are usually applied over. Backgrounds are usually applied under.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#placement DataAkamaiImagingPolicyImage#placement}
  */
  readonly placement?: string;
  /**
  * Place applied image on top of or underneath the base image. Watermarks are usually applied over. Backgrounds are usually applied under.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#placement_var DataAkamaiImagingPolicyImage#placement_var}
  */
  readonly placementVar?: string;
  /**
  * A multiplier to resize the applied image relative to the source image and preserve aspect ratio, 1 by default. Set the `scaleDimension` to calculate the `scale` from the source image's width or height.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#scale DataAkamaiImagingPolicyImage#scale}
  */
  readonly scale?: string;
  /**
  * The dimension, either `width` or `height`, of the source image to scale.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#scale_dimension DataAkamaiImagingPolicyImage#scale_dimension}
  */
  readonly scaleDimension?: string;
  /**
  * The dimension, either `width` or `height`, of the source image to scale.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#scale_dimension_var DataAkamaiImagingPolicyImage#scale_dimension_var}
  */
  readonly scaleDimensionVar?: string;
  /**
  * A multiplier to resize the applied image relative to the source image and preserve aspect ratio, 1 by default. Set the `scaleDimension` to calculate the `scale` from the source image's width or height.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#scale_var DataAkamaiImagingPolicyImage#scale_var}
  */
  readonly scaleVar?: string;
  /**
  * The x-axis position of the image to apply.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#x_position DataAkamaiImagingPolicyImage#x_position}
  */
  readonly xPosition?: string;
  /**
  * The x-axis position of the image to apply.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#x_position_var DataAkamaiImagingPolicyImage#x_position_var}
  */
  readonly xPositionVar?: string;
  /**
  * The y-axis position of the image to apply.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#y_position DataAkamaiImagingPolicyImage#y_position}
  */
  readonly yPosition?: string;
  /**
  * The y-axis position of the image to apply.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#y_position_var DataAkamaiImagingPolicyImage#y_position_var}
  */
  readonly yPositionVar?: string;
  /**
  * image block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#image DataAkamaiImagingPolicyImage#image}
  */
  readonly image: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationCompositeImage;
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationCompositeToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationComposite | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    gravity: cdktf.stringToTerraform(struct!.gravity),
    gravity_var: cdktf.stringToTerraform(struct!.gravityVar),
    placement: cdktf.stringToTerraform(struct!.placement),
    placement_var: cdktf.stringToTerraform(struct!.placementVar),
    scale: cdktf.stringToTerraform(struct!.scale),
    scale_dimension: cdktf.stringToTerraform(struct!.scaleDimension),
    scale_dimension_var: cdktf.stringToTerraform(struct!.scaleDimensionVar),
    scale_var: cdktf.stringToTerraform(struct!.scaleVar),
    x_position: cdktf.stringToTerraform(struct!.xPosition),
    x_position_var: cdktf.stringToTerraform(struct!.xPositionVar),
    y_position: cdktf.stringToTerraform(struct!.yPosition),
    y_position_var: cdktf.stringToTerraform(struct!.yPositionVar),
    image: dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationCompositeImageToTerraform(struct!.image),
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationCompositeToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationComposite | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    gravity: {
      value: cdktf.stringToHclTerraform(struct!.gravity),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    gravity_var: {
      value: cdktf.stringToHclTerraform(struct!.gravityVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    placement: {
      value: cdktf.stringToHclTerraform(struct!.placement),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    placement_var: {
      value: cdktf.stringToHclTerraform(struct!.placementVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    scale: {
      value: cdktf.stringToHclTerraform(struct!.scale),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    scale_dimension: {
      value: cdktf.stringToHclTerraform(struct!.scaleDimension),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    scale_dimension_var: {
      value: cdktf.stringToHclTerraform(struct!.scaleDimensionVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    scale_var: {
      value: cdktf.stringToHclTerraform(struct!.scaleVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    x_position: {
      value: cdktf.stringToHclTerraform(struct!.xPosition),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    x_position_var: {
      value: cdktf.stringToHclTerraform(struct!.xPositionVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    y_position: {
      value: cdktf.stringToHclTerraform(struct!.yPosition),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    y_position_var: {
      value: cdktf.stringToHclTerraform(struct!.yPositionVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    image: {
      value: dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationCompositeImageToHclTerraform(struct!.image),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationCompositeImageList",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationCompositeOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationComposite | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._gravity !== undefined) {
      hasAnyValues = true;
      internalValueResult.gravity = this._gravity;
    }
    if (this._gravityVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.gravityVar = this._gravityVar;
    }
    if (this._placement !== undefined) {
      hasAnyValues = true;
      internalValueResult.placement = this._placement;
    }
    if (this._placementVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.placementVar = this._placementVar;
    }
    if (this._scale !== undefined) {
      hasAnyValues = true;
      internalValueResult.scale = this._scale;
    }
    if (this._scaleDimension !== undefined) {
      hasAnyValues = true;
      internalValueResult.scaleDimension = this._scaleDimension;
    }
    if (this._scaleDimensionVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.scaleDimensionVar = this._scaleDimensionVar;
    }
    if (this._scaleVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.scaleVar = this._scaleVar;
    }
    if (this._xPosition !== undefined) {
      hasAnyValues = true;
      internalValueResult.xPosition = this._xPosition;
    }
    if (this._xPositionVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.xPositionVar = this._xPositionVar;
    }
    if (this._yPosition !== undefined) {
      hasAnyValues = true;
      internalValueResult.yPosition = this._yPosition;
    }
    if (this._yPositionVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.yPositionVar = this._yPositionVar;
    }
    if (this._image?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.image = this._image?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationComposite | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._gravity = undefined;
      this._gravityVar = undefined;
      this._placement = undefined;
      this._placementVar = undefined;
      this._scale = undefined;
      this._scaleDimension = undefined;
      this._scaleDimensionVar = undefined;
      this._scaleVar = undefined;
      this._xPosition = undefined;
      this._xPositionVar = undefined;
      this._yPosition = undefined;
      this._yPositionVar = undefined;
      this._image.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._gravity = value.gravity;
      this._gravityVar = value.gravityVar;
      this._placement = value.placement;
      this._placementVar = value.placementVar;
      this._scale = value.scale;
      this._scaleDimension = value.scaleDimension;
      this._scaleDimensionVar = value.scaleDimensionVar;
      this._scaleVar = value.scaleVar;
      this._xPosition = value.xPosition;
      this._xPositionVar = value.xPositionVar;
      this._yPosition = value.yPosition;
      this._yPositionVar = value.yPositionVar;
      this._image.internalValue = value.image;
    }
  }

  // gravity - computed: false, optional: true, required: false
  private _gravity?: string; 
  public get gravity() {
    return this.getStringAttribute('gravity');
  }
  public set gravity(value: string) {
    this._gravity = value;
  }
  public resetGravity() {
    this._gravity = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get gravityInput() {
    return this._gravity;
  }

  // gravity_var - computed: false, optional: true, required: false
  private _gravityVar?: string; 
  public get gravityVar() {
    return this.getStringAttribute('gravity_var');
  }
  public set gravityVar(value: string) {
    this._gravityVar = value;
  }
  public resetGravityVar() {
    this._gravityVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get gravityVarInput() {
    return this._gravityVar;
  }

  // placement - computed: false, optional: true, required: false
  private _placement?: string; 
  public get placement() {
    return this.getStringAttribute('placement');
  }
  public set placement(value: string) {
    this._placement = value;
  }
  public resetPlacement() {
    this._placement = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get placementInput() {
    return this._placement;
  }

  // placement_var - computed: false, optional: true, required: false
  private _placementVar?: string; 
  public get placementVar() {
    return this.getStringAttribute('placement_var');
  }
  public set placementVar(value: string) {
    this._placementVar = value;
  }
  public resetPlacementVar() {
    this._placementVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get placementVarInput() {
    return this._placementVar;
  }

  // scale - computed: false, optional: true, required: false
  private _scale?: string; 
  public get scale() {
    return this.getStringAttribute('scale');
  }
  public set scale(value: string) {
    this._scale = value;
  }
  public resetScale() {
    this._scale = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get scaleInput() {
    return this._scale;
  }

  // scale_dimension - computed: false, optional: true, required: false
  private _scaleDimension?: string; 
  public get scaleDimension() {
    return this.getStringAttribute('scale_dimension');
  }
  public set scaleDimension(value: string) {
    this._scaleDimension = value;
  }
  public resetScaleDimension() {
    this._scaleDimension = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get scaleDimensionInput() {
    return this._scaleDimension;
  }

  // scale_dimension_var - computed: false, optional: true, required: false
  private _scaleDimensionVar?: string; 
  public get scaleDimensionVar() {
    return this.getStringAttribute('scale_dimension_var');
  }
  public set scaleDimensionVar(value: string) {
    this._scaleDimensionVar = value;
  }
  public resetScaleDimensionVar() {
    this._scaleDimensionVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get scaleDimensionVarInput() {
    return this._scaleDimensionVar;
  }

  // scale_var - computed: false, optional: true, required: false
  private _scaleVar?: string; 
  public get scaleVar() {
    return this.getStringAttribute('scale_var');
  }
  public set scaleVar(value: string) {
    this._scaleVar = value;
  }
  public resetScaleVar() {
    this._scaleVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get scaleVarInput() {
    return this._scaleVar;
  }

  // x_position - computed: false, optional: true, required: false
  private _xPosition?: string; 
  public get xPosition() {
    return this.getStringAttribute('x_position');
  }
  public set xPosition(value: string) {
    this._xPosition = value;
  }
  public resetXPosition() {
    this._xPosition = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get xPositionInput() {
    return this._xPosition;
  }

  // x_position_var - computed: false, optional: true, required: false
  private _xPositionVar?: string; 
  public get xPositionVar() {
    return this.getStringAttribute('x_position_var');
  }
  public set xPositionVar(value: string) {
    this._xPositionVar = value;
  }
  public resetXPositionVar() {
    this._xPositionVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get xPositionVarInput() {
    return this._xPositionVar;
  }

  // y_position - computed: false, optional: true, required: false
  private _yPosition?: string; 
  public get yPosition() {
    return this.getStringAttribute('y_position');
  }
  public set yPosition(value: string) {
    this._yPosition = value;
  }
  public resetYPosition() {
    this._yPosition = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get yPositionInput() {
    return this._yPosition;
  }

  // y_position_var - computed: false, optional: true, required: false
  private _yPositionVar?: string; 
  public get yPositionVar() {
    return this.getStringAttribute('y_position_var');
  }
  public set yPositionVar(value: string) {
    this._yPositionVar = value;
  }
  public resetYPositionVar() {
    this._yPositionVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get yPositionVarInput() {
    return this._yPositionVar;
  }

  // image - computed: false, optional: false, required: true
  private _image = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationCompositeImageOutputReference(this, "image");
  public get image() {
    return this._image;
  }
  public putImage(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationCompositeImage) {
    this._image.internalValue = value;
  }
  // Temporarily expose input value. Use with caution.
  public get imageInput() {
    return this._image.internalValue;
  }
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationCompositeList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationComposite[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationCompositeOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationCompositeOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationCompoundTransformations {
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationCompoundTransformationsToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationCompoundTransformations | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationCompoundTransformationsToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationCompoundTransformations | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
  };
  return attrs;
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationCompoundTransformationsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationCompoundTransformations | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationCompoundTransformations | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
    }
  }
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationCompoundTransformationsList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationCompoundTransformations[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationCompoundTransformationsOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationCompoundTransformationsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationCompound {
  /**
  * transformations block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#transformations DataAkamaiImagingPolicyImage#transformations}
  */
  readonly transformations?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationCompoundTransformations[] | cdktf.IResolvable;
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationCompoundToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationCompound | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    transformations: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationCompoundTransformationsToTerraform, true)(struct!.transformations),
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationCompoundToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationCompound | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    transformations: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationCompoundTransformationsToHclTerraform, true)(struct!.transformations),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationCompoundTransformationsList",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationCompoundOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationCompound | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._transformations?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.transformations = this._transformations?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationCompound | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._transformations.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._transformations.internalValue = value.transformations;
    }
  }

  // transformations - computed: false, optional: true, required: false
  private _transformations = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationCompoundTransformationsList(this, "transformations", false);
  public get transformations() {
    return this._transformations;
  }
  public putTransformations(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationCompoundTransformations[] | cdktf.IResolvable) {
    this._transformations.internalValue = value;
  }
  public resetTransformations() {
    this._transformations.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get transformationsInput() {
    return this._transformations.internalValue;
  }
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationCompoundList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationCompound[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationCompoundOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationCompoundOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationContrast {
  /**
  * Adjusts the brightness of the image. Positive values increase brightness and negative values decrease brightness. A value of  `1` produces a white image. A value of  `-1` produces a black image. The default value is `0`, which leaves the image unchanged. The acceptable value range is `-1.0` to `1.0`. Values outside of the acceptable range clamp to this range.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#brightness DataAkamaiImagingPolicyImage#brightness}
  */
  readonly brightness?: string;
  /**
  * Adjusts the brightness of the image. Positive values increase brightness and negative values decrease brightness. A value of  `1` produces a white image. A value of  `-1` produces a black image. The default value is `0`, which leaves the image unchanged. The acceptable value range is `-1.0` to `1.0`. Values outside of the acceptable range clamp to this range.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#brightness_var DataAkamaiImagingPolicyImage#brightness_var}
  */
  readonly brightnessVar?: string;
  /**
  * Adjusts the contrast of the image. Expressed as a range from `-1` to `1`, positive values increase contrast, negative values decrease it, while `0` leaves the image unchanged. Values outside of the `-1` to `1` range clamp to this range.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#contrast DataAkamaiImagingPolicyImage#contrast}
  */
  readonly contrast?: string;
  /**
  * Adjusts the contrast of the image. Expressed as a range from `-1` to `1`, positive values increase contrast, negative values decrease it, while `0` leaves the image unchanged. Values outside of the `-1` to `1` range clamp to this range.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#contrast_var DataAkamaiImagingPolicyImage#contrast_var}
  */
  readonly contrastVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationContrastToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationContrast | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    brightness: cdktf.stringToTerraform(struct!.brightness),
    brightness_var: cdktf.stringToTerraform(struct!.brightnessVar),
    contrast: cdktf.stringToTerraform(struct!.contrast),
    contrast_var: cdktf.stringToTerraform(struct!.contrastVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationContrastToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationContrast | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    brightness: {
      value: cdktf.stringToHclTerraform(struct!.brightness),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    brightness_var: {
      value: cdktf.stringToHclTerraform(struct!.brightnessVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    contrast: {
      value: cdktf.stringToHclTerraform(struct!.contrast),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    contrast_var: {
      value: cdktf.stringToHclTerraform(struct!.contrastVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationContrastOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationContrast | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._brightness !== undefined) {
      hasAnyValues = true;
      internalValueResult.brightness = this._brightness;
    }
    if (this._brightnessVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.brightnessVar = this._brightnessVar;
    }
    if (this._contrast !== undefined) {
      hasAnyValues = true;
      internalValueResult.contrast = this._contrast;
    }
    if (this._contrastVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.contrastVar = this._contrastVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationContrast | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._brightness = undefined;
      this._brightnessVar = undefined;
      this._contrast = undefined;
      this._contrastVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._brightness = value.brightness;
      this._brightnessVar = value.brightnessVar;
      this._contrast = value.contrast;
      this._contrastVar = value.contrastVar;
    }
  }

  // brightness - computed: false, optional: true, required: false
  private _brightness?: string; 
  public get brightness() {
    return this.getStringAttribute('brightness');
  }
  public set brightness(value: string) {
    this._brightness = value;
  }
  public resetBrightness() {
    this._brightness = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get brightnessInput() {
    return this._brightness;
  }

  // brightness_var - computed: false, optional: true, required: false
  private _brightnessVar?: string; 
  public get brightnessVar() {
    return this.getStringAttribute('brightness_var');
  }
  public set brightnessVar(value: string) {
    this._brightnessVar = value;
  }
  public resetBrightnessVar() {
    this._brightnessVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get brightnessVarInput() {
    return this._brightnessVar;
  }

  // contrast - computed: false, optional: true, required: false
  private _contrast?: string; 
  public get contrast() {
    return this.getStringAttribute('contrast');
  }
  public set contrast(value: string) {
    this._contrast = value;
  }
  public resetContrast() {
    this._contrast = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get contrastInput() {
    return this._contrast;
  }

  // contrast_var - computed: false, optional: true, required: false
  private _contrastVar?: string; 
  public get contrastVar() {
    return this.getStringAttribute('contrast_var');
  }
  public set contrastVar(value: string) {
    this._contrastVar = value;
  }
  public resetContrastVar() {
    this._contrastVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get contrastVarInput() {
    return this._contrastVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationContrastList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationContrast[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationContrastOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationContrastOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationCrop {
  /**
  * If cropping an area outside of the existing canvas, expands the image canvas.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#allow_expansion DataAkamaiImagingPolicyImage#allow_expansion}
  */
  readonly allowExpansion?: string;
  /**
  * If cropping an area outside of the existing canvas, expands the image canvas.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#allow_expansion_var DataAkamaiImagingPolicyImage#allow_expansion_var}
  */
  readonly allowExpansionVar?: string;
  /**
  * Frame of reference for X and Y Positions.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#gravity DataAkamaiImagingPolicyImage#gravity}
  */
  readonly gravity?: string;
  /**
  * Frame of reference for X and Y Positions.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#gravity_var DataAkamaiImagingPolicyImage#gravity_var}
  */
  readonly gravityVar?: string;
  /**
  * The number of pixels to crop along the y-axis.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#height DataAkamaiImagingPolicyImage#height}
  */
  readonly height?: string;
  /**
  * The number of pixels to crop along the y-axis.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#height_var DataAkamaiImagingPolicyImage#height_var}
  */
  readonly heightVar?: string;
  /**
  * The number of pixels to crop along the x-axis.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#width DataAkamaiImagingPolicyImage#width}
  */
  readonly width?: string;
  /**
  * The number of pixels to crop along the x-axis.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#width_var DataAkamaiImagingPolicyImage#width_var}
  */
  readonly widthVar?: string;
  /**
  * The x-axis position of the image to crop from.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#x_position DataAkamaiImagingPolicyImage#x_position}
  */
  readonly xPosition?: string;
  /**
  * The x-axis position of the image to crop from.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#x_position_var DataAkamaiImagingPolicyImage#x_position_var}
  */
  readonly xPositionVar?: string;
  /**
  * The y-axis position of the image to crop from.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#y_position DataAkamaiImagingPolicyImage#y_position}
  */
  readonly yPosition?: string;
  /**
  * The y-axis position of the image to crop from.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#y_position_var DataAkamaiImagingPolicyImage#y_position_var}
  */
  readonly yPositionVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationCropToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationCrop | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    allow_expansion: cdktf.stringToTerraform(struct!.allowExpansion),
    allow_expansion_var: cdktf.stringToTerraform(struct!.allowExpansionVar),
    gravity: cdktf.stringToTerraform(struct!.gravity),
    gravity_var: cdktf.stringToTerraform(struct!.gravityVar),
    height: cdktf.stringToTerraform(struct!.height),
    height_var: cdktf.stringToTerraform(struct!.heightVar),
    width: cdktf.stringToTerraform(struct!.width),
    width_var: cdktf.stringToTerraform(struct!.widthVar),
    x_position: cdktf.stringToTerraform(struct!.xPosition),
    x_position_var: cdktf.stringToTerraform(struct!.xPositionVar),
    y_position: cdktf.stringToTerraform(struct!.yPosition),
    y_position_var: cdktf.stringToTerraform(struct!.yPositionVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationCropToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationCrop | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    allow_expansion: {
      value: cdktf.stringToHclTerraform(struct!.allowExpansion),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    allow_expansion_var: {
      value: cdktf.stringToHclTerraform(struct!.allowExpansionVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    gravity: {
      value: cdktf.stringToHclTerraform(struct!.gravity),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    gravity_var: {
      value: cdktf.stringToHclTerraform(struct!.gravityVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    height: {
      value: cdktf.stringToHclTerraform(struct!.height),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    height_var: {
      value: cdktf.stringToHclTerraform(struct!.heightVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    width: {
      value: cdktf.stringToHclTerraform(struct!.width),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    width_var: {
      value: cdktf.stringToHclTerraform(struct!.widthVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    x_position: {
      value: cdktf.stringToHclTerraform(struct!.xPosition),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    x_position_var: {
      value: cdktf.stringToHclTerraform(struct!.xPositionVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    y_position: {
      value: cdktf.stringToHclTerraform(struct!.yPosition),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    y_position_var: {
      value: cdktf.stringToHclTerraform(struct!.yPositionVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationCropOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationCrop | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._allowExpansion !== undefined) {
      hasAnyValues = true;
      internalValueResult.allowExpansion = this._allowExpansion;
    }
    if (this._allowExpansionVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.allowExpansionVar = this._allowExpansionVar;
    }
    if (this._gravity !== undefined) {
      hasAnyValues = true;
      internalValueResult.gravity = this._gravity;
    }
    if (this._gravityVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.gravityVar = this._gravityVar;
    }
    if (this._height !== undefined) {
      hasAnyValues = true;
      internalValueResult.height = this._height;
    }
    if (this._heightVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.heightVar = this._heightVar;
    }
    if (this._width !== undefined) {
      hasAnyValues = true;
      internalValueResult.width = this._width;
    }
    if (this._widthVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.widthVar = this._widthVar;
    }
    if (this._xPosition !== undefined) {
      hasAnyValues = true;
      internalValueResult.xPosition = this._xPosition;
    }
    if (this._xPositionVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.xPositionVar = this._xPositionVar;
    }
    if (this._yPosition !== undefined) {
      hasAnyValues = true;
      internalValueResult.yPosition = this._yPosition;
    }
    if (this._yPositionVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.yPositionVar = this._yPositionVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationCrop | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._allowExpansion = undefined;
      this._allowExpansionVar = undefined;
      this._gravity = undefined;
      this._gravityVar = undefined;
      this._height = undefined;
      this._heightVar = undefined;
      this._width = undefined;
      this._widthVar = undefined;
      this._xPosition = undefined;
      this._xPositionVar = undefined;
      this._yPosition = undefined;
      this._yPositionVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._allowExpansion = value.allowExpansion;
      this._allowExpansionVar = value.allowExpansionVar;
      this._gravity = value.gravity;
      this._gravityVar = value.gravityVar;
      this._height = value.height;
      this._heightVar = value.heightVar;
      this._width = value.width;
      this._widthVar = value.widthVar;
      this._xPosition = value.xPosition;
      this._xPositionVar = value.xPositionVar;
      this._yPosition = value.yPosition;
      this._yPositionVar = value.yPositionVar;
    }
  }

  // allow_expansion - computed: false, optional: true, required: false
  private _allowExpansion?: string; 
  public get allowExpansion() {
    return this.getStringAttribute('allow_expansion');
  }
  public set allowExpansion(value: string) {
    this._allowExpansion = value;
  }
  public resetAllowExpansion() {
    this._allowExpansion = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get allowExpansionInput() {
    return this._allowExpansion;
  }

  // allow_expansion_var - computed: false, optional: true, required: false
  private _allowExpansionVar?: string; 
  public get allowExpansionVar() {
    return this.getStringAttribute('allow_expansion_var');
  }
  public set allowExpansionVar(value: string) {
    this._allowExpansionVar = value;
  }
  public resetAllowExpansionVar() {
    this._allowExpansionVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get allowExpansionVarInput() {
    return this._allowExpansionVar;
  }

  // gravity - computed: false, optional: true, required: false
  private _gravity?: string; 
  public get gravity() {
    return this.getStringAttribute('gravity');
  }
  public set gravity(value: string) {
    this._gravity = value;
  }
  public resetGravity() {
    this._gravity = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get gravityInput() {
    return this._gravity;
  }

  // gravity_var - computed: false, optional: true, required: false
  private _gravityVar?: string; 
  public get gravityVar() {
    return this.getStringAttribute('gravity_var');
  }
  public set gravityVar(value: string) {
    this._gravityVar = value;
  }
  public resetGravityVar() {
    this._gravityVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get gravityVarInput() {
    return this._gravityVar;
  }

  // height - computed: false, optional: true, required: false
  private _height?: string; 
  public get height() {
    return this.getStringAttribute('height');
  }
  public set height(value: string) {
    this._height = value;
  }
  public resetHeight() {
    this._height = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get heightInput() {
    return this._height;
  }

  // height_var - computed: false, optional: true, required: false
  private _heightVar?: string; 
  public get heightVar() {
    return this.getStringAttribute('height_var');
  }
  public set heightVar(value: string) {
    this._heightVar = value;
  }
  public resetHeightVar() {
    this._heightVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get heightVarInput() {
    return this._heightVar;
  }

  // width - computed: false, optional: true, required: false
  private _width?: string; 
  public get width() {
    return this.getStringAttribute('width');
  }
  public set width(value: string) {
    this._width = value;
  }
  public resetWidth() {
    this._width = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get widthInput() {
    return this._width;
  }

  // width_var - computed: false, optional: true, required: false
  private _widthVar?: string; 
  public get widthVar() {
    return this.getStringAttribute('width_var');
  }
  public set widthVar(value: string) {
    this._widthVar = value;
  }
  public resetWidthVar() {
    this._widthVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get widthVarInput() {
    return this._widthVar;
  }

  // x_position - computed: false, optional: true, required: false
  private _xPosition?: string; 
  public get xPosition() {
    return this.getStringAttribute('x_position');
  }
  public set xPosition(value: string) {
    this._xPosition = value;
  }
  public resetXPosition() {
    this._xPosition = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get xPositionInput() {
    return this._xPosition;
  }

  // x_position_var - computed: false, optional: true, required: false
  private _xPositionVar?: string; 
  public get xPositionVar() {
    return this.getStringAttribute('x_position_var');
  }
  public set xPositionVar(value: string) {
    this._xPositionVar = value;
  }
  public resetXPositionVar() {
    this._xPositionVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get xPositionVarInput() {
    return this._xPositionVar;
  }

  // y_position - computed: false, optional: true, required: false
  private _yPosition?: string; 
  public get yPosition() {
    return this.getStringAttribute('y_position');
  }
  public set yPosition(value: string) {
    this._yPosition = value;
  }
  public resetYPosition() {
    this._yPosition = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get yPositionInput() {
    return this._yPosition;
  }

  // y_position_var - computed: false, optional: true, required: false
  private _yPositionVar?: string; 
  public get yPositionVar() {
    return this.getStringAttribute('y_position_var');
  }
  public set yPositionVar(value: string) {
    this._yPositionVar = value;
  }
  public resetYPositionVar() {
    this._yPositionVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get yPositionVarInput() {
    return this._yPositionVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationCropList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationCrop[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationCropOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationCropOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationFaceCrop {
  /**
  * Specifies the type of algorithm used to detect faces in the image, either `cascade` for the cascade classifier algorithm or `dnn` for the deep neural network algorithm, `cascade` by default.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#algorithm DataAkamaiImagingPolicyImage#algorithm}
  */
  readonly algorithm?: string;
  /**
  * Specifies the type of algorithm used to detect faces in the image, either `cascade` for the cascade classifier algorithm or `dnn` for the deep neural network algorithm, `cascade` by default.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#algorithm_var DataAkamaiImagingPolicyImage#algorithm_var}
  */
  readonly algorithmVar?: string;
  /**
  * With `algorithm` set to `dnn`, specifies the minimum confidence needed to detect faces in the image. Values range from `0` to `1` for increased confidence, and possibly fewer faces detected.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#confidence DataAkamaiImagingPolicyImage#confidence}
  */
  readonly confidence?: string;
  /**
  * With `algorithm` set to `dnn`, specifies the minimum confidence needed to detect faces in the image. Values range from `0` to `1` for increased confidence, and possibly fewer faces detected.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#confidence_var DataAkamaiImagingPolicyImage#confidence_var}
  */
  readonly confidenceVar?: string;
  /**
  * Controls placement of the crop if Image and Video Manager does not detect any faces in the image. Directions are relative to the edges of the image being transformed.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#fail_gravity DataAkamaiImagingPolicyImage#fail_gravity}
  */
  readonly failGravity?: string;
  /**
  * Controls placement of the crop if Image and Video Manager does not detect any faces in the image. Directions are relative to the edges of the image being transformed.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#fail_gravity_var DataAkamaiImagingPolicyImage#fail_gravity_var}
  */
  readonly failGravityVar?: string;
  /**
  * Distinguishes the faces detected, either `biggestFace` or `allFaces` to place the crop rectangle around the full set of faces, `all` by default.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#focus DataAkamaiImagingPolicyImage#focus}
  */
  readonly focus?: string;
  /**
  * Distinguishes the faces detected, either `biggestFace` or `allFaces` to place the crop rectangle around the full set of faces, `all` by default.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#focus_var DataAkamaiImagingPolicyImage#focus_var}
  */
  readonly focusVar?: string;
  /**
  * Controls placement of the crop. Directions are relative to the face(s) plus padding.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#gravity DataAkamaiImagingPolicyImage#gravity}
  */
  readonly gravity?: string;
  /**
  * Controls placement of the crop. Directions are relative to the face(s) plus padding.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#gravity_var DataAkamaiImagingPolicyImage#gravity_var}
  */
  readonly gravityVar?: string;
  /**
  * The height of the output image in pixels relative to the specified `style` value.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#height DataAkamaiImagingPolicyImage#height}
  */
  readonly height?: string;
  /**
  * The height of the output image in pixels relative to the specified `style` value.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#height_var DataAkamaiImagingPolicyImage#height_var}
  */
  readonly heightVar?: string;
  /**
  * The padding ratio based on the dimensions of the biggest face detected, `0.5` by default. Larger values increase padding.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#padding DataAkamaiImagingPolicyImage#padding}
  */
  readonly padding?: string;
  /**
  * The padding ratio based on the dimensions of the biggest face detected, `0.5` by default. Larger values increase padding.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#padding_var DataAkamaiImagingPolicyImage#padding_var}
  */
  readonly paddingVar?: string;
  /**
  * Specifies how to crop or scale a crop area for the faces detected in the source image, `zoom` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` places a raw crop around the faces, relative to the specified `gravity` value.  A value of `fill` scales the crop area to include as much of the image and faces as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the faces, relative to the specified `width` and `height` values. Allows Variable substitution.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#style DataAkamaiImagingPolicyImage#style}
  */
  readonly style?: string;
  /**
  * Specifies how to crop or scale a crop area for the faces detected in the source image, `zoom` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` places a raw crop around the faces, relative to the specified `gravity` value.  A value of `fill` scales the crop area to include as much of the image and faces as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the faces, relative to the specified `width` and `height` values. Allows Variable substitution.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#style_var DataAkamaiImagingPolicyImage#style_var}
  */
  readonly styleVar?: string;
  /**
  * The width of the output image in pixels relative to the specified `style` value.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#width DataAkamaiImagingPolicyImage#width}
  */
  readonly width?: string;
  /**
  * The width of the output image in pixels relative to the specified `style` value.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#width_var DataAkamaiImagingPolicyImage#width_var}
  */
  readonly widthVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationFaceCropToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationFaceCrop | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    algorithm: cdktf.stringToTerraform(struct!.algorithm),
    algorithm_var: cdktf.stringToTerraform(struct!.algorithmVar),
    confidence: cdktf.stringToTerraform(struct!.confidence),
    confidence_var: cdktf.stringToTerraform(struct!.confidenceVar),
    fail_gravity: cdktf.stringToTerraform(struct!.failGravity),
    fail_gravity_var: cdktf.stringToTerraform(struct!.failGravityVar),
    focus: cdktf.stringToTerraform(struct!.focus),
    focus_var: cdktf.stringToTerraform(struct!.focusVar),
    gravity: cdktf.stringToTerraform(struct!.gravity),
    gravity_var: cdktf.stringToTerraform(struct!.gravityVar),
    height: cdktf.stringToTerraform(struct!.height),
    height_var: cdktf.stringToTerraform(struct!.heightVar),
    padding: cdktf.stringToTerraform(struct!.padding),
    padding_var: cdktf.stringToTerraform(struct!.paddingVar),
    style: cdktf.stringToTerraform(struct!.style),
    style_var: cdktf.stringToTerraform(struct!.styleVar),
    width: cdktf.stringToTerraform(struct!.width),
    width_var: cdktf.stringToTerraform(struct!.widthVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationFaceCropToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationFaceCrop | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    algorithm: {
      value: cdktf.stringToHclTerraform(struct!.algorithm),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    algorithm_var: {
      value: cdktf.stringToHclTerraform(struct!.algorithmVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    confidence: {
      value: cdktf.stringToHclTerraform(struct!.confidence),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    confidence_var: {
      value: cdktf.stringToHclTerraform(struct!.confidenceVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    fail_gravity: {
      value: cdktf.stringToHclTerraform(struct!.failGravity),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    fail_gravity_var: {
      value: cdktf.stringToHclTerraform(struct!.failGravityVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    focus: {
      value: cdktf.stringToHclTerraform(struct!.focus),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    focus_var: {
      value: cdktf.stringToHclTerraform(struct!.focusVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    gravity: {
      value: cdktf.stringToHclTerraform(struct!.gravity),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    gravity_var: {
      value: cdktf.stringToHclTerraform(struct!.gravityVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    height: {
      value: cdktf.stringToHclTerraform(struct!.height),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    height_var: {
      value: cdktf.stringToHclTerraform(struct!.heightVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    padding: {
      value: cdktf.stringToHclTerraform(struct!.padding),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    padding_var: {
      value: cdktf.stringToHclTerraform(struct!.paddingVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    style: {
      value: cdktf.stringToHclTerraform(struct!.style),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    style_var: {
      value: cdktf.stringToHclTerraform(struct!.styleVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    width: {
      value: cdktf.stringToHclTerraform(struct!.width),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    width_var: {
      value: cdktf.stringToHclTerraform(struct!.widthVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationFaceCropOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationFaceCrop | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._algorithm !== undefined) {
      hasAnyValues = true;
      internalValueResult.algorithm = this._algorithm;
    }
    if (this._algorithmVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.algorithmVar = this._algorithmVar;
    }
    if (this._confidence !== undefined) {
      hasAnyValues = true;
      internalValueResult.confidence = this._confidence;
    }
    if (this._confidenceVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.confidenceVar = this._confidenceVar;
    }
    if (this._failGravity !== undefined) {
      hasAnyValues = true;
      internalValueResult.failGravity = this._failGravity;
    }
    if (this._failGravityVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.failGravityVar = this._failGravityVar;
    }
    if (this._focus !== undefined) {
      hasAnyValues = true;
      internalValueResult.focus = this._focus;
    }
    if (this._focusVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.focusVar = this._focusVar;
    }
    if (this._gravity !== undefined) {
      hasAnyValues = true;
      internalValueResult.gravity = this._gravity;
    }
    if (this._gravityVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.gravityVar = this._gravityVar;
    }
    if (this._height !== undefined) {
      hasAnyValues = true;
      internalValueResult.height = this._height;
    }
    if (this._heightVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.heightVar = this._heightVar;
    }
    if (this._padding !== undefined) {
      hasAnyValues = true;
      internalValueResult.padding = this._padding;
    }
    if (this._paddingVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.paddingVar = this._paddingVar;
    }
    if (this._style !== undefined) {
      hasAnyValues = true;
      internalValueResult.style = this._style;
    }
    if (this._styleVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.styleVar = this._styleVar;
    }
    if (this._width !== undefined) {
      hasAnyValues = true;
      internalValueResult.width = this._width;
    }
    if (this._widthVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.widthVar = this._widthVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationFaceCrop | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._algorithm = undefined;
      this._algorithmVar = undefined;
      this._confidence = undefined;
      this._confidenceVar = undefined;
      this._failGravity = undefined;
      this._failGravityVar = undefined;
      this._focus = undefined;
      this._focusVar = undefined;
      this._gravity = undefined;
      this._gravityVar = undefined;
      this._height = undefined;
      this._heightVar = undefined;
      this._padding = undefined;
      this._paddingVar = undefined;
      this._style = undefined;
      this._styleVar = undefined;
      this._width = undefined;
      this._widthVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._algorithm = value.algorithm;
      this._algorithmVar = value.algorithmVar;
      this._confidence = value.confidence;
      this._confidenceVar = value.confidenceVar;
      this._failGravity = value.failGravity;
      this._failGravityVar = value.failGravityVar;
      this._focus = value.focus;
      this._focusVar = value.focusVar;
      this._gravity = value.gravity;
      this._gravityVar = value.gravityVar;
      this._height = value.height;
      this._heightVar = value.heightVar;
      this._padding = value.padding;
      this._paddingVar = value.paddingVar;
      this._style = value.style;
      this._styleVar = value.styleVar;
      this._width = value.width;
      this._widthVar = value.widthVar;
    }
  }

  // algorithm - computed: false, optional: true, required: false
  private _algorithm?: string; 
  public get algorithm() {
    return this.getStringAttribute('algorithm');
  }
  public set algorithm(value: string) {
    this._algorithm = value;
  }
  public resetAlgorithm() {
    this._algorithm = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get algorithmInput() {
    return this._algorithm;
  }

  // algorithm_var - computed: false, optional: true, required: false
  private _algorithmVar?: string; 
  public get algorithmVar() {
    return this.getStringAttribute('algorithm_var');
  }
  public set algorithmVar(value: string) {
    this._algorithmVar = value;
  }
  public resetAlgorithmVar() {
    this._algorithmVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get algorithmVarInput() {
    return this._algorithmVar;
  }

  // confidence - computed: false, optional: true, required: false
  private _confidence?: string; 
  public get confidence() {
    return this.getStringAttribute('confidence');
  }
  public set confidence(value: string) {
    this._confidence = value;
  }
  public resetConfidence() {
    this._confidence = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get confidenceInput() {
    return this._confidence;
  }

  // confidence_var - computed: false, optional: true, required: false
  private _confidenceVar?: string; 
  public get confidenceVar() {
    return this.getStringAttribute('confidence_var');
  }
  public set confidenceVar(value: string) {
    this._confidenceVar = value;
  }
  public resetConfidenceVar() {
    this._confidenceVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get confidenceVarInput() {
    return this._confidenceVar;
  }

  // fail_gravity - computed: false, optional: true, required: false
  private _failGravity?: string; 
  public get failGravity() {
    return this.getStringAttribute('fail_gravity');
  }
  public set failGravity(value: string) {
    this._failGravity = value;
  }
  public resetFailGravity() {
    this._failGravity = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get failGravityInput() {
    return this._failGravity;
  }

  // fail_gravity_var - computed: false, optional: true, required: false
  private _failGravityVar?: string; 
  public get failGravityVar() {
    return this.getStringAttribute('fail_gravity_var');
  }
  public set failGravityVar(value: string) {
    this._failGravityVar = value;
  }
  public resetFailGravityVar() {
    this._failGravityVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get failGravityVarInput() {
    return this._failGravityVar;
  }

  // focus - computed: false, optional: true, required: false
  private _focus?: string; 
  public get focus() {
    return this.getStringAttribute('focus');
  }
  public set focus(value: string) {
    this._focus = value;
  }
  public resetFocus() {
    this._focus = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get focusInput() {
    return this._focus;
  }

  // focus_var - computed: false, optional: true, required: false
  private _focusVar?: string; 
  public get focusVar() {
    return this.getStringAttribute('focus_var');
  }
  public set focusVar(value: string) {
    this._focusVar = value;
  }
  public resetFocusVar() {
    this._focusVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get focusVarInput() {
    return this._focusVar;
  }

  // gravity - computed: false, optional: true, required: false
  private _gravity?: string; 
  public get gravity() {
    return this.getStringAttribute('gravity');
  }
  public set gravity(value: string) {
    this._gravity = value;
  }
  public resetGravity() {
    this._gravity = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get gravityInput() {
    return this._gravity;
  }

  // gravity_var - computed: false, optional: true, required: false
  private _gravityVar?: string; 
  public get gravityVar() {
    return this.getStringAttribute('gravity_var');
  }
  public set gravityVar(value: string) {
    this._gravityVar = value;
  }
  public resetGravityVar() {
    this._gravityVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get gravityVarInput() {
    return this._gravityVar;
  }

  // height - computed: false, optional: true, required: false
  private _height?: string; 
  public get height() {
    return this.getStringAttribute('height');
  }
  public set height(value: string) {
    this._height = value;
  }
  public resetHeight() {
    this._height = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get heightInput() {
    return this._height;
  }

  // height_var - computed: false, optional: true, required: false
  private _heightVar?: string; 
  public get heightVar() {
    return this.getStringAttribute('height_var');
  }
  public set heightVar(value: string) {
    this._heightVar = value;
  }
  public resetHeightVar() {
    this._heightVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get heightVarInput() {
    return this._heightVar;
  }

  // padding - computed: false, optional: true, required: false
  private _padding?: string; 
  public get padding() {
    return this.getStringAttribute('padding');
  }
  public set padding(value: string) {
    this._padding = value;
  }
  public resetPadding() {
    this._padding = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get paddingInput() {
    return this._padding;
  }

  // padding_var - computed: false, optional: true, required: false
  private _paddingVar?: string; 
  public get paddingVar() {
    return this.getStringAttribute('padding_var');
  }
  public set paddingVar(value: string) {
    this._paddingVar = value;
  }
  public resetPaddingVar() {
    this._paddingVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get paddingVarInput() {
    return this._paddingVar;
  }

  // style - computed: false, optional: true, required: false
  private _style?: string; 
  public get style() {
    return this.getStringAttribute('style');
  }
  public set style(value: string) {
    this._style = value;
  }
  public resetStyle() {
    this._style = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get styleInput() {
    return this._style;
  }

  // style_var - computed: false, optional: true, required: false
  private _styleVar?: string; 
  public get styleVar() {
    return this.getStringAttribute('style_var');
  }
  public set styleVar(value: string) {
    this._styleVar = value;
  }
  public resetStyleVar() {
    this._styleVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get styleVarInput() {
    return this._styleVar;
  }

  // width - computed: false, optional: true, required: false
  private _width?: string; 
  public get width() {
    return this.getStringAttribute('width');
  }
  public set width(value: string) {
    this._width = value;
  }
  public resetWidth() {
    this._width = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get widthInput() {
    return this._width;
  }

  // width_var - computed: false, optional: true, required: false
  private _widthVar?: string; 
  public get widthVar() {
    return this.getStringAttribute('width_var');
  }
  public set widthVar(value: string) {
    this._widthVar = value;
  }
  public resetWidthVar() {
    this._widthVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get widthVarInput() {
    return this._widthVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationFaceCropList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationFaceCrop[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationFaceCropOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationFaceCropOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationFeatureCrop {
  /**
  * Controls placement of the crop if Image and Video Manager does not detect any features in the image. Directions are relative to the edges of the image being transformed.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#fail_gravity DataAkamaiImagingPolicyImage#fail_gravity}
  */
  readonly failGravity?: string;
  /**
  * Controls placement of the crop if Image and Video Manager does not detect any features in the image. Directions are relative to the edges of the image being transformed.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#fail_gravity_var DataAkamaiImagingPolicyImage#fail_gravity_var}
  */
  readonly failGravityVar?: string;
  /**
  * The size in pixels of the important features to search for. If identified, two features never appear closer together than this value, `8.0` by default.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#feature_radius DataAkamaiImagingPolicyImage#feature_radius}
  */
  readonly featureRadius?: string;
  /**
  * The size in pixels of the important features to search for. If identified, two features never appear closer together than this value, `8.0` by default.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#feature_radius_var DataAkamaiImagingPolicyImage#feature_radius_var}
  */
  readonly featureRadiusVar?: string;
  /**
  * Controls placement of the crop. Directions are relative to the region of interest plus padding.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#gravity DataAkamaiImagingPolicyImage#gravity}
  */
  readonly gravity?: string;
  /**
  * Controls placement of the crop. Directions are relative to the region of interest plus padding.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#gravity_var DataAkamaiImagingPolicyImage#gravity_var}
  */
  readonly gravityVar?: string;
  /**
  * The height in pixels of the output image relative to the specified `style` value.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#height DataAkamaiImagingPolicyImage#height}
  */
  readonly height?: string;
  /**
  * The height in pixels of the output image relative to the specified `style` value.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#height_var DataAkamaiImagingPolicyImage#height_var}
  */
  readonly heightVar?: string;
  /**
  * The maximum number of features to identify as important features, `32` by default. The strongest features are always chosen.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#max_features DataAkamaiImagingPolicyImage#max_features}
  */
  readonly maxFeatures?: string;
  /**
  * The maximum number of features to identify as important features, `32` by default. The strongest features are always chosen.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#max_features_var DataAkamaiImagingPolicyImage#max_features_var}
  */
  readonly maxFeaturesVar?: string;
  /**
  * Determines the minimum quality level of the feature identified. To consider a feature important, the feature needs to surpass this value.  Image and Video Manager measures quality on a scale from `0` for the lowest quality to `1` for the highest quality, `.1` by default.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#min_feature_quality DataAkamaiImagingPolicyImage#min_feature_quality}
  */
  readonly minFeatureQuality?: string;
  /**
  * Determines the minimum quality level of the feature identified. To consider a feature important, the feature needs to surpass this value.  Image and Video Manager measures quality on a scale from `0` for the lowest quality to `1` for the highest quality, `.1` by default.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#min_feature_quality_var DataAkamaiImagingPolicyImage#min_feature_quality_var}
  */
  readonly minFeatureQualityVar?: string;
  /**
  * Adds space around the region of interest. The amount of padding added is directly related to the size of the bounding box of the selected features. Specifically, the region of interest is expanded in all directions by the largest dimension of the bounding box of the selected features multiplied by this value.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#padding DataAkamaiImagingPolicyImage#padding}
  */
  readonly padding?: string;
  /**
  * Adds space around the region of interest. The amount of padding added is directly related to the size of the bounding box of the selected features. Specifically, the region of interest is expanded in all directions by the largest dimension of the bounding box of the selected features multiplied by this value.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#padding_var DataAkamaiImagingPolicyImage#padding_var}
  */
  readonly paddingVar?: string;
  /**
  * Specifies how to crop or scale a crop area for the features identified in the source image, `fill` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` performs a raw crop around the features, relative to the specified `gravity` value.  A value of `fill` scales the crop area to include as much of the image and features as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the features, relative to the specified `width` and `height` values. Allows Variable substitution.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#style DataAkamaiImagingPolicyImage#style}
  */
  readonly style?: string;
  /**
  * Specifies how to crop or scale a crop area for the features identified in the source image, `fill` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` performs a raw crop around the features, relative to the specified `gravity` value.  A value of `fill` scales the crop area to include as much of the image and features as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the features, relative to the specified `width` and `height` values. Allows Variable substitution.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#style_var DataAkamaiImagingPolicyImage#style_var}
  */
  readonly styleVar?: string;
  /**
  * The width in pixels of the output image relative to the specified `style` value.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#width DataAkamaiImagingPolicyImage#width}
  */
  readonly width?: string;
  /**
  * The width in pixels of the output image relative to the specified `style` value.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#width_var DataAkamaiImagingPolicyImage#width_var}
  */
  readonly widthVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationFeatureCropToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationFeatureCrop | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    fail_gravity: cdktf.stringToTerraform(struct!.failGravity),
    fail_gravity_var: cdktf.stringToTerraform(struct!.failGravityVar),
    feature_radius: cdktf.stringToTerraform(struct!.featureRadius),
    feature_radius_var: cdktf.stringToTerraform(struct!.featureRadiusVar),
    gravity: cdktf.stringToTerraform(struct!.gravity),
    gravity_var: cdktf.stringToTerraform(struct!.gravityVar),
    height: cdktf.stringToTerraform(struct!.height),
    height_var: cdktf.stringToTerraform(struct!.heightVar),
    max_features: cdktf.stringToTerraform(struct!.maxFeatures),
    max_features_var: cdktf.stringToTerraform(struct!.maxFeaturesVar),
    min_feature_quality: cdktf.stringToTerraform(struct!.minFeatureQuality),
    min_feature_quality_var: cdktf.stringToTerraform(struct!.minFeatureQualityVar),
    padding: cdktf.stringToTerraform(struct!.padding),
    padding_var: cdktf.stringToTerraform(struct!.paddingVar),
    style: cdktf.stringToTerraform(struct!.style),
    style_var: cdktf.stringToTerraform(struct!.styleVar),
    width: cdktf.stringToTerraform(struct!.width),
    width_var: cdktf.stringToTerraform(struct!.widthVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationFeatureCropToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationFeatureCrop | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    fail_gravity: {
      value: cdktf.stringToHclTerraform(struct!.failGravity),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    fail_gravity_var: {
      value: cdktf.stringToHclTerraform(struct!.failGravityVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    feature_radius: {
      value: cdktf.stringToHclTerraform(struct!.featureRadius),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    feature_radius_var: {
      value: cdktf.stringToHclTerraform(struct!.featureRadiusVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    gravity: {
      value: cdktf.stringToHclTerraform(struct!.gravity),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    gravity_var: {
      value: cdktf.stringToHclTerraform(struct!.gravityVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    height: {
      value: cdktf.stringToHclTerraform(struct!.height),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    height_var: {
      value: cdktf.stringToHclTerraform(struct!.heightVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    max_features: {
      value: cdktf.stringToHclTerraform(struct!.maxFeatures),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    max_features_var: {
      value: cdktf.stringToHclTerraform(struct!.maxFeaturesVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    min_feature_quality: {
      value: cdktf.stringToHclTerraform(struct!.minFeatureQuality),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    min_feature_quality_var: {
      value: cdktf.stringToHclTerraform(struct!.minFeatureQualityVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    padding: {
      value: cdktf.stringToHclTerraform(struct!.padding),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    padding_var: {
      value: cdktf.stringToHclTerraform(struct!.paddingVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    style: {
      value: cdktf.stringToHclTerraform(struct!.style),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    style_var: {
      value: cdktf.stringToHclTerraform(struct!.styleVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    width: {
      value: cdktf.stringToHclTerraform(struct!.width),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    width_var: {
      value: cdktf.stringToHclTerraform(struct!.widthVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationFeatureCropOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationFeatureCrop | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._failGravity !== undefined) {
      hasAnyValues = true;
      internalValueResult.failGravity = this._failGravity;
    }
    if (this._failGravityVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.failGravityVar = this._failGravityVar;
    }
    if (this._featureRadius !== undefined) {
      hasAnyValues = true;
      internalValueResult.featureRadius = this._featureRadius;
    }
    if (this._featureRadiusVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.featureRadiusVar = this._featureRadiusVar;
    }
    if (this._gravity !== undefined) {
      hasAnyValues = true;
      internalValueResult.gravity = this._gravity;
    }
    if (this._gravityVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.gravityVar = this._gravityVar;
    }
    if (this._height !== undefined) {
      hasAnyValues = true;
      internalValueResult.height = this._height;
    }
    if (this._heightVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.heightVar = this._heightVar;
    }
    if (this._maxFeatures !== undefined) {
      hasAnyValues = true;
      internalValueResult.maxFeatures = this._maxFeatures;
    }
    if (this._maxFeaturesVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.maxFeaturesVar = this._maxFeaturesVar;
    }
    if (this._minFeatureQuality !== undefined) {
      hasAnyValues = true;
      internalValueResult.minFeatureQuality = this._minFeatureQuality;
    }
    if (this._minFeatureQualityVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.minFeatureQualityVar = this._minFeatureQualityVar;
    }
    if (this._padding !== undefined) {
      hasAnyValues = true;
      internalValueResult.padding = this._padding;
    }
    if (this._paddingVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.paddingVar = this._paddingVar;
    }
    if (this._style !== undefined) {
      hasAnyValues = true;
      internalValueResult.style = this._style;
    }
    if (this._styleVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.styleVar = this._styleVar;
    }
    if (this._width !== undefined) {
      hasAnyValues = true;
      internalValueResult.width = this._width;
    }
    if (this._widthVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.widthVar = this._widthVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationFeatureCrop | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._failGravity = undefined;
      this._failGravityVar = undefined;
      this._featureRadius = undefined;
      this._featureRadiusVar = undefined;
      this._gravity = undefined;
      this._gravityVar = undefined;
      this._height = undefined;
      this._heightVar = undefined;
      this._maxFeatures = undefined;
      this._maxFeaturesVar = undefined;
      this._minFeatureQuality = undefined;
      this._minFeatureQualityVar = undefined;
      this._padding = undefined;
      this._paddingVar = undefined;
      this._style = undefined;
      this._styleVar = undefined;
      this._width = undefined;
      this._widthVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._failGravity = value.failGravity;
      this._failGravityVar = value.failGravityVar;
      this._featureRadius = value.featureRadius;
      this._featureRadiusVar = value.featureRadiusVar;
      this._gravity = value.gravity;
      this._gravityVar = value.gravityVar;
      this._height = value.height;
      this._heightVar = value.heightVar;
      this._maxFeatures = value.maxFeatures;
      this._maxFeaturesVar = value.maxFeaturesVar;
      this._minFeatureQuality = value.minFeatureQuality;
      this._minFeatureQualityVar = value.minFeatureQualityVar;
      this._padding = value.padding;
      this._paddingVar = value.paddingVar;
      this._style = value.style;
      this._styleVar = value.styleVar;
      this._width = value.width;
      this._widthVar = value.widthVar;
    }
  }

  // fail_gravity - computed: false, optional: true, required: false
  private _failGravity?: string; 
  public get failGravity() {
    return this.getStringAttribute('fail_gravity');
  }
  public set failGravity(value: string) {
    this._failGravity = value;
  }
  public resetFailGravity() {
    this._failGravity = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get failGravityInput() {
    return this._failGravity;
  }

  // fail_gravity_var - computed: false, optional: true, required: false
  private _failGravityVar?: string; 
  public get failGravityVar() {
    return this.getStringAttribute('fail_gravity_var');
  }
  public set failGravityVar(value: string) {
    this._failGravityVar = value;
  }
  public resetFailGravityVar() {
    this._failGravityVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get failGravityVarInput() {
    return this._failGravityVar;
  }

  // feature_radius - computed: false, optional: true, required: false
  private _featureRadius?: string; 
  public get featureRadius() {
    return this.getStringAttribute('feature_radius');
  }
  public set featureRadius(value: string) {
    this._featureRadius = value;
  }
  public resetFeatureRadius() {
    this._featureRadius = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get featureRadiusInput() {
    return this._featureRadius;
  }

  // feature_radius_var - computed: false, optional: true, required: false
  private _featureRadiusVar?: string; 
  public get featureRadiusVar() {
    return this.getStringAttribute('feature_radius_var');
  }
  public set featureRadiusVar(value: string) {
    this._featureRadiusVar = value;
  }
  public resetFeatureRadiusVar() {
    this._featureRadiusVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get featureRadiusVarInput() {
    return this._featureRadiusVar;
  }

  // gravity - computed: false, optional: true, required: false
  private _gravity?: string; 
  public get gravity() {
    return this.getStringAttribute('gravity');
  }
  public set gravity(value: string) {
    this._gravity = value;
  }
  public resetGravity() {
    this._gravity = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get gravityInput() {
    return this._gravity;
  }

  // gravity_var - computed: false, optional: true, required: false
  private _gravityVar?: string; 
  public get gravityVar() {
    return this.getStringAttribute('gravity_var');
  }
  public set gravityVar(value: string) {
    this._gravityVar = value;
  }
  public resetGravityVar() {
    this._gravityVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get gravityVarInput() {
    return this._gravityVar;
  }

  // height - computed: false, optional: true, required: false
  private _height?: string; 
  public get height() {
    return this.getStringAttribute('height');
  }
  public set height(value: string) {
    this._height = value;
  }
  public resetHeight() {
    this._height = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get heightInput() {
    return this._height;
  }

  // height_var - computed: false, optional: true, required: false
  private _heightVar?: string; 
  public get heightVar() {
    return this.getStringAttribute('height_var');
  }
  public set heightVar(value: string) {
    this._heightVar = value;
  }
  public resetHeightVar() {
    this._heightVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get heightVarInput() {
    return this._heightVar;
  }

  // max_features - computed: false, optional: true, required: false
  private _maxFeatures?: string; 
  public get maxFeatures() {
    return this.getStringAttribute('max_features');
  }
  public set maxFeatures(value: string) {
    this._maxFeatures = value;
  }
  public resetMaxFeatures() {
    this._maxFeatures = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get maxFeaturesInput() {
    return this._maxFeatures;
  }

  // max_features_var - computed: false, optional: true, required: false
  private _maxFeaturesVar?: string; 
  public get maxFeaturesVar() {
    return this.getStringAttribute('max_features_var');
  }
  public set maxFeaturesVar(value: string) {
    this._maxFeaturesVar = value;
  }
  public resetMaxFeaturesVar() {
    this._maxFeaturesVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get maxFeaturesVarInput() {
    return this._maxFeaturesVar;
  }

  // min_feature_quality - computed: false, optional: true, required: false
  private _minFeatureQuality?: string; 
  public get minFeatureQuality() {
    return this.getStringAttribute('min_feature_quality');
  }
  public set minFeatureQuality(value: string) {
    this._minFeatureQuality = value;
  }
  public resetMinFeatureQuality() {
    this._minFeatureQuality = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get minFeatureQualityInput() {
    return this._minFeatureQuality;
  }

  // min_feature_quality_var - computed: false, optional: true, required: false
  private _minFeatureQualityVar?: string; 
  public get minFeatureQualityVar() {
    return this.getStringAttribute('min_feature_quality_var');
  }
  public set minFeatureQualityVar(value: string) {
    this._minFeatureQualityVar = value;
  }
  public resetMinFeatureQualityVar() {
    this._minFeatureQualityVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get minFeatureQualityVarInput() {
    return this._minFeatureQualityVar;
  }

  // padding - computed: false, optional: true, required: false
  private _padding?: string; 
  public get padding() {
    return this.getStringAttribute('padding');
  }
  public set padding(value: string) {
    this._padding = value;
  }
  public resetPadding() {
    this._padding = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get paddingInput() {
    return this._padding;
  }

  // padding_var - computed: false, optional: true, required: false
  private _paddingVar?: string; 
  public get paddingVar() {
    return this.getStringAttribute('padding_var');
  }
  public set paddingVar(value: string) {
    this._paddingVar = value;
  }
  public resetPaddingVar() {
    this._paddingVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get paddingVarInput() {
    return this._paddingVar;
  }

  // style - computed: false, optional: true, required: false
  private _style?: string; 
  public get style() {
    return this.getStringAttribute('style');
  }
  public set style(value: string) {
    this._style = value;
  }
  public resetStyle() {
    this._style = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get styleInput() {
    return this._style;
  }

  // style_var - computed: false, optional: true, required: false
  private _styleVar?: string; 
  public get styleVar() {
    return this.getStringAttribute('style_var');
  }
  public set styleVar(value: string) {
    this._styleVar = value;
  }
  public resetStyleVar() {
    this._styleVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get styleVarInput() {
    return this._styleVar;
  }

  // width - computed: false, optional: true, required: false
  private _width?: string; 
  public get width() {
    return this.getStringAttribute('width');
  }
  public set width(value: string) {
    this._width = value;
  }
  public resetWidth() {
    this._width = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get widthInput() {
    return this._width;
  }

  // width_var - computed: false, optional: true, required: false
  private _widthVar?: string; 
  public get widthVar() {
    return this.getStringAttribute('width_var');
  }
  public set widthVar(value: string) {
    this._widthVar = value;
  }
  public resetWidthVar() {
    this._widthVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get widthVarInput() {
    return this._widthVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationFeatureCropList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationFeatureCrop[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationFeatureCropOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationFeatureCropOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationFitAndFillFillTransformation {
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationFitAndFillFillTransformationToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationFitAndFillFillTransformationOutputReference | DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationFitAndFillFillTransformation): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationFitAndFillFillTransformationToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationFitAndFillFillTransformationOutputReference | DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationFitAndFillFillTransformation): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
  };
  return attrs;
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationFitAndFillFillTransformationOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false, 0);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationFitAndFillFillTransformation | undefined {
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationFitAndFillFillTransformation | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
    }
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationFitAndFill {
  /**
  * The height value of the resized image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#height DataAkamaiImagingPolicyImage#height}
  */
  readonly height?: string;
  /**
  * The height value of the resized image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#height_var DataAkamaiImagingPolicyImage#height_var}
  */
  readonly heightVar?: string;
  /**
  * The width value of the resized image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#width DataAkamaiImagingPolicyImage#width}
  */
  readonly width?: string;
  /**
  * The width value of the resized image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#width_var DataAkamaiImagingPolicyImage#width_var}
  */
  readonly widthVar?: string;
  /**
  * fill_transformation block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#fill_transformation DataAkamaiImagingPolicyImage#fill_transformation}
  */
  readonly fillTransformation?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationFitAndFillFillTransformation;
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationFitAndFillToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationFitAndFill | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    height: cdktf.stringToTerraform(struct!.height),
    height_var: cdktf.stringToTerraform(struct!.heightVar),
    width: cdktf.stringToTerraform(struct!.width),
    width_var: cdktf.stringToTerraform(struct!.widthVar),
    fill_transformation: dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationFitAndFillFillTransformationToTerraform(struct!.fillTransformation),
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationFitAndFillToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationFitAndFill | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    height: {
      value: cdktf.stringToHclTerraform(struct!.height),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    height_var: {
      value: cdktf.stringToHclTerraform(struct!.heightVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    width: {
      value: cdktf.stringToHclTerraform(struct!.width),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    width_var: {
      value: cdktf.stringToHclTerraform(struct!.widthVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    fill_transformation: {
      value: dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationFitAndFillFillTransformationToHclTerraform(struct!.fillTransformation),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationFitAndFillFillTransformationList",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationFitAndFillOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationFitAndFill | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._height !== undefined) {
      hasAnyValues = true;
      internalValueResult.height = this._height;
    }
    if (this._heightVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.heightVar = this._heightVar;
    }
    if (this._width !== undefined) {
      hasAnyValues = true;
      internalValueResult.width = this._width;
    }
    if (this._widthVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.widthVar = this._widthVar;
    }
    if (this._fillTransformation?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.fillTransformation = this._fillTransformation?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationFitAndFill | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._height = undefined;
      this._heightVar = undefined;
      this._width = undefined;
      this._widthVar = undefined;
      this._fillTransformation.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._height = value.height;
      this._heightVar = value.heightVar;
      this._width = value.width;
      this._widthVar = value.widthVar;
      this._fillTransformation.internalValue = value.fillTransformation;
    }
  }

  // height - computed: false, optional: true, required: false
  private _height?: string; 
  public get height() {
    return this.getStringAttribute('height');
  }
  public set height(value: string) {
    this._height = value;
  }
  public resetHeight() {
    this._height = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get heightInput() {
    return this._height;
  }

  // height_var - computed: false, optional: true, required: false
  private _heightVar?: string; 
  public get heightVar() {
    return this.getStringAttribute('height_var');
  }
  public set heightVar(value: string) {
    this._heightVar = value;
  }
  public resetHeightVar() {
    this._heightVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get heightVarInput() {
    return this._heightVar;
  }

  // width - computed: false, optional: true, required: false
  private _width?: string; 
  public get width() {
    return this.getStringAttribute('width');
  }
  public set width(value: string) {
    this._width = value;
  }
  public resetWidth() {
    this._width = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get widthInput() {
    return this._width;
  }

  // width_var - computed: false, optional: true, required: false
  private _widthVar?: string; 
  public get widthVar() {
    return this.getStringAttribute('width_var');
  }
  public set widthVar(value: string) {
    this._widthVar = value;
  }
  public resetWidthVar() {
    this._widthVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get widthVarInput() {
    return this._widthVar;
  }

  // fill_transformation - computed: false, optional: true, required: false
  private _fillTransformation = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationFitAndFillFillTransformationOutputReference(this, "fill_transformation");
  public get fillTransformation() {
    return this._fillTransformation;
  }
  public putFillTransformation(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationFitAndFillFillTransformation) {
    this._fillTransformation.internalValue = value;
  }
  public resetFillTransformation() {
    this._fillTransformation.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get fillTransformationInput() {
    return this._fillTransformation.internalValue;
  }
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationFitAndFillList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationFitAndFill[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationFitAndFillOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationFitAndFillOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationGoop {
  /**
  * Specifies the greatest distance control points may move from their original position. A value of `1.0` shifts control points over as far as the next one in the original grid. A value of `0.0` leaves the image unchanged. Values under `0.5` work better for subtle distortions, otherwise control points may pass each other and cause a twisting effect.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#chaos DataAkamaiImagingPolicyImage#chaos}
  */
  readonly chaos?: string;
  /**
  * Specifies the greatest distance control points may move from their original position. A value of `1.0` shifts control points over as far as the next one in the original grid. A value of `0.0` leaves the image unchanged. Values under `0.5` work better for subtle distortions, otherwise control points may pass each other and cause a twisting effect.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#chaos_var DataAkamaiImagingPolicyImage#chaos_var}
  */
  readonly chaosVar?: string;
  /**
  * Controls the density of control points used to distort the image. The largest dimension of the input image is divided up to fit this number of control points. A grid of points is extended on the smaller dimension such that each row and column of control points is equidistant from each adjacent row or column. This parameter strongly affects transformation performance. Be careful choosing values above the default if you expect to transform medium to large size images.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#density DataAkamaiImagingPolicyImage#density}
  */
  readonly density?: string;
  /**
  * Controls the density of control points used to distort the image. The largest dimension of the input image is divided up to fit this number of control points. A grid of points is extended on the smaller dimension such that each row and column of control points is equidistant from each adjacent row or column. This parameter strongly affects transformation performance. Be careful choosing values above the default if you expect to transform medium to large size images.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#density_var DataAkamaiImagingPolicyImage#density_var}
  */
  readonly densityVar?: string;
  /**
  * By default, the distortion algorithm relies on inverse squares to calculate distance but this allows you to change the exponent. You shouldnt need to vary the default value of `2.0`.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#power DataAkamaiImagingPolicyImage#power}
  */
  readonly power?: string;
  /**
  * By default, the distortion algorithm relies on inverse squares to calculate distance but this allows you to change the exponent. You shouldnt need to vary the default value of `2.0`.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#power_var DataAkamaiImagingPolicyImage#power_var}
  */
  readonly powerVar?: string;
  /**
  * Specifies your own `seed` value as an alternative to the default, which is subject to variability. This allows for reproducible and deterministic distortions. If all parameters are kept equal and a constant seed is used, `Goop` distorts an input image consistently over many transformations. By default, this value is set to the current Epoch Time measured in milliseconds, which provides inconsistent transformation output.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#seed DataAkamaiImagingPolicyImage#seed}
  */
  readonly seed?: string;
  /**
  * Specifies your own `seed` value as an alternative to the default, which is subject to variability. This allows for reproducible and deterministic distortions. If all parameters are kept equal and a constant seed is used, `Goop` distorts an input image consistently over many transformations. By default, this value is set to the current Epoch Time measured in milliseconds, which provides inconsistent transformation output.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#seed_var DataAkamaiImagingPolicyImage#seed_var}
  */
  readonly seedVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationGoopToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationGoop | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    chaos: cdktf.stringToTerraform(struct!.chaos),
    chaos_var: cdktf.stringToTerraform(struct!.chaosVar),
    density: cdktf.stringToTerraform(struct!.density),
    density_var: cdktf.stringToTerraform(struct!.densityVar),
    power: cdktf.stringToTerraform(struct!.power),
    power_var: cdktf.stringToTerraform(struct!.powerVar),
    seed: cdktf.stringToTerraform(struct!.seed),
    seed_var: cdktf.stringToTerraform(struct!.seedVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationGoopToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationGoop | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    chaos: {
      value: cdktf.stringToHclTerraform(struct!.chaos),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    chaos_var: {
      value: cdktf.stringToHclTerraform(struct!.chaosVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    density: {
      value: cdktf.stringToHclTerraform(struct!.density),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    density_var: {
      value: cdktf.stringToHclTerraform(struct!.densityVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    power: {
      value: cdktf.stringToHclTerraform(struct!.power),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    power_var: {
      value: cdktf.stringToHclTerraform(struct!.powerVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    seed: {
      value: cdktf.stringToHclTerraform(struct!.seed),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    seed_var: {
      value: cdktf.stringToHclTerraform(struct!.seedVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationGoopOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationGoop | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._chaos !== undefined) {
      hasAnyValues = true;
      internalValueResult.chaos = this._chaos;
    }
    if (this._chaosVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.chaosVar = this._chaosVar;
    }
    if (this._density !== undefined) {
      hasAnyValues = true;
      internalValueResult.density = this._density;
    }
    if (this._densityVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.densityVar = this._densityVar;
    }
    if (this._power !== undefined) {
      hasAnyValues = true;
      internalValueResult.power = this._power;
    }
    if (this._powerVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.powerVar = this._powerVar;
    }
    if (this._seed !== undefined) {
      hasAnyValues = true;
      internalValueResult.seed = this._seed;
    }
    if (this._seedVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.seedVar = this._seedVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationGoop | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._chaos = undefined;
      this._chaosVar = undefined;
      this._density = undefined;
      this._densityVar = undefined;
      this._power = undefined;
      this._powerVar = undefined;
      this._seed = undefined;
      this._seedVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._chaos = value.chaos;
      this._chaosVar = value.chaosVar;
      this._density = value.density;
      this._densityVar = value.densityVar;
      this._power = value.power;
      this._powerVar = value.powerVar;
      this._seed = value.seed;
      this._seedVar = value.seedVar;
    }
  }

  // chaos - computed: false, optional: true, required: false
  private _chaos?: string; 
  public get chaos() {
    return this.getStringAttribute('chaos');
  }
  public set chaos(value: string) {
    this._chaos = value;
  }
  public resetChaos() {
    this._chaos = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get chaosInput() {
    return this._chaos;
  }

  // chaos_var - computed: false, optional: true, required: false
  private _chaosVar?: string; 
  public get chaosVar() {
    return this.getStringAttribute('chaos_var');
  }
  public set chaosVar(value: string) {
    this._chaosVar = value;
  }
  public resetChaosVar() {
    this._chaosVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get chaosVarInput() {
    return this._chaosVar;
  }

  // density - computed: false, optional: true, required: false
  private _density?: string; 
  public get density() {
    return this.getStringAttribute('density');
  }
  public set density(value: string) {
    this._density = value;
  }
  public resetDensity() {
    this._density = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get densityInput() {
    return this._density;
  }

  // density_var - computed: false, optional: true, required: false
  private _densityVar?: string; 
  public get densityVar() {
    return this.getStringAttribute('density_var');
  }
  public set densityVar(value: string) {
    this._densityVar = value;
  }
  public resetDensityVar() {
    this._densityVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get densityVarInput() {
    return this._densityVar;
  }

  // power - computed: false, optional: true, required: false
  private _power?: string; 
  public get power() {
    return this.getStringAttribute('power');
  }
  public set power(value: string) {
    this._power = value;
  }
  public resetPower() {
    this._power = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get powerInput() {
    return this._power;
  }

  // power_var - computed: false, optional: true, required: false
  private _powerVar?: string; 
  public get powerVar() {
    return this.getStringAttribute('power_var');
  }
  public set powerVar(value: string) {
    this._powerVar = value;
  }
  public resetPowerVar() {
    this._powerVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get powerVarInput() {
    return this._powerVar;
  }

  // seed - computed: false, optional: true, required: false
  private _seed?: string; 
  public get seed() {
    return this.getStringAttribute('seed');
  }
  public set seed(value: string) {
    this._seed = value;
  }
  public resetSeed() {
    this._seed = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get seedInput() {
    return this._seed;
  }

  // seed_var - computed: false, optional: true, required: false
  private _seedVar?: string; 
  public get seedVar() {
    return this.getStringAttribute('seed_var');
  }
  public set seedVar(value: string) {
    this._seedVar = value;
  }
  public resetSeedVar() {
    this._seedVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get seedVarInput() {
    return this._seedVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationGoopList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationGoop[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationGoopOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationGoopOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationGrayscale {
  /**
  * The algorithm used to transform colors to grays, either `Brightness`, `Lightness`, `Rec601`, or the default `Rec709`.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#type DataAkamaiImagingPolicyImage#type}
  */
  readonly type?: string;
  /**
  * The algorithm used to transform colors to grays, either `Brightness`, `Lightness`, `Rec601`, or the default `Rec709`.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#type_var DataAkamaiImagingPolicyImage#type_var}
  */
  readonly typeVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationGrayscaleToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationGrayscale | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    type: cdktf.stringToTerraform(struct!.type),
    type_var: cdktf.stringToTerraform(struct!.typeVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationGrayscaleToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationGrayscale | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    type: {
      value: cdktf.stringToHclTerraform(struct!.type),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    type_var: {
      value: cdktf.stringToHclTerraform(struct!.typeVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationGrayscaleOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationGrayscale | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._type !== undefined) {
      hasAnyValues = true;
      internalValueResult.type = this._type;
    }
    if (this._typeVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.typeVar = this._typeVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationGrayscale | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._type = undefined;
      this._typeVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._type = value.type;
      this._typeVar = value.typeVar;
    }
  }

  // type - computed: false, optional: true, required: false
  private _type?: string; 
  public get type() {
    return this.getStringAttribute('type');
  }
  public set type(value: string) {
    this._type = value;
  }
  public resetType() {
    this._type = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get typeInput() {
    return this._type;
  }

  // type_var - computed: false, optional: true, required: false
  private _typeVar?: string; 
  public get typeVar() {
    return this.getStringAttribute('type_var');
  }
  public set typeVar(value: string) {
    this._typeVar = value;
  }
  public resetTypeVar() {
    this._typeVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get typeVarInput() {
    return this._typeVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationGrayscaleList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationGrayscale[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationGrayscaleOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationGrayscaleOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationHsl {
  /**
  * The number of degrees to rotate colors around the color wheel, `0` by default.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hue DataAkamaiImagingPolicyImage#hue}
  */
  readonly hue?: string;
  /**
  * The number of degrees to rotate colors around the color wheel, `0` by default.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hue_var DataAkamaiImagingPolicyImage#hue_var}
  */
  readonly hueVar?: string;
  /**
  * A multiplier to adjust the lightness of colors in the image. Note that lightness is distinct from brightness. For example, reducing the lightness of a light green might give you a lime green whereas reducing the brightness of a light green might give you a darker shade of the same green. Values less than `1.0` decrease the lightness of colors in the image. Values greater than `1.0` increase the lightness of colors in the image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#lightness DataAkamaiImagingPolicyImage#lightness}
  */
  readonly lightness?: string;
  /**
  * A multiplier to adjust the lightness of colors in the image. Note that lightness is distinct from brightness. For example, reducing the lightness of a light green might give you a lime green whereas reducing the brightness of a light green might give you a darker shade of the same green. Values less than `1.0` decrease the lightness of colors in the image. Values greater than `1.0` increase the lightness of colors in the image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#lightness_var DataAkamaiImagingPolicyImage#lightness_var}
  */
  readonly lightnessVar?: string;
  /**
  * A multiplier to adjust the saturation of colors in the image. Values less than `1.0` decrease saturation and values greater than `1.0` increase the saturation. A value of `0.0` removes all color from the image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#saturation DataAkamaiImagingPolicyImage#saturation}
  */
  readonly saturation?: string;
  /**
  * A multiplier to adjust the saturation of colors in the image. Values less than `1.0` decrease saturation and values greater than `1.0` increase the saturation. A value of `0.0` removes all color from the image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#saturation_var DataAkamaiImagingPolicyImage#saturation_var}
  */
  readonly saturationVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationHslToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationHsl | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    hue: cdktf.stringToTerraform(struct!.hue),
    hue_var: cdktf.stringToTerraform(struct!.hueVar),
    lightness: cdktf.stringToTerraform(struct!.lightness),
    lightness_var: cdktf.stringToTerraform(struct!.lightnessVar),
    saturation: cdktf.stringToTerraform(struct!.saturation),
    saturation_var: cdktf.stringToTerraform(struct!.saturationVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationHslToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationHsl | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    hue: {
      value: cdktf.stringToHclTerraform(struct!.hue),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    hue_var: {
      value: cdktf.stringToHclTerraform(struct!.hueVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    lightness: {
      value: cdktf.stringToHclTerraform(struct!.lightness),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    lightness_var: {
      value: cdktf.stringToHclTerraform(struct!.lightnessVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    saturation: {
      value: cdktf.stringToHclTerraform(struct!.saturation),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    saturation_var: {
      value: cdktf.stringToHclTerraform(struct!.saturationVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationHslOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationHsl | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._hue !== undefined) {
      hasAnyValues = true;
      internalValueResult.hue = this._hue;
    }
    if (this._hueVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.hueVar = this._hueVar;
    }
    if (this._lightness !== undefined) {
      hasAnyValues = true;
      internalValueResult.lightness = this._lightness;
    }
    if (this._lightnessVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.lightnessVar = this._lightnessVar;
    }
    if (this._saturation !== undefined) {
      hasAnyValues = true;
      internalValueResult.saturation = this._saturation;
    }
    if (this._saturationVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.saturationVar = this._saturationVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationHsl | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._hue = undefined;
      this._hueVar = undefined;
      this._lightness = undefined;
      this._lightnessVar = undefined;
      this._saturation = undefined;
      this._saturationVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._hue = value.hue;
      this._hueVar = value.hueVar;
      this._lightness = value.lightness;
      this._lightnessVar = value.lightnessVar;
      this._saturation = value.saturation;
      this._saturationVar = value.saturationVar;
    }
  }

  // hue - computed: false, optional: true, required: false
  private _hue?: string; 
  public get hue() {
    return this.getStringAttribute('hue');
  }
  public set hue(value: string) {
    this._hue = value;
  }
  public resetHue() {
    this._hue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hueInput() {
    return this._hue;
  }

  // hue_var - computed: false, optional: true, required: false
  private _hueVar?: string; 
  public get hueVar() {
    return this.getStringAttribute('hue_var');
  }
  public set hueVar(value: string) {
    this._hueVar = value;
  }
  public resetHueVar() {
    this._hueVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hueVarInput() {
    return this._hueVar;
  }

  // lightness - computed: false, optional: true, required: false
  private _lightness?: string; 
  public get lightness() {
    return this.getStringAttribute('lightness');
  }
  public set lightness(value: string) {
    this._lightness = value;
  }
  public resetLightness() {
    this._lightness = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get lightnessInput() {
    return this._lightness;
  }

  // lightness_var - computed: false, optional: true, required: false
  private _lightnessVar?: string; 
  public get lightnessVar() {
    return this.getStringAttribute('lightness_var');
  }
  public set lightnessVar(value: string) {
    this._lightnessVar = value;
  }
  public resetLightnessVar() {
    this._lightnessVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get lightnessVarInput() {
    return this._lightnessVar;
  }

  // saturation - computed: false, optional: true, required: false
  private _saturation?: string; 
  public get saturation() {
    return this.getStringAttribute('saturation');
  }
  public set saturation(value: string) {
    this._saturation = value;
  }
  public resetSaturation() {
    this._saturation = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get saturationInput() {
    return this._saturation;
  }

  // saturation_var - computed: false, optional: true, required: false
  private _saturationVar?: string; 
  public get saturationVar() {
    return this.getStringAttribute('saturation_var');
  }
  public set saturationVar(value: string) {
    this._saturationVar = value;
  }
  public resetSaturationVar() {
    this._saturationVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get saturationVarInput() {
    return this._saturationVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationHslList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationHsl[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationHslOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationHslOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationHsv {
  /**
  * The number of degrees to rotate colors around the color wheel, `0.0` by default.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hue DataAkamaiImagingPolicyImage#hue}
  */
  readonly hue?: string;
  /**
  * The number of degrees to rotate colors around the color wheel, `0.0` by default.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hue_var DataAkamaiImagingPolicyImage#hue_var}
  */
  readonly hueVar?: string;
  /**
  * A multiplier to adjust the saturation of colors in the image. Values less than `1.0` decrease saturation and values greater than `1.0` increase the saturation. A value of `0.0` removes all color from the image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#saturation DataAkamaiImagingPolicyImage#saturation}
  */
  readonly saturation?: string;
  /**
  * A multiplier to adjust the saturation of colors in the image. Values less than `1.0` decrease saturation and values greater than `1.0` increase the saturation. A value of `0.0` removes all color from the image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#saturation_var DataAkamaiImagingPolicyImage#saturation_var}
  */
  readonly saturationVar?: string;
  /**
  * A multiplier to adjust the lightness or darkness of the images base color. Values less than 1.0 decrease the base colors in the image, making them appear darker. Values greater than 1.0 increase the base colors in the image, making them appear lighter.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#value DataAkamaiImagingPolicyImage#value}
  */
  readonly value?: string;
  /**
  * A multiplier to adjust the lightness or darkness of the images base color. Values less than 1.0 decrease the base colors in the image, making them appear darker. Values greater than 1.0 increase the base colors in the image, making them appear lighter.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#value_var DataAkamaiImagingPolicyImage#value_var}
  */
  readonly valueVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationHsvToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationHsv | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    hue: cdktf.stringToTerraform(struct!.hue),
    hue_var: cdktf.stringToTerraform(struct!.hueVar),
    saturation: cdktf.stringToTerraform(struct!.saturation),
    saturation_var: cdktf.stringToTerraform(struct!.saturationVar),
    value: cdktf.stringToTerraform(struct!.value),
    value_var: cdktf.stringToTerraform(struct!.valueVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationHsvToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationHsv | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    hue: {
      value: cdktf.stringToHclTerraform(struct!.hue),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    hue_var: {
      value: cdktf.stringToHclTerraform(struct!.hueVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    saturation: {
      value: cdktf.stringToHclTerraform(struct!.saturation),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    saturation_var: {
      value: cdktf.stringToHclTerraform(struct!.saturationVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    value: {
      value: cdktf.stringToHclTerraform(struct!.value),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    value_var: {
      value: cdktf.stringToHclTerraform(struct!.valueVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationHsvOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationHsv | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._hue !== undefined) {
      hasAnyValues = true;
      internalValueResult.hue = this._hue;
    }
    if (this._hueVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.hueVar = this._hueVar;
    }
    if (this._saturation !== undefined) {
      hasAnyValues = true;
      internalValueResult.saturation = this._saturation;
    }
    if (this._saturationVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.saturationVar = this._saturationVar;
    }
    if (this._value !== undefined) {
      hasAnyValues = true;
      internalValueResult.value = this._value;
    }
    if (this._valueVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.valueVar = this._valueVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationHsv | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._hue = undefined;
      this._hueVar = undefined;
      this._saturation = undefined;
      this._saturationVar = undefined;
      this._value = undefined;
      this._valueVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._hue = value.hue;
      this._hueVar = value.hueVar;
      this._saturation = value.saturation;
      this._saturationVar = value.saturationVar;
      this._value = value.value;
      this._valueVar = value.valueVar;
    }
  }

  // hue - computed: false, optional: true, required: false
  private _hue?: string; 
  public get hue() {
    return this.getStringAttribute('hue');
  }
  public set hue(value: string) {
    this._hue = value;
  }
  public resetHue() {
    this._hue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hueInput() {
    return this._hue;
  }

  // hue_var - computed: false, optional: true, required: false
  private _hueVar?: string; 
  public get hueVar() {
    return this.getStringAttribute('hue_var');
  }
  public set hueVar(value: string) {
    this._hueVar = value;
  }
  public resetHueVar() {
    this._hueVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hueVarInput() {
    return this._hueVar;
  }

  // saturation - computed: false, optional: true, required: false
  private _saturation?: string; 
  public get saturation() {
    return this.getStringAttribute('saturation');
  }
  public set saturation(value: string) {
    this._saturation = value;
  }
  public resetSaturation() {
    this._saturation = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get saturationInput() {
    return this._saturation;
  }

  // saturation_var - computed: false, optional: true, required: false
  private _saturationVar?: string; 
  public get saturationVar() {
    return this.getStringAttribute('saturation_var');
  }
  public set saturationVar(value: string) {
    this._saturationVar = value;
  }
  public resetSaturationVar() {
    this._saturationVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get saturationVarInput() {
    return this._saturationVar;
  }

  // value - computed: false, optional: true, required: false
  private _value?: string; 
  public get value() {
    return this.getStringAttribute('value');
  }
  public set value(value: string) {
    this._value = value;
  }
  public resetValue() {
    this._value = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get valueInput() {
    return this._value;
  }

  // value_var - computed: false, optional: true, required: false
  private _valueVar?: string; 
  public get valueVar() {
    return this.getStringAttribute('value_var');
  }
  public set valueVar(value: string) {
    this._valueVar = value;
  }
  public resetValueVar() {
    this._valueVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get valueVarInput() {
    return this._valueVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationHsvList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationHsv[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationHsvOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationHsvOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfDimensionDefault {
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfDimensionDefaultToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfDimensionDefaultOutputReference | DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfDimensionDefault): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfDimensionDefaultToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfDimensionDefaultOutputReference | DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfDimensionDefault): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
  };
  return attrs;
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfDimensionDefaultOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false, 0);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfDimensionDefault | undefined {
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfDimensionDefault | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
    }
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfDimensionEqual {
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfDimensionEqualToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfDimensionEqualOutputReference | DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfDimensionEqual): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfDimensionEqualToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfDimensionEqualOutputReference | DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfDimensionEqual): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
  };
  return attrs;
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfDimensionEqualOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false, 0);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfDimensionEqual | undefined {
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfDimensionEqual | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
    }
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfDimensionGreaterThan {
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfDimensionGreaterThanToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfDimensionGreaterThanOutputReference | DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfDimensionGreaterThan): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfDimensionGreaterThanToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfDimensionGreaterThanOutputReference | DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfDimensionGreaterThan): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
  };
  return attrs;
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfDimensionGreaterThanOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false, 0);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfDimensionGreaterThan | undefined {
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfDimensionGreaterThan | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
    }
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfDimensionLessThan {
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfDimensionLessThanToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfDimensionLessThanOutputReference | DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfDimensionLessThan): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfDimensionLessThanToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfDimensionLessThanOutputReference | DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfDimensionLessThan): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
  };
  return attrs;
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfDimensionLessThanOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false, 0);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfDimensionLessThan | undefined {
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfDimensionLessThan | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
    }
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfDimension {
  /**
  * The dimension to use to select the transformation, either `height`, `width`, or `both`.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#dimension DataAkamaiImagingPolicyImage#dimension}
  */
  readonly dimension?: string;
  /**
  * The dimension to use to select the transformation, either `height`, `width`, or `both`.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#dimension_var DataAkamaiImagingPolicyImage#dimension_var}
  */
  readonly dimensionVar?: string;
  /**
  * The value to compare against the source image dimension. For example, if the image dimension is less than the value the lessThan transformation is applied.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#value DataAkamaiImagingPolicyImage#value}
  */
  readonly value?: string;
  /**
  * The value to compare against the source image dimension. For example, if the image dimension is less than the value the lessThan transformation is applied.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#value_var DataAkamaiImagingPolicyImage#value_var}
  */
  readonly valueVar?: string;
  /**
  * default block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#default DataAkamaiImagingPolicyImage#default}
  */
  readonly default?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfDimensionDefault;
  /**
  * equal block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#equal DataAkamaiImagingPolicyImage#equal}
  */
  readonly equal?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfDimensionEqual;
  /**
  * greater_than block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#greater_than DataAkamaiImagingPolicyImage#greater_than}
  */
  readonly greaterThan?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfDimensionGreaterThan;
  /**
  * less_than block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#less_than DataAkamaiImagingPolicyImage#less_than}
  */
  readonly lessThan?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfDimensionLessThan;
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfDimensionToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfDimension | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    dimension: cdktf.stringToTerraform(struct!.dimension),
    dimension_var: cdktf.stringToTerraform(struct!.dimensionVar),
    value: cdktf.stringToTerraform(struct!.value),
    value_var: cdktf.stringToTerraform(struct!.valueVar),
    default: dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfDimensionDefaultToTerraform(struct!.default),
    equal: dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfDimensionEqualToTerraform(struct!.equal),
    greater_than: dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfDimensionGreaterThanToTerraform(struct!.greaterThan),
    less_than: dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfDimensionLessThanToTerraform(struct!.lessThan),
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfDimensionToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfDimension | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    dimension: {
      value: cdktf.stringToHclTerraform(struct!.dimension),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    dimension_var: {
      value: cdktf.stringToHclTerraform(struct!.dimensionVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    value: {
      value: cdktf.stringToHclTerraform(struct!.value),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    value_var: {
      value: cdktf.stringToHclTerraform(struct!.valueVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    default: {
      value: dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfDimensionDefaultToHclTerraform(struct!.default),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfDimensionDefaultList",
    },
    equal: {
      value: dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfDimensionEqualToHclTerraform(struct!.equal),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfDimensionEqualList",
    },
    greater_than: {
      value: dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfDimensionGreaterThanToHclTerraform(struct!.greaterThan),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfDimensionGreaterThanList",
    },
    less_than: {
      value: dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfDimensionLessThanToHclTerraform(struct!.lessThan),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfDimensionLessThanList",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfDimensionOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfDimension | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._dimension !== undefined) {
      hasAnyValues = true;
      internalValueResult.dimension = this._dimension;
    }
    if (this._dimensionVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.dimensionVar = this._dimensionVar;
    }
    if (this._value !== undefined) {
      hasAnyValues = true;
      internalValueResult.value = this._value;
    }
    if (this._valueVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.valueVar = this._valueVar;
    }
    if (this._default?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.default = this._default?.internalValue;
    }
    if (this._equal?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.equal = this._equal?.internalValue;
    }
    if (this._greaterThan?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.greaterThan = this._greaterThan?.internalValue;
    }
    if (this._lessThan?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.lessThan = this._lessThan?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfDimension | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._dimension = undefined;
      this._dimensionVar = undefined;
      this._value = undefined;
      this._valueVar = undefined;
      this._default.internalValue = undefined;
      this._equal.internalValue = undefined;
      this._greaterThan.internalValue = undefined;
      this._lessThan.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._dimension = value.dimension;
      this._dimensionVar = value.dimensionVar;
      this._value = value.value;
      this._valueVar = value.valueVar;
      this._default.internalValue = value.default;
      this._equal.internalValue = value.equal;
      this._greaterThan.internalValue = value.greaterThan;
      this._lessThan.internalValue = value.lessThan;
    }
  }

  // dimension - computed: false, optional: true, required: false
  private _dimension?: string; 
  public get dimension() {
    return this.getStringAttribute('dimension');
  }
  public set dimension(value: string) {
    this._dimension = value;
  }
  public resetDimension() {
    this._dimension = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get dimensionInput() {
    return this._dimension;
  }

  // dimension_var - computed: false, optional: true, required: false
  private _dimensionVar?: string; 
  public get dimensionVar() {
    return this.getStringAttribute('dimension_var');
  }
  public set dimensionVar(value: string) {
    this._dimensionVar = value;
  }
  public resetDimensionVar() {
    this._dimensionVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get dimensionVarInput() {
    return this._dimensionVar;
  }

  // value - computed: false, optional: true, required: false
  private _value?: string; 
  public get value() {
    return this.getStringAttribute('value');
  }
  public set value(value: string) {
    this._value = value;
  }
  public resetValue() {
    this._value = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get valueInput() {
    return this._value;
  }

  // value_var - computed: false, optional: true, required: false
  private _valueVar?: string; 
  public get valueVar() {
    return this.getStringAttribute('value_var');
  }
  public set valueVar(value: string) {
    this._valueVar = value;
  }
  public resetValueVar() {
    this._valueVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get valueVarInput() {
    return this._valueVar;
  }

  // default - computed: false, optional: true, required: false
  private _default = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfDimensionDefaultOutputReference(this, "default");
  public get default() {
    return this._default;
  }
  public putDefault(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfDimensionDefault) {
    this._default.internalValue = value;
  }
  public resetDefault() {
    this._default.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get defaultInput() {
    return this._default.internalValue;
  }

  // equal - computed: false, optional: true, required: false
  private _equal = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfDimensionEqualOutputReference(this, "equal");
  public get equal() {
    return this._equal;
  }
  public putEqual(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfDimensionEqual) {
    this._equal.internalValue = value;
  }
  public resetEqual() {
    this._equal.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get equalInput() {
    return this._equal.internalValue;
  }

  // greater_than - computed: false, optional: true, required: false
  private _greaterThan = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfDimensionGreaterThanOutputReference(this, "greater_than");
  public get greaterThan() {
    return this._greaterThan;
  }
  public putGreaterThan(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfDimensionGreaterThan) {
    this._greaterThan.internalValue = value;
  }
  public resetGreaterThan() {
    this._greaterThan.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get greaterThanInput() {
    return this._greaterThan.internalValue;
  }

  // less_than - computed: false, optional: true, required: false
  private _lessThan = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfDimensionLessThanOutputReference(this, "less_than");
  public get lessThan() {
    return this._lessThan;
  }
  public putLessThan(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfDimensionLessThan) {
    this._lessThan.internalValue = value;
  }
  public resetLessThan() {
    this._lessThan.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get lessThanInput() {
    return this._lessThan.internalValue;
  }
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfDimensionList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfDimension[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfDimensionOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfDimensionOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfOrientationDefault {
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfOrientationDefaultToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfOrientationDefaultOutputReference | DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfOrientationDefault): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfOrientationDefaultToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfOrientationDefaultOutputReference | DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfOrientationDefault): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
  };
  return attrs;
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfOrientationDefaultOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false, 0);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfOrientationDefault | undefined {
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfOrientationDefault | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
    }
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfOrientationLandscape {
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfOrientationLandscapeToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfOrientationLandscapeOutputReference | DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfOrientationLandscape): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfOrientationLandscapeToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfOrientationLandscapeOutputReference | DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfOrientationLandscape): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
  };
  return attrs;
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfOrientationLandscapeOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false, 0);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfOrientationLandscape | undefined {
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfOrientationLandscape | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
    }
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfOrientationPortrait {
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfOrientationPortraitToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfOrientationPortraitOutputReference | DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfOrientationPortrait): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfOrientationPortraitToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfOrientationPortraitOutputReference | DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfOrientationPortrait): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
  };
  return attrs;
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfOrientationPortraitOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false, 0);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfOrientationPortrait | undefined {
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfOrientationPortrait | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
    }
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfOrientationSquare {
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfOrientationSquareToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfOrientationSquareOutputReference | DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfOrientationSquare): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfOrientationSquareToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfOrientationSquareOutputReference | DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfOrientationSquare): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
  };
  return attrs;
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfOrientationSquareOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false, 0);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfOrientationSquare | undefined {
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfOrientationSquare | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
    }
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfOrientation {
  /**
  * default block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#default DataAkamaiImagingPolicyImage#default}
  */
  readonly default?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfOrientationDefault;
  /**
  * landscape block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#landscape DataAkamaiImagingPolicyImage#landscape}
  */
  readonly landscape?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfOrientationLandscape;
  /**
  * portrait block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#portrait DataAkamaiImagingPolicyImage#portrait}
  */
  readonly portrait?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfOrientationPortrait;
  /**
  * square block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#square DataAkamaiImagingPolicyImage#square}
  */
  readonly square?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfOrientationSquare;
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfOrientationToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfOrientation | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    default: dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfOrientationDefaultToTerraform(struct!.default),
    landscape: dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfOrientationLandscapeToTerraform(struct!.landscape),
    portrait: dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfOrientationPortraitToTerraform(struct!.portrait),
    square: dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfOrientationSquareToTerraform(struct!.square),
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfOrientationToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfOrientation | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    default: {
      value: dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfOrientationDefaultToHclTerraform(struct!.default),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfOrientationDefaultList",
    },
    landscape: {
      value: dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfOrientationLandscapeToHclTerraform(struct!.landscape),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfOrientationLandscapeList",
    },
    portrait: {
      value: dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfOrientationPortraitToHclTerraform(struct!.portrait),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfOrientationPortraitList",
    },
    square: {
      value: dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfOrientationSquareToHclTerraform(struct!.square),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfOrientationSquareList",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfOrientationOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfOrientation | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._default?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.default = this._default?.internalValue;
    }
    if (this._landscape?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.landscape = this._landscape?.internalValue;
    }
    if (this._portrait?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.portrait = this._portrait?.internalValue;
    }
    if (this._square?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.square = this._square?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfOrientation | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._default.internalValue = undefined;
      this._landscape.internalValue = undefined;
      this._portrait.internalValue = undefined;
      this._square.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._default.internalValue = value.default;
      this._landscape.internalValue = value.landscape;
      this._portrait.internalValue = value.portrait;
      this._square.internalValue = value.square;
    }
  }

  // default - computed: false, optional: true, required: false
  private _default = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfOrientationDefaultOutputReference(this, "default");
  public get default() {
    return this._default;
  }
  public putDefault(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfOrientationDefault) {
    this._default.internalValue = value;
  }
  public resetDefault() {
    this._default.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get defaultInput() {
    return this._default.internalValue;
  }

  // landscape - computed: false, optional: true, required: false
  private _landscape = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfOrientationLandscapeOutputReference(this, "landscape");
  public get landscape() {
    return this._landscape;
  }
  public putLandscape(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfOrientationLandscape) {
    this._landscape.internalValue = value;
  }
  public resetLandscape() {
    this._landscape.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get landscapeInput() {
    return this._landscape.internalValue;
  }

  // portrait - computed: false, optional: true, required: false
  private _portrait = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfOrientationPortraitOutputReference(this, "portrait");
  public get portrait() {
    return this._portrait;
  }
  public putPortrait(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfOrientationPortrait) {
    this._portrait.internalValue = value;
  }
  public resetPortrait() {
    this._portrait.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get portraitInput() {
    return this._portrait.internalValue;
  }

  // square - computed: false, optional: true, required: false
  private _square = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfOrientationSquareOutputReference(this, "square");
  public get square() {
    return this._square;
  }
  public putSquare(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfOrientationSquare) {
    this._square.internalValue = value;
  }
  public resetSquare() {
    this._square.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get squareInput() {
    return this._square.internalValue;
  }
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfOrientationList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfOrientation[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfOrientationOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfOrientationOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationImQuery {
  /**
  * Specifies the transformations that can be applied using the query string parameter.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#allowed_transformations DataAkamaiImagingPolicyImage#allowed_transformations}
  */
  readonly allowedTransformations: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#query_var DataAkamaiImagingPolicyImage#query_var}
  */
  readonly queryVar: string;
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationImQueryToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationImQuery | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    allowed_transformations: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.allowedTransformations),
    query_var: cdktf.stringToTerraform(struct!.queryVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationImQueryToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationImQuery | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    allowed_transformations: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.allowedTransformations),
      isBlock: false,
      type: "list",
      storageClassType: "stringList",
    },
    query_var: {
      value: cdktf.stringToHclTerraform(struct!.queryVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationImQueryOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationImQuery | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._allowedTransformations !== undefined) {
      hasAnyValues = true;
      internalValueResult.allowedTransformations = this._allowedTransformations;
    }
    if (this._queryVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.queryVar = this._queryVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationImQuery | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._allowedTransformations = undefined;
      this._queryVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._allowedTransformations = value.allowedTransformations;
      this._queryVar = value.queryVar;
    }
  }

  // allowed_transformations - computed: false, optional: false, required: true
  private _allowedTransformations?: string[]; 
  public get allowedTransformations() {
    return this.getListAttribute('allowed_transformations');
  }
  public set allowedTransformations(value: string[]) {
    this._allowedTransformations = value;
  }
  // Temporarily expose input value. Use with caution.
  public get allowedTransformationsInput() {
    return this._allowedTransformations;
  }

  // query_var - computed: false, optional: false, required: true
  private _queryVar?: string; 
  public get queryVar() {
    return this.getStringAttribute('query_var');
  }
  public set queryVar(value: string) {
    this._queryVar = value;
  }
  // Temporarily expose input value. Use with caution.
  public get queryVarInput() {
    return this._queryVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationImQueryList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationImQuery[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationImQueryOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationImQueryOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationMaxColors {
  /**
  * The value representing the maximum number of colors to use with the source image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#colors DataAkamaiImagingPolicyImage#colors}
  */
  readonly colors?: string;
  /**
  * The value representing the maximum number of colors to use with the source image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#colors_var DataAkamaiImagingPolicyImage#colors_var}
  */
  readonly colorsVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationMaxColorsToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationMaxColors | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    colors: cdktf.stringToTerraform(struct!.colors),
    colors_var: cdktf.stringToTerraform(struct!.colorsVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationMaxColorsToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationMaxColors | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    colors: {
      value: cdktf.stringToHclTerraform(struct!.colors),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    colors_var: {
      value: cdktf.stringToHclTerraform(struct!.colorsVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationMaxColorsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationMaxColors | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._colors !== undefined) {
      hasAnyValues = true;
      internalValueResult.colors = this._colors;
    }
    if (this._colorsVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.colorsVar = this._colorsVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationMaxColors | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._colors = undefined;
      this._colorsVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._colors = value.colors;
      this._colorsVar = value.colorsVar;
    }
  }

  // colors - computed: false, optional: true, required: false
  private _colors?: string; 
  public get colors() {
    return this.getStringAttribute('colors');
  }
  public set colors(value: string) {
    this._colors = value;
  }
  public resetColors() {
    this._colors = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get colorsInput() {
    return this._colors;
  }

  // colors_var - computed: false, optional: true, required: false
  private _colorsVar?: string; 
  public get colorsVar() {
    return this.getStringAttribute('colors_var');
  }
  public set colorsVar(value: string) {
    this._colorsVar = value;
  }
  public resetColorsVar() {
    this._colorsVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get colorsVarInput() {
    return this._colorsVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationMaxColorsList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationMaxColors[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationMaxColorsOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationMaxColorsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationMirror {
  /**
  * Flips the image horizontally.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#horizontal DataAkamaiImagingPolicyImage#horizontal}
  */
  readonly horizontal?: string;
  /**
  * Flips the image horizontally.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#horizontal_var DataAkamaiImagingPolicyImage#horizontal_var}
  */
  readonly horizontalVar?: string;
  /**
  * Flips the image vertically.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#vertical DataAkamaiImagingPolicyImage#vertical}
  */
  readonly vertical?: string;
  /**
  * Flips the image vertically.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#vertical_var DataAkamaiImagingPolicyImage#vertical_var}
  */
  readonly verticalVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationMirrorToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationMirror | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    horizontal: cdktf.stringToTerraform(struct!.horizontal),
    horizontal_var: cdktf.stringToTerraform(struct!.horizontalVar),
    vertical: cdktf.stringToTerraform(struct!.vertical),
    vertical_var: cdktf.stringToTerraform(struct!.verticalVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationMirrorToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationMirror | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    horizontal: {
      value: cdktf.stringToHclTerraform(struct!.horizontal),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    horizontal_var: {
      value: cdktf.stringToHclTerraform(struct!.horizontalVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    vertical: {
      value: cdktf.stringToHclTerraform(struct!.vertical),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    vertical_var: {
      value: cdktf.stringToHclTerraform(struct!.verticalVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationMirrorOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationMirror | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._horizontal !== undefined) {
      hasAnyValues = true;
      internalValueResult.horizontal = this._horizontal;
    }
    if (this._horizontalVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.horizontalVar = this._horizontalVar;
    }
    if (this._vertical !== undefined) {
      hasAnyValues = true;
      internalValueResult.vertical = this._vertical;
    }
    if (this._verticalVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.verticalVar = this._verticalVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationMirror | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._horizontal = undefined;
      this._horizontalVar = undefined;
      this._vertical = undefined;
      this._verticalVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._horizontal = value.horizontal;
      this._horizontalVar = value.horizontalVar;
      this._vertical = value.vertical;
      this._verticalVar = value.verticalVar;
    }
  }

  // horizontal - computed: false, optional: true, required: false
  private _horizontal?: string; 
  public get horizontal() {
    return this.getStringAttribute('horizontal');
  }
  public set horizontal(value: string) {
    this._horizontal = value;
  }
  public resetHorizontal() {
    this._horizontal = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get horizontalInput() {
    return this._horizontal;
  }

  // horizontal_var - computed: false, optional: true, required: false
  private _horizontalVar?: string; 
  public get horizontalVar() {
    return this.getStringAttribute('horizontal_var');
  }
  public set horizontalVar(value: string) {
    this._horizontalVar = value;
  }
  public resetHorizontalVar() {
    this._horizontalVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get horizontalVarInput() {
    return this._horizontalVar;
  }

  // vertical - computed: false, optional: true, required: false
  private _vertical?: string; 
  public get vertical() {
    return this.getStringAttribute('vertical');
  }
  public set vertical(value: string) {
    this._vertical = value;
  }
  public resetVertical() {
    this._vertical = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get verticalInput() {
    return this._vertical;
  }

  // vertical_var - computed: false, optional: true, required: false
  private _verticalVar?: string; 
  public get verticalVar() {
    return this.getStringAttribute('vertical_var');
  }
  public set verticalVar(value: string) {
    this._verticalVar = value;
  }
  public resetVerticalVar() {
    this._verticalVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get verticalVarInput() {
    return this._verticalVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationMirrorList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationMirror[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationMirrorOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationMirrorOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationMonoHue {
  /**
  * Specify a hue by indicating the degree of rotation between 0 and 360 degrees around the color wheel. By default Mono Hue applies a red hue, 0.0 on the color wheel.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hue DataAkamaiImagingPolicyImage#hue}
  */
  readonly hue?: string;
  /**
  * Specify a hue by indicating the degree of rotation between 0 and 360 degrees around the color wheel. By default Mono Hue applies a red hue, 0.0 on the color wheel.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hue_var DataAkamaiImagingPolicyImage#hue_var}
  */
  readonly hueVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationMonoHueToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationMonoHue | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    hue: cdktf.stringToTerraform(struct!.hue),
    hue_var: cdktf.stringToTerraform(struct!.hueVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationMonoHueToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationMonoHue | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    hue: {
      value: cdktf.stringToHclTerraform(struct!.hue),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    hue_var: {
      value: cdktf.stringToHclTerraform(struct!.hueVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationMonoHueOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationMonoHue | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._hue !== undefined) {
      hasAnyValues = true;
      internalValueResult.hue = this._hue;
    }
    if (this._hueVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.hueVar = this._hueVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationMonoHue | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._hue = undefined;
      this._hueVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._hue = value.hue;
      this._hueVar = value.hueVar;
    }
  }

  // hue - computed: false, optional: true, required: false
  private _hue?: string; 
  public get hue() {
    return this.getStringAttribute('hue');
  }
  public set hue(value: string) {
    this._hue = value;
  }
  public resetHue() {
    this._hue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hueInput() {
    return this._hue;
  }

  // hue_var - computed: false, optional: true, required: false
  private _hueVar?: string; 
  public get hueVar() {
    return this.getStringAttribute('hue_var');
  }
  public set hueVar(value: string) {
    this._hueVar = value;
  }
  public resetHueVar() {
    this._hueVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hueVarInput() {
    return this._hueVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationMonoHueList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationMonoHue[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationMonoHueOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationMonoHueOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationOpacity {
  /**
  * Represents alpha values on a scale of `0` to `1`. Values below `1` increase transparency, and `0` is invisible. For images that have some transparency, values above `1` increase the opacity of the transparent portions.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#opacity DataAkamaiImagingPolicyImage#opacity}
  */
  readonly opacity?: string;
  /**
  * Represents alpha values on a scale of `0` to `1`. Values below `1` increase transparency, and `0` is invisible. For images that have some transparency, values above `1` increase the opacity of the transparent portions.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#opacity_var DataAkamaiImagingPolicyImage#opacity_var}
  */
  readonly opacityVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationOpacityToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationOpacity | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    opacity: cdktf.stringToTerraform(struct!.opacity),
    opacity_var: cdktf.stringToTerraform(struct!.opacityVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationOpacityToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationOpacity | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    opacity: {
      value: cdktf.stringToHclTerraform(struct!.opacity),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    opacity_var: {
      value: cdktf.stringToHclTerraform(struct!.opacityVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationOpacityOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationOpacity | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._opacity !== undefined) {
      hasAnyValues = true;
      internalValueResult.opacity = this._opacity;
    }
    if (this._opacityVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.opacityVar = this._opacityVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationOpacity | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._opacity = undefined;
      this._opacityVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._opacity = value.opacity;
      this._opacityVar = value.opacityVar;
    }
  }

  // opacity - computed: false, optional: true, required: false
  private _opacity?: string; 
  public get opacity() {
    return this.getStringAttribute('opacity');
  }
  public set opacity(value: string) {
    this._opacity = value;
  }
  public resetOpacity() {
    this._opacity = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get opacityInput() {
    return this._opacity;
  }

  // opacity_var - computed: false, optional: true, required: false
  private _opacityVar?: string; 
  public get opacityVar() {
    return this.getStringAttribute('opacity_var');
  }
  public set opacityVar(value: string) {
    this._opacityVar = value;
  }
  public resetOpacityVar() {
    this._opacityVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get opacityVarInput() {
    return this._opacityVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationOpacityList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationOpacity[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationOpacityOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationOpacityOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRegionOfInterestCropRegionOfInterest {
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRegionOfInterestCropRegionOfInterestToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRegionOfInterestCropRegionOfInterestOutputReference | DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRegionOfInterestCropRegionOfInterest): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRegionOfInterestCropRegionOfInterestToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRegionOfInterestCropRegionOfInterestOutputReference | DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRegionOfInterestCropRegionOfInterest): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
  };
  return attrs;
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRegionOfInterestCropRegionOfInterestOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false, 0);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRegionOfInterestCropRegionOfInterest | undefined {
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRegionOfInterestCropRegionOfInterest | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
    }
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRegionOfInterestCrop {
  /**
  * The placement of the crop area relative to the specified area of interest.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#gravity DataAkamaiImagingPolicyImage#gravity}
  */
  readonly gravity?: string;
  /**
  * The placement of the crop area relative to the specified area of interest.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#gravity_var DataAkamaiImagingPolicyImage#gravity_var}
  */
  readonly gravityVar?: string;
  /**
  * The height in pixels of the output image relative to the specified `style` value.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#height DataAkamaiImagingPolicyImage#height}
  */
  readonly height?: string;
  /**
  * The height in pixels of the output image relative to the specified `style` value.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#height_var DataAkamaiImagingPolicyImage#height_var}
  */
  readonly heightVar?: string;
  /**
  * Specifies how to crop or scale a crop area for the specified area of interest in the source image, `zoom` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` places raw crop around the point of interest, relative to the specified `gravity` value.  A value of `fill` scales the crop area to include as much of the image and point of interest as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the point of interest, relative to the specified `width` and `height` values.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#style DataAkamaiImagingPolicyImage#style}
  */
  readonly style?: string;
  /**
  * Specifies how to crop or scale a crop area for the specified area of interest in the source image, `zoom` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` places raw crop around the point of interest, relative to the specified `gravity` value.  A value of `fill` scales the crop area to include as much of the image and point of interest as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the point of interest, relative to the specified `width` and `height` values.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#style_var DataAkamaiImagingPolicyImage#style_var}
  */
  readonly styleVar?: string;
  /**
  * The width in pixels of the output image relative to the specified `style` value.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#width DataAkamaiImagingPolicyImage#width}
  */
  readonly width?: string;
  /**
  * The width in pixels of the output image relative to the specified `style` value.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#width_var DataAkamaiImagingPolicyImage#width_var}
  */
  readonly widthVar?: string;
  /**
  * region_of_interest block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#region_of_interest DataAkamaiImagingPolicyImage#region_of_interest}
  */
  readonly regionOfInterest: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRegionOfInterestCropRegionOfInterest;
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRegionOfInterestCropToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRegionOfInterestCrop | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    gravity: cdktf.stringToTerraform(struct!.gravity),
    gravity_var: cdktf.stringToTerraform(struct!.gravityVar),
    height: cdktf.stringToTerraform(struct!.height),
    height_var: cdktf.stringToTerraform(struct!.heightVar),
    style: cdktf.stringToTerraform(struct!.style),
    style_var: cdktf.stringToTerraform(struct!.styleVar),
    width: cdktf.stringToTerraform(struct!.width),
    width_var: cdktf.stringToTerraform(struct!.widthVar),
    region_of_interest: dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRegionOfInterestCropRegionOfInterestToTerraform(struct!.regionOfInterest),
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRegionOfInterestCropToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRegionOfInterestCrop | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    gravity: {
      value: cdktf.stringToHclTerraform(struct!.gravity),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    gravity_var: {
      value: cdktf.stringToHclTerraform(struct!.gravityVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    height: {
      value: cdktf.stringToHclTerraform(struct!.height),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    height_var: {
      value: cdktf.stringToHclTerraform(struct!.heightVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    style: {
      value: cdktf.stringToHclTerraform(struct!.style),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    style_var: {
      value: cdktf.stringToHclTerraform(struct!.styleVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    width: {
      value: cdktf.stringToHclTerraform(struct!.width),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    width_var: {
      value: cdktf.stringToHclTerraform(struct!.widthVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    region_of_interest: {
      value: dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRegionOfInterestCropRegionOfInterestToHclTerraform(struct!.regionOfInterest),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRegionOfInterestCropRegionOfInterestList",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRegionOfInterestCropOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRegionOfInterestCrop | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._gravity !== undefined) {
      hasAnyValues = true;
      internalValueResult.gravity = this._gravity;
    }
    if (this._gravityVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.gravityVar = this._gravityVar;
    }
    if (this._height !== undefined) {
      hasAnyValues = true;
      internalValueResult.height = this._height;
    }
    if (this._heightVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.heightVar = this._heightVar;
    }
    if (this._style !== undefined) {
      hasAnyValues = true;
      internalValueResult.style = this._style;
    }
    if (this._styleVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.styleVar = this._styleVar;
    }
    if (this._width !== undefined) {
      hasAnyValues = true;
      internalValueResult.width = this._width;
    }
    if (this._widthVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.widthVar = this._widthVar;
    }
    if (this._regionOfInterest?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.regionOfInterest = this._regionOfInterest?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRegionOfInterestCrop | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._gravity = undefined;
      this._gravityVar = undefined;
      this._height = undefined;
      this._heightVar = undefined;
      this._style = undefined;
      this._styleVar = undefined;
      this._width = undefined;
      this._widthVar = undefined;
      this._regionOfInterest.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._gravity = value.gravity;
      this._gravityVar = value.gravityVar;
      this._height = value.height;
      this._heightVar = value.heightVar;
      this._style = value.style;
      this._styleVar = value.styleVar;
      this._width = value.width;
      this._widthVar = value.widthVar;
      this._regionOfInterest.internalValue = value.regionOfInterest;
    }
  }

  // gravity - computed: false, optional: true, required: false
  private _gravity?: string; 
  public get gravity() {
    return this.getStringAttribute('gravity');
  }
  public set gravity(value: string) {
    this._gravity = value;
  }
  public resetGravity() {
    this._gravity = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get gravityInput() {
    return this._gravity;
  }

  // gravity_var - computed: false, optional: true, required: false
  private _gravityVar?: string; 
  public get gravityVar() {
    return this.getStringAttribute('gravity_var');
  }
  public set gravityVar(value: string) {
    this._gravityVar = value;
  }
  public resetGravityVar() {
    this._gravityVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get gravityVarInput() {
    return this._gravityVar;
  }

  // height - computed: false, optional: true, required: false
  private _height?: string; 
  public get height() {
    return this.getStringAttribute('height');
  }
  public set height(value: string) {
    this._height = value;
  }
  public resetHeight() {
    this._height = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get heightInput() {
    return this._height;
  }

  // height_var - computed: false, optional: true, required: false
  private _heightVar?: string; 
  public get heightVar() {
    return this.getStringAttribute('height_var');
  }
  public set heightVar(value: string) {
    this._heightVar = value;
  }
  public resetHeightVar() {
    this._heightVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get heightVarInput() {
    return this._heightVar;
  }

  // style - computed: false, optional: true, required: false
  private _style?: string; 
  public get style() {
    return this.getStringAttribute('style');
  }
  public set style(value: string) {
    this._style = value;
  }
  public resetStyle() {
    this._style = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get styleInput() {
    return this._style;
  }

  // style_var - computed: false, optional: true, required: false
  private _styleVar?: string; 
  public get styleVar() {
    return this.getStringAttribute('style_var');
  }
  public set styleVar(value: string) {
    this._styleVar = value;
  }
  public resetStyleVar() {
    this._styleVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get styleVarInput() {
    return this._styleVar;
  }

  // width - computed: false, optional: true, required: false
  private _width?: string; 
  public get width() {
    return this.getStringAttribute('width');
  }
  public set width(value: string) {
    this._width = value;
  }
  public resetWidth() {
    this._width = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get widthInput() {
    return this._width;
  }

  // width_var - computed: false, optional: true, required: false
  private _widthVar?: string; 
  public get widthVar() {
    return this.getStringAttribute('width_var');
  }
  public set widthVar(value: string) {
    this._widthVar = value;
  }
  public resetWidthVar() {
    this._widthVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get widthVarInput() {
    return this._widthVar;
  }

  // region_of_interest - computed: false, optional: false, required: true
  private _regionOfInterest = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRegionOfInterestCropRegionOfInterestOutputReference(this, "region_of_interest");
  public get regionOfInterest() {
    return this._regionOfInterest;
  }
  public putRegionOfInterest(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRegionOfInterestCropRegionOfInterest) {
    this._regionOfInterest.internalValue = value;
  }
  // Temporarily expose input value. Use with caution.
  public get regionOfInterestInput() {
    return this._regionOfInterest.internalValue;
  }
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRegionOfInterestCropList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRegionOfInterestCrop[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRegionOfInterestCropOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRegionOfInterestCropOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRelativeCrop {
  /**
  * The number of pixels to shrink or expand the right side of the image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#east DataAkamaiImagingPolicyImage#east}
  */
  readonly east?: string;
  /**
  * The number of pixels to shrink or expand the right side of the image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#east_var DataAkamaiImagingPolicyImage#east_var}
  */
  readonly eastVar?: string;
  /**
  * The number of pixels to shrink or expand the top side of the image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#north DataAkamaiImagingPolicyImage#north}
  */
  readonly north?: string;
  /**
  * The number of pixels to shrink or expand the top side of the image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#north_var DataAkamaiImagingPolicyImage#north_var}
  */
  readonly northVar?: string;
  /**
  * The number of pixels to shrink or expand the bottom side of the image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#south DataAkamaiImagingPolicyImage#south}
  */
  readonly south?: string;
  /**
  * The number of pixels to shrink or expand the bottom side of the image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#south_var DataAkamaiImagingPolicyImage#south_var}
  */
  readonly southVar?: string;
  /**
  * The number of pixels to shrink or expand the left side of the image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#west DataAkamaiImagingPolicyImage#west}
  */
  readonly west?: string;
  /**
  * The number of pixels to shrink or expand the left side of the image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#west_var DataAkamaiImagingPolicyImage#west_var}
  */
  readonly westVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRelativeCropToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRelativeCrop | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    east: cdktf.stringToTerraform(struct!.east),
    east_var: cdktf.stringToTerraform(struct!.eastVar),
    north: cdktf.stringToTerraform(struct!.north),
    north_var: cdktf.stringToTerraform(struct!.northVar),
    south: cdktf.stringToTerraform(struct!.south),
    south_var: cdktf.stringToTerraform(struct!.southVar),
    west: cdktf.stringToTerraform(struct!.west),
    west_var: cdktf.stringToTerraform(struct!.westVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRelativeCropToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRelativeCrop | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    east: {
      value: cdktf.stringToHclTerraform(struct!.east),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    east_var: {
      value: cdktf.stringToHclTerraform(struct!.eastVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    north: {
      value: cdktf.stringToHclTerraform(struct!.north),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    north_var: {
      value: cdktf.stringToHclTerraform(struct!.northVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    south: {
      value: cdktf.stringToHclTerraform(struct!.south),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    south_var: {
      value: cdktf.stringToHclTerraform(struct!.southVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    west: {
      value: cdktf.stringToHclTerraform(struct!.west),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    west_var: {
      value: cdktf.stringToHclTerraform(struct!.westVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRelativeCropOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRelativeCrop | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._east !== undefined) {
      hasAnyValues = true;
      internalValueResult.east = this._east;
    }
    if (this._eastVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.eastVar = this._eastVar;
    }
    if (this._north !== undefined) {
      hasAnyValues = true;
      internalValueResult.north = this._north;
    }
    if (this._northVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.northVar = this._northVar;
    }
    if (this._south !== undefined) {
      hasAnyValues = true;
      internalValueResult.south = this._south;
    }
    if (this._southVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.southVar = this._southVar;
    }
    if (this._west !== undefined) {
      hasAnyValues = true;
      internalValueResult.west = this._west;
    }
    if (this._westVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.westVar = this._westVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRelativeCrop | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._east = undefined;
      this._eastVar = undefined;
      this._north = undefined;
      this._northVar = undefined;
      this._south = undefined;
      this._southVar = undefined;
      this._west = undefined;
      this._westVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._east = value.east;
      this._eastVar = value.eastVar;
      this._north = value.north;
      this._northVar = value.northVar;
      this._south = value.south;
      this._southVar = value.southVar;
      this._west = value.west;
      this._westVar = value.westVar;
    }
  }

  // east - computed: false, optional: true, required: false
  private _east?: string; 
  public get east() {
    return this.getStringAttribute('east');
  }
  public set east(value: string) {
    this._east = value;
  }
  public resetEast() {
    this._east = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get eastInput() {
    return this._east;
  }

  // east_var - computed: false, optional: true, required: false
  private _eastVar?: string; 
  public get eastVar() {
    return this.getStringAttribute('east_var');
  }
  public set eastVar(value: string) {
    this._eastVar = value;
  }
  public resetEastVar() {
    this._eastVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get eastVarInput() {
    return this._eastVar;
  }

  // north - computed: false, optional: true, required: false
  private _north?: string; 
  public get north() {
    return this.getStringAttribute('north');
  }
  public set north(value: string) {
    this._north = value;
  }
  public resetNorth() {
    this._north = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get northInput() {
    return this._north;
  }

  // north_var - computed: false, optional: true, required: false
  private _northVar?: string; 
  public get northVar() {
    return this.getStringAttribute('north_var');
  }
  public set northVar(value: string) {
    this._northVar = value;
  }
  public resetNorthVar() {
    this._northVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get northVarInput() {
    return this._northVar;
  }

  // south - computed: false, optional: true, required: false
  private _south?: string; 
  public get south() {
    return this.getStringAttribute('south');
  }
  public set south(value: string) {
    this._south = value;
  }
  public resetSouth() {
    this._south = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get southInput() {
    return this._south;
  }

  // south_var - computed: false, optional: true, required: false
  private _southVar?: string; 
  public get southVar() {
    return this.getStringAttribute('south_var');
  }
  public set southVar(value: string) {
    this._southVar = value;
  }
  public resetSouthVar() {
    this._southVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get southVarInput() {
    return this._southVar;
  }

  // west - computed: false, optional: true, required: false
  private _west?: string; 
  public get west() {
    return this.getStringAttribute('west');
  }
  public set west(value: string) {
    this._west = value;
  }
  public resetWest() {
    this._west = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get westInput() {
    return this._west;
  }

  // west_var - computed: false, optional: true, required: false
  private _westVar?: string; 
  public get westVar() {
    return this.getStringAttribute('west_var');
  }
  public set westVar(value: string) {
    this._westVar = value;
  }
  public resetWestVar() {
    this._westVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get westVarInput() {
    return this._westVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRelativeCropList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRelativeCrop[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRelativeCropOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRelativeCropOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRemoveColor {
  /**
  * The hexadecimal CSS color value to remove.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#color DataAkamaiImagingPolicyImage#color}
  */
  readonly color?: string;
  /**
  * The hexadecimal CSS color value to remove.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#color_var DataAkamaiImagingPolicyImage#color_var}
  */
  readonly colorVar?: string;
  /**
  * The RemoveColor transformation may create a hard edge around an image. To minimize these hard edges and make the removal of the color more gradual in appearance, use the Feather option. This option allows you to extend the color removal beyond the specified Tolerance. The pixels in this extended tolerance become semi-transparent - creating a softer edge.  The first realtime request for an image using the feather option may result in a slow transformation time. Subsequent requests are not impacted as they are served directly out of cache.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#feather DataAkamaiImagingPolicyImage#feather}
  */
  readonly feather?: string;
  /**
  * The RemoveColor transformation may create a hard edge around an image. To minimize these hard edges and make the removal of the color more gradual in appearance, use the Feather option. This option allows you to extend the color removal beyond the specified Tolerance. The pixels in this extended tolerance become semi-transparent - creating a softer edge.  The first realtime request for an image using the feather option may result in a slow transformation time. Subsequent requests are not impacted as they are served directly out of cache.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#feather_var DataAkamaiImagingPolicyImage#feather_var}
  */
  readonly featherVar?: string;
  /**
  * The Tolerance option defines how close the color needs to be to the selected color before it's changed to fully transparent. Set the Tolerance to 0.0 to remove only the exact color specified.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#tolerance DataAkamaiImagingPolicyImage#tolerance}
  */
  readonly tolerance?: string;
  /**
  * The Tolerance option defines how close the color needs to be to the selected color before it's changed to fully transparent. Set the Tolerance to 0.0 to remove only the exact color specified.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#tolerance_var DataAkamaiImagingPolicyImage#tolerance_var}
  */
  readonly toleranceVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRemoveColorToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRemoveColor | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    color: cdktf.stringToTerraform(struct!.color),
    color_var: cdktf.stringToTerraform(struct!.colorVar),
    feather: cdktf.stringToTerraform(struct!.feather),
    feather_var: cdktf.stringToTerraform(struct!.featherVar),
    tolerance: cdktf.stringToTerraform(struct!.tolerance),
    tolerance_var: cdktf.stringToTerraform(struct!.toleranceVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRemoveColorToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRemoveColor | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    color: {
      value: cdktf.stringToHclTerraform(struct!.color),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    color_var: {
      value: cdktf.stringToHclTerraform(struct!.colorVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    feather: {
      value: cdktf.stringToHclTerraform(struct!.feather),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    feather_var: {
      value: cdktf.stringToHclTerraform(struct!.featherVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    tolerance: {
      value: cdktf.stringToHclTerraform(struct!.tolerance),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    tolerance_var: {
      value: cdktf.stringToHclTerraform(struct!.toleranceVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRemoveColorOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRemoveColor | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._color !== undefined) {
      hasAnyValues = true;
      internalValueResult.color = this._color;
    }
    if (this._colorVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.colorVar = this._colorVar;
    }
    if (this._feather !== undefined) {
      hasAnyValues = true;
      internalValueResult.feather = this._feather;
    }
    if (this._featherVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.featherVar = this._featherVar;
    }
    if (this._tolerance !== undefined) {
      hasAnyValues = true;
      internalValueResult.tolerance = this._tolerance;
    }
    if (this._toleranceVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.toleranceVar = this._toleranceVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRemoveColor | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._color = undefined;
      this._colorVar = undefined;
      this._feather = undefined;
      this._featherVar = undefined;
      this._tolerance = undefined;
      this._toleranceVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._color = value.color;
      this._colorVar = value.colorVar;
      this._feather = value.feather;
      this._featherVar = value.featherVar;
      this._tolerance = value.tolerance;
      this._toleranceVar = value.toleranceVar;
    }
  }

  // color - computed: false, optional: true, required: false
  private _color?: string; 
  public get color() {
    return this.getStringAttribute('color');
  }
  public set color(value: string) {
    this._color = value;
  }
  public resetColor() {
    this._color = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get colorInput() {
    return this._color;
  }

  // color_var - computed: false, optional: true, required: false
  private _colorVar?: string; 
  public get colorVar() {
    return this.getStringAttribute('color_var');
  }
  public set colorVar(value: string) {
    this._colorVar = value;
  }
  public resetColorVar() {
    this._colorVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get colorVarInput() {
    return this._colorVar;
  }

  // feather - computed: false, optional: true, required: false
  private _feather?: string; 
  public get feather() {
    return this.getStringAttribute('feather');
  }
  public set feather(value: string) {
    this._feather = value;
  }
  public resetFeather() {
    this._feather = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get featherInput() {
    return this._feather;
  }

  // feather_var - computed: false, optional: true, required: false
  private _featherVar?: string; 
  public get featherVar() {
    return this.getStringAttribute('feather_var');
  }
  public set featherVar(value: string) {
    this._featherVar = value;
  }
  public resetFeatherVar() {
    this._featherVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get featherVarInput() {
    return this._featherVar;
  }

  // tolerance - computed: false, optional: true, required: false
  private _tolerance?: string; 
  public get tolerance() {
    return this.getStringAttribute('tolerance');
  }
  public set tolerance(value: string) {
    this._tolerance = value;
  }
  public resetTolerance() {
    this._tolerance = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get toleranceInput() {
    return this._tolerance;
  }

  // tolerance_var - computed: false, optional: true, required: false
  private _toleranceVar?: string; 
  public get toleranceVar() {
    return this.getStringAttribute('tolerance_var');
  }
  public set toleranceVar(value: string) {
    this._toleranceVar = value;
  }
  public resetToleranceVar() {
    this._toleranceVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get toleranceVarInput() {
    return this._toleranceVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRemoveColorList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRemoveColor[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRemoveColorOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRemoveColorOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationResize {
  /**
  * Preserves the aspect ratio. Select `fit` to make the image fit entirely within the selected width and height. When using `fit`, the resulting image has the largest possible size for the specified dimensions. Select `fill` to size the image so it both completely fills the dimensions and has the smallest possible file size. Otherwise `ignore` changes the original aspect ratio to fit within an arbitrarily shaped rectangle.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#aspect DataAkamaiImagingPolicyImage#aspect}
  */
  readonly aspect?: string;
  /**
  * Preserves the aspect ratio. Select `fit` to make the image fit entirely within the selected width and height. When using `fit`, the resulting image has the largest possible size for the specified dimensions. Select `fill` to size the image so it both completely fills the dimensions and has the smallest possible file size. Otherwise `ignore` changes the original aspect ratio to fit within an arbitrarily shaped rectangle.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#aspect_var DataAkamaiImagingPolicyImage#aspect_var}
  */
  readonly aspectVar?: string;
  /**
  * The height to resize the source image to. Must be set if height is not specified.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#height DataAkamaiImagingPolicyImage#height}
  */
  readonly height?: string;
  /**
  * The height to resize the source image to. Must be set if height is not specified.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#height_var DataAkamaiImagingPolicyImage#height_var}
  */
  readonly heightVar?: string;
  /**
  * Sets constraints for the image resize. Select `normal` to resize in all cases, either increasing or decreasing the dimensions. Select `downsize` to ignore this transformation if the result would be larger than the original. Select `upsize` to ignore this transformation if the result would be smaller.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#type DataAkamaiImagingPolicyImage#type}
  */
  readonly type?: string;
  /**
  * Sets constraints for the image resize. Select `normal` to resize in all cases, either increasing or decreasing the dimensions. Select `downsize` to ignore this transformation if the result would be larger than the original. Select `upsize` to ignore this transformation if the result would be smaller.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#type_var DataAkamaiImagingPolicyImage#type_var}
  */
  readonly typeVar?: string;
  /**
  * The width to resize the source image to. Must be set if width is not specified.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#width DataAkamaiImagingPolicyImage#width}
  */
  readonly width?: string;
  /**
  * The width to resize the source image to. Must be set if width is not specified.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#width_var DataAkamaiImagingPolicyImage#width_var}
  */
  readonly widthVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationResizeToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationResize | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    aspect: cdktf.stringToTerraform(struct!.aspect),
    aspect_var: cdktf.stringToTerraform(struct!.aspectVar),
    height: cdktf.stringToTerraform(struct!.height),
    height_var: cdktf.stringToTerraform(struct!.heightVar),
    type: cdktf.stringToTerraform(struct!.type),
    type_var: cdktf.stringToTerraform(struct!.typeVar),
    width: cdktf.stringToTerraform(struct!.width),
    width_var: cdktf.stringToTerraform(struct!.widthVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationResizeToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationResize | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    aspect: {
      value: cdktf.stringToHclTerraform(struct!.aspect),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    aspect_var: {
      value: cdktf.stringToHclTerraform(struct!.aspectVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    height: {
      value: cdktf.stringToHclTerraform(struct!.height),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    height_var: {
      value: cdktf.stringToHclTerraform(struct!.heightVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    type: {
      value: cdktf.stringToHclTerraform(struct!.type),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    type_var: {
      value: cdktf.stringToHclTerraform(struct!.typeVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    width: {
      value: cdktf.stringToHclTerraform(struct!.width),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    width_var: {
      value: cdktf.stringToHclTerraform(struct!.widthVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationResizeOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationResize | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._aspect !== undefined) {
      hasAnyValues = true;
      internalValueResult.aspect = this._aspect;
    }
    if (this._aspectVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.aspectVar = this._aspectVar;
    }
    if (this._height !== undefined) {
      hasAnyValues = true;
      internalValueResult.height = this._height;
    }
    if (this._heightVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.heightVar = this._heightVar;
    }
    if (this._type !== undefined) {
      hasAnyValues = true;
      internalValueResult.type = this._type;
    }
    if (this._typeVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.typeVar = this._typeVar;
    }
    if (this._width !== undefined) {
      hasAnyValues = true;
      internalValueResult.width = this._width;
    }
    if (this._widthVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.widthVar = this._widthVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationResize | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._aspect = undefined;
      this._aspectVar = undefined;
      this._height = undefined;
      this._heightVar = undefined;
      this._type = undefined;
      this._typeVar = undefined;
      this._width = undefined;
      this._widthVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._aspect = value.aspect;
      this._aspectVar = value.aspectVar;
      this._height = value.height;
      this._heightVar = value.heightVar;
      this._type = value.type;
      this._typeVar = value.typeVar;
      this._width = value.width;
      this._widthVar = value.widthVar;
    }
  }

  // aspect - computed: false, optional: true, required: false
  private _aspect?: string; 
  public get aspect() {
    return this.getStringAttribute('aspect');
  }
  public set aspect(value: string) {
    this._aspect = value;
  }
  public resetAspect() {
    this._aspect = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get aspectInput() {
    return this._aspect;
  }

  // aspect_var - computed: false, optional: true, required: false
  private _aspectVar?: string; 
  public get aspectVar() {
    return this.getStringAttribute('aspect_var');
  }
  public set aspectVar(value: string) {
    this._aspectVar = value;
  }
  public resetAspectVar() {
    this._aspectVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get aspectVarInput() {
    return this._aspectVar;
  }

  // height - computed: false, optional: true, required: false
  private _height?: string; 
  public get height() {
    return this.getStringAttribute('height');
  }
  public set height(value: string) {
    this._height = value;
  }
  public resetHeight() {
    this._height = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get heightInput() {
    return this._height;
  }

  // height_var - computed: false, optional: true, required: false
  private _heightVar?: string; 
  public get heightVar() {
    return this.getStringAttribute('height_var');
  }
  public set heightVar(value: string) {
    this._heightVar = value;
  }
  public resetHeightVar() {
    this._heightVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get heightVarInput() {
    return this._heightVar;
  }

  // type - computed: false, optional: true, required: false
  private _type?: string; 
  public get type() {
    return this.getStringAttribute('type');
  }
  public set type(value: string) {
    this._type = value;
  }
  public resetType() {
    this._type = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get typeInput() {
    return this._type;
  }

  // type_var - computed: false, optional: true, required: false
  private _typeVar?: string; 
  public get typeVar() {
    return this.getStringAttribute('type_var');
  }
  public set typeVar(value: string) {
    this._typeVar = value;
  }
  public resetTypeVar() {
    this._typeVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get typeVarInput() {
    return this._typeVar;
  }

  // width - computed: false, optional: true, required: false
  private _width?: string; 
  public get width() {
    return this.getStringAttribute('width');
  }
  public set width(value: string) {
    this._width = value;
  }
  public resetWidth() {
    this._width = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get widthInput() {
    return this._width;
  }

  // width_var - computed: false, optional: true, required: false
  private _widthVar?: string; 
  public get widthVar() {
    return this.getStringAttribute('width_var');
  }
  public set widthVar(value: string) {
    this._widthVar = value;
  }
  public resetWidthVar() {
    this._widthVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get widthVarInput() {
    return this._widthVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationResizeList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationResize[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationResizeOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationResizeOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRotate {
  /**
  * The value to rotate the image by. Positive values rotate clockwise, while negative values rotate counter-clockwise.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#degrees DataAkamaiImagingPolicyImage#degrees}
  */
  readonly degrees?: string;
  /**
  * The value to rotate the image by. Positive values rotate clockwise, while negative values rotate counter-clockwise.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#degrees_var DataAkamaiImagingPolicyImage#degrees_var}
  */
  readonly degreesVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRotateToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRotate | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    degrees: cdktf.stringToTerraform(struct!.degrees),
    degrees_var: cdktf.stringToTerraform(struct!.degreesVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRotateToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRotate | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    degrees: {
      value: cdktf.stringToHclTerraform(struct!.degrees),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    degrees_var: {
      value: cdktf.stringToHclTerraform(struct!.degreesVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRotateOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRotate | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._degrees !== undefined) {
      hasAnyValues = true;
      internalValueResult.degrees = this._degrees;
    }
    if (this._degreesVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.degreesVar = this._degreesVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRotate | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._degrees = undefined;
      this._degreesVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._degrees = value.degrees;
      this._degreesVar = value.degreesVar;
    }
  }

  // degrees - computed: false, optional: true, required: false
  private _degrees?: string; 
  public get degrees() {
    return this.getStringAttribute('degrees');
  }
  public set degrees(value: string) {
    this._degrees = value;
  }
  public resetDegrees() {
    this._degrees = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get degreesInput() {
    return this._degrees;
  }

  // degrees_var - computed: false, optional: true, required: false
  private _degreesVar?: string; 
  public get degreesVar() {
    return this.getStringAttribute('degrees_var');
  }
  public set degreesVar(value: string) {
    this._degreesVar = value;
  }
  public resetDegreesVar() {
    this._degreesVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get degreesVarInput() {
    return this._degreesVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRotateList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRotate[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRotateOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRotateOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationScale {
  /**
  * Scaling factor for the input height to determine the output height of the image, where values between `0` and `1` decrease size. Image dimensions need to be non-zero positive numbers.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#height DataAkamaiImagingPolicyImage#height}
  */
  readonly height?: string;
  /**
  * Scaling factor for the input height to determine the output height of the image, where values between `0` and `1` decrease size. Image dimensions need to be non-zero positive numbers.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#height_var DataAkamaiImagingPolicyImage#height_var}
  */
  readonly heightVar?: string;
  /**
  * Scaling factor for the input width to determine the output width of the image, where `1` leaves the width unchanged. Values greater than `1` increase the image size. Image dimensions need to be non-zero positive numbers.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#width DataAkamaiImagingPolicyImage#width}
  */
  readonly width?: string;
  /**
  * Scaling factor for the input width to determine the output width of the image, where `1` leaves the width unchanged. Values greater than `1` increase the image size. Image dimensions need to be non-zero positive numbers.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#width_var DataAkamaiImagingPolicyImage#width_var}
  */
  readonly widthVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationScaleToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationScale | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    height: cdktf.stringToTerraform(struct!.height),
    height_var: cdktf.stringToTerraform(struct!.heightVar),
    width: cdktf.stringToTerraform(struct!.width),
    width_var: cdktf.stringToTerraform(struct!.widthVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationScaleToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationScale | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    height: {
      value: cdktf.stringToHclTerraform(struct!.height),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    height_var: {
      value: cdktf.stringToHclTerraform(struct!.heightVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    width: {
      value: cdktf.stringToHclTerraform(struct!.width),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    width_var: {
      value: cdktf.stringToHclTerraform(struct!.widthVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationScaleOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationScale | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._height !== undefined) {
      hasAnyValues = true;
      internalValueResult.height = this._height;
    }
    if (this._heightVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.heightVar = this._heightVar;
    }
    if (this._width !== undefined) {
      hasAnyValues = true;
      internalValueResult.width = this._width;
    }
    if (this._widthVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.widthVar = this._widthVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationScale | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._height = undefined;
      this._heightVar = undefined;
      this._width = undefined;
      this._widthVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._height = value.height;
      this._heightVar = value.heightVar;
      this._width = value.width;
      this._widthVar = value.widthVar;
    }
  }

  // height - computed: false, optional: true, required: false
  private _height?: string; 
  public get height() {
    return this.getStringAttribute('height');
  }
  public set height(value: string) {
    this._height = value;
  }
  public resetHeight() {
    this._height = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get heightInput() {
    return this._height;
  }

  // height_var - computed: false, optional: true, required: false
  private _heightVar?: string; 
  public get heightVar() {
    return this.getStringAttribute('height_var');
  }
  public set heightVar(value: string) {
    this._heightVar = value;
  }
  public resetHeightVar() {
    this._heightVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get heightVarInput() {
    return this._heightVar;
  }

  // width - computed: false, optional: true, required: false
  private _width?: string; 
  public get width() {
    return this.getStringAttribute('width');
  }
  public set width(value: string) {
    this._width = value;
  }
  public resetWidth() {
    this._width = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get widthInput() {
    return this._width;
  }

  // width_var - computed: false, optional: true, required: false
  private _widthVar?: string; 
  public get widthVar() {
    return this.getStringAttribute('width_var');
  }
  public set widthVar(value: string) {
    this._widthVar = value;
  }
  public resetWidthVar() {
    this._widthVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get widthVarInput() {
    return this._widthVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationScaleList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationScale[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationScaleOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationScaleOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationShear {
  /**
  * The amount to shear along the x-axis, measured in multiples of the image's width. Must be set if yShear is not specified.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#x_shear DataAkamaiImagingPolicyImage#x_shear}
  */
  readonly xShear?: string;
  /**
  * The amount to shear along the x-axis, measured in multiples of the image's width. Must be set if yShear is not specified.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#x_shear_var DataAkamaiImagingPolicyImage#x_shear_var}
  */
  readonly xShearVar?: string;
  /**
  * The amount to shear along the y-axis, measured in multiples of the image's height. Must be set if xShear is not specified.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#y_shear DataAkamaiImagingPolicyImage#y_shear}
  */
  readonly yShear?: string;
  /**
  * The amount to shear along the y-axis, measured in multiples of the image's height. Must be set if xShear is not specified.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#y_shear_var DataAkamaiImagingPolicyImage#y_shear_var}
  */
  readonly yShearVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationShearToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationShear | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    x_shear: cdktf.stringToTerraform(struct!.xShear),
    x_shear_var: cdktf.stringToTerraform(struct!.xShearVar),
    y_shear: cdktf.stringToTerraform(struct!.yShear),
    y_shear_var: cdktf.stringToTerraform(struct!.yShearVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationShearToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationShear | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    x_shear: {
      value: cdktf.stringToHclTerraform(struct!.xShear),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    x_shear_var: {
      value: cdktf.stringToHclTerraform(struct!.xShearVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    y_shear: {
      value: cdktf.stringToHclTerraform(struct!.yShear),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    y_shear_var: {
      value: cdktf.stringToHclTerraform(struct!.yShearVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationShearOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationShear | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._xShear !== undefined) {
      hasAnyValues = true;
      internalValueResult.xShear = this._xShear;
    }
    if (this._xShearVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.xShearVar = this._xShearVar;
    }
    if (this._yShear !== undefined) {
      hasAnyValues = true;
      internalValueResult.yShear = this._yShear;
    }
    if (this._yShearVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.yShearVar = this._yShearVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationShear | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._xShear = undefined;
      this._xShearVar = undefined;
      this._yShear = undefined;
      this._yShearVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._xShear = value.xShear;
      this._xShearVar = value.xShearVar;
      this._yShear = value.yShear;
      this._yShearVar = value.yShearVar;
    }
  }

  // x_shear - computed: false, optional: true, required: false
  private _xShear?: string; 
  public get xShear() {
    return this.getStringAttribute('x_shear');
  }
  public set xShear(value: string) {
    this._xShear = value;
  }
  public resetXShear() {
    this._xShear = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get xShearInput() {
    return this._xShear;
  }

  // x_shear_var - computed: false, optional: true, required: false
  private _xShearVar?: string; 
  public get xShearVar() {
    return this.getStringAttribute('x_shear_var');
  }
  public set xShearVar(value: string) {
    this._xShearVar = value;
  }
  public resetXShearVar() {
    this._xShearVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get xShearVarInput() {
    return this._xShearVar;
  }

  // y_shear - computed: false, optional: true, required: false
  private _yShear?: string; 
  public get yShear() {
    return this.getStringAttribute('y_shear');
  }
  public set yShear(value: string) {
    this._yShear = value;
  }
  public resetYShear() {
    this._yShear = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get yShearInput() {
    return this._yShear;
  }

  // y_shear_var - computed: false, optional: true, required: false
  private _yShearVar?: string; 
  public get yShearVar() {
    return this.getStringAttribute('y_shear_var');
  }
  public set yShearVar(value: string) {
    this._yShearVar = value;
  }
  public resetYShearVar() {
    this._yShearVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get yShearVarInput() {
    return this._yShearVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationShearList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationShear[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationShearOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationShearOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationSmartCrop {
  /**
  * When enabled, the SmartCrop transformation doesn't actually execute. Instead, it outlines found faces or features, the region of interest, and the crop area.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#debug DataAkamaiImagingPolicyImage#debug}
  */
  readonly debug?: string;
  /**
  * When enabled, the SmartCrop transformation doesn't actually execute. Instead, it outlines found faces or features, the region of interest, and the crop area.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#debug_var DataAkamaiImagingPolicyImage#debug_var}
  */
  readonly debugVar?: string;
  /**
  * The height in pixels of the output image relative to the specified `style` value.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#height DataAkamaiImagingPolicyImage#height}
  */
  readonly height?: string;
  /**
  * The height in pixels of the output image relative to the specified `style` value.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#height_var DataAkamaiImagingPolicyImage#height_var}
  */
  readonly heightVar?: string;
  /**
  * Whether to sacrifice any image fidelity for transformation performance.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#sloppy DataAkamaiImagingPolicyImage#sloppy}
  */
  readonly sloppy?: string;
  /**
  * Whether to sacrifice any image fidelity for transformation performance.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#sloppy_var DataAkamaiImagingPolicyImage#sloppy_var}
  */
  readonly sloppyVar?: string;
  /**
  * Specifies how to crop or scale a crop area for the specified area of interest in the source image, `fill` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` places raw crop around the point of interest.  A value of `fill` scales the crop area to include as much of the image and point of interest as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the point of interest, relative to the specified `width` and `height` values.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#style DataAkamaiImagingPolicyImage#style}
  */
  readonly style?: string;
  /**
  * Specifies how to crop or scale a crop area for the specified area of interest in the source image, `fill` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` places raw crop around the point of interest.  A value of `fill` scales the crop area to include as much of the image and point of interest as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the point of interest, relative to the specified `width` and `height` values.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#style_var DataAkamaiImagingPolicyImage#style_var}
  */
  readonly styleVar?: string;
  /**
  * The width in pixels of the output image relative to the specified `style` value.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#width DataAkamaiImagingPolicyImage#width}
  */
  readonly width?: string;
  /**
  * The width in pixels of the output image relative to the specified `style` value.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#width_var DataAkamaiImagingPolicyImage#width_var}
  */
  readonly widthVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationSmartCropToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationSmartCrop | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    debug: cdktf.stringToTerraform(struct!.debug),
    debug_var: cdktf.stringToTerraform(struct!.debugVar),
    height: cdktf.stringToTerraform(struct!.height),
    height_var: cdktf.stringToTerraform(struct!.heightVar),
    sloppy: cdktf.stringToTerraform(struct!.sloppy),
    sloppy_var: cdktf.stringToTerraform(struct!.sloppyVar),
    style: cdktf.stringToTerraform(struct!.style),
    style_var: cdktf.stringToTerraform(struct!.styleVar),
    width: cdktf.stringToTerraform(struct!.width),
    width_var: cdktf.stringToTerraform(struct!.widthVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationSmartCropToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationSmartCrop | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    debug: {
      value: cdktf.stringToHclTerraform(struct!.debug),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    debug_var: {
      value: cdktf.stringToHclTerraform(struct!.debugVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    height: {
      value: cdktf.stringToHclTerraform(struct!.height),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    height_var: {
      value: cdktf.stringToHclTerraform(struct!.heightVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    sloppy: {
      value: cdktf.stringToHclTerraform(struct!.sloppy),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    sloppy_var: {
      value: cdktf.stringToHclTerraform(struct!.sloppyVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    style: {
      value: cdktf.stringToHclTerraform(struct!.style),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    style_var: {
      value: cdktf.stringToHclTerraform(struct!.styleVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    width: {
      value: cdktf.stringToHclTerraform(struct!.width),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    width_var: {
      value: cdktf.stringToHclTerraform(struct!.widthVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationSmartCropOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationSmartCrop | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._debug !== undefined) {
      hasAnyValues = true;
      internalValueResult.debug = this._debug;
    }
    if (this._debugVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.debugVar = this._debugVar;
    }
    if (this._height !== undefined) {
      hasAnyValues = true;
      internalValueResult.height = this._height;
    }
    if (this._heightVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.heightVar = this._heightVar;
    }
    if (this._sloppy !== undefined) {
      hasAnyValues = true;
      internalValueResult.sloppy = this._sloppy;
    }
    if (this._sloppyVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.sloppyVar = this._sloppyVar;
    }
    if (this._style !== undefined) {
      hasAnyValues = true;
      internalValueResult.style = this._style;
    }
    if (this._styleVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.styleVar = this._styleVar;
    }
    if (this._width !== undefined) {
      hasAnyValues = true;
      internalValueResult.width = this._width;
    }
    if (this._widthVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.widthVar = this._widthVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationSmartCrop | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._debug = undefined;
      this._debugVar = undefined;
      this._height = undefined;
      this._heightVar = undefined;
      this._sloppy = undefined;
      this._sloppyVar = undefined;
      this._style = undefined;
      this._styleVar = undefined;
      this._width = undefined;
      this._widthVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._debug = value.debug;
      this._debugVar = value.debugVar;
      this._height = value.height;
      this._heightVar = value.heightVar;
      this._sloppy = value.sloppy;
      this._sloppyVar = value.sloppyVar;
      this._style = value.style;
      this._styleVar = value.styleVar;
      this._width = value.width;
      this._widthVar = value.widthVar;
    }
  }

  // debug - computed: false, optional: true, required: false
  private _debug?: string; 
  public get debug() {
    return this.getStringAttribute('debug');
  }
  public set debug(value: string) {
    this._debug = value;
  }
  public resetDebug() {
    this._debug = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get debugInput() {
    return this._debug;
  }

  // debug_var - computed: false, optional: true, required: false
  private _debugVar?: string; 
  public get debugVar() {
    return this.getStringAttribute('debug_var');
  }
  public set debugVar(value: string) {
    this._debugVar = value;
  }
  public resetDebugVar() {
    this._debugVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get debugVarInput() {
    return this._debugVar;
  }

  // height - computed: false, optional: true, required: false
  private _height?: string; 
  public get height() {
    return this.getStringAttribute('height');
  }
  public set height(value: string) {
    this._height = value;
  }
  public resetHeight() {
    this._height = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get heightInput() {
    return this._height;
  }

  // height_var - computed: false, optional: true, required: false
  private _heightVar?: string; 
  public get heightVar() {
    return this.getStringAttribute('height_var');
  }
  public set heightVar(value: string) {
    this._heightVar = value;
  }
  public resetHeightVar() {
    this._heightVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get heightVarInput() {
    return this._heightVar;
  }

  // sloppy - computed: false, optional: true, required: false
  private _sloppy?: string; 
  public get sloppy() {
    return this.getStringAttribute('sloppy');
  }
  public set sloppy(value: string) {
    this._sloppy = value;
  }
  public resetSloppy() {
    this._sloppy = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get sloppyInput() {
    return this._sloppy;
  }

  // sloppy_var - computed: false, optional: true, required: false
  private _sloppyVar?: string; 
  public get sloppyVar() {
    return this.getStringAttribute('sloppy_var');
  }
  public set sloppyVar(value: string) {
    this._sloppyVar = value;
  }
  public resetSloppyVar() {
    this._sloppyVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get sloppyVarInput() {
    return this._sloppyVar;
  }

  // style - computed: false, optional: true, required: false
  private _style?: string; 
  public get style() {
    return this.getStringAttribute('style');
  }
  public set style(value: string) {
    this._style = value;
  }
  public resetStyle() {
    this._style = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get styleInput() {
    return this._style;
  }

  // style_var - computed: false, optional: true, required: false
  private _styleVar?: string; 
  public get styleVar() {
    return this.getStringAttribute('style_var');
  }
  public set styleVar(value: string) {
    this._styleVar = value;
  }
  public resetStyleVar() {
    this._styleVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get styleVarInput() {
    return this._styleVar;
  }

  // width - computed: false, optional: true, required: false
  private _width?: string; 
  public get width() {
    return this.getStringAttribute('width');
  }
  public set width(value: string) {
    this._width = value;
  }
  public resetWidth() {
    this._width = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get widthInput() {
    return this._width;
  }

  // width_var - computed: false, optional: true, required: false
  private _widthVar?: string; 
  public get widthVar() {
    return this.getStringAttribute('width_var');
  }
  public set widthVar(value: string) {
    this._widthVar = value;
  }
  public resetWidthVar() {
    this._widthVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get widthVarInput() {
    return this._widthVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationSmartCropList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationSmartCrop[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationSmartCropOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationSmartCropOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationTrim {
  /**
  * The fuzz tolerance of the trim, a value between `0` and `1` that determines the acceptable amount of background variation before trimming stops.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#fuzz DataAkamaiImagingPolicyImage#fuzz}
  */
  readonly fuzz?: string;
  /**
  * The fuzz tolerance of the trim, a value between `0` and `1` that determines the acceptable amount of background variation before trimming stops.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#fuzz_var DataAkamaiImagingPolicyImage#fuzz_var}
  */
  readonly fuzzVar?: string;
  /**
  * The amount of padding in pixels to add to the trimmed image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#padding DataAkamaiImagingPolicyImage#padding}
  */
  readonly padding?: string;
  /**
  * The amount of padding in pixels to add to the trimmed image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#padding_var DataAkamaiImagingPolicyImage#padding_var}
  */
  readonly paddingVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationTrimToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationTrim | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    fuzz: cdktf.stringToTerraform(struct!.fuzz),
    fuzz_var: cdktf.stringToTerraform(struct!.fuzzVar),
    padding: cdktf.stringToTerraform(struct!.padding),
    padding_var: cdktf.stringToTerraform(struct!.paddingVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationTrimToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationTrim | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    fuzz: {
      value: cdktf.stringToHclTerraform(struct!.fuzz),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    fuzz_var: {
      value: cdktf.stringToHclTerraform(struct!.fuzzVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    padding: {
      value: cdktf.stringToHclTerraform(struct!.padding),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    padding_var: {
      value: cdktf.stringToHclTerraform(struct!.paddingVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationTrimOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationTrim | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._fuzz !== undefined) {
      hasAnyValues = true;
      internalValueResult.fuzz = this._fuzz;
    }
    if (this._fuzzVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.fuzzVar = this._fuzzVar;
    }
    if (this._padding !== undefined) {
      hasAnyValues = true;
      internalValueResult.padding = this._padding;
    }
    if (this._paddingVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.paddingVar = this._paddingVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationTrim | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._fuzz = undefined;
      this._fuzzVar = undefined;
      this._padding = undefined;
      this._paddingVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._fuzz = value.fuzz;
      this._fuzzVar = value.fuzzVar;
      this._padding = value.padding;
      this._paddingVar = value.paddingVar;
    }
  }

  // fuzz - computed: false, optional: true, required: false
  private _fuzz?: string; 
  public get fuzz() {
    return this.getStringAttribute('fuzz');
  }
  public set fuzz(value: string) {
    this._fuzz = value;
  }
  public resetFuzz() {
    this._fuzz = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get fuzzInput() {
    return this._fuzz;
  }

  // fuzz_var - computed: false, optional: true, required: false
  private _fuzzVar?: string; 
  public get fuzzVar() {
    return this.getStringAttribute('fuzz_var');
  }
  public set fuzzVar(value: string) {
    this._fuzzVar = value;
  }
  public resetFuzzVar() {
    this._fuzzVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get fuzzVarInput() {
    return this._fuzzVar;
  }

  // padding - computed: false, optional: true, required: false
  private _padding?: string; 
  public get padding() {
    return this.getStringAttribute('padding');
  }
  public set padding(value: string) {
    this._padding = value;
  }
  public resetPadding() {
    this._padding = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get paddingInput() {
    return this._padding;
  }

  // padding_var - computed: false, optional: true, required: false
  private _paddingVar?: string; 
  public get paddingVar() {
    return this.getStringAttribute('padding_var');
  }
  public set paddingVar(value: string) {
    this._paddingVar = value;
  }
  public resetPaddingVar() {
    this._paddingVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get paddingVarInput() {
    return this._paddingVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationTrimList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationTrim[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationTrimOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationTrimOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationUnsharpMask {
  /**
  * Set how much emphasis the filter applies to details. Higher values increase apparent sharpness of details.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#gain DataAkamaiImagingPolicyImage#gain}
  */
  readonly gain?: string;
  /**
  * Set how much emphasis the filter applies to details. Higher values increase apparent sharpness of details.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#gain_var DataAkamaiImagingPolicyImage#gain_var}
  */
  readonly gainVar?: string;
  /**
  * The standard deviation of the Gaussian distribution used in the in unsharp mask, measured in pixels, `1.0` by default. High values emphasize large details and low values emphasize small details.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#sigma DataAkamaiImagingPolicyImage#sigma}
  */
  readonly sigma?: string;
  /**
  * The standard deviation of the Gaussian distribution used in the in unsharp mask, measured in pixels, `1.0` by default. High values emphasize large details and low values emphasize small details.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#sigma_var DataAkamaiImagingPolicyImage#sigma_var}
  */
  readonly sigmaVar?: string;
  /**
  * Set the minimum change required to include a detail in the filter. Higher values discard more changes.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#threshold DataAkamaiImagingPolicyImage#threshold}
  */
  readonly threshold?: string;
  /**
  * Set the minimum change required to include a detail in the filter. Higher values discard more changes.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#threshold_var DataAkamaiImagingPolicyImage#threshold_var}
  */
  readonly thresholdVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationUnsharpMaskToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationUnsharpMask | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    gain: cdktf.stringToTerraform(struct!.gain),
    gain_var: cdktf.stringToTerraform(struct!.gainVar),
    sigma: cdktf.stringToTerraform(struct!.sigma),
    sigma_var: cdktf.stringToTerraform(struct!.sigmaVar),
    threshold: cdktf.stringToTerraform(struct!.threshold),
    threshold_var: cdktf.stringToTerraform(struct!.thresholdVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationUnsharpMaskToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationUnsharpMask | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    gain: {
      value: cdktf.stringToHclTerraform(struct!.gain),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    gain_var: {
      value: cdktf.stringToHclTerraform(struct!.gainVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    sigma: {
      value: cdktf.stringToHclTerraform(struct!.sigma),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    sigma_var: {
      value: cdktf.stringToHclTerraform(struct!.sigmaVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    threshold: {
      value: cdktf.stringToHclTerraform(struct!.threshold),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    threshold_var: {
      value: cdktf.stringToHclTerraform(struct!.thresholdVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationUnsharpMaskOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationUnsharpMask | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._gain !== undefined) {
      hasAnyValues = true;
      internalValueResult.gain = this._gain;
    }
    if (this._gainVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.gainVar = this._gainVar;
    }
    if (this._sigma !== undefined) {
      hasAnyValues = true;
      internalValueResult.sigma = this._sigma;
    }
    if (this._sigmaVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.sigmaVar = this._sigmaVar;
    }
    if (this._threshold !== undefined) {
      hasAnyValues = true;
      internalValueResult.threshold = this._threshold;
    }
    if (this._thresholdVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.thresholdVar = this._thresholdVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationUnsharpMask | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._gain = undefined;
      this._gainVar = undefined;
      this._sigma = undefined;
      this._sigmaVar = undefined;
      this._threshold = undefined;
      this._thresholdVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._gain = value.gain;
      this._gainVar = value.gainVar;
      this._sigma = value.sigma;
      this._sigmaVar = value.sigmaVar;
      this._threshold = value.threshold;
      this._thresholdVar = value.thresholdVar;
    }
  }

  // gain - computed: false, optional: true, required: false
  private _gain?: string; 
  public get gain() {
    return this.getStringAttribute('gain');
  }
  public set gain(value: string) {
    this._gain = value;
  }
  public resetGain() {
    this._gain = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get gainInput() {
    return this._gain;
  }

  // gain_var - computed: false, optional: true, required: false
  private _gainVar?: string; 
  public get gainVar() {
    return this.getStringAttribute('gain_var');
  }
  public set gainVar(value: string) {
    this._gainVar = value;
  }
  public resetGainVar() {
    this._gainVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get gainVarInput() {
    return this._gainVar;
  }

  // sigma - computed: false, optional: true, required: false
  private _sigma?: string; 
  public get sigma() {
    return this.getStringAttribute('sigma');
  }
  public set sigma(value: string) {
    this._sigma = value;
  }
  public resetSigma() {
    this._sigma = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get sigmaInput() {
    return this._sigma;
  }

  // sigma_var - computed: false, optional: true, required: false
  private _sigmaVar?: string; 
  public get sigmaVar() {
    return this.getStringAttribute('sigma_var');
  }
  public set sigmaVar(value: string) {
    this._sigmaVar = value;
  }
  public resetSigmaVar() {
    this._sigmaVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get sigmaVarInput() {
    return this._sigmaVar;
  }

  // threshold - computed: false, optional: true, required: false
  private _threshold?: string; 
  public get threshold() {
    return this.getStringAttribute('threshold');
  }
  public set threshold(value: string) {
    this._threshold = value;
  }
  public resetThreshold() {
    this._threshold = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get thresholdInput() {
    return this._threshold;
  }

  // threshold_var - computed: false, optional: true, required: false
  private _thresholdVar?: string; 
  public get thresholdVar() {
    return this.getStringAttribute('threshold_var');
  }
  public set thresholdVar(value: string) {
    this._thresholdVar = value;
  }
  public resetThresholdVar() {
    this._thresholdVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get thresholdVarInput() {
    return this._thresholdVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationUnsharpMaskList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationUnsharpMask[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationUnsharpMaskOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationUnsharpMaskOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformation {
  /**
  * append block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#append DataAkamaiImagingPolicyImage#append}
  */
  readonly append?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationAppend[] | cdktf.IResolvable;
  /**
  * aspect_crop block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#aspect_crop DataAkamaiImagingPolicyImage#aspect_crop}
  */
  readonly aspectCrop?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationAspectCrop[] | cdktf.IResolvable;
  /**
  * background_color block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#background_color DataAkamaiImagingPolicyImage#background_color}
  */
  readonly backgroundColor?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationBackgroundColor[] | cdktf.IResolvable;
  /**
  * blur block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#blur DataAkamaiImagingPolicyImage#blur}
  */
  readonly blur?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationBlur[] | cdktf.IResolvable;
  /**
  * chroma_key block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#chroma_key DataAkamaiImagingPolicyImage#chroma_key}
  */
  readonly chromaKey?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationChromaKey[] | cdktf.IResolvable;
  /**
  * composite block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#composite DataAkamaiImagingPolicyImage#composite}
  */
  readonly composite?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationComposite[] | cdktf.IResolvable;
  /**
  * compound block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#compound DataAkamaiImagingPolicyImage#compound}
  */
  readonly compound?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationCompound[] | cdktf.IResolvable;
  /**
  * contrast block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#contrast DataAkamaiImagingPolicyImage#contrast}
  */
  readonly contrast?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationContrast[] | cdktf.IResolvable;
  /**
  * crop block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#crop DataAkamaiImagingPolicyImage#crop}
  */
  readonly crop?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationCrop[] | cdktf.IResolvable;
  /**
  * face_crop block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#face_crop DataAkamaiImagingPolicyImage#face_crop}
  */
  readonly faceCrop?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationFaceCrop[] | cdktf.IResolvable;
  /**
  * feature_crop block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#feature_crop DataAkamaiImagingPolicyImage#feature_crop}
  */
  readonly featureCrop?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationFeatureCrop[] | cdktf.IResolvable;
  /**
  * fit_and_fill block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#fit_and_fill DataAkamaiImagingPolicyImage#fit_and_fill}
  */
  readonly fitAndFill?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationFitAndFill[] | cdktf.IResolvable;
  /**
  * goop block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#goop DataAkamaiImagingPolicyImage#goop}
  */
  readonly goop?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationGoop[] | cdktf.IResolvable;
  /**
  * grayscale block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#grayscale DataAkamaiImagingPolicyImage#grayscale}
  */
  readonly grayscale?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationGrayscale[] | cdktf.IResolvable;
  /**
  * hsl block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hsl DataAkamaiImagingPolicyImage#hsl}
  */
  readonly hsl?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationHsl[] | cdktf.IResolvable;
  /**
  * hsv block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hsv DataAkamaiImagingPolicyImage#hsv}
  */
  readonly hsv?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationHsv[] | cdktf.IResolvable;
  /**
  * if_dimension block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#if_dimension DataAkamaiImagingPolicyImage#if_dimension}
  */
  readonly ifDimension?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfDimension[] | cdktf.IResolvable;
  /**
  * if_orientation block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#if_orientation DataAkamaiImagingPolicyImage#if_orientation}
  */
  readonly ifOrientation?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfOrientation[] | cdktf.IResolvable;
  /**
  * im_query block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#im_query DataAkamaiImagingPolicyImage#im_query}
  */
  readonly imQuery?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationImQuery[] | cdktf.IResolvable;
  /**
  * max_colors block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#max_colors DataAkamaiImagingPolicyImage#max_colors}
  */
  readonly maxColors?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationMaxColors[] | cdktf.IResolvable;
  /**
  * mirror block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#mirror DataAkamaiImagingPolicyImage#mirror}
  */
  readonly mirror?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationMirror[] | cdktf.IResolvable;
  /**
  * mono_hue block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#mono_hue DataAkamaiImagingPolicyImage#mono_hue}
  */
  readonly monoHue?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationMonoHue[] | cdktf.IResolvable;
  /**
  * opacity block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#opacity DataAkamaiImagingPolicyImage#opacity}
  */
  readonly opacity?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationOpacity[] | cdktf.IResolvable;
  /**
  * region_of_interest_crop block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#region_of_interest_crop DataAkamaiImagingPolicyImage#region_of_interest_crop}
  */
  readonly regionOfInterestCrop?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRegionOfInterestCrop[] | cdktf.IResolvable;
  /**
  * relative_crop block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#relative_crop DataAkamaiImagingPolicyImage#relative_crop}
  */
  readonly relativeCrop?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRelativeCrop[] | cdktf.IResolvable;
  /**
  * remove_color block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#remove_color DataAkamaiImagingPolicyImage#remove_color}
  */
  readonly removeColor?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRemoveColor[] | cdktf.IResolvable;
  /**
  * resize block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#resize DataAkamaiImagingPolicyImage#resize}
  */
  readonly resize?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationResize[] | cdktf.IResolvable;
  /**
  * rotate block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#rotate DataAkamaiImagingPolicyImage#rotate}
  */
  readonly rotate?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRotate[] | cdktf.IResolvable;
  /**
  * scale block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#scale DataAkamaiImagingPolicyImage#scale}
  */
  readonly scale?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationScale[] | cdktf.IResolvable;
  /**
  * shear block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#shear DataAkamaiImagingPolicyImage#shear}
  */
  readonly shear?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationShear[] | cdktf.IResolvable;
  /**
  * smart_crop block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#smart_crop DataAkamaiImagingPolicyImage#smart_crop}
  */
  readonly smartCrop?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationSmartCrop[] | cdktf.IResolvable;
  /**
  * trim block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#trim DataAkamaiImagingPolicyImage#trim}
  */
  readonly trim?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationTrim[] | cdktf.IResolvable;
  /**
  * unsharp_mask block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#unsharp_mask DataAkamaiImagingPolicyImage#unsharp_mask}
  */
  readonly unsharpMask?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationUnsharpMask[] | cdktf.IResolvable;
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationOutputReference | DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformation): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    append: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationAppendToTerraform, true)(struct!.append),
    aspect_crop: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationAspectCropToTerraform, true)(struct!.aspectCrop),
    background_color: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationBackgroundColorToTerraform, true)(struct!.backgroundColor),
    blur: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationBlurToTerraform, true)(struct!.blur),
    chroma_key: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationChromaKeyToTerraform, true)(struct!.chromaKey),
    composite: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationCompositeToTerraform, true)(struct!.composite),
    compound: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationCompoundToTerraform, true)(struct!.compound),
    contrast: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationContrastToTerraform, true)(struct!.contrast),
    crop: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationCropToTerraform, true)(struct!.crop),
    face_crop: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationFaceCropToTerraform, true)(struct!.faceCrop),
    feature_crop: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationFeatureCropToTerraform, true)(struct!.featureCrop),
    fit_and_fill: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationFitAndFillToTerraform, true)(struct!.fitAndFill),
    goop: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationGoopToTerraform, true)(struct!.goop),
    grayscale: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationGrayscaleToTerraform, true)(struct!.grayscale),
    hsl: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationHslToTerraform, true)(struct!.hsl),
    hsv: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationHsvToTerraform, true)(struct!.hsv),
    if_dimension: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfDimensionToTerraform, true)(struct!.ifDimension),
    if_orientation: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfOrientationToTerraform, true)(struct!.ifOrientation),
    im_query: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationImQueryToTerraform, true)(struct!.imQuery),
    max_colors: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationMaxColorsToTerraform, true)(struct!.maxColors),
    mirror: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationMirrorToTerraform, true)(struct!.mirror),
    mono_hue: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationMonoHueToTerraform, true)(struct!.monoHue),
    opacity: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationOpacityToTerraform, true)(struct!.opacity),
    region_of_interest_crop: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRegionOfInterestCropToTerraform, true)(struct!.regionOfInterestCrop),
    relative_crop: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRelativeCropToTerraform, true)(struct!.relativeCrop),
    remove_color: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRemoveColorToTerraform, true)(struct!.removeColor),
    resize: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationResizeToTerraform, true)(struct!.resize),
    rotate: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRotateToTerraform, true)(struct!.rotate),
    scale: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationScaleToTerraform, true)(struct!.scale),
    shear: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationShearToTerraform, true)(struct!.shear),
    smart_crop: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationSmartCropToTerraform, true)(struct!.smartCrop),
    trim: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationTrimToTerraform, true)(struct!.trim),
    unsharp_mask: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationUnsharpMaskToTerraform, true)(struct!.unsharpMask),
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationOutputReference | DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformation): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    append: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationAppendToHclTerraform, true)(struct!.append),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationAppendList",
    },
    aspect_crop: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationAspectCropToHclTerraform, true)(struct!.aspectCrop),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationAspectCropList",
    },
    background_color: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationBackgroundColorToHclTerraform, true)(struct!.backgroundColor),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationBackgroundColorList",
    },
    blur: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationBlurToHclTerraform, true)(struct!.blur),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationBlurList",
    },
    chroma_key: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationChromaKeyToHclTerraform, true)(struct!.chromaKey),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationChromaKeyList",
    },
    composite: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationCompositeToHclTerraform, true)(struct!.composite),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationCompositeList",
    },
    compound: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationCompoundToHclTerraform, true)(struct!.compound),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationCompoundList",
    },
    contrast: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationContrastToHclTerraform, true)(struct!.contrast),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationContrastList",
    },
    crop: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationCropToHclTerraform, true)(struct!.crop),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationCropList",
    },
    face_crop: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationFaceCropToHclTerraform, true)(struct!.faceCrop),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationFaceCropList",
    },
    feature_crop: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationFeatureCropToHclTerraform, true)(struct!.featureCrop),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationFeatureCropList",
    },
    fit_and_fill: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationFitAndFillToHclTerraform, true)(struct!.fitAndFill),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationFitAndFillList",
    },
    goop: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationGoopToHclTerraform, true)(struct!.goop),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationGoopList",
    },
    grayscale: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationGrayscaleToHclTerraform, true)(struct!.grayscale),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationGrayscaleList",
    },
    hsl: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationHslToHclTerraform, true)(struct!.hsl),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationHslList",
    },
    hsv: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationHsvToHclTerraform, true)(struct!.hsv),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationHsvList",
    },
    if_dimension: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfDimensionToHclTerraform, true)(struct!.ifDimension),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfDimensionList",
    },
    if_orientation: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfOrientationToHclTerraform, true)(struct!.ifOrientation),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfOrientationList",
    },
    im_query: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationImQueryToHclTerraform, true)(struct!.imQuery),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationImQueryList",
    },
    max_colors: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationMaxColorsToHclTerraform, true)(struct!.maxColors),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationMaxColorsList",
    },
    mirror: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationMirrorToHclTerraform, true)(struct!.mirror),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationMirrorList",
    },
    mono_hue: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationMonoHueToHclTerraform, true)(struct!.monoHue),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationMonoHueList",
    },
    opacity: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationOpacityToHclTerraform, true)(struct!.opacity),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationOpacityList",
    },
    region_of_interest_crop: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRegionOfInterestCropToHclTerraform, true)(struct!.regionOfInterestCrop),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRegionOfInterestCropList",
    },
    relative_crop: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRelativeCropToHclTerraform, true)(struct!.relativeCrop),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRelativeCropList",
    },
    remove_color: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRemoveColorToHclTerraform, true)(struct!.removeColor),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRemoveColorList",
    },
    resize: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationResizeToHclTerraform, true)(struct!.resize),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationResizeList",
    },
    rotate: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRotateToHclTerraform, true)(struct!.rotate),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRotateList",
    },
    scale: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationScaleToHclTerraform, true)(struct!.scale),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationScaleList",
    },
    shear: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationShearToHclTerraform, true)(struct!.shear),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationShearList",
    },
    smart_crop: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationSmartCropToHclTerraform, true)(struct!.smartCrop),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationSmartCropList",
    },
    trim: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationTrimToHclTerraform, true)(struct!.trim),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationTrimList",
    },
    unsharp_mask: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationUnsharpMaskToHclTerraform, true)(struct!.unsharpMask),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationUnsharpMaskList",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false, 0);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformation | undefined {
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._append?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.append = this._append?.internalValue;
    }
    if (this._aspectCrop?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.aspectCrop = this._aspectCrop?.internalValue;
    }
    if (this._backgroundColor?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.backgroundColor = this._backgroundColor?.internalValue;
    }
    if (this._blur?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.blur = this._blur?.internalValue;
    }
    if (this._chromaKey?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.chromaKey = this._chromaKey?.internalValue;
    }
    if (this._composite?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.composite = this._composite?.internalValue;
    }
    if (this._compound?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.compound = this._compound?.internalValue;
    }
    if (this._contrast?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.contrast = this._contrast?.internalValue;
    }
    if (this._crop?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.crop = this._crop?.internalValue;
    }
    if (this._faceCrop?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.faceCrop = this._faceCrop?.internalValue;
    }
    if (this._featureCrop?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.featureCrop = this._featureCrop?.internalValue;
    }
    if (this._fitAndFill?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.fitAndFill = this._fitAndFill?.internalValue;
    }
    if (this._goop?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.goop = this._goop?.internalValue;
    }
    if (this._grayscale?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.grayscale = this._grayscale?.internalValue;
    }
    if (this._hsl?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.hsl = this._hsl?.internalValue;
    }
    if (this._hsv?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.hsv = this._hsv?.internalValue;
    }
    if (this._ifDimension?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.ifDimension = this._ifDimension?.internalValue;
    }
    if (this._ifOrientation?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.ifOrientation = this._ifOrientation?.internalValue;
    }
    if (this._imQuery?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.imQuery = this._imQuery?.internalValue;
    }
    if (this._maxColors?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.maxColors = this._maxColors?.internalValue;
    }
    if (this._mirror?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.mirror = this._mirror?.internalValue;
    }
    if (this._monoHue?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.monoHue = this._monoHue?.internalValue;
    }
    if (this._opacity?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.opacity = this._opacity?.internalValue;
    }
    if (this._regionOfInterestCrop?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.regionOfInterestCrop = this._regionOfInterestCrop?.internalValue;
    }
    if (this._relativeCrop?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.relativeCrop = this._relativeCrop?.internalValue;
    }
    if (this._removeColor?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.removeColor = this._removeColor?.internalValue;
    }
    if (this._resize?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.resize = this._resize?.internalValue;
    }
    if (this._rotate?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.rotate = this._rotate?.internalValue;
    }
    if (this._scale?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.scale = this._scale?.internalValue;
    }
    if (this._shear?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.shear = this._shear?.internalValue;
    }
    if (this._smartCrop?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.smartCrop = this._smartCrop?.internalValue;
    }
    if (this._trim?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.trim = this._trim?.internalValue;
    }
    if (this._unsharpMask?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.unsharpMask = this._unsharpMask?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformation | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this._append.internalValue = undefined;
      this._aspectCrop.internalValue = undefined;
      this._backgroundColor.internalValue = undefined;
      this._blur.internalValue = undefined;
      this._chromaKey.internalValue = undefined;
      this._composite.internalValue = undefined;
      this._compound.internalValue = undefined;
      this._contrast.internalValue = undefined;
      this._crop.internalValue = undefined;
      this._faceCrop.internalValue = undefined;
      this._featureCrop.internalValue = undefined;
      this._fitAndFill.internalValue = undefined;
      this._goop.internalValue = undefined;
      this._grayscale.internalValue = undefined;
      this._hsl.internalValue = undefined;
      this._hsv.internalValue = undefined;
      this._ifDimension.internalValue = undefined;
      this._ifOrientation.internalValue = undefined;
      this._imQuery.internalValue = undefined;
      this._maxColors.internalValue = undefined;
      this._mirror.internalValue = undefined;
      this._monoHue.internalValue = undefined;
      this._opacity.internalValue = undefined;
      this._regionOfInterestCrop.internalValue = undefined;
      this._relativeCrop.internalValue = undefined;
      this._removeColor.internalValue = undefined;
      this._resize.internalValue = undefined;
      this._rotate.internalValue = undefined;
      this._scale.internalValue = undefined;
      this._shear.internalValue = undefined;
      this._smartCrop.internalValue = undefined;
      this._trim.internalValue = undefined;
      this._unsharpMask.internalValue = undefined;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this._append.internalValue = value.append;
      this._aspectCrop.internalValue = value.aspectCrop;
      this._backgroundColor.internalValue = value.backgroundColor;
      this._blur.internalValue = value.blur;
      this._chromaKey.internalValue = value.chromaKey;
      this._composite.internalValue = value.composite;
      this._compound.internalValue = value.compound;
      this._contrast.internalValue = value.contrast;
      this._crop.internalValue = value.crop;
      this._faceCrop.internalValue = value.faceCrop;
      this._featureCrop.internalValue = value.featureCrop;
      this._fitAndFill.internalValue = value.fitAndFill;
      this._goop.internalValue = value.goop;
      this._grayscale.internalValue = value.grayscale;
      this._hsl.internalValue = value.hsl;
      this._hsv.internalValue = value.hsv;
      this._ifDimension.internalValue = value.ifDimension;
      this._ifOrientation.internalValue = value.ifOrientation;
      this._imQuery.internalValue = value.imQuery;
      this._maxColors.internalValue = value.maxColors;
      this._mirror.internalValue = value.mirror;
      this._monoHue.internalValue = value.monoHue;
      this._opacity.internalValue = value.opacity;
      this._regionOfInterestCrop.internalValue = value.regionOfInterestCrop;
      this._relativeCrop.internalValue = value.relativeCrop;
      this._removeColor.internalValue = value.removeColor;
      this._resize.internalValue = value.resize;
      this._rotate.internalValue = value.rotate;
      this._scale.internalValue = value.scale;
      this._shear.internalValue = value.shear;
      this._smartCrop.internalValue = value.smartCrop;
      this._trim.internalValue = value.trim;
      this._unsharpMask.internalValue = value.unsharpMask;
    }
  }

  // append - computed: false, optional: true, required: false
  private _append = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationAppendList(this, "append", false);
  public get append() {
    return this._append;
  }
  public putAppend(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationAppend[] | cdktf.IResolvable) {
    this._append.internalValue = value;
  }
  public resetAppend() {
    this._append.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get appendInput() {
    return this._append.internalValue;
  }

  // aspect_crop - computed: false, optional: true, required: false
  private _aspectCrop = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationAspectCropList(this, "aspect_crop", false);
  public get aspectCrop() {
    return this._aspectCrop;
  }
  public putAspectCrop(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationAspectCrop[] | cdktf.IResolvable) {
    this._aspectCrop.internalValue = value;
  }
  public resetAspectCrop() {
    this._aspectCrop.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get aspectCropInput() {
    return this._aspectCrop.internalValue;
  }

  // background_color - computed: false, optional: true, required: false
  private _backgroundColor = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationBackgroundColorList(this, "background_color", false);
  public get backgroundColor() {
    return this._backgroundColor;
  }
  public putBackgroundColor(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationBackgroundColor[] | cdktf.IResolvable) {
    this._backgroundColor.internalValue = value;
  }
  public resetBackgroundColor() {
    this._backgroundColor.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get backgroundColorInput() {
    return this._backgroundColor.internalValue;
  }

  // blur - computed: false, optional: true, required: false
  private _blur = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationBlurList(this, "blur", false);
  public get blur() {
    return this._blur;
  }
  public putBlur(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationBlur[] | cdktf.IResolvable) {
    this._blur.internalValue = value;
  }
  public resetBlur() {
    this._blur.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get blurInput() {
    return this._blur.internalValue;
  }

  // chroma_key - computed: false, optional: true, required: false
  private _chromaKey = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationChromaKeyList(this, "chroma_key", false);
  public get chromaKey() {
    return this._chromaKey;
  }
  public putChromaKey(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationChromaKey[] | cdktf.IResolvable) {
    this._chromaKey.internalValue = value;
  }
  public resetChromaKey() {
    this._chromaKey.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get chromaKeyInput() {
    return this._chromaKey.internalValue;
  }

  // composite - computed: false, optional: true, required: false
  private _composite = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationCompositeList(this, "composite", false);
  public get composite() {
    return this._composite;
  }
  public putComposite(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationComposite[] | cdktf.IResolvable) {
    this._composite.internalValue = value;
  }
  public resetComposite() {
    this._composite.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get compositeInput() {
    return this._composite.internalValue;
  }

  // compound - computed: false, optional: true, required: false
  private _compound = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationCompoundList(this, "compound", false);
  public get compound() {
    return this._compound;
  }
  public putCompound(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationCompound[] | cdktf.IResolvable) {
    this._compound.internalValue = value;
  }
  public resetCompound() {
    this._compound.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get compoundInput() {
    return this._compound.internalValue;
  }

  // contrast - computed: false, optional: true, required: false
  private _contrast = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationContrastList(this, "contrast", false);
  public get contrast() {
    return this._contrast;
  }
  public putContrast(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationContrast[] | cdktf.IResolvable) {
    this._contrast.internalValue = value;
  }
  public resetContrast() {
    this._contrast.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get contrastInput() {
    return this._contrast.internalValue;
  }

  // crop - computed: false, optional: true, required: false
  private _crop = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationCropList(this, "crop", false);
  public get crop() {
    return this._crop;
  }
  public putCrop(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationCrop[] | cdktf.IResolvable) {
    this._crop.internalValue = value;
  }
  public resetCrop() {
    this._crop.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get cropInput() {
    return this._crop.internalValue;
  }

  // face_crop - computed: false, optional: true, required: false
  private _faceCrop = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationFaceCropList(this, "face_crop", false);
  public get faceCrop() {
    return this._faceCrop;
  }
  public putFaceCrop(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationFaceCrop[] | cdktf.IResolvable) {
    this._faceCrop.internalValue = value;
  }
  public resetFaceCrop() {
    this._faceCrop.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get faceCropInput() {
    return this._faceCrop.internalValue;
  }

  // feature_crop - computed: false, optional: true, required: false
  private _featureCrop = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationFeatureCropList(this, "feature_crop", false);
  public get featureCrop() {
    return this._featureCrop;
  }
  public putFeatureCrop(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationFeatureCrop[] | cdktf.IResolvable) {
    this._featureCrop.internalValue = value;
  }
  public resetFeatureCrop() {
    this._featureCrop.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get featureCropInput() {
    return this._featureCrop.internalValue;
  }

  // fit_and_fill - computed: false, optional: true, required: false
  private _fitAndFill = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationFitAndFillList(this, "fit_and_fill", false);
  public get fitAndFill() {
    return this._fitAndFill;
  }
  public putFitAndFill(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationFitAndFill[] | cdktf.IResolvable) {
    this._fitAndFill.internalValue = value;
  }
  public resetFitAndFill() {
    this._fitAndFill.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get fitAndFillInput() {
    return this._fitAndFill.internalValue;
  }

  // goop - computed: false, optional: true, required: false
  private _goop = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationGoopList(this, "goop", false);
  public get goop() {
    return this._goop;
  }
  public putGoop(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationGoop[] | cdktf.IResolvable) {
    this._goop.internalValue = value;
  }
  public resetGoop() {
    this._goop.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get goopInput() {
    return this._goop.internalValue;
  }

  // grayscale - computed: false, optional: true, required: false
  private _grayscale = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationGrayscaleList(this, "grayscale", false);
  public get grayscale() {
    return this._grayscale;
  }
  public putGrayscale(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationGrayscale[] | cdktf.IResolvable) {
    this._grayscale.internalValue = value;
  }
  public resetGrayscale() {
    this._grayscale.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get grayscaleInput() {
    return this._grayscale.internalValue;
  }

  // hsl - computed: false, optional: true, required: false
  private _hsl = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationHslList(this, "hsl", false);
  public get hsl() {
    return this._hsl;
  }
  public putHsl(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationHsl[] | cdktf.IResolvable) {
    this._hsl.internalValue = value;
  }
  public resetHsl() {
    this._hsl.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hslInput() {
    return this._hsl.internalValue;
  }

  // hsv - computed: false, optional: true, required: false
  private _hsv = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationHsvList(this, "hsv", false);
  public get hsv() {
    return this._hsv;
  }
  public putHsv(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationHsv[] | cdktf.IResolvable) {
    this._hsv.internalValue = value;
  }
  public resetHsv() {
    this._hsv.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hsvInput() {
    return this._hsv.internalValue;
  }

  // if_dimension - computed: false, optional: true, required: false
  private _ifDimension = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfDimensionList(this, "if_dimension", false);
  public get ifDimension() {
    return this._ifDimension;
  }
  public putIfDimension(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfDimension[] | cdktf.IResolvable) {
    this._ifDimension.internalValue = value;
  }
  public resetIfDimension() {
    this._ifDimension.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get ifDimensionInput() {
    return this._ifDimension.internalValue;
  }

  // if_orientation - computed: false, optional: true, required: false
  private _ifOrientation = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfOrientationList(this, "if_orientation", false);
  public get ifOrientation() {
    return this._ifOrientation;
  }
  public putIfOrientation(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationIfOrientation[] | cdktf.IResolvable) {
    this._ifOrientation.internalValue = value;
  }
  public resetIfOrientation() {
    this._ifOrientation.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get ifOrientationInput() {
    return this._ifOrientation.internalValue;
  }

  // im_query - computed: false, optional: true, required: false
  private _imQuery = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationImQueryList(this, "im_query", false);
  public get imQuery() {
    return this._imQuery;
  }
  public putImQuery(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationImQuery[] | cdktf.IResolvable) {
    this._imQuery.internalValue = value;
  }
  public resetImQuery() {
    this._imQuery.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get imQueryInput() {
    return this._imQuery.internalValue;
  }

  // max_colors - computed: false, optional: true, required: false
  private _maxColors = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationMaxColorsList(this, "max_colors", false);
  public get maxColors() {
    return this._maxColors;
  }
  public putMaxColors(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationMaxColors[] | cdktf.IResolvable) {
    this._maxColors.internalValue = value;
  }
  public resetMaxColors() {
    this._maxColors.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get maxColorsInput() {
    return this._maxColors.internalValue;
  }

  // mirror - computed: false, optional: true, required: false
  private _mirror = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationMirrorList(this, "mirror", false);
  public get mirror() {
    return this._mirror;
  }
  public putMirror(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationMirror[] | cdktf.IResolvable) {
    this._mirror.internalValue = value;
  }
  public resetMirror() {
    this._mirror.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get mirrorInput() {
    return this._mirror.internalValue;
  }

  // mono_hue - computed: false, optional: true, required: false
  private _monoHue = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationMonoHueList(this, "mono_hue", false);
  public get monoHue() {
    return this._monoHue;
  }
  public putMonoHue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationMonoHue[] | cdktf.IResolvable) {
    this._monoHue.internalValue = value;
  }
  public resetMonoHue() {
    this._monoHue.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get monoHueInput() {
    return this._monoHue.internalValue;
  }

  // opacity - computed: false, optional: true, required: false
  private _opacity = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationOpacityList(this, "opacity", false);
  public get opacity() {
    return this._opacity;
  }
  public putOpacity(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationOpacity[] | cdktf.IResolvable) {
    this._opacity.internalValue = value;
  }
  public resetOpacity() {
    this._opacity.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get opacityInput() {
    return this._opacity.internalValue;
  }

  // region_of_interest_crop - computed: false, optional: true, required: false
  private _regionOfInterestCrop = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRegionOfInterestCropList(this, "region_of_interest_crop", false);
  public get regionOfInterestCrop() {
    return this._regionOfInterestCrop;
  }
  public putRegionOfInterestCrop(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRegionOfInterestCrop[] | cdktf.IResolvable) {
    this._regionOfInterestCrop.internalValue = value;
  }
  public resetRegionOfInterestCrop() {
    this._regionOfInterestCrop.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get regionOfInterestCropInput() {
    return this._regionOfInterestCrop.internalValue;
  }

  // relative_crop - computed: false, optional: true, required: false
  private _relativeCrop = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRelativeCropList(this, "relative_crop", false);
  public get relativeCrop() {
    return this._relativeCrop;
  }
  public putRelativeCrop(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRelativeCrop[] | cdktf.IResolvable) {
    this._relativeCrop.internalValue = value;
  }
  public resetRelativeCrop() {
    this._relativeCrop.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get relativeCropInput() {
    return this._relativeCrop.internalValue;
  }

  // remove_color - computed: false, optional: true, required: false
  private _removeColor = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRemoveColorList(this, "remove_color", false);
  public get removeColor() {
    return this._removeColor;
  }
  public putRemoveColor(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRemoveColor[] | cdktf.IResolvable) {
    this._removeColor.internalValue = value;
  }
  public resetRemoveColor() {
    this._removeColor.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get removeColorInput() {
    return this._removeColor.internalValue;
  }

  // resize - computed: false, optional: true, required: false
  private _resize = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationResizeList(this, "resize", false);
  public get resize() {
    return this._resize;
  }
  public putResize(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationResize[] | cdktf.IResolvable) {
    this._resize.internalValue = value;
  }
  public resetResize() {
    this._resize.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get resizeInput() {
    return this._resize.internalValue;
  }

  // rotate - computed: false, optional: true, required: false
  private _rotate = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRotateList(this, "rotate", false);
  public get rotate() {
    return this._rotate;
  }
  public putRotate(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationRotate[] | cdktf.IResolvable) {
    this._rotate.internalValue = value;
  }
  public resetRotate() {
    this._rotate.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get rotateInput() {
    return this._rotate.internalValue;
  }

  // scale - computed: false, optional: true, required: false
  private _scale = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationScaleList(this, "scale", false);
  public get scale() {
    return this._scale;
  }
  public putScale(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationScale[] | cdktf.IResolvable) {
    this._scale.internalValue = value;
  }
  public resetScale() {
    this._scale.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get scaleInput() {
    return this._scale.internalValue;
  }

  // shear - computed: false, optional: true, required: false
  private _shear = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationShearList(this, "shear", false);
  public get shear() {
    return this._shear;
  }
  public putShear(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationShear[] | cdktf.IResolvable) {
    this._shear.internalValue = value;
  }
  public resetShear() {
    this._shear.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get shearInput() {
    return this._shear.internalValue;
  }

  // smart_crop - computed: false, optional: true, required: false
  private _smartCrop = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationSmartCropList(this, "smart_crop", false);
  public get smartCrop() {
    return this._smartCrop;
  }
  public putSmartCrop(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationSmartCrop[] | cdktf.IResolvable) {
    this._smartCrop.internalValue = value;
  }
  public resetSmartCrop() {
    this._smartCrop.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get smartCropInput() {
    return this._smartCrop.internalValue;
  }

  // trim - computed: false, optional: true, required: false
  private _trim = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationTrimList(this, "trim", false);
  public get trim() {
    return this._trim;
  }
  public putTrim(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationTrim[] | cdktf.IResolvable) {
    this._trim.internalValue = value;
  }
  public resetTrim() {
    this._trim.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get trimInput() {
    return this._trim.internalValue;
  }

  // unsharp_mask - computed: false, optional: true, required: false
  private _unsharpMask = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationUnsharpMaskList(this, "unsharp_mask", false);
  public get unsharpMask() {
    return this._unsharpMask;
  }
  public putUnsharpMask(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationUnsharpMask[] | cdktf.IResolvable) {
    this._unsharpMask.internalValue = value;
  }
  public resetUnsharpMask() {
    this._unsharpMask.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get unsharpMaskInput() {
    return this._unsharpMask.internalValue;
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFill {
  /**
  * The height value of the resized image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#height DataAkamaiImagingPolicyImage#height}
  */
  readonly height?: string;
  /**
  * The height value of the resized image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#height_var DataAkamaiImagingPolicyImage#height_var}
  */
  readonly heightVar?: string;
  /**
  * The width value of the resized image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#width DataAkamaiImagingPolicyImage#width}
  */
  readonly width?: string;
  /**
  * The width value of the resized image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#width_var DataAkamaiImagingPolicyImage#width_var}
  */
  readonly widthVar?: string;
  /**
  * fill_transformation block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#fill_transformation DataAkamaiImagingPolicyImage#fill_transformation}
  */
  readonly fillTransformation?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformation;
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFill | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    height: cdktf.stringToTerraform(struct!.height),
    height_var: cdktf.stringToTerraform(struct!.heightVar),
    width: cdktf.stringToTerraform(struct!.width),
    width_var: cdktf.stringToTerraform(struct!.widthVar),
    fill_transformation: dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationToTerraform(struct!.fillTransformation),
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFill | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    height: {
      value: cdktf.stringToHclTerraform(struct!.height),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    height_var: {
      value: cdktf.stringToHclTerraform(struct!.heightVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    width: {
      value: cdktf.stringToHclTerraform(struct!.width),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    width_var: {
      value: cdktf.stringToHclTerraform(struct!.widthVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    fill_transformation: {
      value: dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationToHclTerraform(struct!.fillTransformation),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationList",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFill | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._height !== undefined) {
      hasAnyValues = true;
      internalValueResult.height = this._height;
    }
    if (this._heightVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.heightVar = this._heightVar;
    }
    if (this._width !== undefined) {
      hasAnyValues = true;
      internalValueResult.width = this._width;
    }
    if (this._widthVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.widthVar = this._widthVar;
    }
    if (this._fillTransformation?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.fillTransformation = this._fillTransformation?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFill | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._height = undefined;
      this._heightVar = undefined;
      this._width = undefined;
      this._widthVar = undefined;
      this._fillTransformation.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._height = value.height;
      this._heightVar = value.heightVar;
      this._width = value.width;
      this._widthVar = value.widthVar;
      this._fillTransformation.internalValue = value.fillTransformation;
    }
  }

  // height - computed: false, optional: true, required: false
  private _height?: string; 
  public get height() {
    return this.getStringAttribute('height');
  }
  public set height(value: string) {
    this._height = value;
  }
  public resetHeight() {
    this._height = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get heightInput() {
    return this._height;
  }

  // height_var - computed: false, optional: true, required: false
  private _heightVar?: string; 
  public get heightVar() {
    return this.getStringAttribute('height_var');
  }
  public set heightVar(value: string) {
    this._heightVar = value;
  }
  public resetHeightVar() {
    this._heightVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get heightVarInput() {
    return this._heightVar;
  }

  // width - computed: false, optional: true, required: false
  private _width?: string; 
  public get width() {
    return this.getStringAttribute('width');
  }
  public set width(value: string) {
    this._width = value;
  }
  public resetWidth() {
    this._width = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get widthInput() {
    return this._width;
  }

  // width_var - computed: false, optional: true, required: false
  private _widthVar?: string; 
  public get widthVar() {
    return this.getStringAttribute('width_var');
  }
  public set widthVar(value: string) {
    this._widthVar = value;
  }
  public resetWidthVar() {
    this._widthVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get widthVarInput() {
    return this._widthVar;
  }

  // fill_transformation - computed: false, optional: true, required: false
  private _fillTransformation = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformationOutputReference(this, "fill_transformation");
  public get fillTransformation() {
    return this._fillTransformation;
  }
  public putFillTransformation(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillFillTransformation) {
    this._fillTransformation.internalValue = value;
  }
  public resetFillTransformation() {
    this._fillTransformation.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get fillTransformationInput() {
    return this._fillTransformation.internalValue;
  }
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFill[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultFitAndFillOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultGoop {
  /**
  * Specifies the greatest distance control points may move from their original position. A value of `1.0` shifts control points over as far as the next one in the original grid. A value of `0.0` leaves the image unchanged. Values under `0.5` work better for subtle distortions, otherwise control points may pass each other and cause a twisting effect.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#chaos DataAkamaiImagingPolicyImage#chaos}
  */
  readonly chaos?: string;
  /**
  * Specifies the greatest distance control points may move from their original position. A value of `1.0` shifts control points over as far as the next one in the original grid. A value of `0.0` leaves the image unchanged. Values under `0.5` work better for subtle distortions, otherwise control points may pass each other and cause a twisting effect.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#chaos_var DataAkamaiImagingPolicyImage#chaos_var}
  */
  readonly chaosVar?: string;
  /**
  * Controls the density of control points used to distort the image. The largest dimension of the input image is divided up to fit this number of control points. A grid of points is extended on the smaller dimension such that each row and column of control points is equidistant from each adjacent row or column. This parameter strongly affects transformation performance. Be careful choosing values above the default if you expect to transform medium to large size images.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#density DataAkamaiImagingPolicyImage#density}
  */
  readonly density?: string;
  /**
  * Controls the density of control points used to distort the image. The largest dimension of the input image is divided up to fit this number of control points. A grid of points is extended on the smaller dimension such that each row and column of control points is equidistant from each adjacent row or column. This parameter strongly affects transformation performance. Be careful choosing values above the default if you expect to transform medium to large size images.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#density_var DataAkamaiImagingPolicyImage#density_var}
  */
  readonly densityVar?: string;
  /**
  * By default, the distortion algorithm relies on inverse squares to calculate distance but this allows you to change the exponent. You shouldnt need to vary the default value of `2.0`.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#power DataAkamaiImagingPolicyImage#power}
  */
  readonly power?: string;
  /**
  * By default, the distortion algorithm relies on inverse squares to calculate distance but this allows you to change the exponent. You shouldnt need to vary the default value of `2.0`.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#power_var DataAkamaiImagingPolicyImage#power_var}
  */
  readonly powerVar?: string;
  /**
  * Specifies your own `seed` value as an alternative to the default, which is subject to variability. This allows for reproducible and deterministic distortions. If all parameters are kept equal and a constant seed is used, `Goop` distorts an input image consistently over many transformations. By default, this value is set to the current Epoch Time measured in milliseconds, which provides inconsistent transformation output.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#seed DataAkamaiImagingPolicyImage#seed}
  */
  readonly seed?: string;
  /**
  * Specifies your own `seed` value as an alternative to the default, which is subject to variability. This allows for reproducible and deterministic distortions. If all parameters are kept equal and a constant seed is used, `Goop` distorts an input image consistently over many transformations. By default, this value is set to the current Epoch Time measured in milliseconds, which provides inconsistent transformation output.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#seed_var DataAkamaiImagingPolicyImage#seed_var}
  */
  readonly seedVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultGoopToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultGoop | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    chaos: cdktf.stringToTerraform(struct!.chaos),
    chaos_var: cdktf.stringToTerraform(struct!.chaosVar),
    density: cdktf.stringToTerraform(struct!.density),
    density_var: cdktf.stringToTerraform(struct!.densityVar),
    power: cdktf.stringToTerraform(struct!.power),
    power_var: cdktf.stringToTerraform(struct!.powerVar),
    seed: cdktf.stringToTerraform(struct!.seed),
    seed_var: cdktf.stringToTerraform(struct!.seedVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultGoopToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultGoop | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    chaos: {
      value: cdktf.stringToHclTerraform(struct!.chaos),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    chaos_var: {
      value: cdktf.stringToHclTerraform(struct!.chaosVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    density: {
      value: cdktf.stringToHclTerraform(struct!.density),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    density_var: {
      value: cdktf.stringToHclTerraform(struct!.densityVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    power: {
      value: cdktf.stringToHclTerraform(struct!.power),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    power_var: {
      value: cdktf.stringToHclTerraform(struct!.powerVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    seed: {
      value: cdktf.stringToHclTerraform(struct!.seed),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    seed_var: {
      value: cdktf.stringToHclTerraform(struct!.seedVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultGoopOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultGoop | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._chaos !== undefined) {
      hasAnyValues = true;
      internalValueResult.chaos = this._chaos;
    }
    if (this._chaosVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.chaosVar = this._chaosVar;
    }
    if (this._density !== undefined) {
      hasAnyValues = true;
      internalValueResult.density = this._density;
    }
    if (this._densityVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.densityVar = this._densityVar;
    }
    if (this._power !== undefined) {
      hasAnyValues = true;
      internalValueResult.power = this._power;
    }
    if (this._powerVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.powerVar = this._powerVar;
    }
    if (this._seed !== undefined) {
      hasAnyValues = true;
      internalValueResult.seed = this._seed;
    }
    if (this._seedVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.seedVar = this._seedVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultGoop | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._chaos = undefined;
      this._chaosVar = undefined;
      this._density = undefined;
      this._densityVar = undefined;
      this._power = undefined;
      this._powerVar = undefined;
      this._seed = undefined;
      this._seedVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._chaos = value.chaos;
      this._chaosVar = value.chaosVar;
      this._density = value.density;
      this._densityVar = value.densityVar;
      this._power = value.power;
      this._powerVar = value.powerVar;
      this._seed = value.seed;
      this._seedVar = value.seedVar;
    }
  }

  // chaos - computed: false, optional: true, required: false
  private _chaos?: string; 
  public get chaos() {
    return this.getStringAttribute('chaos');
  }
  public set chaos(value: string) {
    this._chaos = value;
  }
  public resetChaos() {
    this._chaos = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get chaosInput() {
    return this._chaos;
  }

  // chaos_var - computed: false, optional: true, required: false
  private _chaosVar?: string; 
  public get chaosVar() {
    return this.getStringAttribute('chaos_var');
  }
  public set chaosVar(value: string) {
    this._chaosVar = value;
  }
  public resetChaosVar() {
    this._chaosVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get chaosVarInput() {
    return this._chaosVar;
  }

  // density - computed: false, optional: true, required: false
  private _density?: string; 
  public get density() {
    return this.getStringAttribute('density');
  }
  public set density(value: string) {
    this._density = value;
  }
  public resetDensity() {
    this._density = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get densityInput() {
    return this._density;
  }

  // density_var - computed: false, optional: true, required: false
  private _densityVar?: string; 
  public get densityVar() {
    return this.getStringAttribute('density_var');
  }
  public set densityVar(value: string) {
    this._densityVar = value;
  }
  public resetDensityVar() {
    this._densityVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get densityVarInput() {
    return this._densityVar;
  }

  // power - computed: false, optional: true, required: false
  private _power?: string; 
  public get power() {
    return this.getStringAttribute('power');
  }
  public set power(value: string) {
    this._power = value;
  }
  public resetPower() {
    this._power = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get powerInput() {
    return this._power;
  }

  // power_var - computed: false, optional: true, required: false
  private _powerVar?: string; 
  public get powerVar() {
    return this.getStringAttribute('power_var');
  }
  public set powerVar(value: string) {
    this._powerVar = value;
  }
  public resetPowerVar() {
    this._powerVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get powerVarInput() {
    return this._powerVar;
  }

  // seed - computed: false, optional: true, required: false
  private _seed?: string; 
  public get seed() {
    return this.getStringAttribute('seed');
  }
  public set seed(value: string) {
    this._seed = value;
  }
  public resetSeed() {
    this._seed = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get seedInput() {
    return this._seed;
  }

  // seed_var - computed: false, optional: true, required: false
  private _seedVar?: string; 
  public get seedVar() {
    return this.getStringAttribute('seed_var');
  }
  public set seedVar(value: string) {
    this._seedVar = value;
  }
  public resetSeedVar() {
    this._seedVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get seedVarInput() {
    return this._seedVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultGoopList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultGoop[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultGoopOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultGoopOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultGrayscale {
  /**
  * The algorithm used to transform colors to grays, either `Brightness`, `Lightness`, `Rec601`, or the default `Rec709`.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#type DataAkamaiImagingPolicyImage#type}
  */
  readonly type?: string;
  /**
  * The algorithm used to transform colors to grays, either `Brightness`, `Lightness`, `Rec601`, or the default `Rec709`.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#type_var DataAkamaiImagingPolicyImage#type_var}
  */
  readonly typeVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultGrayscaleToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultGrayscale | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    type: cdktf.stringToTerraform(struct!.type),
    type_var: cdktf.stringToTerraform(struct!.typeVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultGrayscaleToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultGrayscale | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    type: {
      value: cdktf.stringToHclTerraform(struct!.type),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    type_var: {
      value: cdktf.stringToHclTerraform(struct!.typeVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultGrayscaleOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultGrayscale | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._type !== undefined) {
      hasAnyValues = true;
      internalValueResult.type = this._type;
    }
    if (this._typeVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.typeVar = this._typeVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultGrayscale | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._type = undefined;
      this._typeVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._type = value.type;
      this._typeVar = value.typeVar;
    }
  }

  // type - computed: false, optional: true, required: false
  private _type?: string; 
  public get type() {
    return this.getStringAttribute('type');
  }
  public set type(value: string) {
    this._type = value;
  }
  public resetType() {
    this._type = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get typeInput() {
    return this._type;
  }

  // type_var - computed: false, optional: true, required: false
  private _typeVar?: string; 
  public get typeVar() {
    return this.getStringAttribute('type_var');
  }
  public set typeVar(value: string) {
    this._typeVar = value;
  }
  public resetTypeVar() {
    this._typeVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get typeVarInput() {
    return this._typeVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultGrayscaleList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultGrayscale[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultGrayscaleOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultGrayscaleOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultHsl {
  /**
  * The number of degrees to rotate colors around the color wheel, `0` by default.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hue DataAkamaiImagingPolicyImage#hue}
  */
  readonly hue?: string;
  /**
  * The number of degrees to rotate colors around the color wheel, `0` by default.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hue_var DataAkamaiImagingPolicyImage#hue_var}
  */
  readonly hueVar?: string;
  /**
  * A multiplier to adjust the lightness of colors in the image. Note that lightness is distinct from brightness. For example, reducing the lightness of a light green might give you a lime green whereas reducing the brightness of a light green might give you a darker shade of the same green. Values less than `1.0` decrease the lightness of colors in the image. Values greater than `1.0` increase the lightness of colors in the image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#lightness DataAkamaiImagingPolicyImage#lightness}
  */
  readonly lightness?: string;
  /**
  * A multiplier to adjust the lightness of colors in the image. Note that lightness is distinct from brightness. For example, reducing the lightness of a light green might give you a lime green whereas reducing the brightness of a light green might give you a darker shade of the same green. Values less than `1.0` decrease the lightness of colors in the image. Values greater than `1.0` increase the lightness of colors in the image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#lightness_var DataAkamaiImagingPolicyImage#lightness_var}
  */
  readonly lightnessVar?: string;
  /**
  * A multiplier to adjust the saturation of colors in the image. Values less than `1.0` decrease saturation and values greater than `1.0` increase the saturation. A value of `0.0` removes all color from the image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#saturation DataAkamaiImagingPolicyImage#saturation}
  */
  readonly saturation?: string;
  /**
  * A multiplier to adjust the saturation of colors in the image. Values less than `1.0` decrease saturation and values greater than `1.0` increase the saturation. A value of `0.0` removes all color from the image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#saturation_var DataAkamaiImagingPolicyImage#saturation_var}
  */
  readonly saturationVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultHslToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultHsl | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    hue: cdktf.stringToTerraform(struct!.hue),
    hue_var: cdktf.stringToTerraform(struct!.hueVar),
    lightness: cdktf.stringToTerraform(struct!.lightness),
    lightness_var: cdktf.stringToTerraform(struct!.lightnessVar),
    saturation: cdktf.stringToTerraform(struct!.saturation),
    saturation_var: cdktf.stringToTerraform(struct!.saturationVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultHslToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultHsl | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    hue: {
      value: cdktf.stringToHclTerraform(struct!.hue),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    hue_var: {
      value: cdktf.stringToHclTerraform(struct!.hueVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    lightness: {
      value: cdktf.stringToHclTerraform(struct!.lightness),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    lightness_var: {
      value: cdktf.stringToHclTerraform(struct!.lightnessVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    saturation: {
      value: cdktf.stringToHclTerraform(struct!.saturation),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    saturation_var: {
      value: cdktf.stringToHclTerraform(struct!.saturationVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultHslOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultHsl | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._hue !== undefined) {
      hasAnyValues = true;
      internalValueResult.hue = this._hue;
    }
    if (this._hueVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.hueVar = this._hueVar;
    }
    if (this._lightness !== undefined) {
      hasAnyValues = true;
      internalValueResult.lightness = this._lightness;
    }
    if (this._lightnessVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.lightnessVar = this._lightnessVar;
    }
    if (this._saturation !== undefined) {
      hasAnyValues = true;
      internalValueResult.saturation = this._saturation;
    }
    if (this._saturationVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.saturationVar = this._saturationVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultHsl | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._hue = undefined;
      this._hueVar = undefined;
      this._lightness = undefined;
      this._lightnessVar = undefined;
      this._saturation = undefined;
      this._saturationVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._hue = value.hue;
      this._hueVar = value.hueVar;
      this._lightness = value.lightness;
      this._lightnessVar = value.lightnessVar;
      this._saturation = value.saturation;
      this._saturationVar = value.saturationVar;
    }
  }

  // hue - computed: false, optional: true, required: false
  private _hue?: string; 
  public get hue() {
    return this.getStringAttribute('hue');
  }
  public set hue(value: string) {
    this._hue = value;
  }
  public resetHue() {
    this._hue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hueInput() {
    return this._hue;
  }

  // hue_var - computed: false, optional: true, required: false
  private _hueVar?: string; 
  public get hueVar() {
    return this.getStringAttribute('hue_var');
  }
  public set hueVar(value: string) {
    this._hueVar = value;
  }
  public resetHueVar() {
    this._hueVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hueVarInput() {
    return this._hueVar;
  }

  // lightness - computed: false, optional: true, required: false
  private _lightness?: string; 
  public get lightness() {
    return this.getStringAttribute('lightness');
  }
  public set lightness(value: string) {
    this._lightness = value;
  }
  public resetLightness() {
    this._lightness = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get lightnessInput() {
    return this._lightness;
  }

  // lightness_var - computed: false, optional: true, required: false
  private _lightnessVar?: string; 
  public get lightnessVar() {
    return this.getStringAttribute('lightness_var');
  }
  public set lightnessVar(value: string) {
    this._lightnessVar = value;
  }
  public resetLightnessVar() {
    this._lightnessVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get lightnessVarInput() {
    return this._lightnessVar;
  }

  // saturation - computed: false, optional: true, required: false
  private _saturation?: string; 
  public get saturation() {
    return this.getStringAttribute('saturation');
  }
  public set saturation(value: string) {
    this._saturation = value;
  }
  public resetSaturation() {
    this._saturation = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get saturationInput() {
    return this._saturation;
  }

  // saturation_var - computed: false, optional: true, required: false
  private _saturationVar?: string; 
  public get saturationVar() {
    return this.getStringAttribute('saturation_var');
  }
  public set saturationVar(value: string) {
    this._saturationVar = value;
  }
  public resetSaturationVar() {
    this._saturationVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get saturationVarInput() {
    return this._saturationVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultHslList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultHsl[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultHslOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultHslOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultHsv {
  /**
  * The number of degrees to rotate colors around the color wheel, `0.0` by default.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hue DataAkamaiImagingPolicyImage#hue}
  */
  readonly hue?: string;
  /**
  * The number of degrees to rotate colors around the color wheel, `0.0` by default.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hue_var DataAkamaiImagingPolicyImage#hue_var}
  */
  readonly hueVar?: string;
  /**
  * A multiplier to adjust the saturation of colors in the image. Values less than `1.0` decrease saturation and values greater than `1.0` increase the saturation. A value of `0.0` removes all color from the image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#saturation DataAkamaiImagingPolicyImage#saturation}
  */
  readonly saturation?: string;
  /**
  * A multiplier to adjust the saturation of colors in the image. Values less than `1.0` decrease saturation and values greater than `1.0` increase the saturation. A value of `0.0` removes all color from the image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#saturation_var DataAkamaiImagingPolicyImage#saturation_var}
  */
  readonly saturationVar?: string;
  /**
  * A multiplier to adjust the lightness or darkness of the images base color. Values less than 1.0 decrease the base colors in the image, making them appear darker. Values greater than 1.0 increase the base colors in the image, making them appear lighter.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#value DataAkamaiImagingPolicyImage#value}
  */
  readonly value?: string;
  /**
  * A multiplier to adjust the lightness or darkness of the images base color. Values less than 1.0 decrease the base colors in the image, making them appear darker. Values greater than 1.0 increase the base colors in the image, making them appear lighter.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#value_var DataAkamaiImagingPolicyImage#value_var}
  */
  readonly valueVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultHsvToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultHsv | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    hue: cdktf.stringToTerraform(struct!.hue),
    hue_var: cdktf.stringToTerraform(struct!.hueVar),
    saturation: cdktf.stringToTerraform(struct!.saturation),
    saturation_var: cdktf.stringToTerraform(struct!.saturationVar),
    value: cdktf.stringToTerraform(struct!.value),
    value_var: cdktf.stringToTerraform(struct!.valueVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultHsvToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultHsv | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    hue: {
      value: cdktf.stringToHclTerraform(struct!.hue),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    hue_var: {
      value: cdktf.stringToHclTerraform(struct!.hueVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    saturation: {
      value: cdktf.stringToHclTerraform(struct!.saturation),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    saturation_var: {
      value: cdktf.stringToHclTerraform(struct!.saturationVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    value: {
      value: cdktf.stringToHclTerraform(struct!.value),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    value_var: {
      value: cdktf.stringToHclTerraform(struct!.valueVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultHsvOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultHsv | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._hue !== undefined) {
      hasAnyValues = true;
      internalValueResult.hue = this._hue;
    }
    if (this._hueVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.hueVar = this._hueVar;
    }
    if (this._saturation !== undefined) {
      hasAnyValues = true;
      internalValueResult.saturation = this._saturation;
    }
    if (this._saturationVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.saturationVar = this._saturationVar;
    }
    if (this._value !== undefined) {
      hasAnyValues = true;
      internalValueResult.value = this._value;
    }
    if (this._valueVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.valueVar = this._valueVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultHsv | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._hue = undefined;
      this._hueVar = undefined;
      this._saturation = undefined;
      this._saturationVar = undefined;
      this._value = undefined;
      this._valueVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._hue = value.hue;
      this._hueVar = value.hueVar;
      this._saturation = value.saturation;
      this._saturationVar = value.saturationVar;
      this._value = value.value;
      this._valueVar = value.valueVar;
    }
  }

  // hue - computed: false, optional: true, required: false
  private _hue?: string; 
  public get hue() {
    return this.getStringAttribute('hue');
  }
  public set hue(value: string) {
    this._hue = value;
  }
  public resetHue() {
    this._hue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hueInput() {
    return this._hue;
  }

  // hue_var - computed: false, optional: true, required: false
  private _hueVar?: string; 
  public get hueVar() {
    return this.getStringAttribute('hue_var');
  }
  public set hueVar(value: string) {
    this._hueVar = value;
  }
  public resetHueVar() {
    this._hueVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hueVarInput() {
    return this._hueVar;
  }

  // saturation - computed: false, optional: true, required: false
  private _saturation?: string; 
  public get saturation() {
    return this.getStringAttribute('saturation');
  }
  public set saturation(value: string) {
    this._saturation = value;
  }
  public resetSaturation() {
    this._saturation = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get saturationInput() {
    return this._saturation;
  }

  // saturation_var - computed: false, optional: true, required: false
  private _saturationVar?: string; 
  public get saturationVar() {
    return this.getStringAttribute('saturation_var');
  }
  public set saturationVar(value: string) {
    this._saturationVar = value;
  }
  public resetSaturationVar() {
    this._saturationVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get saturationVarInput() {
    return this._saturationVar;
  }

  // value - computed: false, optional: true, required: false
  private _value?: string; 
  public get value() {
    return this.getStringAttribute('value');
  }
  public set value(value: string) {
    this._value = value;
  }
  public resetValue() {
    this._value = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get valueInput() {
    return this._value;
  }

  // value_var - computed: false, optional: true, required: false
  private _valueVar?: string; 
  public get valueVar() {
    return this.getStringAttribute('value_var');
  }
  public set valueVar(value: string) {
    this._valueVar = value;
  }
  public resetValueVar() {
    this._valueVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get valueVarInput() {
    return this._valueVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultHsvList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultHsv[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultHsvOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultHsvOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeAppendImage {
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeAppendImageToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeAppendImageOutputReference | DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeAppendImage): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeAppendImageToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeAppendImageOutputReference | DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeAppendImage): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
  };
  return attrs;
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeAppendImageOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false, 0);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeAppendImage | undefined {
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeAppendImage | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
    }
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeAppend {
  /**
  * Specifies where to place the `image` relative to the source image. The available values represent the eight cardinal directions (`North`, `South`, `East`, `West`, `NorthEast`, `NorthWest`, `SouthEast`, `SouthWest`) and a `Center` by default.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#gravity DataAkamaiImagingPolicyImage#gravity}
  */
  readonly gravity?: string;
  /**
  * Determines the exact placement of the `image` when `gravity` is `Center` or a diagonal. The value is either `horizontal` or `vertical`. Use `horizontal` to append an `image` east or west of the source image. This aligns the `image` on the vertical gravity component, placing `Center` gravity east. Use `vertical` to append an `image` north or south of the source image. This aligns the `image` on the horizontal gravity component, placing `Center` gravity south.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#gravity_priority DataAkamaiImagingPolicyImage#gravity_priority}
  */
  readonly gravityPriority?: string;
  /**
  * Determines the exact placement of the `image` when `gravity` is `Center` or a diagonal. The value is either `horizontal` or `vertical`. Use `horizontal` to append an `image` east or west of the source image. This aligns the `image` on the vertical gravity component, placing `Center` gravity east. Use `vertical` to append an `image` north or south of the source image. This aligns the `image` on the horizontal gravity component, placing `Center` gravity south.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#gravity_priority_var DataAkamaiImagingPolicyImage#gravity_priority_var}
  */
  readonly gravityPriorityVar?: string;
  /**
  * Specifies where to place the `image` relative to the source image. The available values represent the eight cardinal directions (`North`, `South`, `East`, `West`, `NorthEast`, `NorthWest`, `SouthEast`, `SouthWest`) and a `Center` by default.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#gravity_var DataAkamaiImagingPolicyImage#gravity_var}
  */
  readonly gravityVar?: string;
  /**
  * Whether to preserve the source image's minor dimension, `false` by default. The minor dimension is the dimension opposite the dimension that the appending `image` is placed. For example, the dimensions of the source image are 100 &times; 100 pixels. The dimensions of the appending `image` are 50 &times; 150 pixels. The `gravity` is set to `East`. This makes the major dimension horizontal and the source image's minor dimension vertical. To preserve the source image's minor dimension at 100 pixels, the `preserveMinorDimension` is set to `true`. As a result of the append, the major dimension expanded with the appended image to 150 pixels. The source image's minor dimension was maintained at 100 pixels. The total combined dimension of the image is 150 &times; 100 pixels.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#preserve_minor_dimension DataAkamaiImagingPolicyImage#preserve_minor_dimension}
  */
  readonly preserveMinorDimension?: string;
  /**
  * Whether to preserve the source image's minor dimension, `false` by default. The minor dimension is the dimension opposite the dimension that the appending `image` is placed. For example, the dimensions of the source image are 100 &times; 100 pixels. The dimensions of the appending `image` are 50 &times; 150 pixels. The `gravity` is set to `East`. This makes the major dimension horizontal and the source image's minor dimension vertical. To preserve the source image's minor dimension at 100 pixels, the `preserveMinorDimension` is set to `true`. As a result of the append, the major dimension expanded with the appended image to 150 pixels. The source image's minor dimension was maintained at 100 pixels. The total combined dimension of the image is 150 &times; 100 pixels.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#preserve_minor_dimension_var DataAkamaiImagingPolicyImage#preserve_minor_dimension_var}
  */
  readonly preserveMinorDimensionVar?: string;
  /**
  * image block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#image DataAkamaiImagingPolicyImage#image}
  */
  readonly image: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeAppendImage;
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeAppendToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeAppend | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    gravity: cdktf.stringToTerraform(struct!.gravity),
    gravity_priority: cdktf.stringToTerraform(struct!.gravityPriority),
    gravity_priority_var: cdktf.stringToTerraform(struct!.gravityPriorityVar),
    gravity_var: cdktf.stringToTerraform(struct!.gravityVar),
    preserve_minor_dimension: cdktf.stringToTerraform(struct!.preserveMinorDimension),
    preserve_minor_dimension_var: cdktf.stringToTerraform(struct!.preserveMinorDimensionVar),
    image: dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeAppendImageToTerraform(struct!.image),
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeAppendToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeAppend | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    gravity: {
      value: cdktf.stringToHclTerraform(struct!.gravity),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    gravity_priority: {
      value: cdktf.stringToHclTerraform(struct!.gravityPriority),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    gravity_priority_var: {
      value: cdktf.stringToHclTerraform(struct!.gravityPriorityVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    gravity_var: {
      value: cdktf.stringToHclTerraform(struct!.gravityVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    preserve_minor_dimension: {
      value: cdktf.stringToHclTerraform(struct!.preserveMinorDimension),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    preserve_minor_dimension_var: {
      value: cdktf.stringToHclTerraform(struct!.preserveMinorDimensionVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    image: {
      value: dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeAppendImageToHclTerraform(struct!.image),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeAppendImageList",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeAppendOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeAppend | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._gravity !== undefined) {
      hasAnyValues = true;
      internalValueResult.gravity = this._gravity;
    }
    if (this._gravityPriority !== undefined) {
      hasAnyValues = true;
      internalValueResult.gravityPriority = this._gravityPriority;
    }
    if (this._gravityPriorityVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.gravityPriorityVar = this._gravityPriorityVar;
    }
    if (this._gravityVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.gravityVar = this._gravityVar;
    }
    if (this._preserveMinorDimension !== undefined) {
      hasAnyValues = true;
      internalValueResult.preserveMinorDimension = this._preserveMinorDimension;
    }
    if (this._preserveMinorDimensionVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.preserveMinorDimensionVar = this._preserveMinorDimensionVar;
    }
    if (this._image?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.image = this._image?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeAppend | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._gravity = undefined;
      this._gravityPriority = undefined;
      this._gravityPriorityVar = undefined;
      this._gravityVar = undefined;
      this._preserveMinorDimension = undefined;
      this._preserveMinorDimensionVar = undefined;
      this._image.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._gravity = value.gravity;
      this._gravityPriority = value.gravityPriority;
      this._gravityPriorityVar = value.gravityPriorityVar;
      this._gravityVar = value.gravityVar;
      this._preserveMinorDimension = value.preserveMinorDimension;
      this._preserveMinorDimensionVar = value.preserveMinorDimensionVar;
      this._image.internalValue = value.image;
    }
  }

  // gravity - computed: false, optional: true, required: false
  private _gravity?: string; 
  public get gravity() {
    return this.getStringAttribute('gravity');
  }
  public set gravity(value: string) {
    this._gravity = value;
  }
  public resetGravity() {
    this._gravity = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get gravityInput() {
    return this._gravity;
  }

  // gravity_priority - computed: false, optional: true, required: false
  private _gravityPriority?: string; 
  public get gravityPriority() {
    return this.getStringAttribute('gravity_priority');
  }
  public set gravityPriority(value: string) {
    this._gravityPriority = value;
  }
  public resetGravityPriority() {
    this._gravityPriority = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get gravityPriorityInput() {
    return this._gravityPriority;
  }

  // gravity_priority_var - computed: false, optional: true, required: false
  private _gravityPriorityVar?: string; 
  public get gravityPriorityVar() {
    return this.getStringAttribute('gravity_priority_var');
  }
  public set gravityPriorityVar(value: string) {
    this._gravityPriorityVar = value;
  }
  public resetGravityPriorityVar() {
    this._gravityPriorityVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get gravityPriorityVarInput() {
    return this._gravityPriorityVar;
  }

  // gravity_var - computed: false, optional: true, required: false
  private _gravityVar?: string; 
  public get gravityVar() {
    return this.getStringAttribute('gravity_var');
  }
  public set gravityVar(value: string) {
    this._gravityVar = value;
  }
  public resetGravityVar() {
    this._gravityVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get gravityVarInput() {
    return this._gravityVar;
  }

  // preserve_minor_dimension - computed: false, optional: true, required: false
  private _preserveMinorDimension?: string; 
  public get preserveMinorDimension() {
    return this.getStringAttribute('preserve_minor_dimension');
  }
  public set preserveMinorDimension(value: string) {
    this._preserveMinorDimension = value;
  }
  public resetPreserveMinorDimension() {
    this._preserveMinorDimension = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get preserveMinorDimensionInput() {
    return this._preserveMinorDimension;
  }

  // preserve_minor_dimension_var - computed: false, optional: true, required: false
  private _preserveMinorDimensionVar?: string; 
  public get preserveMinorDimensionVar() {
    return this.getStringAttribute('preserve_minor_dimension_var');
  }
  public set preserveMinorDimensionVar(value: string) {
    this._preserveMinorDimensionVar = value;
  }
  public resetPreserveMinorDimensionVar() {
    this._preserveMinorDimensionVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get preserveMinorDimensionVarInput() {
    return this._preserveMinorDimensionVar;
  }

  // image - computed: false, optional: false, required: true
  private _image = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeAppendImageOutputReference(this, "image");
  public get image() {
    return this._image;
  }
  public putImage(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeAppendImage) {
    this._image.internalValue = value;
  }
  // Temporarily expose input value. Use with caution.
  public get imageInput() {
    return this._image.internalValue;
  }
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeAppendList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeAppend[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeAppendOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeAppendOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeAspectCrop {
  /**
  * Increases the size of the image canvas to achieve the requested aspect ratio instead of cropping the image. Use the Horizontal Offset and Vertical Offset settings to determine where to add the fully transparent pixels on the expanded image canvas.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#allow_expansion DataAkamaiImagingPolicyImage#allow_expansion}
  */
  readonly allowExpansion?: string;
  /**
  * Increases the size of the image canvas to achieve the requested aspect ratio instead of cropping the image. Use the Horizontal Offset and Vertical Offset settings to determine where to add the fully transparent pixels on the expanded image canvas.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#allow_expansion_var DataAkamaiImagingPolicyImage#allow_expansion_var}
  */
  readonly allowExpansionVar?: string;
  /**
  * The height term of the aspect ratio to crop.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#height DataAkamaiImagingPolicyImage#height}
  */
  readonly height?: string;
  /**
  * The height term of the aspect ratio to crop.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#height_var DataAkamaiImagingPolicyImage#height_var}
  */
  readonly heightVar?: string;
  /**
  * The width term of the aspect ratio to crop.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#width DataAkamaiImagingPolicyImage#width}
  */
  readonly width?: string;
  /**
  * The width term of the aspect ratio to crop.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#width_var DataAkamaiImagingPolicyImage#width_var}
  */
  readonly widthVar?: string;
  /**
  * Specifies the horizontal portion of the image you want to keep when the aspect ratio cropping is applied. When using Allow Expansion this setting defines the horizontal position of the image on the new expanded image canvas.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#x_position DataAkamaiImagingPolicyImage#x_position}
  */
  readonly xPosition?: string;
  /**
  * Specifies the horizontal portion of the image you want to keep when the aspect ratio cropping is applied. When using Allow Expansion this setting defines the horizontal position of the image on the new expanded image canvas.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#x_position_var DataAkamaiImagingPolicyImage#x_position_var}
  */
  readonly xPositionVar?: string;
  /**
  * Specifies the horizontal portion of the image you want to keep when the aspect ratio cropping is applied. When using Allow Expansion this setting defines the horizontal position of the image on the new expanded image canvas.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#y_position DataAkamaiImagingPolicyImage#y_position}
  */
  readonly yPosition?: string;
  /**
  * Specifies the horizontal portion of the image you want to keep when the aspect ratio cropping is applied. When using Allow Expansion this setting defines the horizontal position of the image on the new expanded image canvas.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#y_position_var DataAkamaiImagingPolicyImage#y_position_var}
  */
  readonly yPositionVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeAspectCropToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeAspectCrop | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    allow_expansion: cdktf.stringToTerraform(struct!.allowExpansion),
    allow_expansion_var: cdktf.stringToTerraform(struct!.allowExpansionVar),
    height: cdktf.stringToTerraform(struct!.height),
    height_var: cdktf.stringToTerraform(struct!.heightVar),
    width: cdktf.stringToTerraform(struct!.width),
    width_var: cdktf.stringToTerraform(struct!.widthVar),
    x_position: cdktf.stringToTerraform(struct!.xPosition),
    x_position_var: cdktf.stringToTerraform(struct!.xPositionVar),
    y_position: cdktf.stringToTerraform(struct!.yPosition),
    y_position_var: cdktf.stringToTerraform(struct!.yPositionVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeAspectCropToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeAspectCrop | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    allow_expansion: {
      value: cdktf.stringToHclTerraform(struct!.allowExpansion),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    allow_expansion_var: {
      value: cdktf.stringToHclTerraform(struct!.allowExpansionVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    height: {
      value: cdktf.stringToHclTerraform(struct!.height),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    height_var: {
      value: cdktf.stringToHclTerraform(struct!.heightVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    width: {
      value: cdktf.stringToHclTerraform(struct!.width),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    width_var: {
      value: cdktf.stringToHclTerraform(struct!.widthVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    x_position: {
      value: cdktf.stringToHclTerraform(struct!.xPosition),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    x_position_var: {
      value: cdktf.stringToHclTerraform(struct!.xPositionVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    y_position: {
      value: cdktf.stringToHclTerraform(struct!.yPosition),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    y_position_var: {
      value: cdktf.stringToHclTerraform(struct!.yPositionVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeAspectCropOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeAspectCrop | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._allowExpansion !== undefined) {
      hasAnyValues = true;
      internalValueResult.allowExpansion = this._allowExpansion;
    }
    if (this._allowExpansionVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.allowExpansionVar = this._allowExpansionVar;
    }
    if (this._height !== undefined) {
      hasAnyValues = true;
      internalValueResult.height = this._height;
    }
    if (this._heightVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.heightVar = this._heightVar;
    }
    if (this._width !== undefined) {
      hasAnyValues = true;
      internalValueResult.width = this._width;
    }
    if (this._widthVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.widthVar = this._widthVar;
    }
    if (this._xPosition !== undefined) {
      hasAnyValues = true;
      internalValueResult.xPosition = this._xPosition;
    }
    if (this._xPositionVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.xPositionVar = this._xPositionVar;
    }
    if (this._yPosition !== undefined) {
      hasAnyValues = true;
      internalValueResult.yPosition = this._yPosition;
    }
    if (this._yPositionVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.yPositionVar = this._yPositionVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeAspectCrop | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._allowExpansion = undefined;
      this._allowExpansionVar = undefined;
      this._height = undefined;
      this._heightVar = undefined;
      this._width = undefined;
      this._widthVar = undefined;
      this._xPosition = undefined;
      this._xPositionVar = undefined;
      this._yPosition = undefined;
      this._yPositionVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._allowExpansion = value.allowExpansion;
      this._allowExpansionVar = value.allowExpansionVar;
      this._height = value.height;
      this._heightVar = value.heightVar;
      this._width = value.width;
      this._widthVar = value.widthVar;
      this._xPosition = value.xPosition;
      this._xPositionVar = value.xPositionVar;
      this._yPosition = value.yPosition;
      this._yPositionVar = value.yPositionVar;
    }
  }

  // allow_expansion - computed: false, optional: true, required: false
  private _allowExpansion?: string; 
  public get allowExpansion() {
    return this.getStringAttribute('allow_expansion');
  }
  public set allowExpansion(value: string) {
    this._allowExpansion = value;
  }
  public resetAllowExpansion() {
    this._allowExpansion = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get allowExpansionInput() {
    return this._allowExpansion;
  }

  // allow_expansion_var - computed: false, optional: true, required: false
  private _allowExpansionVar?: string; 
  public get allowExpansionVar() {
    return this.getStringAttribute('allow_expansion_var');
  }
  public set allowExpansionVar(value: string) {
    this._allowExpansionVar = value;
  }
  public resetAllowExpansionVar() {
    this._allowExpansionVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get allowExpansionVarInput() {
    return this._allowExpansionVar;
  }

  // height - computed: false, optional: true, required: false
  private _height?: string; 
  public get height() {
    return this.getStringAttribute('height');
  }
  public set height(value: string) {
    this._height = value;
  }
  public resetHeight() {
    this._height = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get heightInput() {
    return this._height;
  }

  // height_var - computed: false, optional: true, required: false
  private _heightVar?: string; 
  public get heightVar() {
    return this.getStringAttribute('height_var');
  }
  public set heightVar(value: string) {
    this._heightVar = value;
  }
  public resetHeightVar() {
    this._heightVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get heightVarInput() {
    return this._heightVar;
  }

  // width - computed: false, optional: true, required: false
  private _width?: string; 
  public get width() {
    return this.getStringAttribute('width');
  }
  public set width(value: string) {
    this._width = value;
  }
  public resetWidth() {
    this._width = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get widthInput() {
    return this._width;
  }

  // width_var - computed: false, optional: true, required: false
  private _widthVar?: string; 
  public get widthVar() {
    return this.getStringAttribute('width_var');
  }
  public set widthVar(value: string) {
    this._widthVar = value;
  }
  public resetWidthVar() {
    this._widthVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get widthVarInput() {
    return this._widthVar;
  }

  // x_position - computed: false, optional: true, required: false
  private _xPosition?: string; 
  public get xPosition() {
    return this.getStringAttribute('x_position');
  }
  public set xPosition(value: string) {
    this._xPosition = value;
  }
  public resetXPosition() {
    this._xPosition = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get xPositionInput() {
    return this._xPosition;
  }

  // x_position_var - computed: false, optional: true, required: false
  private _xPositionVar?: string; 
  public get xPositionVar() {
    return this.getStringAttribute('x_position_var');
  }
  public set xPositionVar(value: string) {
    this._xPositionVar = value;
  }
  public resetXPositionVar() {
    this._xPositionVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get xPositionVarInput() {
    return this._xPositionVar;
  }

  // y_position - computed: false, optional: true, required: false
  private _yPosition?: string; 
  public get yPosition() {
    return this.getStringAttribute('y_position');
  }
  public set yPosition(value: string) {
    this._yPosition = value;
  }
  public resetYPosition() {
    this._yPosition = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get yPositionInput() {
    return this._yPosition;
  }

  // y_position_var - computed: false, optional: true, required: false
  private _yPositionVar?: string; 
  public get yPositionVar() {
    return this.getStringAttribute('y_position_var');
  }
  public set yPositionVar(value: string) {
    this._yPositionVar = value;
  }
  public resetYPositionVar() {
    this._yPositionVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get yPositionVarInput() {
    return this._yPositionVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeAspectCropList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeAspectCrop[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeAspectCropOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeAspectCropOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeBackgroundColor {
  /**
  * The hexadecimal CSS color value for the background.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#color DataAkamaiImagingPolicyImage#color}
  */
  readonly color?: string;
  /**
  * The hexadecimal CSS color value for the background.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#color_var DataAkamaiImagingPolicyImage#color_var}
  */
  readonly colorVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeBackgroundColorToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeBackgroundColor | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    color: cdktf.stringToTerraform(struct!.color),
    color_var: cdktf.stringToTerraform(struct!.colorVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeBackgroundColorToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeBackgroundColor | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    color: {
      value: cdktf.stringToHclTerraform(struct!.color),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    color_var: {
      value: cdktf.stringToHclTerraform(struct!.colorVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeBackgroundColorOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeBackgroundColor | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._color !== undefined) {
      hasAnyValues = true;
      internalValueResult.color = this._color;
    }
    if (this._colorVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.colorVar = this._colorVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeBackgroundColor | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._color = undefined;
      this._colorVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._color = value.color;
      this._colorVar = value.colorVar;
    }
  }

  // color - computed: false, optional: true, required: false
  private _color?: string; 
  public get color() {
    return this.getStringAttribute('color');
  }
  public set color(value: string) {
    this._color = value;
  }
  public resetColor() {
    this._color = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get colorInput() {
    return this._color;
  }

  // color_var - computed: false, optional: true, required: false
  private _colorVar?: string; 
  public get colorVar() {
    return this.getStringAttribute('color_var');
  }
  public set colorVar(value: string) {
    this._colorVar = value;
  }
  public resetColorVar() {
    this._colorVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get colorVarInput() {
    return this._colorVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeBackgroundColorList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeBackgroundColor[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeBackgroundColorOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeBackgroundColorOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeBlur {
  /**
  * The number of pixels to scatter the original pixel by to create the blur effect. Resulting images may be larger than the original as pixels at the edge of the image might scatter outside the image's original dimensions.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#sigma DataAkamaiImagingPolicyImage#sigma}
  */
  readonly sigma?: string;
  /**
  * The number of pixels to scatter the original pixel by to create the blur effect. Resulting images may be larger than the original as pixels at the edge of the image might scatter outside the image's original dimensions.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#sigma_var DataAkamaiImagingPolicyImage#sigma_var}
  */
  readonly sigmaVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeBlurToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeBlur | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    sigma: cdktf.stringToTerraform(struct!.sigma),
    sigma_var: cdktf.stringToTerraform(struct!.sigmaVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeBlurToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeBlur | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    sigma: {
      value: cdktf.stringToHclTerraform(struct!.sigma),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    sigma_var: {
      value: cdktf.stringToHclTerraform(struct!.sigmaVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeBlurOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeBlur | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._sigma !== undefined) {
      hasAnyValues = true;
      internalValueResult.sigma = this._sigma;
    }
    if (this._sigmaVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.sigmaVar = this._sigmaVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeBlur | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._sigma = undefined;
      this._sigmaVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._sigma = value.sigma;
      this._sigmaVar = value.sigmaVar;
    }
  }

  // sigma - computed: false, optional: true, required: false
  private _sigma?: string; 
  public get sigma() {
    return this.getStringAttribute('sigma');
  }
  public set sigma(value: string) {
    this._sigma = value;
  }
  public resetSigma() {
    this._sigma = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get sigmaInput() {
    return this._sigma;
  }

  // sigma_var - computed: false, optional: true, required: false
  private _sigmaVar?: string; 
  public get sigmaVar() {
    return this.getStringAttribute('sigma_var');
  }
  public set sigmaVar(value: string) {
    this._sigmaVar = value;
  }
  public resetSigmaVar() {
    this._sigmaVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get sigmaVarInput() {
    return this._sigmaVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeBlurList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeBlur[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeBlurOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeBlurOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeChromaKey {
  /**
  * The hue to remove. Enter the degree of rotation between 0 and 360 degrees around the color wheel. By default Chroma Key removes a green hue, 120° on the color wheel.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hue DataAkamaiImagingPolicyImage#hue}
  */
  readonly hue?: string;
  /**
  * How much additional hue to make semi-transparent beyond the Hue Tolerance. By default Hue Feather is 0.083 which applies semi-transparency to hues 30° around the Hue Tolerance.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hue_feather DataAkamaiImagingPolicyImage#hue_feather}
  */
  readonly hueFeather?: string;
  /**
  * How much additional hue to make semi-transparent beyond the Hue Tolerance. By default Hue Feather is 0.083 which applies semi-transparency to hues 30° around the Hue Tolerance.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hue_feather_var DataAkamaiImagingPolicyImage#hue_feather_var}
  */
  readonly hueFeatherVar?: string;
  /**
  * How close a color's hue needs to be to the selected hue for it to be changed to fully transparent. If you enter the maximum value of 1.0 the entire image is made transparent. By default Hue Tolerance is approximately 0.083 or 8.3% of the color wheel. This value corresponds to 30° around the specified hue.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hue_tolerance DataAkamaiImagingPolicyImage#hue_tolerance}
  */
  readonly hueTolerance?: string;
  /**
  * How close a color's hue needs to be to the selected hue for it to be changed to fully transparent. If you enter the maximum value of 1.0 the entire image is made transparent. By default Hue Tolerance is approximately 0.083 or 8.3% of the color wheel. This value corresponds to 30° around the specified hue.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hue_tolerance_var DataAkamaiImagingPolicyImage#hue_tolerance_var}
  */
  readonly hueToleranceVar?: string;
  /**
  * The hue to remove. Enter the degree of rotation between 0 and 360 degrees around the color wheel. By default Chroma Key removes a green hue, 120° on the color wheel.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hue_var DataAkamaiImagingPolicyImage#hue_var}
  */
  readonly hueVar?: string;
  /**
  * How much additional lightness to make semi-transparent beyond the Lightness Tolerance. The default value of 0.1 corresponds to 10% away from the tolerated lightness towards full black or full white.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#lightness_feather DataAkamaiImagingPolicyImage#lightness_feather}
  */
  readonly lightnessFeather?: string;
  /**
  * How much additional lightness to make semi-transparent beyond the Lightness Tolerance. The default value of 0.1 corresponds to 10% away from the tolerated lightness towards full black or full white.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#lightness_feather_var DataAkamaiImagingPolicyImage#lightness_feather_var}
  */
  readonly lightnessFeatherVar?: string;
  /**
  * How much of the lightest part and darkest part of a color to preserve. For example, you can space this value out from the middle (i.e. 0.5 lightness or full color) to help preserve the splash lighting impact in the image. You can define how close the color needs to be to the full color to remove it from your image. The default value of 0.75 means that a colour must be within 75% of the full color to full white or full black for full removal.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#lightness_tolerance DataAkamaiImagingPolicyImage#lightness_tolerance}
  */
  readonly lightnessTolerance?: string;
  /**
  * How much of the lightest part and darkest part of a color to preserve. For example, you can space this value out from the middle (i.e. 0.5 lightness or full color) to help preserve the splash lighting impact in the image. You can define how close the color needs to be to the full color to remove it from your image. The default value of 0.75 means that a colour must be within 75% of the full color to full white or full black for full removal.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#lightness_tolerance_var DataAkamaiImagingPolicyImage#lightness_tolerance_var}
  */
  readonly lightnessToleranceVar?: string;
  /**
  * How much additional saturation to make semi-transparent beyond the Saturation Tolerance. By default Saturation Feather is 0.1 which applies semi-transparency to hues 10% below the saturationTolerance.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#saturation_feather DataAkamaiImagingPolicyImage#saturation_feather}
  */
  readonly saturationFeather?: string;
  /**
  * How much additional saturation to make semi-transparent beyond the Saturation Tolerance. By default Saturation Feather is 0.1 which applies semi-transparency to hues 10% below the saturationTolerance.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#saturation_feather_var DataAkamaiImagingPolicyImage#saturation_feather_var}
  */
  readonly saturationFeatherVar?: string;
  /**
  * How close a color's saturation needs to be to full saturation for it to be changed to fully transparent. For example, you can define how green the color needs to be to remove it from your image. The default value of 0.75 means that a color must be within 75% of full saturation in order to be made fully transparent.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#saturation_tolerance DataAkamaiImagingPolicyImage#saturation_tolerance}
  */
  readonly saturationTolerance?: string;
  /**
  * How close a color's saturation needs to be to full saturation for it to be changed to fully transparent. For example, you can define how green the color needs to be to remove it from your image. The default value of 0.75 means that a color must be within 75% of full saturation in order to be made fully transparent.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#saturation_tolerance_var DataAkamaiImagingPolicyImage#saturation_tolerance_var}
  */
  readonly saturationToleranceVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeChromaKeyToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeChromaKey | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    hue: cdktf.stringToTerraform(struct!.hue),
    hue_feather: cdktf.stringToTerraform(struct!.hueFeather),
    hue_feather_var: cdktf.stringToTerraform(struct!.hueFeatherVar),
    hue_tolerance: cdktf.stringToTerraform(struct!.hueTolerance),
    hue_tolerance_var: cdktf.stringToTerraform(struct!.hueToleranceVar),
    hue_var: cdktf.stringToTerraform(struct!.hueVar),
    lightness_feather: cdktf.stringToTerraform(struct!.lightnessFeather),
    lightness_feather_var: cdktf.stringToTerraform(struct!.lightnessFeatherVar),
    lightness_tolerance: cdktf.stringToTerraform(struct!.lightnessTolerance),
    lightness_tolerance_var: cdktf.stringToTerraform(struct!.lightnessToleranceVar),
    saturation_feather: cdktf.stringToTerraform(struct!.saturationFeather),
    saturation_feather_var: cdktf.stringToTerraform(struct!.saturationFeatherVar),
    saturation_tolerance: cdktf.stringToTerraform(struct!.saturationTolerance),
    saturation_tolerance_var: cdktf.stringToTerraform(struct!.saturationToleranceVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeChromaKeyToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeChromaKey | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    hue: {
      value: cdktf.stringToHclTerraform(struct!.hue),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    hue_feather: {
      value: cdktf.stringToHclTerraform(struct!.hueFeather),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    hue_feather_var: {
      value: cdktf.stringToHclTerraform(struct!.hueFeatherVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    hue_tolerance: {
      value: cdktf.stringToHclTerraform(struct!.hueTolerance),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    hue_tolerance_var: {
      value: cdktf.stringToHclTerraform(struct!.hueToleranceVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    hue_var: {
      value: cdktf.stringToHclTerraform(struct!.hueVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    lightness_feather: {
      value: cdktf.stringToHclTerraform(struct!.lightnessFeather),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    lightness_feather_var: {
      value: cdktf.stringToHclTerraform(struct!.lightnessFeatherVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    lightness_tolerance: {
      value: cdktf.stringToHclTerraform(struct!.lightnessTolerance),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    lightness_tolerance_var: {
      value: cdktf.stringToHclTerraform(struct!.lightnessToleranceVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    saturation_feather: {
      value: cdktf.stringToHclTerraform(struct!.saturationFeather),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    saturation_feather_var: {
      value: cdktf.stringToHclTerraform(struct!.saturationFeatherVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    saturation_tolerance: {
      value: cdktf.stringToHclTerraform(struct!.saturationTolerance),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    saturation_tolerance_var: {
      value: cdktf.stringToHclTerraform(struct!.saturationToleranceVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeChromaKeyOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeChromaKey | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._hue !== undefined) {
      hasAnyValues = true;
      internalValueResult.hue = this._hue;
    }
    if (this._hueFeather !== undefined) {
      hasAnyValues = true;
      internalValueResult.hueFeather = this._hueFeather;
    }
    if (this._hueFeatherVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.hueFeatherVar = this._hueFeatherVar;
    }
    if (this._hueTolerance !== undefined) {
      hasAnyValues = true;
      internalValueResult.hueTolerance = this._hueTolerance;
    }
    if (this._hueToleranceVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.hueToleranceVar = this._hueToleranceVar;
    }
    if (this._hueVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.hueVar = this._hueVar;
    }
    if (this._lightnessFeather !== undefined) {
      hasAnyValues = true;
      internalValueResult.lightnessFeather = this._lightnessFeather;
    }
    if (this._lightnessFeatherVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.lightnessFeatherVar = this._lightnessFeatherVar;
    }
    if (this._lightnessTolerance !== undefined) {
      hasAnyValues = true;
      internalValueResult.lightnessTolerance = this._lightnessTolerance;
    }
    if (this._lightnessToleranceVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.lightnessToleranceVar = this._lightnessToleranceVar;
    }
    if (this._saturationFeather !== undefined) {
      hasAnyValues = true;
      internalValueResult.saturationFeather = this._saturationFeather;
    }
    if (this._saturationFeatherVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.saturationFeatherVar = this._saturationFeatherVar;
    }
    if (this._saturationTolerance !== undefined) {
      hasAnyValues = true;
      internalValueResult.saturationTolerance = this._saturationTolerance;
    }
    if (this._saturationToleranceVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.saturationToleranceVar = this._saturationToleranceVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeChromaKey | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._hue = undefined;
      this._hueFeather = undefined;
      this._hueFeatherVar = undefined;
      this._hueTolerance = undefined;
      this._hueToleranceVar = undefined;
      this._hueVar = undefined;
      this._lightnessFeather = undefined;
      this._lightnessFeatherVar = undefined;
      this._lightnessTolerance = undefined;
      this._lightnessToleranceVar = undefined;
      this._saturationFeather = undefined;
      this._saturationFeatherVar = undefined;
      this._saturationTolerance = undefined;
      this._saturationToleranceVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._hue = value.hue;
      this._hueFeather = value.hueFeather;
      this._hueFeatherVar = value.hueFeatherVar;
      this._hueTolerance = value.hueTolerance;
      this._hueToleranceVar = value.hueToleranceVar;
      this._hueVar = value.hueVar;
      this._lightnessFeather = value.lightnessFeather;
      this._lightnessFeatherVar = value.lightnessFeatherVar;
      this._lightnessTolerance = value.lightnessTolerance;
      this._lightnessToleranceVar = value.lightnessToleranceVar;
      this._saturationFeather = value.saturationFeather;
      this._saturationFeatherVar = value.saturationFeatherVar;
      this._saturationTolerance = value.saturationTolerance;
      this._saturationToleranceVar = value.saturationToleranceVar;
    }
  }

  // hue - computed: false, optional: true, required: false
  private _hue?: string; 
  public get hue() {
    return this.getStringAttribute('hue');
  }
  public set hue(value: string) {
    this._hue = value;
  }
  public resetHue() {
    this._hue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hueInput() {
    return this._hue;
  }

  // hue_feather - computed: false, optional: true, required: false
  private _hueFeather?: string; 
  public get hueFeather() {
    return this.getStringAttribute('hue_feather');
  }
  public set hueFeather(value: string) {
    this._hueFeather = value;
  }
  public resetHueFeather() {
    this._hueFeather = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hueFeatherInput() {
    return this._hueFeather;
  }

  // hue_feather_var - computed: false, optional: true, required: false
  private _hueFeatherVar?: string; 
  public get hueFeatherVar() {
    return this.getStringAttribute('hue_feather_var');
  }
  public set hueFeatherVar(value: string) {
    this._hueFeatherVar = value;
  }
  public resetHueFeatherVar() {
    this._hueFeatherVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hueFeatherVarInput() {
    return this._hueFeatherVar;
  }

  // hue_tolerance - computed: false, optional: true, required: false
  private _hueTolerance?: string; 
  public get hueTolerance() {
    return this.getStringAttribute('hue_tolerance');
  }
  public set hueTolerance(value: string) {
    this._hueTolerance = value;
  }
  public resetHueTolerance() {
    this._hueTolerance = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hueToleranceInput() {
    return this._hueTolerance;
  }

  // hue_tolerance_var - computed: false, optional: true, required: false
  private _hueToleranceVar?: string; 
  public get hueToleranceVar() {
    return this.getStringAttribute('hue_tolerance_var');
  }
  public set hueToleranceVar(value: string) {
    this._hueToleranceVar = value;
  }
  public resetHueToleranceVar() {
    this._hueToleranceVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hueToleranceVarInput() {
    return this._hueToleranceVar;
  }

  // hue_var - computed: false, optional: true, required: false
  private _hueVar?: string; 
  public get hueVar() {
    return this.getStringAttribute('hue_var');
  }
  public set hueVar(value: string) {
    this._hueVar = value;
  }
  public resetHueVar() {
    this._hueVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hueVarInput() {
    return this._hueVar;
  }

  // lightness_feather - computed: false, optional: true, required: false
  private _lightnessFeather?: string; 
  public get lightnessFeather() {
    return this.getStringAttribute('lightness_feather');
  }
  public set lightnessFeather(value: string) {
    this._lightnessFeather = value;
  }
  public resetLightnessFeather() {
    this._lightnessFeather = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get lightnessFeatherInput() {
    return this._lightnessFeather;
  }

  // lightness_feather_var - computed: false, optional: true, required: false
  private _lightnessFeatherVar?: string; 
  public get lightnessFeatherVar() {
    return this.getStringAttribute('lightness_feather_var');
  }
  public set lightnessFeatherVar(value: string) {
    this._lightnessFeatherVar = value;
  }
  public resetLightnessFeatherVar() {
    this._lightnessFeatherVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get lightnessFeatherVarInput() {
    return this._lightnessFeatherVar;
  }

  // lightness_tolerance - computed: false, optional: true, required: false
  private _lightnessTolerance?: string; 
  public get lightnessTolerance() {
    return this.getStringAttribute('lightness_tolerance');
  }
  public set lightnessTolerance(value: string) {
    this._lightnessTolerance = value;
  }
  public resetLightnessTolerance() {
    this._lightnessTolerance = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get lightnessToleranceInput() {
    return this._lightnessTolerance;
  }

  // lightness_tolerance_var - computed: false, optional: true, required: false
  private _lightnessToleranceVar?: string; 
  public get lightnessToleranceVar() {
    return this.getStringAttribute('lightness_tolerance_var');
  }
  public set lightnessToleranceVar(value: string) {
    this._lightnessToleranceVar = value;
  }
  public resetLightnessToleranceVar() {
    this._lightnessToleranceVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get lightnessToleranceVarInput() {
    return this._lightnessToleranceVar;
  }

  // saturation_feather - computed: false, optional: true, required: false
  private _saturationFeather?: string; 
  public get saturationFeather() {
    return this.getStringAttribute('saturation_feather');
  }
  public set saturationFeather(value: string) {
    this._saturationFeather = value;
  }
  public resetSaturationFeather() {
    this._saturationFeather = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get saturationFeatherInput() {
    return this._saturationFeather;
  }

  // saturation_feather_var - computed: false, optional: true, required: false
  private _saturationFeatherVar?: string; 
  public get saturationFeatherVar() {
    return this.getStringAttribute('saturation_feather_var');
  }
  public set saturationFeatherVar(value: string) {
    this._saturationFeatherVar = value;
  }
  public resetSaturationFeatherVar() {
    this._saturationFeatherVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get saturationFeatherVarInput() {
    return this._saturationFeatherVar;
  }

  // saturation_tolerance - computed: false, optional: true, required: false
  private _saturationTolerance?: string; 
  public get saturationTolerance() {
    return this.getStringAttribute('saturation_tolerance');
  }
  public set saturationTolerance(value: string) {
    this._saturationTolerance = value;
  }
  public resetSaturationTolerance() {
    this._saturationTolerance = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get saturationToleranceInput() {
    return this._saturationTolerance;
  }

  // saturation_tolerance_var - computed: false, optional: true, required: false
  private _saturationToleranceVar?: string; 
  public get saturationToleranceVar() {
    return this.getStringAttribute('saturation_tolerance_var');
  }
  public set saturationToleranceVar(value: string) {
    this._saturationToleranceVar = value;
  }
  public resetSaturationToleranceVar() {
    this._saturationToleranceVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get saturationToleranceVarInput() {
    return this._saturationToleranceVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeChromaKeyList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeChromaKey[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeChromaKeyOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeChromaKeyOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeCompositeImage {
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeCompositeImageToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeCompositeImageOutputReference | DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeCompositeImage): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeCompositeImageToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeCompositeImageOutputReference | DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeCompositeImage): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
  };
  return attrs;
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeCompositeImageOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false, 0);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeCompositeImage | undefined {
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeCompositeImage | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
    }
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeComposite {
  /**
  * Compass direction indicating the corner or edge of the base image to place the applied image. Use Horizontal and Vertical Offset to adjust the applied image's gravity position
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#gravity DataAkamaiImagingPolicyImage#gravity}
  */
  readonly gravity?: string;
  /**
  * Compass direction indicating the corner or edge of the base image to place the applied image. Use Horizontal and Vertical Offset to adjust the applied image's gravity position
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#gravity_var DataAkamaiImagingPolicyImage#gravity_var}
  */
  readonly gravityVar?: string;
  /**
  * Place applied image on top of or underneath the base image. Watermarks are usually applied over. Backgrounds are usually applied under.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#placement DataAkamaiImagingPolicyImage#placement}
  */
  readonly placement?: string;
  /**
  * Place applied image on top of or underneath the base image. Watermarks are usually applied over. Backgrounds are usually applied under.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#placement_var DataAkamaiImagingPolicyImage#placement_var}
  */
  readonly placementVar?: string;
  /**
  * A multiplier to resize the applied image relative to the source image and preserve aspect ratio, 1 by default. Set the `scaleDimension` to calculate the `scale` from the source image's width or height.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#scale DataAkamaiImagingPolicyImage#scale}
  */
  readonly scale?: string;
  /**
  * The dimension, either `width` or `height`, of the source image to scale.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#scale_dimension DataAkamaiImagingPolicyImage#scale_dimension}
  */
  readonly scaleDimension?: string;
  /**
  * The dimension, either `width` or `height`, of the source image to scale.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#scale_dimension_var DataAkamaiImagingPolicyImage#scale_dimension_var}
  */
  readonly scaleDimensionVar?: string;
  /**
  * A multiplier to resize the applied image relative to the source image and preserve aspect ratio, 1 by default. Set the `scaleDimension` to calculate the `scale` from the source image's width or height.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#scale_var DataAkamaiImagingPolicyImage#scale_var}
  */
  readonly scaleVar?: string;
  /**
  * The x-axis position of the image to apply.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#x_position DataAkamaiImagingPolicyImage#x_position}
  */
  readonly xPosition?: string;
  /**
  * The x-axis position of the image to apply.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#x_position_var DataAkamaiImagingPolicyImage#x_position_var}
  */
  readonly xPositionVar?: string;
  /**
  * The y-axis position of the image to apply.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#y_position DataAkamaiImagingPolicyImage#y_position}
  */
  readonly yPosition?: string;
  /**
  * The y-axis position of the image to apply.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#y_position_var DataAkamaiImagingPolicyImage#y_position_var}
  */
  readonly yPositionVar?: string;
  /**
  * image block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#image DataAkamaiImagingPolicyImage#image}
  */
  readonly image: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeCompositeImage;
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeCompositeToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeComposite | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    gravity: cdktf.stringToTerraform(struct!.gravity),
    gravity_var: cdktf.stringToTerraform(struct!.gravityVar),
    placement: cdktf.stringToTerraform(struct!.placement),
    placement_var: cdktf.stringToTerraform(struct!.placementVar),
    scale: cdktf.stringToTerraform(struct!.scale),
    scale_dimension: cdktf.stringToTerraform(struct!.scaleDimension),
    scale_dimension_var: cdktf.stringToTerraform(struct!.scaleDimensionVar),
    scale_var: cdktf.stringToTerraform(struct!.scaleVar),
    x_position: cdktf.stringToTerraform(struct!.xPosition),
    x_position_var: cdktf.stringToTerraform(struct!.xPositionVar),
    y_position: cdktf.stringToTerraform(struct!.yPosition),
    y_position_var: cdktf.stringToTerraform(struct!.yPositionVar),
    image: dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeCompositeImageToTerraform(struct!.image),
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeCompositeToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeComposite | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    gravity: {
      value: cdktf.stringToHclTerraform(struct!.gravity),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    gravity_var: {
      value: cdktf.stringToHclTerraform(struct!.gravityVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    placement: {
      value: cdktf.stringToHclTerraform(struct!.placement),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    placement_var: {
      value: cdktf.stringToHclTerraform(struct!.placementVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    scale: {
      value: cdktf.stringToHclTerraform(struct!.scale),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    scale_dimension: {
      value: cdktf.stringToHclTerraform(struct!.scaleDimension),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    scale_dimension_var: {
      value: cdktf.stringToHclTerraform(struct!.scaleDimensionVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    scale_var: {
      value: cdktf.stringToHclTerraform(struct!.scaleVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    x_position: {
      value: cdktf.stringToHclTerraform(struct!.xPosition),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    x_position_var: {
      value: cdktf.stringToHclTerraform(struct!.xPositionVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    y_position: {
      value: cdktf.stringToHclTerraform(struct!.yPosition),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    y_position_var: {
      value: cdktf.stringToHclTerraform(struct!.yPositionVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    image: {
      value: dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeCompositeImageToHclTerraform(struct!.image),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeCompositeImageList",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeCompositeOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeComposite | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._gravity !== undefined) {
      hasAnyValues = true;
      internalValueResult.gravity = this._gravity;
    }
    if (this._gravityVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.gravityVar = this._gravityVar;
    }
    if (this._placement !== undefined) {
      hasAnyValues = true;
      internalValueResult.placement = this._placement;
    }
    if (this._placementVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.placementVar = this._placementVar;
    }
    if (this._scale !== undefined) {
      hasAnyValues = true;
      internalValueResult.scale = this._scale;
    }
    if (this._scaleDimension !== undefined) {
      hasAnyValues = true;
      internalValueResult.scaleDimension = this._scaleDimension;
    }
    if (this._scaleDimensionVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.scaleDimensionVar = this._scaleDimensionVar;
    }
    if (this._scaleVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.scaleVar = this._scaleVar;
    }
    if (this._xPosition !== undefined) {
      hasAnyValues = true;
      internalValueResult.xPosition = this._xPosition;
    }
    if (this._xPositionVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.xPositionVar = this._xPositionVar;
    }
    if (this._yPosition !== undefined) {
      hasAnyValues = true;
      internalValueResult.yPosition = this._yPosition;
    }
    if (this._yPositionVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.yPositionVar = this._yPositionVar;
    }
    if (this._image?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.image = this._image?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeComposite | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._gravity = undefined;
      this._gravityVar = undefined;
      this._placement = undefined;
      this._placementVar = undefined;
      this._scale = undefined;
      this._scaleDimension = undefined;
      this._scaleDimensionVar = undefined;
      this._scaleVar = undefined;
      this._xPosition = undefined;
      this._xPositionVar = undefined;
      this._yPosition = undefined;
      this._yPositionVar = undefined;
      this._image.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._gravity = value.gravity;
      this._gravityVar = value.gravityVar;
      this._placement = value.placement;
      this._placementVar = value.placementVar;
      this._scale = value.scale;
      this._scaleDimension = value.scaleDimension;
      this._scaleDimensionVar = value.scaleDimensionVar;
      this._scaleVar = value.scaleVar;
      this._xPosition = value.xPosition;
      this._xPositionVar = value.xPositionVar;
      this._yPosition = value.yPosition;
      this._yPositionVar = value.yPositionVar;
      this._image.internalValue = value.image;
    }
  }

  // gravity - computed: false, optional: true, required: false
  private _gravity?: string; 
  public get gravity() {
    return this.getStringAttribute('gravity');
  }
  public set gravity(value: string) {
    this._gravity = value;
  }
  public resetGravity() {
    this._gravity = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get gravityInput() {
    return this._gravity;
  }

  // gravity_var - computed: false, optional: true, required: false
  private _gravityVar?: string; 
  public get gravityVar() {
    return this.getStringAttribute('gravity_var');
  }
  public set gravityVar(value: string) {
    this._gravityVar = value;
  }
  public resetGravityVar() {
    this._gravityVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get gravityVarInput() {
    return this._gravityVar;
  }

  // placement - computed: false, optional: true, required: false
  private _placement?: string; 
  public get placement() {
    return this.getStringAttribute('placement');
  }
  public set placement(value: string) {
    this._placement = value;
  }
  public resetPlacement() {
    this._placement = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get placementInput() {
    return this._placement;
  }

  // placement_var - computed: false, optional: true, required: false
  private _placementVar?: string; 
  public get placementVar() {
    return this.getStringAttribute('placement_var');
  }
  public set placementVar(value: string) {
    this._placementVar = value;
  }
  public resetPlacementVar() {
    this._placementVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get placementVarInput() {
    return this._placementVar;
  }

  // scale - computed: false, optional: true, required: false
  private _scale?: string; 
  public get scale() {
    return this.getStringAttribute('scale');
  }
  public set scale(value: string) {
    this._scale = value;
  }
  public resetScale() {
    this._scale = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get scaleInput() {
    return this._scale;
  }

  // scale_dimension - computed: false, optional: true, required: false
  private _scaleDimension?: string; 
  public get scaleDimension() {
    return this.getStringAttribute('scale_dimension');
  }
  public set scaleDimension(value: string) {
    this._scaleDimension = value;
  }
  public resetScaleDimension() {
    this._scaleDimension = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get scaleDimensionInput() {
    return this._scaleDimension;
  }

  // scale_dimension_var - computed: false, optional: true, required: false
  private _scaleDimensionVar?: string; 
  public get scaleDimensionVar() {
    return this.getStringAttribute('scale_dimension_var');
  }
  public set scaleDimensionVar(value: string) {
    this._scaleDimensionVar = value;
  }
  public resetScaleDimensionVar() {
    this._scaleDimensionVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get scaleDimensionVarInput() {
    return this._scaleDimensionVar;
  }

  // scale_var - computed: false, optional: true, required: false
  private _scaleVar?: string; 
  public get scaleVar() {
    return this.getStringAttribute('scale_var');
  }
  public set scaleVar(value: string) {
    this._scaleVar = value;
  }
  public resetScaleVar() {
    this._scaleVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get scaleVarInput() {
    return this._scaleVar;
  }

  // x_position - computed: false, optional: true, required: false
  private _xPosition?: string; 
  public get xPosition() {
    return this.getStringAttribute('x_position');
  }
  public set xPosition(value: string) {
    this._xPosition = value;
  }
  public resetXPosition() {
    this._xPosition = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get xPositionInput() {
    return this._xPosition;
  }

  // x_position_var - computed: false, optional: true, required: false
  private _xPositionVar?: string; 
  public get xPositionVar() {
    return this.getStringAttribute('x_position_var');
  }
  public set xPositionVar(value: string) {
    this._xPositionVar = value;
  }
  public resetXPositionVar() {
    this._xPositionVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get xPositionVarInput() {
    return this._xPositionVar;
  }

  // y_position - computed: false, optional: true, required: false
  private _yPosition?: string; 
  public get yPosition() {
    return this.getStringAttribute('y_position');
  }
  public set yPosition(value: string) {
    this._yPosition = value;
  }
  public resetYPosition() {
    this._yPosition = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get yPositionInput() {
    return this._yPosition;
  }

  // y_position_var - computed: false, optional: true, required: false
  private _yPositionVar?: string; 
  public get yPositionVar() {
    return this.getStringAttribute('y_position_var');
  }
  public set yPositionVar(value: string) {
    this._yPositionVar = value;
  }
  public resetYPositionVar() {
    this._yPositionVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get yPositionVarInput() {
    return this._yPositionVar;
  }

  // image - computed: false, optional: false, required: true
  private _image = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeCompositeImageOutputReference(this, "image");
  public get image() {
    return this._image;
  }
  public putImage(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeCompositeImage) {
    this._image.internalValue = value;
  }
  // Temporarily expose input value. Use with caution.
  public get imageInput() {
    return this._image.internalValue;
  }
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeCompositeList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeComposite[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeCompositeOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeCompositeOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeCompoundTransformations {
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeCompoundTransformationsToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeCompoundTransformations | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeCompoundTransformationsToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeCompoundTransformations | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
  };
  return attrs;
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeCompoundTransformationsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeCompoundTransformations | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeCompoundTransformations | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
    }
  }
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeCompoundTransformationsList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeCompoundTransformations[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeCompoundTransformationsOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeCompoundTransformationsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeCompound {
  /**
  * transformations block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#transformations DataAkamaiImagingPolicyImage#transformations}
  */
  readonly transformations?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeCompoundTransformations[] | cdktf.IResolvable;
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeCompoundToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeCompound | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    transformations: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeCompoundTransformationsToTerraform, true)(struct!.transformations),
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeCompoundToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeCompound | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    transformations: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeCompoundTransformationsToHclTerraform, true)(struct!.transformations),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeCompoundTransformationsList",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeCompoundOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeCompound | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._transformations?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.transformations = this._transformations?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeCompound | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._transformations.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._transformations.internalValue = value.transformations;
    }
  }

  // transformations - computed: false, optional: true, required: false
  private _transformations = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeCompoundTransformationsList(this, "transformations", false);
  public get transformations() {
    return this._transformations;
  }
  public putTransformations(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeCompoundTransformations[] | cdktf.IResolvable) {
    this._transformations.internalValue = value;
  }
  public resetTransformations() {
    this._transformations.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get transformationsInput() {
    return this._transformations.internalValue;
  }
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeCompoundList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeCompound[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeCompoundOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeCompoundOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeContrast {
  /**
  * Adjusts the brightness of the image. Positive values increase brightness and negative values decrease brightness. A value of  `1` produces a white image. A value of  `-1` produces a black image. The default value is `0`, which leaves the image unchanged. The acceptable value range is `-1.0` to `1.0`. Values outside of the acceptable range clamp to this range.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#brightness DataAkamaiImagingPolicyImage#brightness}
  */
  readonly brightness?: string;
  /**
  * Adjusts the brightness of the image. Positive values increase brightness and negative values decrease brightness. A value of  `1` produces a white image. A value of  `-1` produces a black image. The default value is `0`, which leaves the image unchanged. The acceptable value range is `-1.0` to `1.0`. Values outside of the acceptable range clamp to this range.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#brightness_var DataAkamaiImagingPolicyImage#brightness_var}
  */
  readonly brightnessVar?: string;
  /**
  * Adjusts the contrast of the image. Expressed as a range from `-1` to `1`, positive values increase contrast, negative values decrease it, while `0` leaves the image unchanged. Values outside of the `-1` to `1` range clamp to this range.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#contrast DataAkamaiImagingPolicyImage#contrast}
  */
  readonly contrast?: string;
  /**
  * Adjusts the contrast of the image. Expressed as a range from `-1` to `1`, positive values increase contrast, negative values decrease it, while `0` leaves the image unchanged. Values outside of the `-1` to `1` range clamp to this range.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#contrast_var DataAkamaiImagingPolicyImage#contrast_var}
  */
  readonly contrastVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeContrastToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeContrast | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    brightness: cdktf.stringToTerraform(struct!.brightness),
    brightness_var: cdktf.stringToTerraform(struct!.brightnessVar),
    contrast: cdktf.stringToTerraform(struct!.contrast),
    contrast_var: cdktf.stringToTerraform(struct!.contrastVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeContrastToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeContrast | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    brightness: {
      value: cdktf.stringToHclTerraform(struct!.brightness),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    brightness_var: {
      value: cdktf.stringToHclTerraform(struct!.brightnessVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    contrast: {
      value: cdktf.stringToHclTerraform(struct!.contrast),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    contrast_var: {
      value: cdktf.stringToHclTerraform(struct!.contrastVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeContrastOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeContrast | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._brightness !== undefined) {
      hasAnyValues = true;
      internalValueResult.brightness = this._brightness;
    }
    if (this._brightnessVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.brightnessVar = this._brightnessVar;
    }
    if (this._contrast !== undefined) {
      hasAnyValues = true;
      internalValueResult.contrast = this._contrast;
    }
    if (this._contrastVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.contrastVar = this._contrastVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeContrast | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._brightness = undefined;
      this._brightnessVar = undefined;
      this._contrast = undefined;
      this._contrastVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._brightness = value.brightness;
      this._brightnessVar = value.brightnessVar;
      this._contrast = value.contrast;
      this._contrastVar = value.contrastVar;
    }
  }

  // brightness - computed: false, optional: true, required: false
  private _brightness?: string; 
  public get brightness() {
    return this.getStringAttribute('brightness');
  }
  public set brightness(value: string) {
    this._brightness = value;
  }
  public resetBrightness() {
    this._brightness = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get brightnessInput() {
    return this._brightness;
  }

  // brightness_var - computed: false, optional: true, required: false
  private _brightnessVar?: string; 
  public get brightnessVar() {
    return this.getStringAttribute('brightness_var');
  }
  public set brightnessVar(value: string) {
    this._brightnessVar = value;
  }
  public resetBrightnessVar() {
    this._brightnessVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get brightnessVarInput() {
    return this._brightnessVar;
  }

  // contrast - computed: false, optional: true, required: false
  private _contrast?: string; 
  public get contrast() {
    return this.getStringAttribute('contrast');
  }
  public set contrast(value: string) {
    this._contrast = value;
  }
  public resetContrast() {
    this._contrast = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get contrastInput() {
    return this._contrast;
  }

  // contrast_var - computed: false, optional: true, required: false
  private _contrastVar?: string; 
  public get contrastVar() {
    return this.getStringAttribute('contrast_var');
  }
  public set contrastVar(value: string) {
    this._contrastVar = value;
  }
  public resetContrastVar() {
    this._contrastVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get contrastVarInput() {
    return this._contrastVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeContrastList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeContrast[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeContrastOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeContrastOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeCrop {
  /**
  * If cropping an area outside of the existing canvas, expands the image canvas.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#allow_expansion DataAkamaiImagingPolicyImage#allow_expansion}
  */
  readonly allowExpansion?: string;
  /**
  * If cropping an area outside of the existing canvas, expands the image canvas.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#allow_expansion_var DataAkamaiImagingPolicyImage#allow_expansion_var}
  */
  readonly allowExpansionVar?: string;
  /**
  * Frame of reference for X and Y Positions.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#gravity DataAkamaiImagingPolicyImage#gravity}
  */
  readonly gravity?: string;
  /**
  * Frame of reference for X and Y Positions.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#gravity_var DataAkamaiImagingPolicyImage#gravity_var}
  */
  readonly gravityVar?: string;
  /**
  * The number of pixels to crop along the y-axis.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#height DataAkamaiImagingPolicyImage#height}
  */
  readonly height?: string;
  /**
  * The number of pixels to crop along the y-axis.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#height_var DataAkamaiImagingPolicyImage#height_var}
  */
  readonly heightVar?: string;
  /**
  * The number of pixels to crop along the x-axis.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#width DataAkamaiImagingPolicyImage#width}
  */
  readonly width?: string;
  /**
  * The number of pixels to crop along the x-axis.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#width_var DataAkamaiImagingPolicyImage#width_var}
  */
  readonly widthVar?: string;
  /**
  * The x-axis position of the image to crop from.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#x_position DataAkamaiImagingPolicyImage#x_position}
  */
  readonly xPosition?: string;
  /**
  * The x-axis position of the image to crop from.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#x_position_var DataAkamaiImagingPolicyImage#x_position_var}
  */
  readonly xPositionVar?: string;
  /**
  * The y-axis position of the image to crop from.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#y_position DataAkamaiImagingPolicyImage#y_position}
  */
  readonly yPosition?: string;
  /**
  * The y-axis position of the image to crop from.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#y_position_var DataAkamaiImagingPolicyImage#y_position_var}
  */
  readonly yPositionVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeCropToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeCrop | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    allow_expansion: cdktf.stringToTerraform(struct!.allowExpansion),
    allow_expansion_var: cdktf.stringToTerraform(struct!.allowExpansionVar),
    gravity: cdktf.stringToTerraform(struct!.gravity),
    gravity_var: cdktf.stringToTerraform(struct!.gravityVar),
    height: cdktf.stringToTerraform(struct!.height),
    height_var: cdktf.stringToTerraform(struct!.heightVar),
    width: cdktf.stringToTerraform(struct!.width),
    width_var: cdktf.stringToTerraform(struct!.widthVar),
    x_position: cdktf.stringToTerraform(struct!.xPosition),
    x_position_var: cdktf.stringToTerraform(struct!.xPositionVar),
    y_position: cdktf.stringToTerraform(struct!.yPosition),
    y_position_var: cdktf.stringToTerraform(struct!.yPositionVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeCropToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeCrop | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    allow_expansion: {
      value: cdktf.stringToHclTerraform(struct!.allowExpansion),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    allow_expansion_var: {
      value: cdktf.stringToHclTerraform(struct!.allowExpansionVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    gravity: {
      value: cdktf.stringToHclTerraform(struct!.gravity),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    gravity_var: {
      value: cdktf.stringToHclTerraform(struct!.gravityVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    height: {
      value: cdktf.stringToHclTerraform(struct!.height),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    height_var: {
      value: cdktf.stringToHclTerraform(struct!.heightVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    width: {
      value: cdktf.stringToHclTerraform(struct!.width),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    width_var: {
      value: cdktf.stringToHclTerraform(struct!.widthVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    x_position: {
      value: cdktf.stringToHclTerraform(struct!.xPosition),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    x_position_var: {
      value: cdktf.stringToHclTerraform(struct!.xPositionVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    y_position: {
      value: cdktf.stringToHclTerraform(struct!.yPosition),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    y_position_var: {
      value: cdktf.stringToHclTerraform(struct!.yPositionVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeCropOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeCrop | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._allowExpansion !== undefined) {
      hasAnyValues = true;
      internalValueResult.allowExpansion = this._allowExpansion;
    }
    if (this._allowExpansionVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.allowExpansionVar = this._allowExpansionVar;
    }
    if (this._gravity !== undefined) {
      hasAnyValues = true;
      internalValueResult.gravity = this._gravity;
    }
    if (this._gravityVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.gravityVar = this._gravityVar;
    }
    if (this._height !== undefined) {
      hasAnyValues = true;
      internalValueResult.height = this._height;
    }
    if (this._heightVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.heightVar = this._heightVar;
    }
    if (this._width !== undefined) {
      hasAnyValues = true;
      internalValueResult.width = this._width;
    }
    if (this._widthVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.widthVar = this._widthVar;
    }
    if (this._xPosition !== undefined) {
      hasAnyValues = true;
      internalValueResult.xPosition = this._xPosition;
    }
    if (this._xPositionVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.xPositionVar = this._xPositionVar;
    }
    if (this._yPosition !== undefined) {
      hasAnyValues = true;
      internalValueResult.yPosition = this._yPosition;
    }
    if (this._yPositionVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.yPositionVar = this._yPositionVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeCrop | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._allowExpansion = undefined;
      this._allowExpansionVar = undefined;
      this._gravity = undefined;
      this._gravityVar = undefined;
      this._height = undefined;
      this._heightVar = undefined;
      this._width = undefined;
      this._widthVar = undefined;
      this._xPosition = undefined;
      this._xPositionVar = undefined;
      this._yPosition = undefined;
      this._yPositionVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._allowExpansion = value.allowExpansion;
      this._allowExpansionVar = value.allowExpansionVar;
      this._gravity = value.gravity;
      this._gravityVar = value.gravityVar;
      this._height = value.height;
      this._heightVar = value.heightVar;
      this._width = value.width;
      this._widthVar = value.widthVar;
      this._xPosition = value.xPosition;
      this._xPositionVar = value.xPositionVar;
      this._yPosition = value.yPosition;
      this._yPositionVar = value.yPositionVar;
    }
  }

  // allow_expansion - computed: false, optional: true, required: false
  private _allowExpansion?: string; 
  public get allowExpansion() {
    return this.getStringAttribute('allow_expansion');
  }
  public set allowExpansion(value: string) {
    this._allowExpansion = value;
  }
  public resetAllowExpansion() {
    this._allowExpansion = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get allowExpansionInput() {
    return this._allowExpansion;
  }

  // allow_expansion_var - computed: false, optional: true, required: false
  private _allowExpansionVar?: string; 
  public get allowExpansionVar() {
    return this.getStringAttribute('allow_expansion_var');
  }
  public set allowExpansionVar(value: string) {
    this._allowExpansionVar = value;
  }
  public resetAllowExpansionVar() {
    this._allowExpansionVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get allowExpansionVarInput() {
    return this._allowExpansionVar;
  }

  // gravity - computed: false, optional: true, required: false
  private _gravity?: string; 
  public get gravity() {
    return this.getStringAttribute('gravity');
  }
  public set gravity(value: string) {
    this._gravity = value;
  }
  public resetGravity() {
    this._gravity = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get gravityInput() {
    return this._gravity;
  }

  // gravity_var - computed: false, optional: true, required: false
  private _gravityVar?: string; 
  public get gravityVar() {
    return this.getStringAttribute('gravity_var');
  }
  public set gravityVar(value: string) {
    this._gravityVar = value;
  }
  public resetGravityVar() {
    this._gravityVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get gravityVarInput() {
    return this._gravityVar;
  }

  // height - computed: false, optional: true, required: false
  private _height?: string; 
  public get height() {
    return this.getStringAttribute('height');
  }
  public set height(value: string) {
    this._height = value;
  }
  public resetHeight() {
    this._height = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get heightInput() {
    return this._height;
  }

  // height_var - computed: false, optional: true, required: false
  private _heightVar?: string; 
  public get heightVar() {
    return this.getStringAttribute('height_var');
  }
  public set heightVar(value: string) {
    this._heightVar = value;
  }
  public resetHeightVar() {
    this._heightVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get heightVarInput() {
    return this._heightVar;
  }

  // width - computed: false, optional: true, required: false
  private _width?: string; 
  public get width() {
    return this.getStringAttribute('width');
  }
  public set width(value: string) {
    this._width = value;
  }
  public resetWidth() {
    this._width = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get widthInput() {
    return this._width;
  }

  // width_var - computed: false, optional: true, required: false
  private _widthVar?: string; 
  public get widthVar() {
    return this.getStringAttribute('width_var');
  }
  public set widthVar(value: string) {
    this._widthVar = value;
  }
  public resetWidthVar() {
    this._widthVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get widthVarInput() {
    return this._widthVar;
  }

  // x_position - computed: false, optional: true, required: false
  private _xPosition?: string; 
  public get xPosition() {
    return this.getStringAttribute('x_position');
  }
  public set xPosition(value: string) {
    this._xPosition = value;
  }
  public resetXPosition() {
    this._xPosition = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get xPositionInput() {
    return this._xPosition;
  }

  // x_position_var - computed: false, optional: true, required: false
  private _xPositionVar?: string; 
  public get xPositionVar() {
    return this.getStringAttribute('x_position_var');
  }
  public set xPositionVar(value: string) {
    this._xPositionVar = value;
  }
  public resetXPositionVar() {
    this._xPositionVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get xPositionVarInput() {
    return this._xPositionVar;
  }

  // y_position - computed: false, optional: true, required: false
  private _yPosition?: string; 
  public get yPosition() {
    return this.getStringAttribute('y_position');
  }
  public set yPosition(value: string) {
    this._yPosition = value;
  }
  public resetYPosition() {
    this._yPosition = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get yPositionInput() {
    return this._yPosition;
  }

  // y_position_var - computed: false, optional: true, required: false
  private _yPositionVar?: string; 
  public get yPositionVar() {
    return this.getStringAttribute('y_position_var');
  }
  public set yPositionVar(value: string) {
    this._yPositionVar = value;
  }
  public resetYPositionVar() {
    this._yPositionVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get yPositionVarInput() {
    return this._yPositionVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeCropList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeCrop[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeCropOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeCropOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeFaceCrop {
  /**
  * Specifies the type of algorithm used to detect faces in the image, either `cascade` for the cascade classifier algorithm or `dnn` for the deep neural network algorithm, `cascade` by default.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#algorithm DataAkamaiImagingPolicyImage#algorithm}
  */
  readonly algorithm?: string;
  /**
  * Specifies the type of algorithm used to detect faces in the image, either `cascade` for the cascade classifier algorithm or `dnn` for the deep neural network algorithm, `cascade` by default.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#algorithm_var DataAkamaiImagingPolicyImage#algorithm_var}
  */
  readonly algorithmVar?: string;
  /**
  * With `algorithm` set to `dnn`, specifies the minimum confidence needed to detect faces in the image. Values range from `0` to `1` for increased confidence, and possibly fewer faces detected.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#confidence DataAkamaiImagingPolicyImage#confidence}
  */
  readonly confidence?: string;
  /**
  * With `algorithm` set to `dnn`, specifies the minimum confidence needed to detect faces in the image. Values range from `0` to `1` for increased confidence, and possibly fewer faces detected.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#confidence_var DataAkamaiImagingPolicyImage#confidence_var}
  */
  readonly confidenceVar?: string;
  /**
  * Controls placement of the crop if Image and Video Manager does not detect any faces in the image. Directions are relative to the edges of the image being transformed.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#fail_gravity DataAkamaiImagingPolicyImage#fail_gravity}
  */
  readonly failGravity?: string;
  /**
  * Controls placement of the crop if Image and Video Manager does not detect any faces in the image. Directions are relative to the edges of the image being transformed.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#fail_gravity_var DataAkamaiImagingPolicyImage#fail_gravity_var}
  */
  readonly failGravityVar?: string;
  /**
  * Distinguishes the faces detected, either `biggestFace` or `allFaces` to place the crop rectangle around the full set of faces, `all` by default.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#focus DataAkamaiImagingPolicyImage#focus}
  */
  readonly focus?: string;
  /**
  * Distinguishes the faces detected, either `biggestFace` or `allFaces` to place the crop rectangle around the full set of faces, `all` by default.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#focus_var DataAkamaiImagingPolicyImage#focus_var}
  */
  readonly focusVar?: string;
  /**
  * Controls placement of the crop. Directions are relative to the face(s) plus padding.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#gravity DataAkamaiImagingPolicyImage#gravity}
  */
  readonly gravity?: string;
  /**
  * Controls placement of the crop. Directions are relative to the face(s) plus padding.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#gravity_var DataAkamaiImagingPolicyImage#gravity_var}
  */
  readonly gravityVar?: string;
  /**
  * The height of the output image in pixels relative to the specified `style` value.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#height DataAkamaiImagingPolicyImage#height}
  */
  readonly height?: string;
  /**
  * The height of the output image in pixels relative to the specified `style` value.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#height_var DataAkamaiImagingPolicyImage#height_var}
  */
  readonly heightVar?: string;
  /**
  * The padding ratio based on the dimensions of the biggest face detected, `0.5` by default. Larger values increase padding.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#padding DataAkamaiImagingPolicyImage#padding}
  */
  readonly padding?: string;
  /**
  * The padding ratio based on the dimensions of the biggest face detected, `0.5` by default. Larger values increase padding.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#padding_var DataAkamaiImagingPolicyImage#padding_var}
  */
  readonly paddingVar?: string;
  /**
  * Specifies how to crop or scale a crop area for the faces detected in the source image, `zoom` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` places a raw crop around the faces, relative to the specified `gravity` value.  A value of `fill` scales the crop area to include as much of the image and faces as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the faces, relative to the specified `width` and `height` values. Allows Variable substitution.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#style DataAkamaiImagingPolicyImage#style}
  */
  readonly style?: string;
  /**
  * Specifies how to crop or scale a crop area for the faces detected in the source image, `zoom` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` places a raw crop around the faces, relative to the specified `gravity` value.  A value of `fill` scales the crop area to include as much of the image and faces as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the faces, relative to the specified `width` and `height` values. Allows Variable substitution.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#style_var DataAkamaiImagingPolicyImage#style_var}
  */
  readonly styleVar?: string;
  /**
  * The width of the output image in pixels relative to the specified `style` value.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#width DataAkamaiImagingPolicyImage#width}
  */
  readonly width?: string;
  /**
  * The width of the output image in pixels relative to the specified `style` value.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#width_var DataAkamaiImagingPolicyImage#width_var}
  */
  readonly widthVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeFaceCropToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeFaceCrop | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    algorithm: cdktf.stringToTerraform(struct!.algorithm),
    algorithm_var: cdktf.stringToTerraform(struct!.algorithmVar),
    confidence: cdktf.stringToTerraform(struct!.confidence),
    confidence_var: cdktf.stringToTerraform(struct!.confidenceVar),
    fail_gravity: cdktf.stringToTerraform(struct!.failGravity),
    fail_gravity_var: cdktf.stringToTerraform(struct!.failGravityVar),
    focus: cdktf.stringToTerraform(struct!.focus),
    focus_var: cdktf.stringToTerraform(struct!.focusVar),
    gravity: cdktf.stringToTerraform(struct!.gravity),
    gravity_var: cdktf.stringToTerraform(struct!.gravityVar),
    height: cdktf.stringToTerraform(struct!.height),
    height_var: cdktf.stringToTerraform(struct!.heightVar),
    padding: cdktf.stringToTerraform(struct!.padding),
    padding_var: cdktf.stringToTerraform(struct!.paddingVar),
    style: cdktf.stringToTerraform(struct!.style),
    style_var: cdktf.stringToTerraform(struct!.styleVar),
    width: cdktf.stringToTerraform(struct!.width),
    width_var: cdktf.stringToTerraform(struct!.widthVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeFaceCropToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeFaceCrop | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    algorithm: {
      value: cdktf.stringToHclTerraform(struct!.algorithm),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    algorithm_var: {
      value: cdktf.stringToHclTerraform(struct!.algorithmVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    confidence: {
      value: cdktf.stringToHclTerraform(struct!.confidence),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    confidence_var: {
      value: cdktf.stringToHclTerraform(struct!.confidenceVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    fail_gravity: {
      value: cdktf.stringToHclTerraform(struct!.failGravity),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    fail_gravity_var: {
      value: cdktf.stringToHclTerraform(struct!.failGravityVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    focus: {
      value: cdktf.stringToHclTerraform(struct!.focus),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    focus_var: {
      value: cdktf.stringToHclTerraform(struct!.focusVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    gravity: {
      value: cdktf.stringToHclTerraform(struct!.gravity),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    gravity_var: {
      value: cdktf.stringToHclTerraform(struct!.gravityVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    height: {
      value: cdktf.stringToHclTerraform(struct!.height),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    height_var: {
      value: cdktf.stringToHclTerraform(struct!.heightVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    padding: {
      value: cdktf.stringToHclTerraform(struct!.padding),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    padding_var: {
      value: cdktf.stringToHclTerraform(struct!.paddingVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    style: {
      value: cdktf.stringToHclTerraform(struct!.style),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    style_var: {
      value: cdktf.stringToHclTerraform(struct!.styleVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    width: {
      value: cdktf.stringToHclTerraform(struct!.width),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    width_var: {
      value: cdktf.stringToHclTerraform(struct!.widthVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeFaceCropOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeFaceCrop | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._algorithm !== undefined) {
      hasAnyValues = true;
      internalValueResult.algorithm = this._algorithm;
    }
    if (this._algorithmVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.algorithmVar = this._algorithmVar;
    }
    if (this._confidence !== undefined) {
      hasAnyValues = true;
      internalValueResult.confidence = this._confidence;
    }
    if (this._confidenceVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.confidenceVar = this._confidenceVar;
    }
    if (this._failGravity !== undefined) {
      hasAnyValues = true;
      internalValueResult.failGravity = this._failGravity;
    }
    if (this._failGravityVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.failGravityVar = this._failGravityVar;
    }
    if (this._focus !== undefined) {
      hasAnyValues = true;
      internalValueResult.focus = this._focus;
    }
    if (this._focusVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.focusVar = this._focusVar;
    }
    if (this._gravity !== undefined) {
      hasAnyValues = true;
      internalValueResult.gravity = this._gravity;
    }
    if (this._gravityVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.gravityVar = this._gravityVar;
    }
    if (this._height !== undefined) {
      hasAnyValues = true;
      internalValueResult.height = this._height;
    }
    if (this._heightVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.heightVar = this._heightVar;
    }
    if (this._padding !== undefined) {
      hasAnyValues = true;
      internalValueResult.padding = this._padding;
    }
    if (this._paddingVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.paddingVar = this._paddingVar;
    }
    if (this._style !== undefined) {
      hasAnyValues = true;
      internalValueResult.style = this._style;
    }
    if (this._styleVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.styleVar = this._styleVar;
    }
    if (this._width !== undefined) {
      hasAnyValues = true;
      internalValueResult.width = this._width;
    }
    if (this._widthVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.widthVar = this._widthVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeFaceCrop | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._algorithm = undefined;
      this._algorithmVar = undefined;
      this._confidence = undefined;
      this._confidenceVar = undefined;
      this._failGravity = undefined;
      this._failGravityVar = undefined;
      this._focus = undefined;
      this._focusVar = undefined;
      this._gravity = undefined;
      this._gravityVar = undefined;
      this._height = undefined;
      this._heightVar = undefined;
      this._padding = undefined;
      this._paddingVar = undefined;
      this._style = undefined;
      this._styleVar = undefined;
      this._width = undefined;
      this._widthVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._algorithm = value.algorithm;
      this._algorithmVar = value.algorithmVar;
      this._confidence = value.confidence;
      this._confidenceVar = value.confidenceVar;
      this._failGravity = value.failGravity;
      this._failGravityVar = value.failGravityVar;
      this._focus = value.focus;
      this._focusVar = value.focusVar;
      this._gravity = value.gravity;
      this._gravityVar = value.gravityVar;
      this._height = value.height;
      this._heightVar = value.heightVar;
      this._padding = value.padding;
      this._paddingVar = value.paddingVar;
      this._style = value.style;
      this._styleVar = value.styleVar;
      this._width = value.width;
      this._widthVar = value.widthVar;
    }
  }

  // algorithm - computed: false, optional: true, required: false
  private _algorithm?: string; 
  public get algorithm() {
    return this.getStringAttribute('algorithm');
  }
  public set algorithm(value: string) {
    this._algorithm = value;
  }
  public resetAlgorithm() {
    this._algorithm = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get algorithmInput() {
    return this._algorithm;
  }

  // algorithm_var - computed: false, optional: true, required: false
  private _algorithmVar?: string; 
  public get algorithmVar() {
    return this.getStringAttribute('algorithm_var');
  }
  public set algorithmVar(value: string) {
    this._algorithmVar = value;
  }
  public resetAlgorithmVar() {
    this._algorithmVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get algorithmVarInput() {
    return this._algorithmVar;
  }

  // confidence - computed: false, optional: true, required: false
  private _confidence?: string; 
  public get confidence() {
    return this.getStringAttribute('confidence');
  }
  public set confidence(value: string) {
    this._confidence = value;
  }
  public resetConfidence() {
    this._confidence = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get confidenceInput() {
    return this._confidence;
  }

  // confidence_var - computed: false, optional: true, required: false
  private _confidenceVar?: string; 
  public get confidenceVar() {
    return this.getStringAttribute('confidence_var');
  }
  public set confidenceVar(value: string) {
    this._confidenceVar = value;
  }
  public resetConfidenceVar() {
    this._confidenceVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get confidenceVarInput() {
    return this._confidenceVar;
  }

  // fail_gravity - computed: false, optional: true, required: false
  private _failGravity?: string; 
  public get failGravity() {
    return this.getStringAttribute('fail_gravity');
  }
  public set failGravity(value: string) {
    this._failGravity = value;
  }
  public resetFailGravity() {
    this._failGravity = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get failGravityInput() {
    return this._failGravity;
  }

  // fail_gravity_var - computed: false, optional: true, required: false
  private _failGravityVar?: string; 
  public get failGravityVar() {
    return this.getStringAttribute('fail_gravity_var');
  }
  public set failGravityVar(value: string) {
    this._failGravityVar = value;
  }
  public resetFailGravityVar() {
    this._failGravityVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get failGravityVarInput() {
    return this._failGravityVar;
  }

  // focus - computed: false, optional: true, required: false
  private _focus?: string; 
  public get focus() {
    return this.getStringAttribute('focus');
  }
  public set focus(value: string) {
    this._focus = value;
  }
  public resetFocus() {
    this._focus = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get focusInput() {
    return this._focus;
  }

  // focus_var - computed: false, optional: true, required: false
  private _focusVar?: string; 
  public get focusVar() {
    return this.getStringAttribute('focus_var');
  }
  public set focusVar(value: string) {
    this._focusVar = value;
  }
  public resetFocusVar() {
    this._focusVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get focusVarInput() {
    return this._focusVar;
  }

  // gravity - computed: false, optional: true, required: false
  private _gravity?: string; 
  public get gravity() {
    return this.getStringAttribute('gravity');
  }
  public set gravity(value: string) {
    this._gravity = value;
  }
  public resetGravity() {
    this._gravity = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get gravityInput() {
    return this._gravity;
  }

  // gravity_var - computed: false, optional: true, required: false
  private _gravityVar?: string; 
  public get gravityVar() {
    return this.getStringAttribute('gravity_var');
  }
  public set gravityVar(value: string) {
    this._gravityVar = value;
  }
  public resetGravityVar() {
    this._gravityVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get gravityVarInput() {
    return this._gravityVar;
  }

  // height - computed: false, optional: true, required: false
  private _height?: string; 
  public get height() {
    return this.getStringAttribute('height');
  }
  public set height(value: string) {
    this._height = value;
  }
  public resetHeight() {
    this._height = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get heightInput() {
    return this._height;
  }

  // height_var - computed: false, optional: true, required: false
  private _heightVar?: string; 
  public get heightVar() {
    return this.getStringAttribute('height_var');
  }
  public set heightVar(value: string) {
    this._heightVar = value;
  }
  public resetHeightVar() {
    this._heightVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get heightVarInput() {
    return this._heightVar;
  }

  // padding - computed: false, optional: true, required: false
  private _padding?: string; 
  public get padding() {
    return this.getStringAttribute('padding');
  }
  public set padding(value: string) {
    this._padding = value;
  }
  public resetPadding() {
    this._padding = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get paddingInput() {
    return this._padding;
  }

  // padding_var - computed: false, optional: true, required: false
  private _paddingVar?: string; 
  public get paddingVar() {
    return this.getStringAttribute('padding_var');
  }
  public set paddingVar(value: string) {
    this._paddingVar = value;
  }
  public resetPaddingVar() {
    this._paddingVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get paddingVarInput() {
    return this._paddingVar;
  }

  // style - computed: false, optional: true, required: false
  private _style?: string; 
  public get style() {
    return this.getStringAttribute('style');
  }
  public set style(value: string) {
    this._style = value;
  }
  public resetStyle() {
    this._style = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get styleInput() {
    return this._style;
  }

  // style_var - computed: false, optional: true, required: false
  private _styleVar?: string; 
  public get styleVar() {
    return this.getStringAttribute('style_var');
  }
  public set styleVar(value: string) {
    this._styleVar = value;
  }
  public resetStyleVar() {
    this._styleVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get styleVarInput() {
    return this._styleVar;
  }

  // width - computed: false, optional: true, required: false
  private _width?: string; 
  public get width() {
    return this.getStringAttribute('width');
  }
  public set width(value: string) {
    this._width = value;
  }
  public resetWidth() {
    this._width = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get widthInput() {
    return this._width;
  }

  // width_var - computed: false, optional: true, required: false
  private _widthVar?: string; 
  public get widthVar() {
    return this.getStringAttribute('width_var');
  }
  public set widthVar(value: string) {
    this._widthVar = value;
  }
  public resetWidthVar() {
    this._widthVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get widthVarInput() {
    return this._widthVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeFaceCropList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeFaceCrop[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeFaceCropOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeFaceCropOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeFeatureCrop {
  /**
  * Controls placement of the crop if Image and Video Manager does not detect any features in the image. Directions are relative to the edges of the image being transformed.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#fail_gravity DataAkamaiImagingPolicyImage#fail_gravity}
  */
  readonly failGravity?: string;
  /**
  * Controls placement of the crop if Image and Video Manager does not detect any features in the image. Directions are relative to the edges of the image being transformed.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#fail_gravity_var DataAkamaiImagingPolicyImage#fail_gravity_var}
  */
  readonly failGravityVar?: string;
  /**
  * The size in pixels of the important features to search for. If identified, two features never appear closer together than this value, `8.0` by default.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#feature_radius DataAkamaiImagingPolicyImage#feature_radius}
  */
  readonly featureRadius?: string;
  /**
  * The size in pixels of the important features to search for. If identified, two features never appear closer together than this value, `8.0` by default.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#feature_radius_var DataAkamaiImagingPolicyImage#feature_radius_var}
  */
  readonly featureRadiusVar?: string;
  /**
  * Controls placement of the crop. Directions are relative to the region of interest plus padding.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#gravity DataAkamaiImagingPolicyImage#gravity}
  */
  readonly gravity?: string;
  /**
  * Controls placement of the crop. Directions are relative to the region of interest plus padding.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#gravity_var DataAkamaiImagingPolicyImage#gravity_var}
  */
  readonly gravityVar?: string;
  /**
  * The height in pixels of the output image relative to the specified `style` value.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#height DataAkamaiImagingPolicyImage#height}
  */
  readonly height?: string;
  /**
  * The height in pixels of the output image relative to the specified `style` value.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#height_var DataAkamaiImagingPolicyImage#height_var}
  */
  readonly heightVar?: string;
  /**
  * The maximum number of features to identify as important features, `32` by default. The strongest features are always chosen.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#max_features DataAkamaiImagingPolicyImage#max_features}
  */
  readonly maxFeatures?: string;
  /**
  * The maximum number of features to identify as important features, `32` by default. The strongest features are always chosen.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#max_features_var DataAkamaiImagingPolicyImage#max_features_var}
  */
  readonly maxFeaturesVar?: string;
  /**
  * Determines the minimum quality level of the feature identified. To consider a feature important, the feature needs to surpass this value.  Image and Video Manager measures quality on a scale from `0` for the lowest quality to `1` for the highest quality, `.1` by default.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#min_feature_quality DataAkamaiImagingPolicyImage#min_feature_quality}
  */
  readonly minFeatureQuality?: string;
  /**
  * Determines the minimum quality level of the feature identified. To consider a feature important, the feature needs to surpass this value.  Image and Video Manager measures quality on a scale from `0` for the lowest quality to `1` for the highest quality, `.1` by default.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#min_feature_quality_var DataAkamaiImagingPolicyImage#min_feature_quality_var}
  */
  readonly minFeatureQualityVar?: string;
  /**
  * Adds space around the region of interest. The amount of padding added is directly related to the size of the bounding box of the selected features. Specifically, the region of interest is expanded in all directions by the largest dimension of the bounding box of the selected features multiplied by this value.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#padding DataAkamaiImagingPolicyImage#padding}
  */
  readonly padding?: string;
  /**
  * Adds space around the region of interest. The amount of padding added is directly related to the size of the bounding box of the selected features. Specifically, the region of interest is expanded in all directions by the largest dimension of the bounding box of the selected features multiplied by this value.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#padding_var DataAkamaiImagingPolicyImage#padding_var}
  */
  readonly paddingVar?: string;
  /**
  * Specifies how to crop or scale a crop area for the features identified in the source image, `fill` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` performs a raw crop around the features, relative to the specified `gravity` value.  A value of `fill` scales the crop area to include as much of the image and features as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the features, relative to the specified `width` and `height` values. Allows Variable substitution.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#style DataAkamaiImagingPolicyImage#style}
  */
  readonly style?: string;
  /**
  * Specifies how to crop or scale a crop area for the features identified in the source image, `fill` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` performs a raw crop around the features, relative to the specified `gravity` value.  A value of `fill` scales the crop area to include as much of the image and features as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the features, relative to the specified `width` and `height` values. Allows Variable substitution.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#style_var DataAkamaiImagingPolicyImage#style_var}
  */
  readonly styleVar?: string;
  /**
  * The width in pixels of the output image relative to the specified `style` value.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#width DataAkamaiImagingPolicyImage#width}
  */
  readonly width?: string;
  /**
  * The width in pixels of the output image relative to the specified `style` value.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#width_var DataAkamaiImagingPolicyImage#width_var}
  */
  readonly widthVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeFeatureCropToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeFeatureCrop | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    fail_gravity: cdktf.stringToTerraform(struct!.failGravity),
    fail_gravity_var: cdktf.stringToTerraform(struct!.failGravityVar),
    feature_radius: cdktf.stringToTerraform(struct!.featureRadius),
    feature_radius_var: cdktf.stringToTerraform(struct!.featureRadiusVar),
    gravity: cdktf.stringToTerraform(struct!.gravity),
    gravity_var: cdktf.stringToTerraform(struct!.gravityVar),
    height: cdktf.stringToTerraform(struct!.height),
    height_var: cdktf.stringToTerraform(struct!.heightVar),
    max_features: cdktf.stringToTerraform(struct!.maxFeatures),
    max_features_var: cdktf.stringToTerraform(struct!.maxFeaturesVar),
    min_feature_quality: cdktf.stringToTerraform(struct!.minFeatureQuality),
    min_feature_quality_var: cdktf.stringToTerraform(struct!.minFeatureQualityVar),
    padding: cdktf.stringToTerraform(struct!.padding),
    padding_var: cdktf.stringToTerraform(struct!.paddingVar),
    style: cdktf.stringToTerraform(struct!.style),
    style_var: cdktf.stringToTerraform(struct!.styleVar),
    width: cdktf.stringToTerraform(struct!.width),
    width_var: cdktf.stringToTerraform(struct!.widthVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeFeatureCropToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeFeatureCrop | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    fail_gravity: {
      value: cdktf.stringToHclTerraform(struct!.failGravity),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    fail_gravity_var: {
      value: cdktf.stringToHclTerraform(struct!.failGravityVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    feature_radius: {
      value: cdktf.stringToHclTerraform(struct!.featureRadius),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    feature_radius_var: {
      value: cdktf.stringToHclTerraform(struct!.featureRadiusVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    gravity: {
      value: cdktf.stringToHclTerraform(struct!.gravity),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    gravity_var: {
      value: cdktf.stringToHclTerraform(struct!.gravityVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    height: {
      value: cdktf.stringToHclTerraform(struct!.height),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    height_var: {
      value: cdktf.stringToHclTerraform(struct!.heightVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    max_features: {
      value: cdktf.stringToHclTerraform(struct!.maxFeatures),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    max_features_var: {
      value: cdktf.stringToHclTerraform(struct!.maxFeaturesVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    min_feature_quality: {
      value: cdktf.stringToHclTerraform(struct!.minFeatureQuality),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    min_feature_quality_var: {
      value: cdktf.stringToHclTerraform(struct!.minFeatureQualityVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    padding: {
      value: cdktf.stringToHclTerraform(struct!.padding),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    padding_var: {
      value: cdktf.stringToHclTerraform(struct!.paddingVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    style: {
      value: cdktf.stringToHclTerraform(struct!.style),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    style_var: {
      value: cdktf.stringToHclTerraform(struct!.styleVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    width: {
      value: cdktf.stringToHclTerraform(struct!.width),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    width_var: {
      value: cdktf.stringToHclTerraform(struct!.widthVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeFeatureCropOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeFeatureCrop | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._failGravity !== undefined) {
      hasAnyValues = true;
      internalValueResult.failGravity = this._failGravity;
    }
    if (this._failGravityVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.failGravityVar = this._failGravityVar;
    }
    if (this._featureRadius !== undefined) {
      hasAnyValues = true;
      internalValueResult.featureRadius = this._featureRadius;
    }
    if (this._featureRadiusVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.featureRadiusVar = this._featureRadiusVar;
    }
    if (this._gravity !== undefined) {
      hasAnyValues = true;
      internalValueResult.gravity = this._gravity;
    }
    if (this._gravityVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.gravityVar = this._gravityVar;
    }
    if (this._height !== undefined) {
      hasAnyValues = true;
      internalValueResult.height = this._height;
    }
    if (this._heightVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.heightVar = this._heightVar;
    }
    if (this._maxFeatures !== undefined) {
      hasAnyValues = true;
      internalValueResult.maxFeatures = this._maxFeatures;
    }
    if (this._maxFeaturesVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.maxFeaturesVar = this._maxFeaturesVar;
    }
    if (this._minFeatureQuality !== undefined) {
      hasAnyValues = true;
      internalValueResult.minFeatureQuality = this._minFeatureQuality;
    }
    if (this._minFeatureQualityVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.minFeatureQualityVar = this._minFeatureQualityVar;
    }
    if (this._padding !== undefined) {
      hasAnyValues = true;
      internalValueResult.padding = this._padding;
    }
    if (this._paddingVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.paddingVar = this._paddingVar;
    }
    if (this._style !== undefined) {
      hasAnyValues = true;
      internalValueResult.style = this._style;
    }
    if (this._styleVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.styleVar = this._styleVar;
    }
    if (this._width !== undefined) {
      hasAnyValues = true;
      internalValueResult.width = this._width;
    }
    if (this._widthVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.widthVar = this._widthVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeFeatureCrop | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._failGravity = undefined;
      this._failGravityVar = undefined;
      this._featureRadius = undefined;
      this._featureRadiusVar = undefined;
      this._gravity = undefined;
      this._gravityVar = undefined;
      this._height = undefined;
      this._heightVar = undefined;
      this._maxFeatures = undefined;
      this._maxFeaturesVar = undefined;
      this._minFeatureQuality = undefined;
      this._minFeatureQualityVar = undefined;
      this._padding = undefined;
      this._paddingVar = undefined;
      this._style = undefined;
      this._styleVar = undefined;
      this._width = undefined;
      this._widthVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._failGravity = value.failGravity;
      this._failGravityVar = value.failGravityVar;
      this._featureRadius = value.featureRadius;
      this._featureRadiusVar = value.featureRadiusVar;
      this._gravity = value.gravity;
      this._gravityVar = value.gravityVar;
      this._height = value.height;
      this._heightVar = value.heightVar;
      this._maxFeatures = value.maxFeatures;
      this._maxFeaturesVar = value.maxFeaturesVar;
      this._minFeatureQuality = value.minFeatureQuality;
      this._minFeatureQualityVar = value.minFeatureQualityVar;
      this._padding = value.padding;
      this._paddingVar = value.paddingVar;
      this._style = value.style;
      this._styleVar = value.styleVar;
      this._width = value.width;
      this._widthVar = value.widthVar;
    }
  }

  // fail_gravity - computed: false, optional: true, required: false
  private _failGravity?: string; 
  public get failGravity() {
    return this.getStringAttribute('fail_gravity');
  }
  public set failGravity(value: string) {
    this._failGravity = value;
  }
  public resetFailGravity() {
    this._failGravity = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get failGravityInput() {
    return this._failGravity;
  }

  // fail_gravity_var - computed: false, optional: true, required: false
  private _failGravityVar?: string; 
  public get failGravityVar() {
    return this.getStringAttribute('fail_gravity_var');
  }
  public set failGravityVar(value: string) {
    this._failGravityVar = value;
  }
  public resetFailGravityVar() {
    this._failGravityVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get failGravityVarInput() {
    return this._failGravityVar;
  }

  // feature_radius - computed: false, optional: true, required: false
  private _featureRadius?: string; 
  public get featureRadius() {
    return this.getStringAttribute('feature_radius');
  }
  public set featureRadius(value: string) {
    this._featureRadius = value;
  }
  public resetFeatureRadius() {
    this._featureRadius = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get featureRadiusInput() {
    return this._featureRadius;
  }

  // feature_radius_var - computed: false, optional: true, required: false
  private _featureRadiusVar?: string; 
  public get featureRadiusVar() {
    return this.getStringAttribute('feature_radius_var');
  }
  public set featureRadiusVar(value: string) {
    this._featureRadiusVar = value;
  }
  public resetFeatureRadiusVar() {
    this._featureRadiusVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get featureRadiusVarInput() {
    return this._featureRadiusVar;
  }

  // gravity - computed: false, optional: true, required: false
  private _gravity?: string; 
  public get gravity() {
    return this.getStringAttribute('gravity');
  }
  public set gravity(value: string) {
    this._gravity = value;
  }
  public resetGravity() {
    this._gravity = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get gravityInput() {
    return this._gravity;
  }

  // gravity_var - computed: false, optional: true, required: false
  private _gravityVar?: string; 
  public get gravityVar() {
    return this.getStringAttribute('gravity_var');
  }
  public set gravityVar(value: string) {
    this._gravityVar = value;
  }
  public resetGravityVar() {
    this._gravityVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get gravityVarInput() {
    return this._gravityVar;
  }

  // height - computed: false, optional: true, required: false
  private _height?: string; 
  public get height() {
    return this.getStringAttribute('height');
  }
  public set height(value: string) {
    this._height = value;
  }
  public resetHeight() {
    this._height = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get heightInput() {
    return this._height;
  }

  // height_var - computed: false, optional: true, required: false
  private _heightVar?: string; 
  public get heightVar() {
    return this.getStringAttribute('height_var');
  }
  public set heightVar(value: string) {
    this._heightVar = value;
  }
  public resetHeightVar() {
    this._heightVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get heightVarInput() {
    return this._heightVar;
  }

  // max_features - computed: false, optional: true, required: false
  private _maxFeatures?: string; 
  public get maxFeatures() {
    return this.getStringAttribute('max_features');
  }
  public set maxFeatures(value: string) {
    this._maxFeatures = value;
  }
  public resetMaxFeatures() {
    this._maxFeatures = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get maxFeaturesInput() {
    return this._maxFeatures;
  }

  // max_features_var - computed: false, optional: true, required: false
  private _maxFeaturesVar?: string; 
  public get maxFeaturesVar() {
    return this.getStringAttribute('max_features_var');
  }
  public set maxFeaturesVar(value: string) {
    this._maxFeaturesVar = value;
  }
  public resetMaxFeaturesVar() {
    this._maxFeaturesVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get maxFeaturesVarInput() {
    return this._maxFeaturesVar;
  }

  // min_feature_quality - computed: false, optional: true, required: false
  private _minFeatureQuality?: string; 
  public get minFeatureQuality() {
    return this.getStringAttribute('min_feature_quality');
  }
  public set minFeatureQuality(value: string) {
    this._minFeatureQuality = value;
  }
  public resetMinFeatureQuality() {
    this._minFeatureQuality = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get minFeatureQualityInput() {
    return this._minFeatureQuality;
  }

  // min_feature_quality_var - computed: false, optional: true, required: false
  private _minFeatureQualityVar?: string; 
  public get minFeatureQualityVar() {
    return this.getStringAttribute('min_feature_quality_var');
  }
  public set minFeatureQualityVar(value: string) {
    this._minFeatureQualityVar = value;
  }
  public resetMinFeatureQualityVar() {
    this._minFeatureQualityVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get minFeatureQualityVarInput() {
    return this._minFeatureQualityVar;
  }

  // padding - computed: false, optional: true, required: false
  private _padding?: string; 
  public get padding() {
    return this.getStringAttribute('padding');
  }
  public set padding(value: string) {
    this._padding = value;
  }
  public resetPadding() {
    this._padding = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get paddingInput() {
    return this._padding;
  }

  // padding_var - computed: false, optional: true, required: false
  private _paddingVar?: string; 
  public get paddingVar() {
    return this.getStringAttribute('padding_var');
  }
  public set paddingVar(value: string) {
    this._paddingVar = value;
  }
  public resetPaddingVar() {
    this._paddingVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get paddingVarInput() {
    return this._paddingVar;
  }

  // style - computed: false, optional: true, required: false
  private _style?: string; 
  public get style() {
    return this.getStringAttribute('style');
  }
  public set style(value: string) {
    this._style = value;
  }
  public resetStyle() {
    this._style = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get styleInput() {
    return this._style;
  }

  // style_var - computed: false, optional: true, required: false
  private _styleVar?: string; 
  public get styleVar() {
    return this.getStringAttribute('style_var');
  }
  public set styleVar(value: string) {
    this._styleVar = value;
  }
  public resetStyleVar() {
    this._styleVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get styleVarInput() {
    return this._styleVar;
  }

  // width - computed: false, optional: true, required: false
  private _width?: string; 
  public get width() {
    return this.getStringAttribute('width');
  }
  public set width(value: string) {
    this._width = value;
  }
  public resetWidth() {
    this._width = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get widthInput() {
    return this._width;
  }

  // width_var - computed: false, optional: true, required: false
  private _widthVar?: string; 
  public get widthVar() {
    return this.getStringAttribute('width_var');
  }
  public set widthVar(value: string) {
    this._widthVar = value;
  }
  public resetWidthVar() {
    this._widthVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get widthVarInput() {
    return this._widthVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeFeatureCropList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeFeatureCrop[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeFeatureCropOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeFeatureCropOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeFitAndFillFillTransformation {
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeFitAndFillFillTransformationToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeFitAndFillFillTransformationOutputReference | DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeFitAndFillFillTransformation): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeFitAndFillFillTransformationToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeFitAndFillFillTransformationOutputReference | DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeFitAndFillFillTransformation): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
  };
  return attrs;
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeFitAndFillFillTransformationOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false, 0);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeFitAndFillFillTransformation | undefined {
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeFitAndFillFillTransformation | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
    }
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeFitAndFill {
  /**
  * The height value of the resized image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#height DataAkamaiImagingPolicyImage#height}
  */
  readonly height?: string;
  /**
  * The height value of the resized image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#height_var DataAkamaiImagingPolicyImage#height_var}
  */
  readonly heightVar?: string;
  /**
  * The width value of the resized image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#width DataAkamaiImagingPolicyImage#width}
  */
  readonly width?: string;
  /**
  * The width value of the resized image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#width_var DataAkamaiImagingPolicyImage#width_var}
  */
  readonly widthVar?: string;
  /**
  * fill_transformation block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#fill_transformation DataAkamaiImagingPolicyImage#fill_transformation}
  */
  readonly fillTransformation?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeFitAndFillFillTransformation;
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeFitAndFillToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeFitAndFill | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    height: cdktf.stringToTerraform(struct!.height),
    height_var: cdktf.stringToTerraform(struct!.heightVar),
    width: cdktf.stringToTerraform(struct!.width),
    width_var: cdktf.stringToTerraform(struct!.widthVar),
    fill_transformation: dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeFitAndFillFillTransformationToTerraform(struct!.fillTransformation),
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeFitAndFillToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeFitAndFill | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    height: {
      value: cdktf.stringToHclTerraform(struct!.height),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    height_var: {
      value: cdktf.stringToHclTerraform(struct!.heightVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    width: {
      value: cdktf.stringToHclTerraform(struct!.width),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    width_var: {
      value: cdktf.stringToHclTerraform(struct!.widthVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    fill_transformation: {
      value: dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeFitAndFillFillTransformationToHclTerraform(struct!.fillTransformation),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeFitAndFillFillTransformationList",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeFitAndFillOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeFitAndFill | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._height !== undefined) {
      hasAnyValues = true;
      internalValueResult.height = this._height;
    }
    if (this._heightVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.heightVar = this._heightVar;
    }
    if (this._width !== undefined) {
      hasAnyValues = true;
      internalValueResult.width = this._width;
    }
    if (this._widthVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.widthVar = this._widthVar;
    }
    if (this._fillTransformation?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.fillTransformation = this._fillTransformation?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeFitAndFill | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._height = undefined;
      this._heightVar = undefined;
      this._width = undefined;
      this._widthVar = undefined;
      this._fillTransformation.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._height = value.height;
      this._heightVar = value.heightVar;
      this._width = value.width;
      this._widthVar = value.widthVar;
      this._fillTransformation.internalValue = value.fillTransformation;
    }
  }

  // height - computed: false, optional: true, required: false
  private _height?: string; 
  public get height() {
    return this.getStringAttribute('height');
  }
  public set height(value: string) {
    this._height = value;
  }
  public resetHeight() {
    this._height = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get heightInput() {
    return this._height;
  }

  // height_var - computed: false, optional: true, required: false
  private _heightVar?: string; 
  public get heightVar() {
    return this.getStringAttribute('height_var');
  }
  public set heightVar(value: string) {
    this._heightVar = value;
  }
  public resetHeightVar() {
    this._heightVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get heightVarInput() {
    return this._heightVar;
  }

  // width - computed: false, optional: true, required: false
  private _width?: string; 
  public get width() {
    return this.getStringAttribute('width');
  }
  public set width(value: string) {
    this._width = value;
  }
  public resetWidth() {
    this._width = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get widthInput() {
    return this._width;
  }

  // width_var - computed: false, optional: true, required: false
  private _widthVar?: string; 
  public get widthVar() {
    return this.getStringAttribute('width_var');
  }
  public set widthVar(value: string) {
    this._widthVar = value;
  }
  public resetWidthVar() {
    this._widthVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get widthVarInput() {
    return this._widthVar;
  }

  // fill_transformation - computed: false, optional: true, required: false
  private _fillTransformation = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeFitAndFillFillTransformationOutputReference(this, "fill_transformation");
  public get fillTransformation() {
    return this._fillTransformation;
  }
  public putFillTransformation(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeFitAndFillFillTransformation) {
    this._fillTransformation.internalValue = value;
  }
  public resetFillTransformation() {
    this._fillTransformation.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get fillTransformationInput() {
    return this._fillTransformation.internalValue;
  }
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeFitAndFillList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeFitAndFill[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeFitAndFillOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeFitAndFillOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeGoop {
  /**
  * Specifies the greatest distance control points may move from their original position. A value of `1.0` shifts control points over as far as the next one in the original grid. A value of `0.0` leaves the image unchanged. Values under `0.5` work better for subtle distortions, otherwise control points may pass each other and cause a twisting effect.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#chaos DataAkamaiImagingPolicyImage#chaos}
  */
  readonly chaos?: string;
  /**
  * Specifies the greatest distance control points may move from their original position. A value of `1.0` shifts control points over as far as the next one in the original grid. A value of `0.0` leaves the image unchanged. Values under `0.5` work better for subtle distortions, otherwise control points may pass each other and cause a twisting effect.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#chaos_var DataAkamaiImagingPolicyImage#chaos_var}
  */
  readonly chaosVar?: string;
  /**
  * Controls the density of control points used to distort the image. The largest dimension of the input image is divided up to fit this number of control points. A grid of points is extended on the smaller dimension such that each row and column of control points is equidistant from each adjacent row or column. This parameter strongly affects transformation performance. Be careful choosing values above the default if you expect to transform medium to large size images.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#density DataAkamaiImagingPolicyImage#density}
  */
  readonly density?: string;
  /**
  * Controls the density of control points used to distort the image. The largest dimension of the input image is divided up to fit this number of control points. A grid of points is extended on the smaller dimension such that each row and column of control points is equidistant from each adjacent row or column. This parameter strongly affects transformation performance. Be careful choosing values above the default if you expect to transform medium to large size images.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#density_var DataAkamaiImagingPolicyImage#density_var}
  */
  readonly densityVar?: string;
  /**
  * By default, the distortion algorithm relies on inverse squares to calculate distance but this allows you to change the exponent. You shouldnt need to vary the default value of `2.0`.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#power DataAkamaiImagingPolicyImage#power}
  */
  readonly power?: string;
  /**
  * By default, the distortion algorithm relies on inverse squares to calculate distance but this allows you to change the exponent. You shouldnt need to vary the default value of `2.0`.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#power_var DataAkamaiImagingPolicyImage#power_var}
  */
  readonly powerVar?: string;
  /**
  * Specifies your own `seed` value as an alternative to the default, which is subject to variability. This allows for reproducible and deterministic distortions. If all parameters are kept equal and a constant seed is used, `Goop` distorts an input image consistently over many transformations. By default, this value is set to the current Epoch Time measured in milliseconds, which provides inconsistent transformation output.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#seed DataAkamaiImagingPolicyImage#seed}
  */
  readonly seed?: string;
  /**
  * Specifies your own `seed` value as an alternative to the default, which is subject to variability. This allows for reproducible and deterministic distortions. If all parameters are kept equal and a constant seed is used, `Goop` distorts an input image consistently over many transformations. By default, this value is set to the current Epoch Time measured in milliseconds, which provides inconsistent transformation output.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#seed_var DataAkamaiImagingPolicyImage#seed_var}
  */
  readonly seedVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeGoopToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeGoop | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    chaos: cdktf.stringToTerraform(struct!.chaos),
    chaos_var: cdktf.stringToTerraform(struct!.chaosVar),
    density: cdktf.stringToTerraform(struct!.density),
    density_var: cdktf.stringToTerraform(struct!.densityVar),
    power: cdktf.stringToTerraform(struct!.power),
    power_var: cdktf.stringToTerraform(struct!.powerVar),
    seed: cdktf.stringToTerraform(struct!.seed),
    seed_var: cdktf.stringToTerraform(struct!.seedVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeGoopToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeGoop | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    chaos: {
      value: cdktf.stringToHclTerraform(struct!.chaos),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    chaos_var: {
      value: cdktf.stringToHclTerraform(struct!.chaosVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    density: {
      value: cdktf.stringToHclTerraform(struct!.density),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    density_var: {
      value: cdktf.stringToHclTerraform(struct!.densityVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    power: {
      value: cdktf.stringToHclTerraform(struct!.power),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    power_var: {
      value: cdktf.stringToHclTerraform(struct!.powerVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    seed: {
      value: cdktf.stringToHclTerraform(struct!.seed),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    seed_var: {
      value: cdktf.stringToHclTerraform(struct!.seedVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeGoopOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeGoop | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._chaos !== undefined) {
      hasAnyValues = true;
      internalValueResult.chaos = this._chaos;
    }
    if (this._chaosVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.chaosVar = this._chaosVar;
    }
    if (this._density !== undefined) {
      hasAnyValues = true;
      internalValueResult.density = this._density;
    }
    if (this._densityVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.densityVar = this._densityVar;
    }
    if (this._power !== undefined) {
      hasAnyValues = true;
      internalValueResult.power = this._power;
    }
    if (this._powerVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.powerVar = this._powerVar;
    }
    if (this._seed !== undefined) {
      hasAnyValues = true;
      internalValueResult.seed = this._seed;
    }
    if (this._seedVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.seedVar = this._seedVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeGoop | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._chaos = undefined;
      this._chaosVar = undefined;
      this._density = undefined;
      this._densityVar = undefined;
      this._power = undefined;
      this._powerVar = undefined;
      this._seed = undefined;
      this._seedVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._chaos = value.chaos;
      this._chaosVar = value.chaosVar;
      this._density = value.density;
      this._densityVar = value.densityVar;
      this._power = value.power;
      this._powerVar = value.powerVar;
      this._seed = value.seed;
      this._seedVar = value.seedVar;
    }
  }

  // chaos - computed: false, optional: true, required: false
  private _chaos?: string; 
  public get chaos() {
    return this.getStringAttribute('chaos');
  }
  public set chaos(value: string) {
    this._chaos = value;
  }
  public resetChaos() {
    this._chaos = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get chaosInput() {
    return this._chaos;
  }

  // chaos_var - computed: false, optional: true, required: false
  private _chaosVar?: string; 
  public get chaosVar() {
    return this.getStringAttribute('chaos_var');
  }
  public set chaosVar(value: string) {
    this._chaosVar = value;
  }
  public resetChaosVar() {
    this._chaosVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get chaosVarInput() {
    return this._chaosVar;
  }

  // density - computed: false, optional: true, required: false
  private _density?: string; 
  public get density() {
    return this.getStringAttribute('density');
  }
  public set density(value: string) {
    this._density = value;
  }
  public resetDensity() {
    this._density = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get densityInput() {
    return this._density;
  }

  // density_var - computed: false, optional: true, required: false
  private _densityVar?: string; 
  public get densityVar() {
    return this.getStringAttribute('density_var');
  }
  public set densityVar(value: string) {
    this._densityVar = value;
  }
  public resetDensityVar() {
    this._densityVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get densityVarInput() {
    return this._densityVar;
  }

  // power - computed: false, optional: true, required: false
  private _power?: string; 
  public get power() {
    return this.getStringAttribute('power');
  }
  public set power(value: string) {
    this._power = value;
  }
  public resetPower() {
    this._power = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get powerInput() {
    return this._power;
  }

  // power_var - computed: false, optional: true, required: false
  private _powerVar?: string; 
  public get powerVar() {
    return this.getStringAttribute('power_var');
  }
  public set powerVar(value: string) {
    this._powerVar = value;
  }
  public resetPowerVar() {
    this._powerVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get powerVarInput() {
    return this._powerVar;
  }

  // seed - computed: false, optional: true, required: false
  private _seed?: string; 
  public get seed() {
    return this.getStringAttribute('seed');
  }
  public set seed(value: string) {
    this._seed = value;
  }
  public resetSeed() {
    this._seed = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get seedInput() {
    return this._seed;
  }

  // seed_var - computed: false, optional: true, required: false
  private _seedVar?: string; 
  public get seedVar() {
    return this.getStringAttribute('seed_var');
  }
  public set seedVar(value: string) {
    this._seedVar = value;
  }
  public resetSeedVar() {
    this._seedVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get seedVarInput() {
    return this._seedVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeGoopList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeGoop[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeGoopOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeGoopOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeGrayscale {
  /**
  * The algorithm used to transform colors to grays, either `Brightness`, `Lightness`, `Rec601`, or the default `Rec709`.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#type DataAkamaiImagingPolicyImage#type}
  */
  readonly type?: string;
  /**
  * The algorithm used to transform colors to grays, either `Brightness`, `Lightness`, `Rec601`, or the default `Rec709`.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#type_var DataAkamaiImagingPolicyImage#type_var}
  */
  readonly typeVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeGrayscaleToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeGrayscale | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    type: cdktf.stringToTerraform(struct!.type),
    type_var: cdktf.stringToTerraform(struct!.typeVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeGrayscaleToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeGrayscale | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    type: {
      value: cdktf.stringToHclTerraform(struct!.type),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    type_var: {
      value: cdktf.stringToHclTerraform(struct!.typeVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeGrayscaleOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeGrayscale | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._type !== undefined) {
      hasAnyValues = true;
      internalValueResult.type = this._type;
    }
    if (this._typeVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.typeVar = this._typeVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeGrayscale | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._type = undefined;
      this._typeVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._type = value.type;
      this._typeVar = value.typeVar;
    }
  }

  // type - computed: false, optional: true, required: false
  private _type?: string; 
  public get type() {
    return this.getStringAttribute('type');
  }
  public set type(value: string) {
    this._type = value;
  }
  public resetType() {
    this._type = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get typeInput() {
    return this._type;
  }

  // type_var - computed: false, optional: true, required: false
  private _typeVar?: string; 
  public get typeVar() {
    return this.getStringAttribute('type_var');
  }
  public set typeVar(value: string) {
    this._typeVar = value;
  }
  public resetTypeVar() {
    this._typeVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get typeVarInput() {
    return this._typeVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeGrayscaleList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeGrayscale[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeGrayscaleOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeGrayscaleOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeHsl {
  /**
  * The number of degrees to rotate colors around the color wheel, `0` by default.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hue DataAkamaiImagingPolicyImage#hue}
  */
  readonly hue?: string;
  /**
  * The number of degrees to rotate colors around the color wheel, `0` by default.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hue_var DataAkamaiImagingPolicyImage#hue_var}
  */
  readonly hueVar?: string;
  /**
  * A multiplier to adjust the lightness of colors in the image. Note that lightness is distinct from brightness. For example, reducing the lightness of a light green might give you a lime green whereas reducing the brightness of a light green might give you a darker shade of the same green. Values less than `1.0` decrease the lightness of colors in the image. Values greater than `1.0` increase the lightness of colors in the image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#lightness DataAkamaiImagingPolicyImage#lightness}
  */
  readonly lightness?: string;
  /**
  * A multiplier to adjust the lightness of colors in the image. Note that lightness is distinct from brightness. For example, reducing the lightness of a light green might give you a lime green whereas reducing the brightness of a light green might give you a darker shade of the same green. Values less than `1.0` decrease the lightness of colors in the image. Values greater than `1.0` increase the lightness of colors in the image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#lightness_var DataAkamaiImagingPolicyImage#lightness_var}
  */
  readonly lightnessVar?: string;
  /**
  * A multiplier to adjust the saturation of colors in the image. Values less than `1.0` decrease saturation and values greater than `1.0` increase the saturation. A value of `0.0` removes all color from the image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#saturation DataAkamaiImagingPolicyImage#saturation}
  */
  readonly saturation?: string;
  /**
  * A multiplier to adjust the saturation of colors in the image. Values less than `1.0` decrease saturation and values greater than `1.0` increase the saturation. A value of `0.0` removes all color from the image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#saturation_var DataAkamaiImagingPolicyImage#saturation_var}
  */
  readonly saturationVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeHslToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeHsl | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    hue: cdktf.stringToTerraform(struct!.hue),
    hue_var: cdktf.stringToTerraform(struct!.hueVar),
    lightness: cdktf.stringToTerraform(struct!.lightness),
    lightness_var: cdktf.stringToTerraform(struct!.lightnessVar),
    saturation: cdktf.stringToTerraform(struct!.saturation),
    saturation_var: cdktf.stringToTerraform(struct!.saturationVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeHslToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeHsl | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    hue: {
      value: cdktf.stringToHclTerraform(struct!.hue),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    hue_var: {
      value: cdktf.stringToHclTerraform(struct!.hueVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    lightness: {
      value: cdktf.stringToHclTerraform(struct!.lightness),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    lightness_var: {
      value: cdktf.stringToHclTerraform(struct!.lightnessVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    saturation: {
      value: cdktf.stringToHclTerraform(struct!.saturation),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    saturation_var: {
      value: cdktf.stringToHclTerraform(struct!.saturationVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeHslOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeHsl | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._hue !== undefined) {
      hasAnyValues = true;
      internalValueResult.hue = this._hue;
    }
    if (this._hueVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.hueVar = this._hueVar;
    }
    if (this._lightness !== undefined) {
      hasAnyValues = true;
      internalValueResult.lightness = this._lightness;
    }
    if (this._lightnessVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.lightnessVar = this._lightnessVar;
    }
    if (this._saturation !== undefined) {
      hasAnyValues = true;
      internalValueResult.saturation = this._saturation;
    }
    if (this._saturationVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.saturationVar = this._saturationVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeHsl | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._hue = undefined;
      this._hueVar = undefined;
      this._lightness = undefined;
      this._lightnessVar = undefined;
      this._saturation = undefined;
      this._saturationVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._hue = value.hue;
      this._hueVar = value.hueVar;
      this._lightness = value.lightness;
      this._lightnessVar = value.lightnessVar;
      this._saturation = value.saturation;
      this._saturationVar = value.saturationVar;
    }
  }

  // hue - computed: false, optional: true, required: false
  private _hue?: string; 
  public get hue() {
    return this.getStringAttribute('hue');
  }
  public set hue(value: string) {
    this._hue = value;
  }
  public resetHue() {
    this._hue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hueInput() {
    return this._hue;
  }

  // hue_var - computed: false, optional: true, required: false
  private _hueVar?: string; 
  public get hueVar() {
    return this.getStringAttribute('hue_var');
  }
  public set hueVar(value: string) {
    this._hueVar = value;
  }
  public resetHueVar() {
    this._hueVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hueVarInput() {
    return this._hueVar;
  }

  // lightness - computed: false, optional: true, required: false
  private _lightness?: string; 
  public get lightness() {
    return this.getStringAttribute('lightness');
  }
  public set lightness(value: string) {
    this._lightness = value;
  }
  public resetLightness() {
    this._lightness = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get lightnessInput() {
    return this._lightness;
  }

  // lightness_var - computed: false, optional: true, required: false
  private _lightnessVar?: string; 
  public get lightnessVar() {
    return this.getStringAttribute('lightness_var');
  }
  public set lightnessVar(value: string) {
    this._lightnessVar = value;
  }
  public resetLightnessVar() {
    this._lightnessVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get lightnessVarInput() {
    return this._lightnessVar;
  }

  // saturation - computed: false, optional: true, required: false
  private _saturation?: string; 
  public get saturation() {
    return this.getStringAttribute('saturation');
  }
  public set saturation(value: string) {
    this._saturation = value;
  }
  public resetSaturation() {
    this._saturation = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get saturationInput() {
    return this._saturation;
  }

  // saturation_var - computed: false, optional: true, required: false
  private _saturationVar?: string; 
  public get saturationVar() {
    return this.getStringAttribute('saturation_var');
  }
  public set saturationVar(value: string) {
    this._saturationVar = value;
  }
  public resetSaturationVar() {
    this._saturationVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get saturationVarInput() {
    return this._saturationVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeHslList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeHsl[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeHslOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeHslOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeHsv {
  /**
  * The number of degrees to rotate colors around the color wheel, `0.0` by default.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hue DataAkamaiImagingPolicyImage#hue}
  */
  readonly hue?: string;
  /**
  * The number of degrees to rotate colors around the color wheel, `0.0` by default.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hue_var DataAkamaiImagingPolicyImage#hue_var}
  */
  readonly hueVar?: string;
  /**
  * A multiplier to adjust the saturation of colors in the image. Values less than `1.0` decrease saturation and values greater than `1.0` increase the saturation. A value of `0.0` removes all color from the image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#saturation DataAkamaiImagingPolicyImage#saturation}
  */
  readonly saturation?: string;
  /**
  * A multiplier to adjust the saturation of colors in the image. Values less than `1.0` decrease saturation and values greater than `1.0` increase the saturation. A value of `0.0` removes all color from the image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#saturation_var DataAkamaiImagingPolicyImage#saturation_var}
  */
  readonly saturationVar?: string;
  /**
  * A multiplier to adjust the lightness or darkness of the images base color. Values less than 1.0 decrease the base colors in the image, making them appear darker. Values greater than 1.0 increase the base colors in the image, making them appear lighter.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#value DataAkamaiImagingPolicyImage#value}
  */
  readonly value?: string;
  /**
  * A multiplier to adjust the lightness or darkness of the images base color. Values less than 1.0 decrease the base colors in the image, making them appear darker. Values greater than 1.0 increase the base colors in the image, making them appear lighter.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#value_var DataAkamaiImagingPolicyImage#value_var}
  */
  readonly valueVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeHsvToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeHsv | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    hue: cdktf.stringToTerraform(struct!.hue),
    hue_var: cdktf.stringToTerraform(struct!.hueVar),
    saturation: cdktf.stringToTerraform(struct!.saturation),
    saturation_var: cdktf.stringToTerraform(struct!.saturationVar),
    value: cdktf.stringToTerraform(struct!.value),
    value_var: cdktf.stringToTerraform(struct!.valueVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeHsvToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeHsv | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    hue: {
      value: cdktf.stringToHclTerraform(struct!.hue),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    hue_var: {
      value: cdktf.stringToHclTerraform(struct!.hueVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    saturation: {
      value: cdktf.stringToHclTerraform(struct!.saturation),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    saturation_var: {
      value: cdktf.stringToHclTerraform(struct!.saturationVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    value: {
      value: cdktf.stringToHclTerraform(struct!.value),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    value_var: {
      value: cdktf.stringToHclTerraform(struct!.valueVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeHsvOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeHsv | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._hue !== undefined) {
      hasAnyValues = true;
      internalValueResult.hue = this._hue;
    }
    if (this._hueVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.hueVar = this._hueVar;
    }
    if (this._saturation !== undefined) {
      hasAnyValues = true;
      internalValueResult.saturation = this._saturation;
    }
    if (this._saturationVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.saturationVar = this._saturationVar;
    }
    if (this._value !== undefined) {
      hasAnyValues = true;
      internalValueResult.value = this._value;
    }
    if (this._valueVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.valueVar = this._valueVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeHsv | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._hue = undefined;
      this._hueVar = undefined;
      this._saturation = undefined;
      this._saturationVar = undefined;
      this._value = undefined;
      this._valueVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._hue = value.hue;
      this._hueVar = value.hueVar;
      this._saturation = value.saturation;
      this._saturationVar = value.saturationVar;
      this._value = value.value;
      this._valueVar = value.valueVar;
    }
  }

  // hue - computed: false, optional: true, required: false
  private _hue?: string; 
  public get hue() {
    return this.getStringAttribute('hue');
  }
  public set hue(value: string) {
    this._hue = value;
  }
  public resetHue() {
    this._hue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hueInput() {
    return this._hue;
  }

  // hue_var - computed: false, optional: true, required: false
  private _hueVar?: string; 
  public get hueVar() {
    return this.getStringAttribute('hue_var');
  }
  public set hueVar(value: string) {
    this._hueVar = value;
  }
  public resetHueVar() {
    this._hueVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hueVarInput() {
    return this._hueVar;
  }

  // saturation - computed: false, optional: true, required: false
  private _saturation?: string; 
  public get saturation() {
    return this.getStringAttribute('saturation');
  }
  public set saturation(value: string) {
    this._saturation = value;
  }
  public resetSaturation() {
    this._saturation = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get saturationInput() {
    return this._saturation;
  }

  // saturation_var - computed: false, optional: true, required: false
  private _saturationVar?: string; 
  public get saturationVar() {
    return this.getStringAttribute('saturation_var');
  }
  public set saturationVar(value: string) {
    this._saturationVar = value;
  }
  public resetSaturationVar() {
    this._saturationVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get saturationVarInput() {
    return this._saturationVar;
  }

  // value - computed: false, optional: true, required: false
  private _value?: string; 
  public get value() {
    return this.getStringAttribute('value');
  }
  public set value(value: string) {
    this._value = value;
  }
  public resetValue() {
    this._value = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get valueInput() {
    return this._value;
  }

  // value_var - computed: false, optional: true, required: false
  private _valueVar?: string; 
  public get valueVar() {
    return this.getStringAttribute('value_var');
  }
  public set valueVar(value: string) {
    this._valueVar = value;
  }
  public resetValueVar() {
    this._valueVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get valueVarInput() {
    return this._valueVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeHsvList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeHsv[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeHsvOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeHsvOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfDimensionDefault {
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfDimensionDefaultToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfDimensionDefaultOutputReference | DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfDimensionDefault): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfDimensionDefaultToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfDimensionDefaultOutputReference | DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfDimensionDefault): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
  };
  return attrs;
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfDimensionDefaultOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false, 0);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfDimensionDefault | undefined {
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfDimensionDefault | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
    }
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfDimensionEqual {
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfDimensionEqualToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfDimensionEqualOutputReference | DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfDimensionEqual): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfDimensionEqualToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfDimensionEqualOutputReference | DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfDimensionEqual): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
  };
  return attrs;
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfDimensionEqualOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false, 0);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfDimensionEqual | undefined {
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfDimensionEqual | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
    }
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfDimensionGreaterThan {
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfDimensionGreaterThanToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfDimensionGreaterThanOutputReference | DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfDimensionGreaterThan): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfDimensionGreaterThanToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfDimensionGreaterThanOutputReference | DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfDimensionGreaterThan): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
  };
  return attrs;
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfDimensionGreaterThanOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false, 0);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfDimensionGreaterThan | undefined {
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfDimensionGreaterThan | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
    }
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfDimensionLessThan {
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfDimensionLessThanToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfDimensionLessThanOutputReference | DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfDimensionLessThan): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfDimensionLessThanToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfDimensionLessThanOutputReference | DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfDimensionLessThan): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
  };
  return attrs;
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfDimensionLessThanOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false, 0);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfDimensionLessThan | undefined {
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfDimensionLessThan | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
    }
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfDimension {
  /**
  * The dimension to use to select the transformation, either `height`, `width`, or `both`.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#dimension DataAkamaiImagingPolicyImage#dimension}
  */
  readonly dimension?: string;
  /**
  * The dimension to use to select the transformation, either `height`, `width`, or `both`.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#dimension_var DataAkamaiImagingPolicyImage#dimension_var}
  */
  readonly dimensionVar?: string;
  /**
  * The value to compare against the source image dimension. For example, if the image dimension is less than the value the lessThan transformation is applied.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#value DataAkamaiImagingPolicyImage#value}
  */
  readonly value?: string;
  /**
  * The value to compare against the source image dimension. For example, if the image dimension is less than the value the lessThan transformation is applied.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#value_var DataAkamaiImagingPolicyImage#value_var}
  */
  readonly valueVar?: string;
  /**
  * default block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#default DataAkamaiImagingPolicyImage#default}
  */
  readonly default?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfDimensionDefault;
  /**
  * equal block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#equal DataAkamaiImagingPolicyImage#equal}
  */
  readonly equal?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfDimensionEqual;
  /**
  * greater_than block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#greater_than DataAkamaiImagingPolicyImage#greater_than}
  */
  readonly greaterThan?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfDimensionGreaterThan;
  /**
  * less_than block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#less_than DataAkamaiImagingPolicyImage#less_than}
  */
  readonly lessThan?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfDimensionLessThan;
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfDimensionToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfDimension | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    dimension: cdktf.stringToTerraform(struct!.dimension),
    dimension_var: cdktf.stringToTerraform(struct!.dimensionVar),
    value: cdktf.stringToTerraform(struct!.value),
    value_var: cdktf.stringToTerraform(struct!.valueVar),
    default: dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfDimensionDefaultToTerraform(struct!.default),
    equal: dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfDimensionEqualToTerraform(struct!.equal),
    greater_than: dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfDimensionGreaterThanToTerraform(struct!.greaterThan),
    less_than: dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfDimensionLessThanToTerraform(struct!.lessThan),
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfDimensionToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfDimension | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    dimension: {
      value: cdktf.stringToHclTerraform(struct!.dimension),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    dimension_var: {
      value: cdktf.stringToHclTerraform(struct!.dimensionVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    value: {
      value: cdktf.stringToHclTerraform(struct!.value),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    value_var: {
      value: cdktf.stringToHclTerraform(struct!.valueVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    default: {
      value: dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfDimensionDefaultToHclTerraform(struct!.default),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfDimensionDefaultList",
    },
    equal: {
      value: dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfDimensionEqualToHclTerraform(struct!.equal),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfDimensionEqualList",
    },
    greater_than: {
      value: dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfDimensionGreaterThanToHclTerraform(struct!.greaterThan),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfDimensionGreaterThanList",
    },
    less_than: {
      value: dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfDimensionLessThanToHclTerraform(struct!.lessThan),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfDimensionLessThanList",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfDimensionOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfDimension | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._dimension !== undefined) {
      hasAnyValues = true;
      internalValueResult.dimension = this._dimension;
    }
    if (this._dimensionVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.dimensionVar = this._dimensionVar;
    }
    if (this._value !== undefined) {
      hasAnyValues = true;
      internalValueResult.value = this._value;
    }
    if (this._valueVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.valueVar = this._valueVar;
    }
    if (this._default?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.default = this._default?.internalValue;
    }
    if (this._equal?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.equal = this._equal?.internalValue;
    }
    if (this._greaterThan?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.greaterThan = this._greaterThan?.internalValue;
    }
    if (this._lessThan?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.lessThan = this._lessThan?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfDimension | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._dimension = undefined;
      this._dimensionVar = undefined;
      this._value = undefined;
      this._valueVar = undefined;
      this._default.internalValue = undefined;
      this._equal.internalValue = undefined;
      this._greaterThan.internalValue = undefined;
      this._lessThan.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._dimension = value.dimension;
      this._dimensionVar = value.dimensionVar;
      this._value = value.value;
      this._valueVar = value.valueVar;
      this._default.internalValue = value.default;
      this._equal.internalValue = value.equal;
      this._greaterThan.internalValue = value.greaterThan;
      this._lessThan.internalValue = value.lessThan;
    }
  }

  // dimension - computed: false, optional: true, required: false
  private _dimension?: string; 
  public get dimension() {
    return this.getStringAttribute('dimension');
  }
  public set dimension(value: string) {
    this._dimension = value;
  }
  public resetDimension() {
    this._dimension = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get dimensionInput() {
    return this._dimension;
  }

  // dimension_var - computed: false, optional: true, required: false
  private _dimensionVar?: string; 
  public get dimensionVar() {
    return this.getStringAttribute('dimension_var');
  }
  public set dimensionVar(value: string) {
    this._dimensionVar = value;
  }
  public resetDimensionVar() {
    this._dimensionVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get dimensionVarInput() {
    return this._dimensionVar;
  }

  // value - computed: false, optional: true, required: false
  private _value?: string; 
  public get value() {
    return this.getStringAttribute('value');
  }
  public set value(value: string) {
    this._value = value;
  }
  public resetValue() {
    this._value = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get valueInput() {
    return this._value;
  }

  // value_var - computed: false, optional: true, required: false
  private _valueVar?: string; 
  public get valueVar() {
    return this.getStringAttribute('value_var');
  }
  public set valueVar(value: string) {
    this._valueVar = value;
  }
  public resetValueVar() {
    this._valueVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get valueVarInput() {
    return this._valueVar;
  }

  // default - computed: false, optional: true, required: false
  private _default = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfDimensionDefaultOutputReference(this, "default");
  public get default() {
    return this._default;
  }
  public putDefault(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfDimensionDefault) {
    this._default.internalValue = value;
  }
  public resetDefault() {
    this._default.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get defaultInput() {
    return this._default.internalValue;
  }

  // equal - computed: false, optional: true, required: false
  private _equal = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfDimensionEqualOutputReference(this, "equal");
  public get equal() {
    return this._equal;
  }
  public putEqual(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfDimensionEqual) {
    this._equal.internalValue = value;
  }
  public resetEqual() {
    this._equal.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get equalInput() {
    return this._equal.internalValue;
  }

  // greater_than - computed: false, optional: true, required: false
  private _greaterThan = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfDimensionGreaterThanOutputReference(this, "greater_than");
  public get greaterThan() {
    return this._greaterThan;
  }
  public putGreaterThan(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfDimensionGreaterThan) {
    this._greaterThan.internalValue = value;
  }
  public resetGreaterThan() {
    this._greaterThan.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get greaterThanInput() {
    return this._greaterThan.internalValue;
  }

  // less_than - computed: false, optional: true, required: false
  private _lessThan = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfDimensionLessThanOutputReference(this, "less_than");
  public get lessThan() {
    return this._lessThan;
  }
  public putLessThan(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfDimensionLessThan) {
    this._lessThan.internalValue = value;
  }
  public resetLessThan() {
    this._lessThan.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get lessThanInput() {
    return this._lessThan.internalValue;
  }
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfDimensionList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfDimension[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfDimensionOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfDimensionOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfOrientationDefault {
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfOrientationDefaultToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfOrientationDefaultOutputReference | DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfOrientationDefault): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfOrientationDefaultToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfOrientationDefaultOutputReference | DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfOrientationDefault): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
  };
  return attrs;
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfOrientationDefaultOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false, 0);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfOrientationDefault | undefined {
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfOrientationDefault | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
    }
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfOrientationLandscape {
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfOrientationLandscapeToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfOrientationLandscapeOutputReference | DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfOrientationLandscape): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfOrientationLandscapeToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfOrientationLandscapeOutputReference | DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfOrientationLandscape): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
  };
  return attrs;
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfOrientationLandscapeOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false, 0);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfOrientationLandscape | undefined {
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfOrientationLandscape | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
    }
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfOrientationPortrait {
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfOrientationPortraitToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfOrientationPortraitOutputReference | DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfOrientationPortrait): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfOrientationPortraitToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfOrientationPortraitOutputReference | DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfOrientationPortrait): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
  };
  return attrs;
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfOrientationPortraitOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false, 0);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfOrientationPortrait | undefined {
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfOrientationPortrait | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
    }
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfOrientationSquare {
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfOrientationSquareToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfOrientationSquareOutputReference | DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfOrientationSquare): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfOrientationSquareToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfOrientationSquareOutputReference | DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfOrientationSquare): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
  };
  return attrs;
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfOrientationSquareOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false, 0);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfOrientationSquare | undefined {
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfOrientationSquare | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
    }
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfOrientation {
  /**
  * default block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#default DataAkamaiImagingPolicyImage#default}
  */
  readonly default?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfOrientationDefault;
  /**
  * landscape block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#landscape DataAkamaiImagingPolicyImage#landscape}
  */
  readonly landscape?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfOrientationLandscape;
  /**
  * portrait block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#portrait DataAkamaiImagingPolicyImage#portrait}
  */
  readonly portrait?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfOrientationPortrait;
  /**
  * square block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#square DataAkamaiImagingPolicyImage#square}
  */
  readonly square?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfOrientationSquare;
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfOrientationToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfOrientation | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    default: dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfOrientationDefaultToTerraform(struct!.default),
    landscape: dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfOrientationLandscapeToTerraform(struct!.landscape),
    portrait: dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfOrientationPortraitToTerraform(struct!.portrait),
    square: dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfOrientationSquareToTerraform(struct!.square),
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfOrientationToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfOrientation | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    default: {
      value: dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfOrientationDefaultToHclTerraform(struct!.default),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfOrientationDefaultList",
    },
    landscape: {
      value: dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfOrientationLandscapeToHclTerraform(struct!.landscape),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfOrientationLandscapeList",
    },
    portrait: {
      value: dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfOrientationPortraitToHclTerraform(struct!.portrait),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfOrientationPortraitList",
    },
    square: {
      value: dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfOrientationSquareToHclTerraform(struct!.square),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfOrientationSquareList",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfOrientationOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfOrientation | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._default?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.default = this._default?.internalValue;
    }
    if (this._landscape?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.landscape = this._landscape?.internalValue;
    }
    if (this._portrait?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.portrait = this._portrait?.internalValue;
    }
    if (this._square?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.square = this._square?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfOrientation | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._default.internalValue = undefined;
      this._landscape.internalValue = undefined;
      this._portrait.internalValue = undefined;
      this._square.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._default.internalValue = value.default;
      this._landscape.internalValue = value.landscape;
      this._portrait.internalValue = value.portrait;
      this._square.internalValue = value.square;
    }
  }

  // default - computed: false, optional: true, required: false
  private _default = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfOrientationDefaultOutputReference(this, "default");
  public get default() {
    return this._default;
  }
  public putDefault(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfOrientationDefault) {
    this._default.internalValue = value;
  }
  public resetDefault() {
    this._default.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get defaultInput() {
    return this._default.internalValue;
  }

  // landscape - computed: false, optional: true, required: false
  private _landscape = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfOrientationLandscapeOutputReference(this, "landscape");
  public get landscape() {
    return this._landscape;
  }
  public putLandscape(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfOrientationLandscape) {
    this._landscape.internalValue = value;
  }
  public resetLandscape() {
    this._landscape.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get landscapeInput() {
    return this._landscape.internalValue;
  }

  // portrait - computed: false, optional: true, required: false
  private _portrait = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfOrientationPortraitOutputReference(this, "portrait");
  public get portrait() {
    return this._portrait;
  }
  public putPortrait(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfOrientationPortrait) {
    this._portrait.internalValue = value;
  }
  public resetPortrait() {
    this._portrait.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get portraitInput() {
    return this._portrait.internalValue;
  }

  // square - computed: false, optional: true, required: false
  private _square = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfOrientationSquareOutputReference(this, "square");
  public get square() {
    return this._square;
  }
  public putSquare(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfOrientationSquare) {
    this._square.internalValue = value;
  }
  public resetSquare() {
    this._square.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get squareInput() {
    return this._square.internalValue;
  }
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfOrientationList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfOrientation[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfOrientationOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfOrientationOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeImQuery {
  /**
  * Specifies the transformations that can be applied using the query string parameter.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#allowed_transformations DataAkamaiImagingPolicyImage#allowed_transformations}
  */
  readonly allowedTransformations: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#query_var DataAkamaiImagingPolicyImage#query_var}
  */
  readonly queryVar: string;
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeImQueryToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeImQuery | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    allowed_transformations: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.allowedTransformations),
    query_var: cdktf.stringToTerraform(struct!.queryVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeImQueryToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeImQuery | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    allowed_transformations: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.allowedTransformations),
      isBlock: false,
      type: "list",
      storageClassType: "stringList",
    },
    query_var: {
      value: cdktf.stringToHclTerraform(struct!.queryVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeImQueryOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeImQuery | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._allowedTransformations !== undefined) {
      hasAnyValues = true;
      internalValueResult.allowedTransformations = this._allowedTransformations;
    }
    if (this._queryVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.queryVar = this._queryVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeImQuery | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._allowedTransformations = undefined;
      this._queryVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._allowedTransformations = value.allowedTransformations;
      this._queryVar = value.queryVar;
    }
  }

  // allowed_transformations - computed: false, optional: false, required: true
  private _allowedTransformations?: string[]; 
  public get allowedTransformations() {
    return this.getListAttribute('allowed_transformations');
  }
  public set allowedTransformations(value: string[]) {
    this._allowedTransformations = value;
  }
  // Temporarily expose input value. Use with caution.
  public get allowedTransformationsInput() {
    return this._allowedTransformations;
  }

  // query_var - computed: false, optional: false, required: true
  private _queryVar?: string; 
  public get queryVar() {
    return this.getStringAttribute('query_var');
  }
  public set queryVar(value: string) {
    this._queryVar = value;
  }
  // Temporarily expose input value. Use with caution.
  public get queryVarInput() {
    return this._queryVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeImQueryList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeImQuery[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeImQueryOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeImQueryOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeMaxColors {
  /**
  * The value representing the maximum number of colors to use with the source image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#colors DataAkamaiImagingPolicyImage#colors}
  */
  readonly colors?: string;
  /**
  * The value representing the maximum number of colors to use with the source image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#colors_var DataAkamaiImagingPolicyImage#colors_var}
  */
  readonly colorsVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeMaxColorsToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeMaxColors | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    colors: cdktf.stringToTerraform(struct!.colors),
    colors_var: cdktf.stringToTerraform(struct!.colorsVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeMaxColorsToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeMaxColors | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    colors: {
      value: cdktf.stringToHclTerraform(struct!.colors),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    colors_var: {
      value: cdktf.stringToHclTerraform(struct!.colorsVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeMaxColorsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeMaxColors | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._colors !== undefined) {
      hasAnyValues = true;
      internalValueResult.colors = this._colors;
    }
    if (this._colorsVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.colorsVar = this._colorsVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeMaxColors | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._colors = undefined;
      this._colorsVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._colors = value.colors;
      this._colorsVar = value.colorsVar;
    }
  }

  // colors - computed: false, optional: true, required: false
  private _colors?: string; 
  public get colors() {
    return this.getStringAttribute('colors');
  }
  public set colors(value: string) {
    this._colors = value;
  }
  public resetColors() {
    this._colors = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get colorsInput() {
    return this._colors;
  }

  // colors_var - computed: false, optional: true, required: false
  private _colorsVar?: string; 
  public get colorsVar() {
    return this.getStringAttribute('colors_var');
  }
  public set colorsVar(value: string) {
    this._colorsVar = value;
  }
  public resetColorsVar() {
    this._colorsVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get colorsVarInput() {
    return this._colorsVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeMaxColorsList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeMaxColors[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeMaxColorsOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeMaxColorsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeMirror {
  /**
  * Flips the image horizontally.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#horizontal DataAkamaiImagingPolicyImage#horizontal}
  */
  readonly horizontal?: string;
  /**
  * Flips the image horizontally.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#horizontal_var DataAkamaiImagingPolicyImage#horizontal_var}
  */
  readonly horizontalVar?: string;
  /**
  * Flips the image vertically.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#vertical DataAkamaiImagingPolicyImage#vertical}
  */
  readonly vertical?: string;
  /**
  * Flips the image vertically.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#vertical_var DataAkamaiImagingPolicyImage#vertical_var}
  */
  readonly verticalVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeMirrorToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeMirror | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    horizontal: cdktf.stringToTerraform(struct!.horizontal),
    horizontal_var: cdktf.stringToTerraform(struct!.horizontalVar),
    vertical: cdktf.stringToTerraform(struct!.vertical),
    vertical_var: cdktf.stringToTerraform(struct!.verticalVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeMirrorToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeMirror | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    horizontal: {
      value: cdktf.stringToHclTerraform(struct!.horizontal),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    horizontal_var: {
      value: cdktf.stringToHclTerraform(struct!.horizontalVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    vertical: {
      value: cdktf.stringToHclTerraform(struct!.vertical),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    vertical_var: {
      value: cdktf.stringToHclTerraform(struct!.verticalVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeMirrorOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeMirror | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._horizontal !== undefined) {
      hasAnyValues = true;
      internalValueResult.horizontal = this._horizontal;
    }
    if (this._horizontalVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.horizontalVar = this._horizontalVar;
    }
    if (this._vertical !== undefined) {
      hasAnyValues = true;
      internalValueResult.vertical = this._vertical;
    }
    if (this._verticalVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.verticalVar = this._verticalVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeMirror | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._horizontal = undefined;
      this._horizontalVar = undefined;
      this._vertical = undefined;
      this._verticalVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._horizontal = value.horizontal;
      this._horizontalVar = value.horizontalVar;
      this._vertical = value.vertical;
      this._verticalVar = value.verticalVar;
    }
  }

  // horizontal - computed: false, optional: true, required: false
  private _horizontal?: string; 
  public get horizontal() {
    return this.getStringAttribute('horizontal');
  }
  public set horizontal(value: string) {
    this._horizontal = value;
  }
  public resetHorizontal() {
    this._horizontal = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get horizontalInput() {
    return this._horizontal;
  }

  // horizontal_var - computed: false, optional: true, required: false
  private _horizontalVar?: string; 
  public get horizontalVar() {
    return this.getStringAttribute('horizontal_var');
  }
  public set horizontalVar(value: string) {
    this._horizontalVar = value;
  }
  public resetHorizontalVar() {
    this._horizontalVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get horizontalVarInput() {
    return this._horizontalVar;
  }

  // vertical - computed: false, optional: true, required: false
  private _vertical?: string; 
  public get vertical() {
    return this.getStringAttribute('vertical');
  }
  public set vertical(value: string) {
    this._vertical = value;
  }
  public resetVertical() {
    this._vertical = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get verticalInput() {
    return this._vertical;
  }

  // vertical_var - computed: false, optional: true, required: false
  private _verticalVar?: string; 
  public get verticalVar() {
    return this.getStringAttribute('vertical_var');
  }
  public set verticalVar(value: string) {
    this._verticalVar = value;
  }
  public resetVerticalVar() {
    this._verticalVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get verticalVarInput() {
    return this._verticalVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeMirrorList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeMirror[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeMirrorOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeMirrorOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeMonoHue {
  /**
  * Specify a hue by indicating the degree of rotation between 0 and 360 degrees around the color wheel. By default Mono Hue applies a red hue, 0.0 on the color wheel.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hue DataAkamaiImagingPolicyImage#hue}
  */
  readonly hue?: string;
  /**
  * Specify a hue by indicating the degree of rotation between 0 and 360 degrees around the color wheel. By default Mono Hue applies a red hue, 0.0 on the color wheel.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hue_var DataAkamaiImagingPolicyImage#hue_var}
  */
  readonly hueVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeMonoHueToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeMonoHue | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    hue: cdktf.stringToTerraform(struct!.hue),
    hue_var: cdktf.stringToTerraform(struct!.hueVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeMonoHueToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeMonoHue | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    hue: {
      value: cdktf.stringToHclTerraform(struct!.hue),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    hue_var: {
      value: cdktf.stringToHclTerraform(struct!.hueVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeMonoHueOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeMonoHue | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._hue !== undefined) {
      hasAnyValues = true;
      internalValueResult.hue = this._hue;
    }
    if (this._hueVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.hueVar = this._hueVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeMonoHue | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._hue = undefined;
      this._hueVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._hue = value.hue;
      this._hueVar = value.hueVar;
    }
  }

  // hue - computed: false, optional: true, required: false
  private _hue?: string; 
  public get hue() {
    return this.getStringAttribute('hue');
  }
  public set hue(value: string) {
    this._hue = value;
  }
  public resetHue() {
    this._hue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hueInput() {
    return this._hue;
  }

  // hue_var - computed: false, optional: true, required: false
  private _hueVar?: string; 
  public get hueVar() {
    return this.getStringAttribute('hue_var');
  }
  public set hueVar(value: string) {
    this._hueVar = value;
  }
  public resetHueVar() {
    this._hueVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hueVarInput() {
    return this._hueVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeMonoHueList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeMonoHue[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeMonoHueOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeMonoHueOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeOpacity {
  /**
  * Represents alpha values on a scale of `0` to `1`. Values below `1` increase transparency, and `0` is invisible. For images that have some transparency, values above `1` increase the opacity of the transparent portions.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#opacity DataAkamaiImagingPolicyImage#opacity}
  */
  readonly opacity?: string;
  /**
  * Represents alpha values on a scale of `0` to `1`. Values below `1` increase transparency, and `0` is invisible. For images that have some transparency, values above `1` increase the opacity of the transparent portions.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#opacity_var DataAkamaiImagingPolicyImage#opacity_var}
  */
  readonly opacityVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeOpacityToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeOpacity | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    opacity: cdktf.stringToTerraform(struct!.opacity),
    opacity_var: cdktf.stringToTerraform(struct!.opacityVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeOpacityToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeOpacity | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    opacity: {
      value: cdktf.stringToHclTerraform(struct!.opacity),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    opacity_var: {
      value: cdktf.stringToHclTerraform(struct!.opacityVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeOpacityOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeOpacity | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._opacity !== undefined) {
      hasAnyValues = true;
      internalValueResult.opacity = this._opacity;
    }
    if (this._opacityVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.opacityVar = this._opacityVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeOpacity | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._opacity = undefined;
      this._opacityVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._opacity = value.opacity;
      this._opacityVar = value.opacityVar;
    }
  }

  // opacity - computed: false, optional: true, required: false
  private _opacity?: string; 
  public get opacity() {
    return this.getStringAttribute('opacity');
  }
  public set opacity(value: string) {
    this._opacity = value;
  }
  public resetOpacity() {
    this._opacity = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get opacityInput() {
    return this._opacity;
  }

  // opacity_var - computed: false, optional: true, required: false
  private _opacityVar?: string; 
  public get opacityVar() {
    return this.getStringAttribute('opacity_var');
  }
  public set opacityVar(value: string) {
    this._opacityVar = value;
  }
  public resetOpacityVar() {
    this._opacityVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get opacityVarInput() {
    return this._opacityVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeOpacityList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeOpacity[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeOpacityOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeOpacityOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRegionOfInterestCropRegionOfInterest {
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRegionOfInterestCropRegionOfInterestToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRegionOfInterestCropRegionOfInterestOutputReference | DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRegionOfInterestCropRegionOfInterest): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRegionOfInterestCropRegionOfInterestToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRegionOfInterestCropRegionOfInterestOutputReference | DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRegionOfInterestCropRegionOfInterest): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
  };
  return attrs;
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRegionOfInterestCropRegionOfInterestOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false, 0);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRegionOfInterestCropRegionOfInterest | undefined {
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRegionOfInterestCropRegionOfInterest | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
    }
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRegionOfInterestCrop {
  /**
  * The placement of the crop area relative to the specified area of interest.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#gravity DataAkamaiImagingPolicyImage#gravity}
  */
  readonly gravity?: string;
  /**
  * The placement of the crop area relative to the specified area of interest.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#gravity_var DataAkamaiImagingPolicyImage#gravity_var}
  */
  readonly gravityVar?: string;
  /**
  * The height in pixels of the output image relative to the specified `style` value.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#height DataAkamaiImagingPolicyImage#height}
  */
  readonly height?: string;
  /**
  * The height in pixels of the output image relative to the specified `style` value.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#height_var DataAkamaiImagingPolicyImage#height_var}
  */
  readonly heightVar?: string;
  /**
  * Specifies how to crop or scale a crop area for the specified area of interest in the source image, `zoom` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` places raw crop around the point of interest, relative to the specified `gravity` value.  A value of `fill` scales the crop area to include as much of the image and point of interest as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the point of interest, relative to the specified `width` and `height` values.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#style DataAkamaiImagingPolicyImage#style}
  */
  readonly style?: string;
  /**
  * Specifies how to crop or scale a crop area for the specified area of interest in the source image, `zoom` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` places raw crop around the point of interest, relative to the specified `gravity` value.  A value of `fill` scales the crop area to include as much of the image and point of interest as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the point of interest, relative to the specified `width` and `height` values.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#style_var DataAkamaiImagingPolicyImage#style_var}
  */
  readonly styleVar?: string;
  /**
  * The width in pixels of the output image relative to the specified `style` value.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#width DataAkamaiImagingPolicyImage#width}
  */
  readonly width?: string;
  /**
  * The width in pixels of the output image relative to the specified `style` value.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#width_var DataAkamaiImagingPolicyImage#width_var}
  */
  readonly widthVar?: string;
  /**
  * region_of_interest block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#region_of_interest DataAkamaiImagingPolicyImage#region_of_interest}
  */
  readonly regionOfInterest: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRegionOfInterestCropRegionOfInterest;
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRegionOfInterestCropToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRegionOfInterestCrop | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    gravity: cdktf.stringToTerraform(struct!.gravity),
    gravity_var: cdktf.stringToTerraform(struct!.gravityVar),
    height: cdktf.stringToTerraform(struct!.height),
    height_var: cdktf.stringToTerraform(struct!.heightVar),
    style: cdktf.stringToTerraform(struct!.style),
    style_var: cdktf.stringToTerraform(struct!.styleVar),
    width: cdktf.stringToTerraform(struct!.width),
    width_var: cdktf.stringToTerraform(struct!.widthVar),
    region_of_interest: dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRegionOfInterestCropRegionOfInterestToTerraform(struct!.regionOfInterest),
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRegionOfInterestCropToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRegionOfInterestCrop | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    gravity: {
      value: cdktf.stringToHclTerraform(struct!.gravity),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    gravity_var: {
      value: cdktf.stringToHclTerraform(struct!.gravityVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    height: {
      value: cdktf.stringToHclTerraform(struct!.height),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    height_var: {
      value: cdktf.stringToHclTerraform(struct!.heightVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    style: {
      value: cdktf.stringToHclTerraform(struct!.style),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    style_var: {
      value: cdktf.stringToHclTerraform(struct!.styleVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    width: {
      value: cdktf.stringToHclTerraform(struct!.width),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    width_var: {
      value: cdktf.stringToHclTerraform(struct!.widthVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    region_of_interest: {
      value: dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRegionOfInterestCropRegionOfInterestToHclTerraform(struct!.regionOfInterest),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRegionOfInterestCropRegionOfInterestList",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRegionOfInterestCropOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRegionOfInterestCrop | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._gravity !== undefined) {
      hasAnyValues = true;
      internalValueResult.gravity = this._gravity;
    }
    if (this._gravityVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.gravityVar = this._gravityVar;
    }
    if (this._height !== undefined) {
      hasAnyValues = true;
      internalValueResult.height = this._height;
    }
    if (this._heightVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.heightVar = this._heightVar;
    }
    if (this._style !== undefined) {
      hasAnyValues = true;
      internalValueResult.style = this._style;
    }
    if (this._styleVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.styleVar = this._styleVar;
    }
    if (this._width !== undefined) {
      hasAnyValues = true;
      internalValueResult.width = this._width;
    }
    if (this._widthVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.widthVar = this._widthVar;
    }
    if (this._regionOfInterest?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.regionOfInterest = this._regionOfInterest?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRegionOfInterestCrop | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._gravity = undefined;
      this._gravityVar = undefined;
      this._height = undefined;
      this._heightVar = undefined;
      this._style = undefined;
      this._styleVar = undefined;
      this._width = undefined;
      this._widthVar = undefined;
      this._regionOfInterest.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._gravity = value.gravity;
      this._gravityVar = value.gravityVar;
      this._height = value.height;
      this._heightVar = value.heightVar;
      this._style = value.style;
      this._styleVar = value.styleVar;
      this._width = value.width;
      this._widthVar = value.widthVar;
      this._regionOfInterest.internalValue = value.regionOfInterest;
    }
  }

  // gravity - computed: false, optional: true, required: false
  private _gravity?: string; 
  public get gravity() {
    return this.getStringAttribute('gravity');
  }
  public set gravity(value: string) {
    this._gravity = value;
  }
  public resetGravity() {
    this._gravity = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get gravityInput() {
    return this._gravity;
  }

  // gravity_var - computed: false, optional: true, required: false
  private _gravityVar?: string; 
  public get gravityVar() {
    return this.getStringAttribute('gravity_var');
  }
  public set gravityVar(value: string) {
    this._gravityVar = value;
  }
  public resetGravityVar() {
    this._gravityVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get gravityVarInput() {
    return this._gravityVar;
  }

  // height - computed: false, optional: true, required: false
  private _height?: string; 
  public get height() {
    return this.getStringAttribute('height');
  }
  public set height(value: string) {
    this._height = value;
  }
  public resetHeight() {
    this._height = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get heightInput() {
    return this._height;
  }

  // height_var - computed: false, optional: true, required: false
  private _heightVar?: string; 
  public get heightVar() {
    return this.getStringAttribute('height_var');
  }
  public set heightVar(value: string) {
    this._heightVar = value;
  }
  public resetHeightVar() {
    this._heightVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get heightVarInput() {
    return this._heightVar;
  }

  // style - computed: false, optional: true, required: false
  private _style?: string; 
  public get style() {
    return this.getStringAttribute('style');
  }
  public set style(value: string) {
    this._style = value;
  }
  public resetStyle() {
    this._style = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get styleInput() {
    return this._style;
  }

  // style_var - computed: false, optional: true, required: false
  private _styleVar?: string; 
  public get styleVar() {
    return this.getStringAttribute('style_var');
  }
  public set styleVar(value: string) {
    this._styleVar = value;
  }
  public resetStyleVar() {
    this._styleVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get styleVarInput() {
    return this._styleVar;
  }

  // width - computed: false, optional: true, required: false
  private _width?: string; 
  public get width() {
    return this.getStringAttribute('width');
  }
  public set width(value: string) {
    this._width = value;
  }
  public resetWidth() {
    this._width = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get widthInput() {
    return this._width;
  }

  // width_var - computed: false, optional: true, required: false
  private _widthVar?: string; 
  public get widthVar() {
    return this.getStringAttribute('width_var');
  }
  public set widthVar(value: string) {
    this._widthVar = value;
  }
  public resetWidthVar() {
    this._widthVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get widthVarInput() {
    return this._widthVar;
  }

  // region_of_interest - computed: false, optional: false, required: true
  private _regionOfInterest = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRegionOfInterestCropRegionOfInterestOutputReference(this, "region_of_interest");
  public get regionOfInterest() {
    return this._regionOfInterest;
  }
  public putRegionOfInterest(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRegionOfInterestCropRegionOfInterest) {
    this._regionOfInterest.internalValue = value;
  }
  // Temporarily expose input value. Use with caution.
  public get regionOfInterestInput() {
    return this._regionOfInterest.internalValue;
  }
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRegionOfInterestCropList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRegionOfInterestCrop[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRegionOfInterestCropOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRegionOfInterestCropOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRelativeCrop {
  /**
  * The number of pixels to shrink or expand the right side of the image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#east DataAkamaiImagingPolicyImage#east}
  */
  readonly east?: string;
  /**
  * The number of pixels to shrink or expand the right side of the image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#east_var DataAkamaiImagingPolicyImage#east_var}
  */
  readonly eastVar?: string;
  /**
  * The number of pixels to shrink or expand the top side of the image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#north DataAkamaiImagingPolicyImage#north}
  */
  readonly north?: string;
  /**
  * The number of pixels to shrink or expand the top side of the image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#north_var DataAkamaiImagingPolicyImage#north_var}
  */
  readonly northVar?: string;
  /**
  * The number of pixels to shrink or expand the bottom side of the image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#south DataAkamaiImagingPolicyImage#south}
  */
  readonly south?: string;
  /**
  * The number of pixels to shrink or expand the bottom side of the image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#south_var DataAkamaiImagingPolicyImage#south_var}
  */
  readonly southVar?: string;
  /**
  * The number of pixels to shrink or expand the left side of the image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#west DataAkamaiImagingPolicyImage#west}
  */
  readonly west?: string;
  /**
  * The number of pixels to shrink or expand the left side of the image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#west_var DataAkamaiImagingPolicyImage#west_var}
  */
  readonly westVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRelativeCropToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRelativeCrop | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    east: cdktf.stringToTerraform(struct!.east),
    east_var: cdktf.stringToTerraform(struct!.eastVar),
    north: cdktf.stringToTerraform(struct!.north),
    north_var: cdktf.stringToTerraform(struct!.northVar),
    south: cdktf.stringToTerraform(struct!.south),
    south_var: cdktf.stringToTerraform(struct!.southVar),
    west: cdktf.stringToTerraform(struct!.west),
    west_var: cdktf.stringToTerraform(struct!.westVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRelativeCropToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRelativeCrop | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    east: {
      value: cdktf.stringToHclTerraform(struct!.east),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    east_var: {
      value: cdktf.stringToHclTerraform(struct!.eastVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    north: {
      value: cdktf.stringToHclTerraform(struct!.north),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    north_var: {
      value: cdktf.stringToHclTerraform(struct!.northVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    south: {
      value: cdktf.stringToHclTerraform(struct!.south),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    south_var: {
      value: cdktf.stringToHclTerraform(struct!.southVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    west: {
      value: cdktf.stringToHclTerraform(struct!.west),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    west_var: {
      value: cdktf.stringToHclTerraform(struct!.westVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRelativeCropOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRelativeCrop | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._east !== undefined) {
      hasAnyValues = true;
      internalValueResult.east = this._east;
    }
    if (this._eastVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.eastVar = this._eastVar;
    }
    if (this._north !== undefined) {
      hasAnyValues = true;
      internalValueResult.north = this._north;
    }
    if (this._northVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.northVar = this._northVar;
    }
    if (this._south !== undefined) {
      hasAnyValues = true;
      internalValueResult.south = this._south;
    }
    if (this._southVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.southVar = this._southVar;
    }
    if (this._west !== undefined) {
      hasAnyValues = true;
      internalValueResult.west = this._west;
    }
    if (this._westVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.westVar = this._westVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRelativeCrop | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._east = undefined;
      this._eastVar = undefined;
      this._north = undefined;
      this._northVar = undefined;
      this._south = undefined;
      this._southVar = undefined;
      this._west = undefined;
      this._westVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._east = value.east;
      this._eastVar = value.eastVar;
      this._north = value.north;
      this._northVar = value.northVar;
      this._south = value.south;
      this._southVar = value.southVar;
      this._west = value.west;
      this._westVar = value.westVar;
    }
  }

  // east - computed: false, optional: true, required: false
  private _east?: string; 
  public get east() {
    return this.getStringAttribute('east');
  }
  public set east(value: string) {
    this._east = value;
  }
  public resetEast() {
    this._east = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get eastInput() {
    return this._east;
  }

  // east_var - computed: false, optional: true, required: false
  private _eastVar?: string; 
  public get eastVar() {
    return this.getStringAttribute('east_var');
  }
  public set eastVar(value: string) {
    this._eastVar = value;
  }
  public resetEastVar() {
    this._eastVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get eastVarInput() {
    return this._eastVar;
  }

  // north - computed: false, optional: true, required: false
  private _north?: string; 
  public get north() {
    return this.getStringAttribute('north');
  }
  public set north(value: string) {
    this._north = value;
  }
  public resetNorth() {
    this._north = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get northInput() {
    return this._north;
  }

  // north_var - computed: false, optional: true, required: false
  private _northVar?: string; 
  public get northVar() {
    return this.getStringAttribute('north_var');
  }
  public set northVar(value: string) {
    this._northVar = value;
  }
  public resetNorthVar() {
    this._northVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get northVarInput() {
    return this._northVar;
  }

  // south - computed: false, optional: true, required: false
  private _south?: string; 
  public get south() {
    return this.getStringAttribute('south');
  }
  public set south(value: string) {
    this._south = value;
  }
  public resetSouth() {
    this._south = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get southInput() {
    return this._south;
  }

  // south_var - computed: false, optional: true, required: false
  private _southVar?: string; 
  public get southVar() {
    return this.getStringAttribute('south_var');
  }
  public set southVar(value: string) {
    this._southVar = value;
  }
  public resetSouthVar() {
    this._southVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get southVarInput() {
    return this._southVar;
  }

  // west - computed: false, optional: true, required: false
  private _west?: string; 
  public get west() {
    return this.getStringAttribute('west');
  }
  public set west(value: string) {
    this._west = value;
  }
  public resetWest() {
    this._west = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get westInput() {
    return this._west;
  }

  // west_var - computed: false, optional: true, required: false
  private _westVar?: string; 
  public get westVar() {
    return this.getStringAttribute('west_var');
  }
  public set westVar(value: string) {
    this._westVar = value;
  }
  public resetWestVar() {
    this._westVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get westVarInput() {
    return this._westVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRelativeCropList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRelativeCrop[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRelativeCropOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRelativeCropOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRemoveColor {
  /**
  * The hexadecimal CSS color value to remove.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#color DataAkamaiImagingPolicyImage#color}
  */
  readonly color?: string;
  /**
  * The hexadecimal CSS color value to remove.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#color_var DataAkamaiImagingPolicyImage#color_var}
  */
  readonly colorVar?: string;
  /**
  * The RemoveColor transformation may create a hard edge around an image. To minimize these hard edges and make the removal of the color more gradual in appearance, use the Feather option. This option allows you to extend the color removal beyond the specified Tolerance. The pixels in this extended tolerance become semi-transparent - creating a softer edge.  The first realtime request for an image using the feather option may result in a slow transformation time. Subsequent requests are not impacted as they are served directly out of cache.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#feather DataAkamaiImagingPolicyImage#feather}
  */
  readonly feather?: string;
  /**
  * The RemoveColor transformation may create a hard edge around an image. To minimize these hard edges and make the removal of the color more gradual in appearance, use the Feather option. This option allows you to extend the color removal beyond the specified Tolerance. The pixels in this extended tolerance become semi-transparent - creating a softer edge.  The first realtime request for an image using the feather option may result in a slow transformation time. Subsequent requests are not impacted as they are served directly out of cache.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#feather_var DataAkamaiImagingPolicyImage#feather_var}
  */
  readonly featherVar?: string;
  /**
  * The Tolerance option defines how close the color needs to be to the selected color before it's changed to fully transparent. Set the Tolerance to 0.0 to remove only the exact color specified.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#tolerance DataAkamaiImagingPolicyImage#tolerance}
  */
  readonly tolerance?: string;
  /**
  * The Tolerance option defines how close the color needs to be to the selected color before it's changed to fully transparent. Set the Tolerance to 0.0 to remove only the exact color specified.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#tolerance_var DataAkamaiImagingPolicyImage#tolerance_var}
  */
  readonly toleranceVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRemoveColorToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRemoveColor | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    color: cdktf.stringToTerraform(struct!.color),
    color_var: cdktf.stringToTerraform(struct!.colorVar),
    feather: cdktf.stringToTerraform(struct!.feather),
    feather_var: cdktf.stringToTerraform(struct!.featherVar),
    tolerance: cdktf.stringToTerraform(struct!.tolerance),
    tolerance_var: cdktf.stringToTerraform(struct!.toleranceVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRemoveColorToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRemoveColor | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    color: {
      value: cdktf.stringToHclTerraform(struct!.color),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    color_var: {
      value: cdktf.stringToHclTerraform(struct!.colorVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    feather: {
      value: cdktf.stringToHclTerraform(struct!.feather),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    feather_var: {
      value: cdktf.stringToHclTerraform(struct!.featherVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    tolerance: {
      value: cdktf.stringToHclTerraform(struct!.tolerance),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    tolerance_var: {
      value: cdktf.stringToHclTerraform(struct!.toleranceVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRemoveColorOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRemoveColor | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._color !== undefined) {
      hasAnyValues = true;
      internalValueResult.color = this._color;
    }
    if (this._colorVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.colorVar = this._colorVar;
    }
    if (this._feather !== undefined) {
      hasAnyValues = true;
      internalValueResult.feather = this._feather;
    }
    if (this._featherVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.featherVar = this._featherVar;
    }
    if (this._tolerance !== undefined) {
      hasAnyValues = true;
      internalValueResult.tolerance = this._tolerance;
    }
    if (this._toleranceVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.toleranceVar = this._toleranceVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRemoveColor | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._color = undefined;
      this._colorVar = undefined;
      this._feather = undefined;
      this._featherVar = undefined;
      this._tolerance = undefined;
      this._toleranceVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._color = value.color;
      this._colorVar = value.colorVar;
      this._feather = value.feather;
      this._featherVar = value.featherVar;
      this._tolerance = value.tolerance;
      this._toleranceVar = value.toleranceVar;
    }
  }

  // color - computed: false, optional: true, required: false
  private _color?: string; 
  public get color() {
    return this.getStringAttribute('color');
  }
  public set color(value: string) {
    this._color = value;
  }
  public resetColor() {
    this._color = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get colorInput() {
    return this._color;
  }

  // color_var - computed: false, optional: true, required: false
  private _colorVar?: string; 
  public get colorVar() {
    return this.getStringAttribute('color_var');
  }
  public set colorVar(value: string) {
    this._colorVar = value;
  }
  public resetColorVar() {
    this._colorVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get colorVarInput() {
    return this._colorVar;
  }

  // feather - computed: false, optional: true, required: false
  private _feather?: string; 
  public get feather() {
    return this.getStringAttribute('feather');
  }
  public set feather(value: string) {
    this._feather = value;
  }
  public resetFeather() {
    this._feather = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get featherInput() {
    return this._feather;
  }

  // feather_var - computed: false, optional: true, required: false
  private _featherVar?: string; 
  public get featherVar() {
    return this.getStringAttribute('feather_var');
  }
  public set featherVar(value: string) {
    this._featherVar = value;
  }
  public resetFeatherVar() {
    this._featherVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get featherVarInput() {
    return this._featherVar;
  }

  // tolerance - computed: false, optional: true, required: false
  private _tolerance?: string; 
  public get tolerance() {
    return this.getStringAttribute('tolerance');
  }
  public set tolerance(value: string) {
    this._tolerance = value;
  }
  public resetTolerance() {
    this._tolerance = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get toleranceInput() {
    return this._tolerance;
  }

  // tolerance_var - computed: false, optional: true, required: false
  private _toleranceVar?: string; 
  public get toleranceVar() {
    return this.getStringAttribute('tolerance_var');
  }
  public set toleranceVar(value: string) {
    this._toleranceVar = value;
  }
  public resetToleranceVar() {
    this._toleranceVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get toleranceVarInput() {
    return this._toleranceVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRemoveColorList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRemoveColor[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRemoveColorOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRemoveColorOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeResize {
  /**
  * Preserves the aspect ratio. Select `fit` to make the image fit entirely within the selected width and height. When using `fit`, the resulting image has the largest possible size for the specified dimensions. Select `fill` to size the image so it both completely fills the dimensions and has the smallest possible file size. Otherwise `ignore` changes the original aspect ratio to fit within an arbitrarily shaped rectangle.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#aspect DataAkamaiImagingPolicyImage#aspect}
  */
  readonly aspect?: string;
  /**
  * Preserves the aspect ratio. Select `fit` to make the image fit entirely within the selected width and height. When using `fit`, the resulting image has the largest possible size for the specified dimensions. Select `fill` to size the image so it both completely fills the dimensions and has the smallest possible file size. Otherwise `ignore` changes the original aspect ratio to fit within an arbitrarily shaped rectangle.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#aspect_var DataAkamaiImagingPolicyImage#aspect_var}
  */
  readonly aspectVar?: string;
  /**
  * The height to resize the source image to. Must be set if height is not specified.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#height DataAkamaiImagingPolicyImage#height}
  */
  readonly height?: string;
  /**
  * The height to resize the source image to. Must be set if height is not specified.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#height_var DataAkamaiImagingPolicyImage#height_var}
  */
  readonly heightVar?: string;
  /**
  * Sets constraints for the image resize. Select `normal` to resize in all cases, either increasing or decreasing the dimensions. Select `downsize` to ignore this transformation if the result would be larger than the original. Select `upsize` to ignore this transformation if the result would be smaller.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#type DataAkamaiImagingPolicyImage#type}
  */
  readonly type?: string;
  /**
  * Sets constraints for the image resize. Select `normal` to resize in all cases, either increasing or decreasing the dimensions. Select `downsize` to ignore this transformation if the result would be larger than the original. Select `upsize` to ignore this transformation if the result would be smaller.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#type_var DataAkamaiImagingPolicyImage#type_var}
  */
  readonly typeVar?: string;
  /**
  * The width to resize the source image to. Must be set if width is not specified.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#width DataAkamaiImagingPolicyImage#width}
  */
  readonly width?: string;
  /**
  * The width to resize the source image to. Must be set if width is not specified.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#width_var DataAkamaiImagingPolicyImage#width_var}
  */
  readonly widthVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeResizeToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeResize | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    aspect: cdktf.stringToTerraform(struct!.aspect),
    aspect_var: cdktf.stringToTerraform(struct!.aspectVar),
    height: cdktf.stringToTerraform(struct!.height),
    height_var: cdktf.stringToTerraform(struct!.heightVar),
    type: cdktf.stringToTerraform(struct!.type),
    type_var: cdktf.stringToTerraform(struct!.typeVar),
    width: cdktf.stringToTerraform(struct!.width),
    width_var: cdktf.stringToTerraform(struct!.widthVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeResizeToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeResize | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    aspect: {
      value: cdktf.stringToHclTerraform(struct!.aspect),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    aspect_var: {
      value: cdktf.stringToHclTerraform(struct!.aspectVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    height: {
      value: cdktf.stringToHclTerraform(struct!.height),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    height_var: {
      value: cdktf.stringToHclTerraform(struct!.heightVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    type: {
      value: cdktf.stringToHclTerraform(struct!.type),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    type_var: {
      value: cdktf.stringToHclTerraform(struct!.typeVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    width: {
      value: cdktf.stringToHclTerraform(struct!.width),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    width_var: {
      value: cdktf.stringToHclTerraform(struct!.widthVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeResizeOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeResize | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._aspect !== undefined) {
      hasAnyValues = true;
      internalValueResult.aspect = this._aspect;
    }
    if (this._aspectVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.aspectVar = this._aspectVar;
    }
    if (this._height !== undefined) {
      hasAnyValues = true;
      internalValueResult.height = this._height;
    }
    if (this._heightVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.heightVar = this._heightVar;
    }
    if (this._type !== undefined) {
      hasAnyValues = true;
      internalValueResult.type = this._type;
    }
    if (this._typeVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.typeVar = this._typeVar;
    }
    if (this._width !== undefined) {
      hasAnyValues = true;
      internalValueResult.width = this._width;
    }
    if (this._widthVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.widthVar = this._widthVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeResize | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._aspect = undefined;
      this._aspectVar = undefined;
      this._height = undefined;
      this._heightVar = undefined;
      this._type = undefined;
      this._typeVar = undefined;
      this._width = undefined;
      this._widthVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._aspect = value.aspect;
      this._aspectVar = value.aspectVar;
      this._height = value.height;
      this._heightVar = value.heightVar;
      this._type = value.type;
      this._typeVar = value.typeVar;
      this._width = value.width;
      this._widthVar = value.widthVar;
    }
  }

  // aspect - computed: false, optional: true, required: false
  private _aspect?: string; 
  public get aspect() {
    return this.getStringAttribute('aspect');
  }
  public set aspect(value: string) {
    this._aspect = value;
  }
  public resetAspect() {
    this._aspect = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get aspectInput() {
    return this._aspect;
  }

  // aspect_var - computed: false, optional: true, required: false
  private _aspectVar?: string; 
  public get aspectVar() {
    return this.getStringAttribute('aspect_var');
  }
  public set aspectVar(value: string) {
    this._aspectVar = value;
  }
  public resetAspectVar() {
    this._aspectVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get aspectVarInput() {
    return this._aspectVar;
  }

  // height - computed: false, optional: true, required: false
  private _height?: string; 
  public get height() {
    return this.getStringAttribute('height');
  }
  public set height(value: string) {
    this._height = value;
  }
  public resetHeight() {
    this._height = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get heightInput() {
    return this._height;
  }

  // height_var - computed: false, optional: true, required: false
  private _heightVar?: string; 
  public get heightVar() {
    return this.getStringAttribute('height_var');
  }
  public set heightVar(value: string) {
    this._heightVar = value;
  }
  public resetHeightVar() {
    this._heightVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get heightVarInput() {
    return this._heightVar;
  }

  // type - computed: false, optional: true, required: false
  private _type?: string; 
  public get type() {
    return this.getStringAttribute('type');
  }
  public set type(value: string) {
    this._type = value;
  }
  public resetType() {
    this._type = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get typeInput() {
    return this._type;
  }

  // type_var - computed: false, optional: true, required: false
  private _typeVar?: string; 
  public get typeVar() {
    return this.getStringAttribute('type_var');
  }
  public set typeVar(value: string) {
    this._typeVar = value;
  }
  public resetTypeVar() {
    this._typeVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get typeVarInput() {
    return this._typeVar;
  }

  // width - computed: false, optional: true, required: false
  private _width?: string; 
  public get width() {
    return this.getStringAttribute('width');
  }
  public set width(value: string) {
    this._width = value;
  }
  public resetWidth() {
    this._width = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get widthInput() {
    return this._width;
  }

  // width_var - computed: false, optional: true, required: false
  private _widthVar?: string; 
  public get widthVar() {
    return this.getStringAttribute('width_var');
  }
  public set widthVar(value: string) {
    this._widthVar = value;
  }
  public resetWidthVar() {
    this._widthVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get widthVarInput() {
    return this._widthVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeResizeList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeResize[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeResizeOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeResizeOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRotate {
  /**
  * The value to rotate the image by. Positive values rotate clockwise, while negative values rotate counter-clockwise.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#degrees DataAkamaiImagingPolicyImage#degrees}
  */
  readonly degrees?: string;
  /**
  * The value to rotate the image by. Positive values rotate clockwise, while negative values rotate counter-clockwise.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#degrees_var DataAkamaiImagingPolicyImage#degrees_var}
  */
  readonly degreesVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRotateToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRotate | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    degrees: cdktf.stringToTerraform(struct!.degrees),
    degrees_var: cdktf.stringToTerraform(struct!.degreesVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRotateToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRotate | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    degrees: {
      value: cdktf.stringToHclTerraform(struct!.degrees),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    degrees_var: {
      value: cdktf.stringToHclTerraform(struct!.degreesVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRotateOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRotate | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._degrees !== undefined) {
      hasAnyValues = true;
      internalValueResult.degrees = this._degrees;
    }
    if (this._degreesVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.degreesVar = this._degreesVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRotate | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._degrees = undefined;
      this._degreesVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._degrees = value.degrees;
      this._degreesVar = value.degreesVar;
    }
  }

  // degrees - computed: false, optional: true, required: false
  private _degrees?: string; 
  public get degrees() {
    return this.getStringAttribute('degrees');
  }
  public set degrees(value: string) {
    this._degrees = value;
  }
  public resetDegrees() {
    this._degrees = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get degreesInput() {
    return this._degrees;
  }

  // degrees_var - computed: false, optional: true, required: false
  private _degreesVar?: string; 
  public get degreesVar() {
    return this.getStringAttribute('degrees_var');
  }
  public set degreesVar(value: string) {
    this._degreesVar = value;
  }
  public resetDegreesVar() {
    this._degreesVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get degreesVarInput() {
    return this._degreesVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRotateList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRotate[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRotateOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRotateOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeScale {
  /**
  * Scaling factor for the input height to determine the output height of the image, where values between `0` and `1` decrease size. Image dimensions need to be non-zero positive numbers.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#height DataAkamaiImagingPolicyImage#height}
  */
  readonly height?: string;
  /**
  * Scaling factor for the input height to determine the output height of the image, where values between `0` and `1` decrease size. Image dimensions need to be non-zero positive numbers.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#height_var DataAkamaiImagingPolicyImage#height_var}
  */
  readonly heightVar?: string;
  /**
  * Scaling factor for the input width to determine the output width of the image, where `1` leaves the width unchanged. Values greater than `1` increase the image size. Image dimensions need to be non-zero positive numbers.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#width DataAkamaiImagingPolicyImage#width}
  */
  readonly width?: string;
  /**
  * Scaling factor for the input width to determine the output width of the image, where `1` leaves the width unchanged. Values greater than `1` increase the image size. Image dimensions need to be non-zero positive numbers.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#width_var DataAkamaiImagingPolicyImage#width_var}
  */
  readonly widthVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeScaleToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeScale | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    height: cdktf.stringToTerraform(struct!.height),
    height_var: cdktf.stringToTerraform(struct!.heightVar),
    width: cdktf.stringToTerraform(struct!.width),
    width_var: cdktf.stringToTerraform(struct!.widthVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeScaleToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeScale | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    height: {
      value: cdktf.stringToHclTerraform(struct!.height),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    height_var: {
      value: cdktf.stringToHclTerraform(struct!.heightVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    width: {
      value: cdktf.stringToHclTerraform(struct!.width),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    width_var: {
      value: cdktf.stringToHclTerraform(struct!.widthVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeScaleOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeScale | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._height !== undefined) {
      hasAnyValues = true;
      internalValueResult.height = this._height;
    }
    if (this._heightVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.heightVar = this._heightVar;
    }
    if (this._width !== undefined) {
      hasAnyValues = true;
      internalValueResult.width = this._width;
    }
    if (this._widthVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.widthVar = this._widthVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeScale | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._height = undefined;
      this._heightVar = undefined;
      this._width = undefined;
      this._widthVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._height = value.height;
      this._heightVar = value.heightVar;
      this._width = value.width;
      this._widthVar = value.widthVar;
    }
  }

  // height - computed: false, optional: true, required: false
  private _height?: string; 
  public get height() {
    return this.getStringAttribute('height');
  }
  public set height(value: string) {
    this._height = value;
  }
  public resetHeight() {
    this._height = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get heightInput() {
    return this._height;
  }

  // height_var - computed: false, optional: true, required: false
  private _heightVar?: string; 
  public get heightVar() {
    return this.getStringAttribute('height_var');
  }
  public set heightVar(value: string) {
    this._heightVar = value;
  }
  public resetHeightVar() {
    this._heightVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get heightVarInput() {
    return this._heightVar;
  }

  // width - computed: false, optional: true, required: false
  private _width?: string; 
  public get width() {
    return this.getStringAttribute('width');
  }
  public set width(value: string) {
    this._width = value;
  }
  public resetWidth() {
    this._width = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get widthInput() {
    return this._width;
  }

  // width_var - computed: false, optional: true, required: false
  private _widthVar?: string; 
  public get widthVar() {
    return this.getStringAttribute('width_var');
  }
  public set widthVar(value: string) {
    this._widthVar = value;
  }
  public resetWidthVar() {
    this._widthVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get widthVarInput() {
    return this._widthVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeScaleList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeScale[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeScaleOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeScaleOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeShear {
  /**
  * The amount to shear along the x-axis, measured in multiples of the image's width. Must be set if yShear is not specified.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#x_shear DataAkamaiImagingPolicyImage#x_shear}
  */
  readonly xShear?: string;
  /**
  * The amount to shear along the x-axis, measured in multiples of the image's width. Must be set if yShear is not specified.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#x_shear_var DataAkamaiImagingPolicyImage#x_shear_var}
  */
  readonly xShearVar?: string;
  /**
  * The amount to shear along the y-axis, measured in multiples of the image's height. Must be set if xShear is not specified.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#y_shear DataAkamaiImagingPolicyImage#y_shear}
  */
  readonly yShear?: string;
  /**
  * The amount to shear along the y-axis, measured in multiples of the image's height. Must be set if xShear is not specified.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#y_shear_var DataAkamaiImagingPolicyImage#y_shear_var}
  */
  readonly yShearVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeShearToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeShear | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    x_shear: cdktf.stringToTerraform(struct!.xShear),
    x_shear_var: cdktf.stringToTerraform(struct!.xShearVar),
    y_shear: cdktf.stringToTerraform(struct!.yShear),
    y_shear_var: cdktf.stringToTerraform(struct!.yShearVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeShearToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeShear | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    x_shear: {
      value: cdktf.stringToHclTerraform(struct!.xShear),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    x_shear_var: {
      value: cdktf.stringToHclTerraform(struct!.xShearVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    y_shear: {
      value: cdktf.stringToHclTerraform(struct!.yShear),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    y_shear_var: {
      value: cdktf.stringToHclTerraform(struct!.yShearVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeShearOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeShear | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._xShear !== undefined) {
      hasAnyValues = true;
      internalValueResult.xShear = this._xShear;
    }
    if (this._xShearVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.xShearVar = this._xShearVar;
    }
    if (this._yShear !== undefined) {
      hasAnyValues = true;
      internalValueResult.yShear = this._yShear;
    }
    if (this._yShearVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.yShearVar = this._yShearVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeShear | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._xShear = undefined;
      this._xShearVar = undefined;
      this._yShear = undefined;
      this._yShearVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._xShear = value.xShear;
      this._xShearVar = value.xShearVar;
      this._yShear = value.yShear;
      this._yShearVar = value.yShearVar;
    }
  }

  // x_shear - computed: false, optional: true, required: false
  private _xShear?: string; 
  public get xShear() {
    return this.getStringAttribute('x_shear');
  }
  public set xShear(value: string) {
    this._xShear = value;
  }
  public resetXShear() {
    this._xShear = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get xShearInput() {
    return this._xShear;
  }

  // x_shear_var - computed: false, optional: true, required: false
  private _xShearVar?: string; 
  public get xShearVar() {
    return this.getStringAttribute('x_shear_var');
  }
  public set xShearVar(value: string) {
    this._xShearVar = value;
  }
  public resetXShearVar() {
    this._xShearVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get xShearVarInput() {
    return this._xShearVar;
  }

  // y_shear - computed: false, optional: true, required: false
  private _yShear?: string; 
  public get yShear() {
    return this.getStringAttribute('y_shear');
  }
  public set yShear(value: string) {
    this._yShear = value;
  }
  public resetYShear() {
    this._yShear = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get yShearInput() {
    return this._yShear;
  }

  // y_shear_var - computed: false, optional: true, required: false
  private _yShearVar?: string; 
  public get yShearVar() {
    return this.getStringAttribute('y_shear_var');
  }
  public set yShearVar(value: string) {
    this._yShearVar = value;
  }
  public resetYShearVar() {
    this._yShearVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get yShearVarInput() {
    return this._yShearVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeShearList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeShear[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeShearOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeShearOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeSmartCrop {
  /**
  * When enabled, the SmartCrop transformation doesn't actually execute. Instead, it outlines found faces or features, the region of interest, and the crop area.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#debug DataAkamaiImagingPolicyImage#debug}
  */
  readonly debug?: string;
  /**
  * When enabled, the SmartCrop transformation doesn't actually execute. Instead, it outlines found faces or features, the region of interest, and the crop area.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#debug_var DataAkamaiImagingPolicyImage#debug_var}
  */
  readonly debugVar?: string;
  /**
  * The height in pixels of the output image relative to the specified `style` value.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#height DataAkamaiImagingPolicyImage#height}
  */
  readonly height?: string;
  /**
  * The height in pixels of the output image relative to the specified `style` value.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#height_var DataAkamaiImagingPolicyImage#height_var}
  */
  readonly heightVar?: string;
  /**
  * Whether to sacrifice any image fidelity for transformation performance.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#sloppy DataAkamaiImagingPolicyImage#sloppy}
  */
  readonly sloppy?: string;
  /**
  * Whether to sacrifice any image fidelity for transformation performance.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#sloppy_var DataAkamaiImagingPolicyImage#sloppy_var}
  */
  readonly sloppyVar?: string;
  /**
  * Specifies how to crop or scale a crop area for the specified area of interest in the source image, `fill` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` places raw crop around the point of interest.  A value of `fill` scales the crop area to include as much of the image and point of interest as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the point of interest, relative to the specified `width` and `height` values.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#style DataAkamaiImagingPolicyImage#style}
  */
  readonly style?: string;
  /**
  * Specifies how to crop or scale a crop area for the specified area of interest in the source image, `fill` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` places raw crop around the point of interest.  A value of `fill` scales the crop area to include as much of the image and point of interest as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the point of interest, relative to the specified `width` and `height` values.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#style_var DataAkamaiImagingPolicyImage#style_var}
  */
  readonly styleVar?: string;
  /**
  * The width in pixels of the output image relative to the specified `style` value.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#width DataAkamaiImagingPolicyImage#width}
  */
  readonly width?: string;
  /**
  * The width in pixels of the output image relative to the specified `style` value.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#width_var DataAkamaiImagingPolicyImage#width_var}
  */
  readonly widthVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeSmartCropToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeSmartCrop | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    debug: cdktf.stringToTerraform(struct!.debug),
    debug_var: cdktf.stringToTerraform(struct!.debugVar),
    height: cdktf.stringToTerraform(struct!.height),
    height_var: cdktf.stringToTerraform(struct!.heightVar),
    sloppy: cdktf.stringToTerraform(struct!.sloppy),
    sloppy_var: cdktf.stringToTerraform(struct!.sloppyVar),
    style: cdktf.stringToTerraform(struct!.style),
    style_var: cdktf.stringToTerraform(struct!.styleVar),
    width: cdktf.stringToTerraform(struct!.width),
    width_var: cdktf.stringToTerraform(struct!.widthVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeSmartCropToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeSmartCrop | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    debug: {
      value: cdktf.stringToHclTerraform(struct!.debug),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    debug_var: {
      value: cdktf.stringToHclTerraform(struct!.debugVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    height: {
      value: cdktf.stringToHclTerraform(struct!.height),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    height_var: {
      value: cdktf.stringToHclTerraform(struct!.heightVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    sloppy: {
      value: cdktf.stringToHclTerraform(struct!.sloppy),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    sloppy_var: {
      value: cdktf.stringToHclTerraform(struct!.sloppyVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    style: {
      value: cdktf.stringToHclTerraform(struct!.style),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    style_var: {
      value: cdktf.stringToHclTerraform(struct!.styleVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    width: {
      value: cdktf.stringToHclTerraform(struct!.width),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    width_var: {
      value: cdktf.stringToHclTerraform(struct!.widthVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeSmartCropOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeSmartCrop | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._debug !== undefined) {
      hasAnyValues = true;
      internalValueResult.debug = this._debug;
    }
    if (this._debugVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.debugVar = this._debugVar;
    }
    if (this._height !== undefined) {
      hasAnyValues = true;
      internalValueResult.height = this._height;
    }
    if (this._heightVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.heightVar = this._heightVar;
    }
    if (this._sloppy !== undefined) {
      hasAnyValues = true;
      internalValueResult.sloppy = this._sloppy;
    }
    if (this._sloppyVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.sloppyVar = this._sloppyVar;
    }
    if (this._style !== undefined) {
      hasAnyValues = true;
      internalValueResult.style = this._style;
    }
    if (this._styleVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.styleVar = this._styleVar;
    }
    if (this._width !== undefined) {
      hasAnyValues = true;
      internalValueResult.width = this._width;
    }
    if (this._widthVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.widthVar = this._widthVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeSmartCrop | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._debug = undefined;
      this._debugVar = undefined;
      this._height = undefined;
      this._heightVar = undefined;
      this._sloppy = undefined;
      this._sloppyVar = undefined;
      this._style = undefined;
      this._styleVar = undefined;
      this._width = undefined;
      this._widthVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._debug = value.debug;
      this._debugVar = value.debugVar;
      this._height = value.height;
      this._heightVar = value.heightVar;
      this._sloppy = value.sloppy;
      this._sloppyVar = value.sloppyVar;
      this._style = value.style;
      this._styleVar = value.styleVar;
      this._width = value.width;
      this._widthVar = value.widthVar;
    }
  }

  // debug - computed: false, optional: true, required: false
  private _debug?: string; 
  public get debug() {
    return this.getStringAttribute('debug');
  }
  public set debug(value: string) {
    this._debug = value;
  }
  public resetDebug() {
    this._debug = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get debugInput() {
    return this._debug;
  }

  // debug_var - computed: false, optional: true, required: false
  private _debugVar?: string; 
  public get debugVar() {
    return this.getStringAttribute('debug_var');
  }
  public set debugVar(value: string) {
    this._debugVar = value;
  }
  public resetDebugVar() {
    this._debugVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get debugVarInput() {
    return this._debugVar;
  }

  // height - computed: false, optional: true, required: false
  private _height?: string; 
  public get height() {
    return this.getStringAttribute('height');
  }
  public set height(value: string) {
    this._height = value;
  }
  public resetHeight() {
    this._height = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get heightInput() {
    return this._height;
  }

  // height_var - computed: false, optional: true, required: false
  private _heightVar?: string; 
  public get heightVar() {
    return this.getStringAttribute('height_var');
  }
  public set heightVar(value: string) {
    this._heightVar = value;
  }
  public resetHeightVar() {
    this._heightVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get heightVarInput() {
    return this._heightVar;
  }

  // sloppy - computed: false, optional: true, required: false
  private _sloppy?: string; 
  public get sloppy() {
    return this.getStringAttribute('sloppy');
  }
  public set sloppy(value: string) {
    this._sloppy = value;
  }
  public resetSloppy() {
    this._sloppy = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get sloppyInput() {
    return this._sloppy;
  }

  // sloppy_var - computed: false, optional: true, required: false
  private _sloppyVar?: string; 
  public get sloppyVar() {
    return this.getStringAttribute('sloppy_var');
  }
  public set sloppyVar(value: string) {
    this._sloppyVar = value;
  }
  public resetSloppyVar() {
    this._sloppyVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get sloppyVarInput() {
    return this._sloppyVar;
  }

  // style - computed: false, optional: true, required: false
  private _style?: string; 
  public get style() {
    return this.getStringAttribute('style');
  }
  public set style(value: string) {
    this._style = value;
  }
  public resetStyle() {
    this._style = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get styleInput() {
    return this._style;
  }

  // style_var - computed: false, optional: true, required: false
  private _styleVar?: string; 
  public get styleVar() {
    return this.getStringAttribute('style_var');
  }
  public set styleVar(value: string) {
    this._styleVar = value;
  }
  public resetStyleVar() {
    this._styleVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get styleVarInput() {
    return this._styleVar;
  }

  // width - computed: false, optional: true, required: false
  private _width?: string; 
  public get width() {
    return this.getStringAttribute('width');
  }
  public set width(value: string) {
    this._width = value;
  }
  public resetWidth() {
    this._width = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get widthInput() {
    return this._width;
  }

  // width_var - computed: false, optional: true, required: false
  private _widthVar?: string; 
  public get widthVar() {
    return this.getStringAttribute('width_var');
  }
  public set widthVar(value: string) {
    this._widthVar = value;
  }
  public resetWidthVar() {
    this._widthVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get widthVarInput() {
    return this._widthVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeSmartCropList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeSmartCrop[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeSmartCropOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeSmartCropOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeTrim {
  /**
  * The fuzz tolerance of the trim, a value between `0` and `1` that determines the acceptable amount of background variation before trimming stops.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#fuzz DataAkamaiImagingPolicyImage#fuzz}
  */
  readonly fuzz?: string;
  /**
  * The fuzz tolerance of the trim, a value between `0` and `1` that determines the acceptable amount of background variation before trimming stops.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#fuzz_var DataAkamaiImagingPolicyImage#fuzz_var}
  */
  readonly fuzzVar?: string;
  /**
  * The amount of padding in pixels to add to the trimmed image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#padding DataAkamaiImagingPolicyImage#padding}
  */
  readonly padding?: string;
  /**
  * The amount of padding in pixels to add to the trimmed image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#padding_var DataAkamaiImagingPolicyImage#padding_var}
  */
  readonly paddingVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeTrimToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeTrim | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    fuzz: cdktf.stringToTerraform(struct!.fuzz),
    fuzz_var: cdktf.stringToTerraform(struct!.fuzzVar),
    padding: cdktf.stringToTerraform(struct!.padding),
    padding_var: cdktf.stringToTerraform(struct!.paddingVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeTrimToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeTrim | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    fuzz: {
      value: cdktf.stringToHclTerraform(struct!.fuzz),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    fuzz_var: {
      value: cdktf.stringToHclTerraform(struct!.fuzzVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    padding: {
      value: cdktf.stringToHclTerraform(struct!.padding),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    padding_var: {
      value: cdktf.stringToHclTerraform(struct!.paddingVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeTrimOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeTrim | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._fuzz !== undefined) {
      hasAnyValues = true;
      internalValueResult.fuzz = this._fuzz;
    }
    if (this._fuzzVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.fuzzVar = this._fuzzVar;
    }
    if (this._padding !== undefined) {
      hasAnyValues = true;
      internalValueResult.padding = this._padding;
    }
    if (this._paddingVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.paddingVar = this._paddingVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeTrim | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._fuzz = undefined;
      this._fuzzVar = undefined;
      this._padding = undefined;
      this._paddingVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._fuzz = value.fuzz;
      this._fuzzVar = value.fuzzVar;
      this._padding = value.padding;
      this._paddingVar = value.paddingVar;
    }
  }

  // fuzz - computed: false, optional: true, required: false
  private _fuzz?: string; 
  public get fuzz() {
    return this.getStringAttribute('fuzz');
  }
  public set fuzz(value: string) {
    this._fuzz = value;
  }
  public resetFuzz() {
    this._fuzz = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get fuzzInput() {
    return this._fuzz;
  }

  // fuzz_var - computed: false, optional: true, required: false
  private _fuzzVar?: string; 
  public get fuzzVar() {
    return this.getStringAttribute('fuzz_var');
  }
  public set fuzzVar(value: string) {
    this._fuzzVar = value;
  }
  public resetFuzzVar() {
    this._fuzzVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get fuzzVarInput() {
    return this._fuzzVar;
  }

  // padding - computed: false, optional: true, required: false
  private _padding?: string; 
  public get padding() {
    return this.getStringAttribute('padding');
  }
  public set padding(value: string) {
    this._padding = value;
  }
  public resetPadding() {
    this._padding = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get paddingInput() {
    return this._padding;
  }

  // padding_var - computed: false, optional: true, required: false
  private _paddingVar?: string; 
  public get paddingVar() {
    return this.getStringAttribute('padding_var');
  }
  public set paddingVar(value: string) {
    this._paddingVar = value;
  }
  public resetPaddingVar() {
    this._paddingVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get paddingVarInput() {
    return this._paddingVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeTrimList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeTrim[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeTrimOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeTrimOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeUnsharpMask {
  /**
  * Set how much emphasis the filter applies to details. Higher values increase apparent sharpness of details.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#gain DataAkamaiImagingPolicyImage#gain}
  */
  readonly gain?: string;
  /**
  * Set how much emphasis the filter applies to details. Higher values increase apparent sharpness of details.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#gain_var DataAkamaiImagingPolicyImage#gain_var}
  */
  readonly gainVar?: string;
  /**
  * The standard deviation of the Gaussian distribution used in the in unsharp mask, measured in pixels, `1.0` by default. High values emphasize large details and low values emphasize small details.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#sigma DataAkamaiImagingPolicyImage#sigma}
  */
  readonly sigma?: string;
  /**
  * The standard deviation of the Gaussian distribution used in the in unsharp mask, measured in pixels, `1.0` by default. High values emphasize large details and low values emphasize small details.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#sigma_var DataAkamaiImagingPolicyImage#sigma_var}
  */
  readonly sigmaVar?: string;
  /**
  * Set the minimum change required to include a detail in the filter. Higher values discard more changes.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#threshold DataAkamaiImagingPolicyImage#threshold}
  */
  readonly threshold?: string;
  /**
  * Set the minimum change required to include a detail in the filter. Higher values discard more changes.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#threshold_var DataAkamaiImagingPolicyImage#threshold_var}
  */
  readonly thresholdVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeUnsharpMaskToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeUnsharpMask | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    gain: cdktf.stringToTerraform(struct!.gain),
    gain_var: cdktf.stringToTerraform(struct!.gainVar),
    sigma: cdktf.stringToTerraform(struct!.sigma),
    sigma_var: cdktf.stringToTerraform(struct!.sigmaVar),
    threshold: cdktf.stringToTerraform(struct!.threshold),
    threshold_var: cdktf.stringToTerraform(struct!.thresholdVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeUnsharpMaskToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeUnsharpMask | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    gain: {
      value: cdktf.stringToHclTerraform(struct!.gain),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    gain_var: {
      value: cdktf.stringToHclTerraform(struct!.gainVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    sigma: {
      value: cdktf.stringToHclTerraform(struct!.sigma),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    sigma_var: {
      value: cdktf.stringToHclTerraform(struct!.sigmaVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    threshold: {
      value: cdktf.stringToHclTerraform(struct!.threshold),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    threshold_var: {
      value: cdktf.stringToHclTerraform(struct!.thresholdVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeUnsharpMaskOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeUnsharpMask | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._gain !== undefined) {
      hasAnyValues = true;
      internalValueResult.gain = this._gain;
    }
    if (this._gainVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.gainVar = this._gainVar;
    }
    if (this._sigma !== undefined) {
      hasAnyValues = true;
      internalValueResult.sigma = this._sigma;
    }
    if (this._sigmaVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.sigmaVar = this._sigmaVar;
    }
    if (this._threshold !== undefined) {
      hasAnyValues = true;
      internalValueResult.threshold = this._threshold;
    }
    if (this._thresholdVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.thresholdVar = this._thresholdVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeUnsharpMask | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._gain = undefined;
      this._gainVar = undefined;
      this._sigma = undefined;
      this._sigmaVar = undefined;
      this._threshold = undefined;
      this._thresholdVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._gain = value.gain;
      this._gainVar = value.gainVar;
      this._sigma = value.sigma;
      this._sigmaVar = value.sigmaVar;
      this._threshold = value.threshold;
      this._thresholdVar = value.thresholdVar;
    }
  }

  // gain - computed: false, optional: true, required: false
  private _gain?: string; 
  public get gain() {
    return this.getStringAttribute('gain');
  }
  public set gain(value: string) {
    this._gain = value;
  }
  public resetGain() {
    this._gain = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get gainInput() {
    return this._gain;
  }

  // gain_var - computed: false, optional: true, required: false
  private _gainVar?: string; 
  public get gainVar() {
    return this.getStringAttribute('gain_var');
  }
  public set gainVar(value: string) {
    this._gainVar = value;
  }
  public resetGainVar() {
    this._gainVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get gainVarInput() {
    return this._gainVar;
  }

  // sigma - computed: false, optional: true, required: false
  private _sigma?: string; 
  public get sigma() {
    return this.getStringAttribute('sigma');
  }
  public set sigma(value: string) {
    this._sigma = value;
  }
  public resetSigma() {
    this._sigma = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get sigmaInput() {
    return this._sigma;
  }

  // sigma_var - computed: false, optional: true, required: false
  private _sigmaVar?: string; 
  public get sigmaVar() {
    return this.getStringAttribute('sigma_var');
  }
  public set sigmaVar(value: string) {
    this._sigmaVar = value;
  }
  public resetSigmaVar() {
    this._sigmaVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get sigmaVarInput() {
    return this._sigmaVar;
  }

  // threshold - computed: false, optional: true, required: false
  private _threshold?: string; 
  public get threshold() {
    return this.getStringAttribute('threshold');
  }
  public set threshold(value: string) {
    this._threshold = value;
  }
  public resetThreshold() {
    this._threshold = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get thresholdInput() {
    return this._threshold;
  }

  // threshold_var - computed: false, optional: true, required: false
  private _thresholdVar?: string; 
  public get thresholdVar() {
    return this.getStringAttribute('threshold_var');
  }
  public set thresholdVar(value: string) {
    this._thresholdVar = value;
  }
  public resetThresholdVar() {
    this._thresholdVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get thresholdVarInput() {
    return this._thresholdVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeUnsharpMaskList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeUnsharpMask[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeUnsharpMaskOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeUnsharpMaskOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscape {
  /**
  * append block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#append DataAkamaiImagingPolicyImage#append}
  */
  readonly append?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeAppend[] | cdktf.IResolvable;
  /**
  * aspect_crop block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#aspect_crop DataAkamaiImagingPolicyImage#aspect_crop}
  */
  readonly aspectCrop?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeAspectCrop[] | cdktf.IResolvable;
  /**
  * background_color block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#background_color DataAkamaiImagingPolicyImage#background_color}
  */
  readonly backgroundColor?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeBackgroundColor[] | cdktf.IResolvable;
  /**
  * blur block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#blur DataAkamaiImagingPolicyImage#blur}
  */
  readonly blur?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeBlur[] | cdktf.IResolvable;
  /**
  * chroma_key block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#chroma_key DataAkamaiImagingPolicyImage#chroma_key}
  */
  readonly chromaKey?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeChromaKey[] | cdktf.IResolvable;
  /**
  * composite block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#composite DataAkamaiImagingPolicyImage#composite}
  */
  readonly composite?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeComposite[] | cdktf.IResolvable;
  /**
  * compound block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#compound DataAkamaiImagingPolicyImage#compound}
  */
  readonly compound?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeCompound[] | cdktf.IResolvable;
  /**
  * contrast block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#contrast DataAkamaiImagingPolicyImage#contrast}
  */
  readonly contrast?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeContrast[] | cdktf.IResolvable;
  /**
  * crop block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#crop DataAkamaiImagingPolicyImage#crop}
  */
  readonly crop?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeCrop[] | cdktf.IResolvable;
  /**
  * face_crop block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#face_crop DataAkamaiImagingPolicyImage#face_crop}
  */
  readonly faceCrop?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeFaceCrop[] | cdktf.IResolvable;
  /**
  * feature_crop block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#feature_crop DataAkamaiImagingPolicyImage#feature_crop}
  */
  readonly featureCrop?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeFeatureCrop[] | cdktf.IResolvable;
  /**
  * fit_and_fill block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#fit_and_fill DataAkamaiImagingPolicyImage#fit_and_fill}
  */
  readonly fitAndFill?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeFitAndFill[] | cdktf.IResolvable;
  /**
  * goop block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#goop DataAkamaiImagingPolicyImage#goop}
  */
  readonly goop?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeGoop[] | cdktf.IResolvable;
  /**
  * grayscale block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#grayscale DataAkamaiImagingPolicyImage#grayscale}
  */
  readonly grayscale?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeGrayscale[] | cdktf.IResolvable;
  /**
  * hsl block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hsl DataAkamaiImagingPolicyImage#hsl}
  */
  readonly hsl?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeHsl[] | cdktf.IResolvable;
  /**
  * hsv block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hsv DataAkamaiImagingPolicyImage#hsv}
  */
  readonly hsv?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeHsv[] | cdktf.IResolvable;
  /**
  * if_dimension block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#if_dimension DataAkamaiImagingPolicyImage#if_dimension}
  */
  readonly ifDimension?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfDimension[] | cdktf.IResolvable;
  /**
  * if_orientation block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#if_orientation DataAkamaiImagingPolicyImage#if_orientation}
  */
  readonly ifOrientation?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfOrientation[] | cdktf.IResolvable;
  /**
  * im_query block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#im_query DataAkamaiImagingPolicyImage#im_query}
  */
  readonly imQuery?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeImQuery[] | cdktf.IResolvable;
  /**
  * max_colors block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#max_colors DataAkamaiImagingPolicyImage#max_colors}
  */
  readonly maxColors?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeMaxColors[] | cdktf.IResolvable;
  /**
  * mirror block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#mirror DataAkamaiImagingPolicyImage#mirror}
  */
  readonly mirror?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeMirror[] | cdktf.IResolvable;
  /**
  * mono_hue block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#mono_hue DataAkamaiImagingPolicyImage#mono_hue}
  */
  readonly monoHue?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeMonoHue[] | cdktf.IResolvable;
  /**
  * opacity block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#opacity DataAkamaiImagingPolicyImage#opacity}
  */
  readonly opacity?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeOpacity[] | cdktf.IResolvable;
  /**
  * region_of_interest_crop block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#region_of_interest_crop DataAkamaiImagingPolicyImage#region_of_interest_crop}
  */
  readonly regionOfInterestCrop?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRegionOfInterestCrop[] | cdktf.IResolvable;
  /**
  * relative_crop block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#relative_crop DataAkamaiImagingPolicyImage#relative_crop}
  */
  readonly relativeCrop?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRelativeCrop[] | cdktf.IResolvable;
  /**
  * remove_color block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#remove_color DataAkamaiImagingPolicyImage#remove_color}
  */
  readonly removeColor?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRemoveColor[] | cdktf.IResolvable;
  /**
  * resize block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#resize DataAkamaiImagingPolicyImage#resize}
  */
  readonly resize?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeResize[] | cdktf.IResolvable;
  /**
  * rotate block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#rotate DataAkamaiImagingPolicyImage#rotate}
  */
  readonly rotate?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRotate[] | cdktf.IResolvable;
  /**
  * scale block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#scale DataAkamaiImagingPolicyImage#scale}
  */
  readonly scale?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeScale[] | cdktf.IResolvable;
  /**
  * shear block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#shear DataAkamaiImagingPolicyImage#shear}
  */
  readonly shear?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeShear[] | cdktf.IResolvable;
  /**
  * smart_crop block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#smart_crop DataAkamaiImagingPolicyImage#smart_crop}
  */
  readonly smartCrop?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeSmartCrop[] | cdktf.IResolvable;
  /**
  * trim block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#trim DataAkamaiImagingPolicyImage#trim}
  */
  readonly trim?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeTrim[] | cdktf.IResolvable;
  /**
  * unsharp_mask block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#unsharp_mask DataAkamaiImagingPolicyImage#unsharp_mask}
  */
  readonly unsharpMask?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeUnsharpMask[] | cdktf.IResolvable;
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeOutputReference | DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscape): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    append: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeAppendToTerraform, true)(struct!.append),
    aspect_crop: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeAspectCropToTerraform, true)(struct!.aspectCrop),
    background_color: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeBackgroundColorToTerraform, true)(struct!.backgroundColor),
    blur: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeBlurToTerraform, true)(struct!.blur),
    chroma_key: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeChromaKeyToTerraform, true)(struct!.chromaKey),
    composite: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeCompositeToTerraform, true)(struct!.composite),
    compound: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeCompoundToTerraform, true)(struct!.compound),
    contrast: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeContrastToTerraform, true)(struct!.contrast),
    crop: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeCropToTerraform, true)(struct!.crop),
    face_crop: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeFaceCropToTerraform, true)(struct!.faceCrop),
    feature_crop: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeFeatureCropToTerraform, true)(struct!.featureCrop),
    fit_and_fill: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeFitAndFillToTerraform, true)(struct!.fitAndFill),
    goop: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeGoopToTerraform, true)(struct!.goop),
    grayscale: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeGrayscaleToTerraform, true)(struct!.grayscale),
    hsl: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeHslToTerraform, true)(struct!.hsl),
    hsv: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeHsvToTerraform, true)(struct!.hsv),
    if_dimension: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfDimensionToTerraform, true)(struct!.ifDimension),
    if_orientation: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfOrientationToTerraform, true)(struct!.ifOrientation),
    im_query: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeImQueryToTerraform, true)(struct!.imQuery),
    max_colors: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeMaxColorsToTerraform, true)(struct!.maxColors),
    mirror: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeMirrorToTerraform, true)(struct!.mirror),
    mono_hue: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeMonoHueToTerraform, true)(struct!.monoHue),
    opacity: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeOpacityToTerraform, true)(struct!.opacity),
    region_of_interest_crop: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRegionOfInterestCropToTerraform, true)(struct!.regionOfInterestCrop),
    relative_crop: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRelativeCropToTerraform, true)(struct!.relativeCrop),
    remove_color: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRemoveColorToTerraform, true)(struct!.removeColor),
    resize: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeResizeToTerraform, true)(struct!.resize),
    rotate: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRotateToTerraform, true)(struct!.rotate),
    scale: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeScaleToTerraform, true)(struct!.scale),
    shear: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeShearToTerraform, true)(struct!.shear),
    smart_crop: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeSmartCropToTerraform, true)(struct!.smartCrop),
    trim: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeTrimToTerraform, true)(struct!.trim),
    unsharp_mask: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeUnsharpMaskToTerraform, true)(struct!.unsharpMask),
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeOutputReference | DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscape): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    append: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeAppendToHclTerraform, true)(struct!.append),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeAppendList",
    },
    aspect_crop: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeAspectCropToHclTerraform, true)(struct!.aspectCrop),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeAspectCropList",
    },
    background_color: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeBackgroundColorToHclTerraform, true)(struct!.backgroundColor),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeBackgroundColorList",
    },
    blur: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeBlurToHclTerraform, true)(struct!.blur),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeBlurList",
    },
    chroma_key: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeChromaKeyToHclTerraform, true)(struct!.chromaKey),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeChromaKeyList",
    },
    composite: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeCompositeToHclTerraform, true)(struct!.composite),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeCompositeList",
    },
    compound: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeCompoundToHclTerraform, true)(struct!.compound),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeCompoundList",
    },
    contrast: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeContrastToHclTerraform, true)(struct!.contrast),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeContrastList",
    },
    crop: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeCropToHclTerraform, true)(struct!.crop),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeCropList",
    },
    face_crop: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeFaceCropToHclTerraform, true)(struct!.faceCrop),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeFaceCropList",
    },
    feature_crop: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeFeatureCropToHclTerraform, true)(struct!.featureCrop),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeFeatureCropList",
    },
    fit_and_fill: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeFitAndFillToHclTerraform, true)(struct!.fitAndFill),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeFitAndFillList",
    },
    goop: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeGoopToHclTerraform, true)(struct!.goop),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeGoopList",
    },
    grayscale: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeGrayscaleToHclTerraform, true)(struct!.grayscale),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeGrayscaleList",
    },
    hsl: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeHslToHclTerraform, true)(struct!.hsl),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeHslList",
    },
    hsv: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeHsvToHclTerraform, true)(struct!.hsv),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeHsvList",
    },
    if_dimension: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfDimensionToHclTerraform, true)(struct!.ifDimension),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfDimensionList",
    },
    if_orientation: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfOrientationToHclTerraform, true)(struct!.ifOrientation),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfOrientationList",
    },
    im_query: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeImQueryToHclTerraform, true)(struct!.imQuery),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeImQueryList",
    },
    max_colors: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeMaxColorsToHclTerraform, true)(struct!.maxColors),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeMaxColorsList",
    },
    mirror: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeMirrorToHclTerraform, true)(struct!.mirror),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeMirrorList",
    },
    mono_hue: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeMonoHueToHclTerraform, true)(struct!.monoHue),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeMonoHueList",
    },
    opacity: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeOpacityToHclTerraform, true)(struct!.opacity),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeOpacityList",
    },
    region_of_interest_crop: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRegionOfInterestCropToHclTerraform, true)(struct!.regionOfInterestCrop),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRegionOfInterestCropList",
    },
    relative_crop: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRelativeCropToHclTerraform, true)(struct!.relativeCrop),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRelativeCropList",
    },
    remove_color: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRemoveColorToHclTerraform, true)(struct!.removeColor),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRemoveColorList",
    },
    resize: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeResizeToHclTerraform, true)(struct!.resize),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeResizeList",
    },
    rotate: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRotateToHclTerraform, true)(struct!.rotate),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRotateList",
    },
    scale: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeScaleToHclTerraform, true)(struct!.scale),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeScaleList",
    },
    shear: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeShearToHclTerraform, true)(struct!.shear),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeShearList",
    },
    smart_crop: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeSmartCropToHclTerraform, true)(struct!.smartCrop),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeSmartCropList",
    },
    trim: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeTrimToHclTerraform, true)(struct!.trim),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeTrimList",
    },
    unsharp_mask: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeUnsharpMaskToHclTerraform, true)(struct!.unsharpMask),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeUnsharpMaskList",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false, 0);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscape | undefined {
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._append?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.append = this._append?.internalValue;
    }
    if (this._aspectCrop?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.aspectCrop = this._aspectCrop?.internalValue;
    }
    if (this._backgroundColor?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.backgroundColor = this._backgroundColor?.internalValue;
    }
    if (this._blur?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.blur = this._blur?.internalValue;
    }
    if (this._chromaKey?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.chromaKey = this._chromaKey?.internalValue;
    }
    if (this._composite?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.composite = this._composite?.internalValue;
    }
    if (this._compound?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.compound = this._compound?.internalValue;
    }
    if (this._contrast?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.contrast = this._contrast?.internalValue;
    }
    if (this._crop?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.crop = this._crop?.internalValue;
    }
    if (this._faceCrop?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.faceCrop = this._faceCrop?.internalValue;
    }
    if (this._featureCrop?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.featureCrop = this._featureCrop?.internalValue;
    }
    if (this._fitAndFill?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.fitAndFill = this._fitAndFill?.internalValue;
    }
    if (this._goop?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.goop = this._goop?.internalValue;
    }
    if (this._grayscale?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.grayscale = this._grayscale?.internalValue;
    }
    if (this._hsl?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.hsl = this._hsl?.internalValue;
    }
    if (this._hsv?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.hsv = this._hsv?.internalValue;
    }
    if (this._ifDimension?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.ifDimension = this._ifDimension?.internalValue;
    }
    if (this._ifOrientation?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.ifOrientation = this._ifOrientation?.internalValue;
    }
    if (this._imQuery?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.imQuery = this._imQuery?.internalValue;
    }
    if (this._maxColors?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.maxColors = this._maxColors?.internalValue;
    }
    if (this._mirror?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.mirror = this._mirror?.internalValue;
    }
    if (this._monoHue?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.monoHue = this._monoHue?.internalValue;
    }
    if (this._opacity?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.opacity = this._opacity?.internalValue;
    }
    if (this._regionOfInterestCrop?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.regionOfInterestCrop = this._regionOfInterestCrop?.internalValue;
    }
    if (this._relativeCrop?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.relativeCrop = this._relativeCrop?.internalValue;
    }
    if (this._removeColor?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.removeColor = this._removeColor?.internalValue;
    }
    if (this._resize?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.resize = this._resize?.internalValue;
    }
    if (this._rotate?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.rotate = this._rotate?.internalValue;
    }
    if (this._scale?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.scale = this._scale?.internalValue;
    }
    if (this._shear?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.shear = this._shear?.internalValue;
    }
    if (this._smartCrop?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.smartCrop = this._smartCrop?.internalValue;
    }
    if (this._trim?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.trim = this._trim?.internalValue;
    }
    if (this._unsharpMask?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.unsharpMask = this._unsharpMask?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscape | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this._append.internalValue = undefined;
      this._aspectCrop.internalValue = undefined;
      this._backgroundColor.internalValue = undefined;
      this._blur.internalValue = undefined;
      this._chromaKey.internalValue = undefined;
      this._composite.internalValue = undefined;
      this._compound.internalValue = undefined;
      this._contrast.internalValue = undefined;
      this._crop.internalValue = undefined;
      this._faceCrop.internalValue = undefined;
      this._featureCrop.internalValue = undefined;
      this._fitAndFill.internalValue = undefined;
      this._goop.internalValue = undefined;
      this._grayscale.internalValue = undefined;
      this._hsl.internalValue = undefined;
      this._hsv.internalValue = undefined;
      this._ifDimension.internalValue = undefined;
      this._ifOrientation.internalValue = undefined;
      this._imQuery.internalValue = undefined;
      this._maxColors.internalValue = undefined;
      this._mirror.internalValue = undefined;
      this._monoHue.internalValue = undefined;
      this._opacity.internalValue = undefined;
      this._regionOfInterestCrop.internalValue = undefined;
      this._relativeCrop.internalValue = undefined;
      this._removeColor.internalValue = undefined;
      this._resize.internalValue = undefined;
      this._rotate.internalValue = undefined;
      this._scale.internalValue = undefined;
      this._shear.internalValue = undefined;
      this._smartCrop.internalValue = undefined;
      this._trim.internalValue = undefined;
      this._unsharpMask.internalValue = undefined;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this._append.internalValue = value.append;
      this._aspectCrop.internalValue = value.aspectCrop;
      this._backgroundColor.internalValue = value.backgroundColor;
      this._blur.internalValue = value.blur;
      this._chromaKey.internalValue = value.chromaKey;
      this._composite.internalValue = value.composite;
      this._compound.internalValue = value.compound;
      this._contrast.internalValue = value.contrast;
      this._crop.internalValue = value.crop;
      this._faceCrop.internalValue = value.faceCrop;
      this._featureCrop.internalValue = value.featureCrop;
      this._fitAndFill.internalValue = value.fitAndFill;
      this._goop.internalValue = value.goop;
      this._grayscale.internalValue = value.grayscale;
      this._hsl.internalValue = value.hsl;
      this._hsv.internalValue = value.hsv;
      this._ifDimension.internalValue = value.ifDimension;
      this._ifOrientation.internalValue = value.ifOrientation;
      this._imQuery.internalValue = value.imQuery;
      this._maxColors.internalValue = value.maxColors;
      this._mirror.internalValue = value.mirror;
      this._monoHue.internalValue = value.monoHue;
      this._opacity.internalValue = value.opacity;
      this._regionOfInterestCrop.internalValue = value.regionOfInterestCrop;
      this._relativeCrop.internalValue = value.relativeCrop;
      this._removeColor.internalValue = value.removeColor;
      this._resize.internalValue = value.resize;
      this._rotate.internalValue = value.rotate;
      this._scale.internalValue = value.scale;
      this._shear.internalValue = value.shear;
      this._smartCrop.internalValue = value.smartCrop;
      this._trim.internalValue = value.trim;
      this._unsharpMask.internalValue = value.unsharpMask;
    }
  }

  // append - computed: false, optional: true, required: false
  private _append = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeAppendList(this, "append", false);
  public get append() {
    return this._append;
  }
  public putAppend(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeAppend[] | cdktf.IResolvable) {
    this._append.internalValue = value;
  }
  public resetAppend() {
    this._append.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get appendInput() {
    return this._append.internalValue;
  }

  // aspect_crop - computed: false, optional: true, required: false
  private _aspectCrop = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeAspectCropList(this, "aspect_crop", false);
  public get aspectCrop() {
    return this._aspectCrop;
  }
  public putAspectCrop(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeAspectCrop[] | cdktf.IResolvable) {
    this._aspectCrop.internalValue = value;
  }
  public resetAspectCrop() {
    this._aspectCrop.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get aspectCropInput() {
    return this._aspectCrop.internalValue;
  }

  // background_color - computed: false, optional: true, required: false
  private _backgroundColor = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeBackgroundColorList(this, "background_color", false);
  public get backgroundColor() {
    return this._backgroundColor;
  }
  public putBackgroundColor(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeBackgroundColor[] | cdktf.IResolvable) {
    this._backgroundColor.internalValue = value;
  }
  public resetBackgroundColor() {
    this._backgroundColor.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get backgroundColorInput() {
    return this._backgroundColor.internalValue;
  }

  // blur - computed: false, optional: true, required: false
  private _blur = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeBlurList(this, "blur", false);
  public get blur() {
    return this._blur;
  }
  public putBlur(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeBlur[] | cdktf.IResolvable) {
    this._blur.internalValue = value;
  }
  public resetBlur() {
    this._blur.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get blurInput() {
    return this._blur.internalValue;
  }

  // chroma_key - computed: false, optional: true, required: false
  private _chromaKey = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeChromaKeyList(this, "chroma_key", false);
  public get chromaKey() {
    return this._chromaKey;
  }
  public putChromaKey(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeChromaKey[] | cdktf.IResolvable) {
    this._chromaKey.internalValue = value;
  }
  public resetChromaKey() {
    this._chromaKey.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get chromaKeyInput() {
    return this._chromaKey.internalValue;
  }

  // composite - computed: false, optional: true, required: false
  private _composite = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeCompositeList(this, "composite", false);
  public get composite() {
    return this._composite;
  }
  public putComposite(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeComposite[] | cdktf.IResolvable) {
    this._composite.internalValue = value;
  }
  public resetComposite() {
    this._composite.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get compositeInput() {
    return this._composite.internalValue;
  }

  // compound - computed: false, optional: true, required: false
  private _compound = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeCompoundList(this, "compound", false);
  public get compound() {
    return this._compound;
  }
  public putCompound(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeCompound[] | cdktf.IResolvable) {
    this._compound.internalValue = value;
  }
  public resetCompound() {
    this._compound.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get compoundInput() {
    return this._compound.internalValue;
  }

  // contrast - computed: false, optional: true, required: false
  private _contrast = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeContrastList(this, "contrast", false);
  public get contrast() {
    return this._contrast;
  }
  public putContrast(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeContrast[] | cdktf.IResolvable) {
    this._contrast.internalValue = value;
  }
  public resetContrast() {
    this._contrast.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get contrastInput() {
    return this._contrast.internalValue;
  }

  // crop - computed: false, optional: true, required: false
  private _crop = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeCropList(this, "crop", false);
  public get crop() {
    return this._crop;
  }
  public putCrop(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeCrop[] | cdktf.IResolvable) {
    this._crop.internalValue = value;
  }
  public resetCrop() {
    this._crop.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get cropInput() {
    return this._crop.internalValue;
  }

  // face_crop - computed: false, optional: true, required: false
  private _faceCrop = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeFaceCropList(this, "face_crop", false);
  public get faceCrop() {
    return this._faceCrop;
  }
  public putFaceCrop(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeFaceCrop[] | cdktf.IResolvable) {
    this._faceCrop.internalValue = value;
  }
  public resetFaceCrop() {
    this._faceCrop.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get faceCropInput() {
    return this._faceCrop.internalValue;
  }

  // feature_crop - computed: false, optional: true, required: false
  private _featureCrop = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeFeatureCropList(this, "feature_crop", false);
  public get featureCrop() {
    return this._featureCrop;
  }
  public putFeatureCrop(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeFeatureCrop[] | cdktf.IResolvable) {
    this._featureCrop.internalValue = value;
  }
  public resetFeatureCrop() {
    this._featureCrop.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get featureCropInput() {
    return this._featureCrop.internalValue;
  }

  // fit_and_fill - computed: false, optional: true, required: false
  private _fitAndFill = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeFitAndFillList(this, "fit_and_fill", false);
  public get fitAndFill() {
    return this._fitAndFill;
  }
  public putFitAndFill(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeFitAndFill[] | cdktf.IResolvable) {
    this._fitAndFill.internalValue = value;
  }
  public resetFitAndFill() {
    this._fitAndFill.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get fitAndFillInput() {
    return this._fitAndFill.internalValue;
  }

  // goop - computed: false, optional: true, required: false
  private _goop = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeGoopList(this, "goop", false);
  public get goop() {
    return this._goop;
  }
  public putGoop(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeGoop[] | cdktf.IResolvable) {
    this._goop.internalValue = value;
  }
  public resetGoop() {
    this._goop.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get goopInput() {
    return this._goop.internalValue;
  }

  // grayscale - computed: false, optional: true, required: false
  private _grayscale = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeGrayscaleList(this, "grayscale", false);
  public get grayscale() {
    return this._grayscale;
  }
  public putGrayscale(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeGrayscale[] | cdktf.IResolvable) {
    this._grayscale.internalValue = value;
  }
  public resetGrayscale() {
    this._grayscale.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get grayscaleInput() {
    return this._grayscale.internalValue;
  }

  // hsl - computed: false, optional: true, required: false
  private _hsl = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeHslList(this, "hsl", false);
  public get hsl() {
    return this._hsl;
  }
  public putHsl(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeHsl[] | cdktf.IResolvable) {
    this._hsl.internalValue = value;
  }
  public resetHsl() {
    this._hsl.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hslInput() {
    return this._hsl.internalValue;
  }

  // hsv - computed: false, optional: true, required: false
  private _hsv = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeHsvList(this, "hsv", false);
  public get hsv() {
    return this._hsv;
  }
  public putHsv(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeHsv[] | cdktf.IResolvable) {
    this._hsv.internalValue = value;
  }
  public resetHsv() {
    this._hsv.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hsvInput() {
    return this._hsv.internalValue;
  }

  // if_dimension - computed: false, optional: true, required: false
  private _ifDimension = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfDimensionList(this, "if_dimension", false);
  public get ifDimension() {
    return this._ifDimension;
  }
  public putIfDimension(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfDimension[] | cdktf.IResolvable) {
    this._ifDimension.internalValue = value;
  }
  public resetIfDimension() {
    this._ifDimension.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get ifDimensionInput() {
    return this._ifDimension.internalValue;
  }

  // if_orientation - computed: false, optional: true, required: false
  private _ifOrientation = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfOrientationList(this, "if_orientation", false);
  public get ifOrientation() {
    return this._ifOrientation;
  }
  public putIfOrientation(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeIfOrientation[] | cdktf.IResolvable) {
    this._ifOrientation.internalValue = value;
  }
  public resetIfOrientation() {
    this._ifOrientation.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get ifOrientationInput() {
    return this._ifOrientation.internalValue;
  }

  // im_query - computed: false, optional: true, required: false
  private _imQuery = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeImQueryList(this, "im_query", false);
  public get imQuery() {
    return this._imQuery;
  }
  public putImQuery(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeImQuery[] | cdktf.IResolvable) {
    this._imQuery.internalValue = value;
  }
  public resetImQuery() {
    this._imQuery.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get imQueryInput() {
    return this._imQuery.internalValue;
  }

  // max_colors - computed: false, optional: true, required: false
  private _maxColors = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeMaxColorsList(this, "max_colors", false);
  public get maxColors() {
    return this._maxColors;
  }
  public putMaxColors(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeMaxColors[] | cdktf.IResolvable) {
    this._maxColors.internalValue = value;
  }
  public resetMaxColors() {
    this._maxColors.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get maxColorsInput() {
    return this._maxColors.internalValue;
  }

  // mirror - computed: false, optional: true, required: false
  private _mirror = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeMirrorList(this, "mirror", false);
  public get mirror() {
    return this._mirror;
  }
  public putMirror(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeMirror[] | cdktf.IResolvable) {
    this._mirror.internalValue = value;
  }
  public resetMirror() {
    this._mirror.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get mirrorInput() {
    return this._mirror.internalValue;
  }

  // mono_hue - computed: false, optional: true, required: false
  private _monoHue = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeMonoHueList(this, "mono_hue", false);
  public get monoHue() {
    return this._monoHue;
  }
  public putMonoHue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeMonoHue[] | cdktf.IResolvable) {
    this._monoHue.internalValue = value;
  }
  public resetMonoHue() {
    this._monoHue.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get monoHueInput() {
    return this._monoHue.internalValue;
  }

  // opacity - computed: false, optional: true, required: false
  private _opacity = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeOpacityList(this, "opacity", false);
  public get opacity() {
    return this._opacity;
  }
  public putOpacity(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeOpacity[] | cdktf.IResolvable) {
    this._opacity.internalValue = value;
  }
  public resetOpacity() {
    this._opacity.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get opacityInput() {
    return this._opacity.internalValue;
  }

  // region_of_interest_crop - computed: false, optional: true, required: false
  private _regionOfInterestCrop = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRegionOfInterestCropList(this, "region_of_interest_crop", false);
  public get regionOfInterestCrop() {
    return this._regionOfInterestCrop;
  }
  public putRegionOfInterestCrop(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRegionOfInterestCrop[] | cdktf.IResolvable) {
    this._regionOfInterestCrop.internalValue = value;
  }
  public resetRegionOfInterestCrop() {
    this._regionOfInterestCrop.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get regionOfInterestCropInput() {
    return this._regionOfInterestCrop.internalValue;
  }

  // relative_crop - computed: false, optional: true, required: false
  private _relativeCrop = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRelativeCropList(this, "relative_crop", false);
  public get relativeCrop() {
    return this._relativeCrop;
  }
  public putRelativeCrop(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRelativeCrop[] | cdktf.IResolvable) {
    this._relativeCrop.internalValue = value;
  }
  public resetRelativeCrop() {
    this._relativeCrop.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get relativeCropInput() {
    return this._relativeCrop.internalValue;
  }

  // remove_color - computed: false, optional: true, required: false
  private _removeColor = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRemoveColorList(this, "remove_color", false);
  public get removeColor() {
    return this._removeColor;
  }
  public putRemoveColor(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRemoveColor[] | cdktf.IResolvable) {
    this._removeColor.internalValue = value;
  }
  public resetRemoveColor() {
    this._removeColor.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get removeColorInput() {
    return this._removeColor.internalValue;
  }

  // resize - computed: false, optional: true, required: false
  private _resize = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeResizeList(this, "resize", false);
  public get resize() {
    return this._resize;
  }
  public putResize(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeResize[] | cdktf.IResolvable) {
    this._resize.internalValue = value;
  }
  public resetResize() {
    this._resize.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get resizeInput() {
    return this._resize.internalValue;
  }

  // rotate - computed: false, optional: true, required: false
  private _rotate = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRotateList(this, "rotate", false);
  public get rotate() {
    return this._rotate;
  }
  public putRotate(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeRotate[] | cdktf.IResolvable) {
    this._rotate.internalValue = value;
  }
  public resetRotate() {
    this._rotate.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get rotateInput() {
    return this._rotate.internalValue;
  }

  // scale - computed: false, optional: true, required: false
  private _scale = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeScaleList(this, "scale", false);
  public get scale() {
    return this._scale;
  }
  public putScale(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeScale[] | cdktf.IResolvable) {
    this._scale.internalValue = value;
  }
  public resetScale() {
    this._scale.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get scaleInput() {
    return this._scale.internalValue;
  }

  // shear - computed: false, optional: true, required: false
  private _shear = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeShearList(this, "shear", false);
  public get shear() {
    return this._shear;
  }
  public putShear(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeShear[] | cdktf.IResolvable) {
    this._shear.internalValue = value;
  }
  public resetShear() {
    this._shear.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get shearInput() {
    return this._shear.internalValue;
  }

  // smart_crop - computed: false, optional: true, required: false
  private _smartCrop = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeSmartCropList(this, "smart_crop", false);
  public get smartCrop() {
    return this._smartCrop;
  }
  public putSmartCrop(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeSmartCrop[] | cdktf.IResolvable) {
    this._smartCrop.internalValue = value;
  }
  public resetSmartCrop() {
    this._smartCrop.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get smartCropInput() {
    return this._smartCrop.internalValue;
  }

  // trim - computed: false, optional: true, required: false
  private _trim = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeTrimList(this, "trim", false);
  public get trim() {
    return this._trim;
  }
  public putTrim(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeTrim[] | cdktf.IResolvable) {
    this._trim.internalValue = value;
  }
  public resetTrim() {
    this._trim.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get trimInput() {
    return this._trim.internalValue;
  }

  // unsharp_mask - computed: false, optional: true, required: false
  private _unsharpMask = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeUnsharpMaskList(this, "unsharp_mask", false);
  public get unsharpMask() {
    return this._unsharpMask;
  }
  public putUnsharpMask(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationLandscapeUnsharpMask[] | cdktf.IResolvable) {
    this._unsharpMask.internalValue = value;
  }
  public resetUnsharpMask() {
    this._unsharpMask.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get unsharpMaskInput() {
    return this._unsharpMask.internalValue;
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitAppendImage {
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitAppendImageToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitAppendImageOutputReference | DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitAppendImage): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitAppendImageToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitAppendImageOutputReference | DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitAppendImage): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
  };
  return attrs;
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitAppendImageOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false, 0);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitAppendImage | undefined {
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitAppendImage | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
    }
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitAppend {
  /**
  * Specifies where to place the `image` relative to the source image. The available values represent the eight cardinal directions (`North`, `South`, `East`, `West`, `NorthEast`, `NorthWest`, `SouthEast`, `SouthWest`) and a `Center` by default.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#gravity DataAkamaiImagingPolicyImage#gravity}
  */
  readonly gravity?: string;
  /**
  * Determines the exact placement of the `image` when `gravity` is `Center` or a diagonal. The value is either `horizontal` or `vertical`. Use `horizontal` to append an `image` east or west of the source image. This aligns the `image` on the vertical gravity component, placing `Center` gravity east. Use `vertical` to append an `image` north or south of the source image. This aligns the `image` on the horizontal gravity component, placing `Center` gravity south.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#gravity_priority DataAkamaiImagingPolicyImage#gravity_priority}
  */
  readonly gravityPriority?: string;
  /**
  * Determines the exact placement of the `image` when `gravity` is `Center` or a diagonal. The value is either `horizontal` or `vertical`. Use `horizontal` to append an `image` east or west of the source image. This aligns the `image` on the vertical gravity component, placing `Center` gravity east. Use `vertical` to append an `image` north or south of the source image. This aligns the `image` on the horizontal gravity component, placing `Center` gravity south.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#gravity_priority_var DataAkamaiImagingPolicyImage#gravity_priority_var}
  */
  readonly gravityPriorityVar?: string;
  /**
  * Specifies where to place the `image` relative to the source image. The available values represent the eight cardinal directions (`North`, `South`, `East`, `West`, `NorthEast`, `NorthWest`, `SouthEast`, `SouthWest`) and a `Center` by default.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#gravity_var DataAkamaiImagingPolicyImage#gravity_var}
  */
  readonly gravityVar?: string;
  /**
  * Whether to preserve the source image's minor dimension, `false` by default. The minor dimension is the dimension opposite the dimension that the appending `image` is placed. For example, the dimensions of the source image are 100 &times; 100 pixels. The dimensions of the appending `image` are 50 &times; 150 pixels. The `gravity` is set to `East`. This makes the major dimension horizontal and the source image's minor dimension vertical. To preserve the source image's minor dimension at 100 pixels, the `preserveMinorDimension` is set to `true`. As a result of the append, the major dimension expanded with the appended image to 150 pixels. The source image's minor dimension was maintained at 100 pixels. The total combined dimension of the image is 150 &times; 100 pixels.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#preserve_minor_dimension DataAkamaiImagingPolicyImage#preserve_minor_dimension}
  */
  readonly preserveMinorDimension?: string;
  /**
  * Whether to preserve the source image's minor dimension, `false` by default. The minor dimension is the dimension opposite the dimension that the appending `image` is placed. For example, the dimensions of the source image are 100 &times; 100 pixels. The dimensions of the appending `image` are 50 &times; 150 pixels. The `gravity` is set to `East`. This makes the major dimension horizontal and the source image's minor dimension vertical. To preserve the source image's minor dimension at 100 pixels, the `preserveMinorDimension` is set to `true`. As a result of the append, the major dimension expanded with the appended image to 150 pixels. The source image's minor dimension was maintained at 100 pixels. The total combined dimension of the image is 150 &times; 100 pixels.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#preserve_minor_dimension_var DataAkamaiImagingPolicyImage#preserve_minor_dimension_var}
  */
  readonly preserveMinorDimensionVar?: string;
  /**
  * image block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#image DataAkamaiImagingPolicyImage#image}
  */
  readonly image: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitAppendImage;
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitAppendToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitAppend | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    gravity: cdktf.stringToTerraform(struct!.gravity),
    gravity_priority: cdktf.stringToTerraform(struct!.gravityPriority),
    gravity_priority_var: cdktf.stringToTerraform(struct!.gravityPriorityVar),
    gravity_var: cdktf.stringToTerraform(struct!.gravityVar),
    preserve_minor_dimension: cdktf.stringToTerraform(struct!.preserveMinorDimension),
    preserve_minor_dimension_var: cdktf.stringToTerraform(struct!.preserveMinorDimensionVar),
    image: dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitAppendImageToTerraform(struct!.image),
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitAppendToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitAppend | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    gravity: {
      value: cdktf.stringToHclTerraform(struct!.gravity),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    gravity_priority: {
      value: cdktf.stringToHclTerraform(struct!.gravityPriority),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    gravity_priority_var: {
      value: cdktf.stringToHclTerraform(struct!.gravityPriorityVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    gravity_var: {
      value: cdktf.stringToHclTerraform(struct!.gravityVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    preserve_minor_dimension: {
      value: cdktf.stringToHclTerraform(struct!.preserveMinorDimension),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    preserve_minor_dimension_var: {
      value: cdktf.stringToHclTerraform(struct!.preserveMinorDimensionVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    image: {
      value: dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitAppendImageToHclTerraform(struct!.image),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitAppendImageList",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitAppendOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitAppend | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._gravity !== undefined) {
      hasAnyValues = true;
      internalValueResult.gravity = this._gravity;
    }
    if (this._gravityPriority !== undefined) {
      hasAnyValues = true;
      internalValueResult.gravityPriority = this._gravityPriority;
    }
    if (this._gravityPriorityVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.gravityPriorityVar = this._gravityPriorityVar;
    }
    if (this._gravityVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.gravityVar = this._gravityVar;
    }
    if (this._preserveMinorDimension !== undefined) {
      hasAnyValues = true;
      internalValueResult.preserveMinorDimension = this._preserveMinorDimension;
    }
    if (this._preserveMinorDimensionVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.preserveMinorDimensionVar = this._preserveMinorDimensionVar;
    }
    if (this._image?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.image = this._image?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitAppend | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._gravity = undefined;
      this._gravityPriority = undefined;
      this._gravityPriorityVar = undefined;
      this._gravityVar = undefined;
      this._preserveMinorDimension = undefined;
      this._preserveMinorDimensionVar = undefined;
      this._image.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._gravity = value.gravity;
      this._gravityPriority = value.gravityPriority;
      this._gravityPriorityVar = value.gravityPriorityVar;
      this._gravityVar = value.gravityVar;
      this._preserveMinorDimension = value.preserveMinorDimension;
      this._preserveMinorDimensionVar = value.preserveMinorDimensionVar;
      this._image.internalValue = value.image;
    }
  }

  // gravity - computed: false, optional: true, required: false
  private _gravity?: string; 
  public get gravity() {
    return this.getStringAttribute('gravity');
  }
  public set gravity(value: string) {
    this._gravity = value;
  }
  public resetGravity() {
    this._gravity = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get gravityInput() {
    return this._gravity;
  }

  // gravity_priority - computed: false, optional: true, required: false
  private _gravityPriority?: string; 
  public get gravityPriority() {
    return this.getStringAttribute('gravity_priority');
  }
  public set gravityPriority(value: string) {
    this._gravityPriority = value;
  }
  public resetGravityPriority() {
    this._gravityPriority = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get gravityPriorityInput() {
    return this._gravityPriority;
  }

  // gravity_priority_var - computed: false, optional: true, required: false
  private _gravityPriorityVar?: string; 
  public get gravityPriorityVar() {
    return this.getStringAttribute('gravity_priority_var');
  }
  public set gravityPriorityVar(value: string) {
    this._gravityPriorityVar = value;
  }
  public resetGravityPriorityVar() {
    this._gravityPriorityVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get gravityPriorityVarInput() {
    return this._gravityPriorityVar;
  }

  // gravity_var - computed: false, optional: true, required: false
  private _gravityVar?: string; 
  public get gravityVar() {
    return this.getStringAttribute('gravity_var');
  }
  public set gravityVar(value: string) {
    this._gravityVar = value;
  }
  public resetGravityVar() {
    this._gravityVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get gravityVarInput() {
    return this._gravityVar;
  }

  // preserve_minor_dimension - computed: false, optional: true, required: false
  private _preserveMinorDimension?: string; 
  public get preserveMinorDimension() {
    return this.getStringAttribute('preserve_minor_dimension');
  }
  public set preserveMinorDimension(value: string) {
    this._preserveMinorDimension = value;
  }
  public resetPreserveMinorDimension() {
    this._preserveMinorDimension = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get preserveMinorDimensionInput() {
    return this._preserveMinorDimension;
  }

  // preserve_minor_dimension_var - computed: false, optional: true, required: false
  private _preserveMinorDimensionVar?: string; 
  public get preserveMinorDimensionVar() {
    return this.getStringAttribute('preserve_minor_dimension_var');
  }
  public set preserveMinorDimensionVar(value: string) {
    this._preserveMinorDimensionVar = value;
  }
  public resetPreserveMinorDimensionVar() {
    this._preserveMinorDimensionVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get preserveMinorDimensionVarInput() {
    return this._preserveMinorDimensionVar;
  }

  // image - computed: false, optional: false, required: true
  private _image = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitAppendImageOutputReference(this, "image");
  public get image() {
    return this._image;
  }
  public putImage(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitAppendImage) {
    this._image.internalValue = value;
  }
  // Temporarily expose input value. Use with caution.
  public get imageInput() {
    return this._image.internalValue;
  }
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitAppendList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitAppend[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitAppendOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitAppendOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitAspectCrop {
  /**
  * Increases the size of the image canvas to achieve the requested aspect ratio instead of cropping the image. Use the Horizontal Offset and Vertical Offset settings to determine where to add the fully transparent pixels on the expanded image canvas.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#allow_expansion DataAkamaiImagingPolicyImage#allow_expansion}
  */
  readonly allowExpansion?: string;
  /**
  * Increases the size of the image canvas to achieve the requested aspect ratio instead of cropping the image. Use the Horizontal Offset and Vertical Offset settings to determine where to add the fully transparent pixels on the expanded image canvas.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#allow_expansion_var DataAkamaiImagingPolicyImage#allow_expansion_var}
  */
  readonly allowExpansionVar?: string;
  /**
  * The height term of the aspect ratio to crop.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#height DataAkamaiImagingPolicyImage#height}
  */
  readonly height?: string;
  /**
  * The height term of the aspect ratio to crop.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#height_var DataAkamaiImagingPolicyImage#height_var}
  */
  readonly heightVar?: string;
  /**
  * The width term of the aspect ratio to crop.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#width DataAkamaiImagingPolicyImage#width}
  */
  readonly width?: string;
  /**
  * The width term of the aspect ratio to crop.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#width_var DataAkamaiImagingPolicyImage#width_var}
  */
  readonly widthVar?: string;
  /**
  * Specifies the horizontal portion of the image you want to keep when the aspect ratio cropping is applied. When using Allow Expansion this setting defines the horizontal position of the image on the new expanded image canvas.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#x_position DataAkamaiImagingPolicyImage#x_position}
  */
  readonly xPosition?: string;
  /**
  * Specifies the horizontal portion of the image you want to keep when the aspect ratio cropping is applied. When using Allow Expansion this setting defines the horizontal position of the image on the new expanded image canvas.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#x_position_var DataAkamaiImagingPolicyImage#x_position_var}
  */
  readonly xPositionVar?: string;
  /**
  * Specifies the horizontal portion of the image you want to keep when the aspect ratio cropping is applied. When using Allow Expansion this setting defines the horizontal position of the image on the new expanded image canvas.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#y_position DataAkamaiImagingPolicyImage#y_position}
  */
  readonly yPosition?: string;
  /**
  * Specifies the horizontal portion of the image you want to keep when the aspect ratio cropping is applied. When using Allow Expansion this setting defines the horizontal position of the image on the new expanded image canvas.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#y_position_var DataAkamaiImagingPolicyImage#y_position_var}
  */
  readonly yPositionVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitAspectCropToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitAspectCrop | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    allow_expansion: cdktf.stringToTerraform(struct!.allowExpansion),
    allow_expansion_var: cdktf.stringToTerraform(struct!.allowExpansionVar),
    height: cdktf.stringToTerraform(struct!.height),
    height_var: cdktf.stringToTerraform(struct!.heightVar),
    width: cdktf.stringToTerraform(struct!.width),
    width_var: cdktf.stringToTerraform(struct!.widthVar),
    x_position: cdktf.stringToTerraform(struct!.xPosition),
    x_position_var: cdktf.stringToTerraform(struct!.xPositionVar),
    y_position: cdktf.stringToTerraform(struct!.yPosition),
    y_position_var: cdktf.stringToTerraform(struct!.yPositionVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitAspectCropToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitAspectCrop | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    allow_expansion: {
      value: cdktf.stringToHclTerraform(struct!.allowExpansion),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    allow_expansion_var: {
      value: cdktf.stringToHclTerraform(struct!.allowExpansionVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    height: {
      value: cdktf.stringToHclTerraform(struct!.height),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    height_var: {
      value: cdktf.stringToHclTerraform(struct!.heightVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    width: {
      value: cdktf.stringToHclTerraform(struct!.width),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    width_var: {
      value: cdktf.stringToHclTerraform(struct!.widthVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    x_position: {
      value: cdktf.stringToHclTerraform(struct!.xPosition),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    x_position_var: {
      value: cdktf.stringToHclTerraform(struct!.xPositionVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    y_position: {
      value: cdktf.stringToHclTerraform(struct!.yPosition),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    y_position_var: {
      value: cdktf.stringToHclTerraform(struct!.yPositionVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitAspectCropOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitAspectCrop | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._allowExpansion !== undefined) {
      hasAnyValues = true;
      internalValueResult.allowExpansion = this._allowExpansion;
    }
    if (this._allowExpansionVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.allowExpansionVar = this._allowExpansionVar;
    }
    if (this._height !== undefined) {
      hasAnyValues = true;
      internalValueResult.height = this._height;
    }
    if (this._heightVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.heightVar = this._heightVar;
    }
    if (this._width !== undefined) {
      hasAnyValues = true;
      internalValueResult.width = this._width;
    }
    if (this._widthVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.widthVar = this._widthVar;
    }
    if (this._xPosition !== undefined) {
      hasAnyValues = true;
      internalValueResult.xPosition = this._xPosition;
    }
    if (this._xPositionVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.xPositionVar = this._xPositionVar;
    }
    if (this._yPosition !== undefined) {
      hasAnyValues = true;
      internalValueResult.yPosition = this._yPosition;
    }
    if (this._yPositionVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.yPositionVar = this._yPositionVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitAspectCrop | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._allowExpansion = undefined;
      this._allowExpansionVar = undefined;
      this._height = undefined;
      this._heightVar = undefined;
      this._width = undefined;
      this._widthVar = undefined;
      this._xPosition = undefined;
      this._xPositionVar = undefined;
      this._yPosition = undefined;
      this._yPositionVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._allowExpansion = value.allowExpansion;
      this._allowExpansionVar = value.allowExpansionVar;
      this._height = value.height;
      this._heightVar = value.heightVar;
      this._width = value.width;
      this._widthVar = value.widthVar;
      this._xPosition = value.xPosition;
      this._xPositionVar = value.xPositionVar;
      this._yPosition = value.yPosition;
      this._yPositionVar = value.yPositionVar;
    }
  }

  // allow_expansion - computed: false, optional: true, required: false
  private _allowExpansion?: string; 
  public get allowExpansion() {
    return this.getStringAttribute('allow_expansion');
  }
  public set allowExpansion(value: string) {
    this._allowExpansion = value;
  }
  public resetAllowExpansion() {
    this._allowExpansion = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get allowExpansionInput() {
    return this._allowExpansion;
  }

  // allow_expansion_var - computed: false, optional: true, required: false
  private _allowExpansionVar?: string; 
  public get allowExpansionVar() {
    return this.getStringAttribute('allow_expansion_var');
  }
  public set allowExpansionVar(value: string) {
    this._allowExpansionVar = value;
  }
  public resetAllowExpansionVar() {
    this._allowExpansionVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get allowExpansionVarInput() {
    return this._allowExpansionVar;
  }

  // height - computed: false, optional: true, required: false
  private _height?: string; 
  public get height() {
    return this.getStringAttribute('height');
  }
  public set height(value: string) {
    this._height = value;
  }
  public resetHeight() {
    this._height = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get heightInput() {
    return this._height;
  }

  // height_var - computed: false, optional: true, required: false
  private _heightVar?: string; 
  public get heightVar() {
    return this.getStringAttribute('height_var');
  }
  public set heightVar(value: string) {
    this._heightVar = value;
  }
  public resetHeightVar() {
    this._heightVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get heightVarInput() {
    return this._heightVar;
  }

  // width - computed: false, optional: true, required: false
  private _width?: string; 
  public get width() {
    return this.getStringAttribute('width');
  }
  public set width(value: string) {
    this._width = value;
  }
  public resetWidth() {
    this._width = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get widthInput() {
    return this._width;
  }

  // width_var - computed: false, optional: true, required: false
  private _widthVar?: string; 
  public get widthVar() {
    return this.getStringAttribute('width_var');
  }
  public set widthVar(value: string) {
    this._widthVar = value;
  }
  public resetWidthVar() {
    this._widthVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get widthVarInput() {
    return this._widthVar;
  }

  // x_position - computed: false, optional: true, required: false
  private _xPosition?: string; 
  public get xPosition() {
    return this.getStringAttribute('x_position');
  }
  public set xPosition(value: string) {
    this._xPosition = value;
  }
  public resetXPosition() {
    this._xPosition = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get xPositionInput() {
    return this._xPosition;
  }

  // x_position_var - computed: false, optional: true, required: false
  private _xPositionVar?: string; 
  public get xPositionVar() {
    return this.getStringAttribute('x_position_var');
  }
  public set xPositionVar(value: string) {
    this._xPositionVar = value;
  }
  public resetXPositionVar() {
    this._xPositionVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get xPositionVarInput() {
    return this._xPositionVar;
  }

  // y_position - computed: false, optional: true, required: false
  private _yPosition?: string; 
  public get yPosition() {
    return this.getStringAttribute('y_position');
  }
  public set yPosition(value: string) {
    this._yPosition = value;
  }
  public resetYPosition() {
    this._yPosition = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get yPositionInput() {
    return this._yPosition;
  }

  // y_position_var - computed: false, optional: true, required: false
  private _yPositionVar?: string; 
  public get yPositionVar() {
    return this.getStringAttribute('y_position_var');
  }
  public set yPositionVar(value: string) {
    this._yPositionVar = value;
  }
  public resetYPositionVar() {
    this._yPositionVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get yPositionVarInput() {
    return this._yPositionVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitAspectCropList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitAspectCrop[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitAspectCropOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitAspectCropOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitBackgroundColor {
  /**
  * The hexadecimal CSS color value for the background.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#color DataAkamaiImagingPolicyImage#color}
  */
  readonly color?: string;
  /**
  * The hexadecimal CSS color value for the background.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#color_var DataAkamaiImagingPolicyImage#color_var}
  */
  readonly colorVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitBackgroundColorToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitBackgroundColor | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    color: cdktf.stringToTerraform(struct!.color),
    color_var: cdktf.stringToTerraform(struct!.colorVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitBackgroundColorToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitBackgroundColor | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    color: {
      value: cdktf.stringToHclTerraform(struct!.color),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    color_var: {
      value: cdktf.stringToHclTerraform(struct!.colorVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitBackgroundColorOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitBackgroundColor | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._color !== undefined) {
      hasAnyValues = true;
      internalValueResult.color = this._color;
    }
    if (this._colorVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.colorVar = this._colorVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitBackgroundColor | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._color = undefined;
      this._colorVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._color = value.color;
      this._colorVar = value.colorVar;
    }
  }

  // color - computed: false, optional: true, required: false
  private _color?: string; 
  public get color() {
    return this.getStringAttribute('color');
  }
  public set color(value: string) {
    this._color = value;
  }
  public resetColor() {
    this._color = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get colorInput() {
    return this._color;
  }

  // color_var - computed: false, optional: true, required: false
  private _colorVar?: string; 
  public get colorVar() {
    return this.getStringAttribute('color_var');
  }
  public set colorVar(value: string) {
    this._colorVar = value;
  }
  public resetColorVar() {
    this._colorVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get colorVarInput() {
    return this._colorVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitBackgroundColorList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitBackgroundColor[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitBackgroundColorOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitBackgroundColorOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitBlur {
  /**
  * The number of pixels to scatter the original pixel by to create the blur effect. Resulting images may be larger than the original as pixels at the edge of the image might scatter outside the image's original dimensions.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#sigma DataAkamaiImagingPolicyImage#sigma}
  */
  readonly sigma?: string;
  /**
  * The number of pixels to scatter the original pixel by to create the blur effect. Resulting images may be larger than the original as pixels at the edge of the image might scatter outside the image's original dimensions.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#sigma_var DataAkamaiImagingPolicyImage#sigma_var}
  */
  readonly sigmaVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitBlurToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitBlur | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    sigma: cdktf.stringToTerraform(struct!.sigma),
    sigma_var: cdktf.stringToTerraform(struct!.sigmaVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitBlurToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitBlur | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    sigma: {
      value: cdktf.stringToHclTerraform(struct!.sigma),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    sigma_var: {
      value: cdktf.stringToHclTerraform(struct!.sigmaVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitBlurOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitBlur | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._sigma !== undefined) {
      hasAnyValues = true;
      internalValueResult.sigma = this._sigma;
    }
    if (this._sigmaVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.sigmaVar = this._sigmaVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitBlur | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._sigma = undefined;
      this._sigmaVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._sigma = value.sigma;
      this._sigmaVar = value.sigmaVar;
    }
  }

  // sigma - computed: false, optional: true, required: false
  private _sigma?: string; 
  public get sigma() {
    return this.getStringAttribute('sigma');
  }
  public set sigma(value: string) {
    this._sigma = value;
  }
  public resetSigma() {
    this._sigma = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get sigmaInput() {
    return this._sigma;
  }

  // sigma_var - computed: false, optional: true, required: false
  private _sigmaVar?: string; 
  public get sigmaVar() {
    return this.getStringAttribute('sigma_var');
  }
  public set sigmaVar(value: string) {
    this._sigmaVar = value;
  }
  public resetSigmaVar() {
    this._sigmaVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get sigmaVarInput() {
    return this._sigmaVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitBlurList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitBlur[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitBlurOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitBlurOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitChromaKey {
  /**
  * The hue to remove. Enter the degree of rotation between 0 and 360 degrees around the color wheel. By default Chroma Key removes a green hue, 120° on the color wheel.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hue DataAkamaiImagingPolicyImage#hue}
  */
  readonly hue?: string;
  /**
  * How much additional hue to make semi-transparent beyond the Hue Tolerance. By default Hue Feather is 0.083 which applies semi-transparency to hues 30° around the Hue Tolerance.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hue_feather DataAkamaiImagingPolicyImage#hue_feather}
  */
  readonly hueFeather?: string;
  /**
  * How much additional hue to make semi-transparent beyond the Hue Tolerance. By default Hue Feather is 0.083 which applies semi-transparency to hues 30° around the Hue Tolerance.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hue_feather_var DataAkamaiImagingPolicyImage#hue_feather_var}
  */
  readonly hueFeatherVar?: string;
  /**
  * How close a color's hue needs to be to the selected hue for it to be changed to fully transparent. If you enter the maximum value of 1.0 the entire image is made transparent. By default Hue Tolerance is approximately 0.083 or 8.3% of the color wheel. This value corresponds to 30° around the specified hue.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hue_tolerance DataAkamaiImagingPolicyImage#hue_tolerance}
  */
  readonly hueTolerance?: string;
  /**
  * How close a color's hue needs to be to the selected hue for it to be changed to fully transparent. If you enter the maximum value of 1.0 the entire image is made transparent. By default Hue Tolerance is approximately 0.083 or 8.3% of the color wheel. This value corresponds to 30° around the specified hue.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hue_tolerance_var DataAkamaiImagingPolicyImage#hue_tolerance_var}
  */
  readonly hueToleranceVar?: string;
  /**
  * The hue to remove. Enter the degree of rotation between 0 and 360 degrees around the color wheel. By default Chroma Key removes a green hue, 120° on the color wheel.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hue_var DataAkamaiImagingPolicyImage#hue_var}
  */
  readonly hueVar?: string;
  /**
  * How much additional lightness to make semi-transparent beyond the Lightness Tolerance. The default value of 0.1 corresponds to 10% away from the tolerated lightness towards full black or full white.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#lightness_feather DataAkamaiImagingPolicyImage#lightness_feather}
  */
  readonly lightnessFeather?: string;
  /**
  * How much additional lightness to make semi-transparent beyond the Lightness Tolerance. The default value of 0.1 corresponds to 10% away from the tolerated lightness towards full black or full white.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#lightness_feather_var DataAkamaiImagingPolicyImage#lightness_feather_var}
  */
  readonly lightnessFeatherVar?: string;
  /**
  * How much of the lightest part and darkest part of a color to preserve. For example, you can space this value out from the middle (i.e. 0.5 lightness or full color) to help preserve the splash lighting impact in the image. You can define how close the color needs to be to the full color to remove it from your image. The default value of 0.75 means that a colour must be within 75% of the full color to full white or full black for full removal.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#lightness_tolerance DataAkamaiImagingPolicyImage#lightness_tolerance}
  */
  readonly lightnessTolerance?: string;
  /**
  * How much of the lightest part and darkest part of a color to preserve. For example, you can space this value out from the middle (i.e. 0.5 lightness or full color) to help preserve the splash lighting impact in the image. You can define how close the color needs to be to the full color to remove it from your image. The default value of 0.75 means that a colour must be within 75% of the full color to full white or full black for full removal.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#lightness_tolerance_var DataAkamaiImagingPolicyImage#lightness_tolerance_var}
  */
  readonly lightnessToleranceVar?: string;
  /**
  * How much additional saturation to make semi-transparent beyond the Saturation Tolerance. By default Saturation Feather is 0.1 which applies semi-transparency to hues 10% below the saturationTolerance.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#saturation_feather DataAkamaiImagingPolicyImage#saturation_feather}
  */
  readonly saturationFeather?: string;
  /**
  * How much additional saturation to make semi-transparent beyond the Saturation Tolerance. By default Saturation Feather is 0.1 which applies semi-transparency to hues 10% below the saturationTolerance.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#saturation_feather_var DataAkamaiImagingPolicyImage#saturation_feather_var}
  */
  readonly saturationFeatherVar?: string;
  /**
  * How close a color's saturation needs to be to full saturation for it to be changed to fully transparent. For example, you can define how green the color needs to be to remove it from your image. The default value of 0.75 means that a color must be within 75% of full saturation in order to be made fully transparent.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#saturation_tolerance DataAkamaiImagingPolicyImage#saturation_tolerance}
  */
  readonly saturationTolerance?: string;
  /**
  * How close a color's saturation needs to be to full saturation for it to be changed to fully transparent. For example, you can define how green the color needs to be to remove it from your image. The default value of 0.75 means that a color must be within 75% of full saturation in order to be made fully transparent.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#saturation_tolerance_var DataAkamaiImagingPolicyImage#saturation_tolerance_var}
  */
  readonly saturationToleranceVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitChromaKeyToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitChromaKey | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    hue: cdktf.stringToTerraform(struct!.hue),
    hue_feather: cdktf.stringToTerraform(struct!.hueFeather),
    hue_feather_var: cdktf.stringToTerraform(struct!.hueFeatherVar),
    hue_tolerance: cdktf.stringToTerraform(struct!.hueTolerance),
    hue_tolerance_var: cdktf.stringToTerraform(struct!.hueToleranceVar),
    hue_var: cdktf.stringToTerraform(struct!.hueVar),
    lightness_feather: cdktf.stringToTerraform(struct!.lightnessFeather),
    lightness_feather_var: cdktf.stringToTerraform(struct!.lightnessFeatherVar),
    lightness_tolerance: cdktf.stringToTerraform(struct!.lightnessTolerance),
    lightness_tolerance_var: cdktf.stringToTerraform(struct!.lightnessToleranceVar),
    saturation_feather: cdktf.stringToTerraform(struct!.saturationFeather),
    saturation_feather_var: cdktf.stringToTerraform(struct!.saturationFeatherVar),
    saturation_tolerance: cdktf.stringToTerraform(struct!.saturationTolerance),
    saturation_tolerance_var: cdktf.stringToTerraform(struct!.saturationToleranceVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitChromaKeyToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitChromaKey | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    hue: {
      value: cdktf.stringToHclTerraform(struct!.hue),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    hue_feather: {
      value: cdktf.stringToHclTerraform(struct!.hueFeather),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    hue_feather_var: {
      value: cdktf.stringToHclTerraform(struct!.hueFeatherVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    hue_tolerance: {
      value: cdktf.stringToHclTerraform(struct!.hueTolerance),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    hue_tolerance_var: {
      value: cdktf.stringToHclTerraform(struct!.hueToleranceVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    hue_var: {
      value: cdktf.stringToHclTerraform(struct!.hueVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    lightness_feather: {
      value: cdktf.stringToHclTerraform(struct!.lightnessFeather),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    lightness_feather_var: {
      value: cdktf.stringToHclTerraform(struct!.lightnessFeatherVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    lightness_tolerance: {
      value: cdktf.stringToHclTerraform(struct!.lightnessTolerance),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    lightness_tolerance_var: {
      value: cdktf.stringToHclTerraform(struct!.lightnessToleranceVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    saturation_feather: {
      value: cdktf.stringToHclTerraform(struct!.saturationFeather),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    saturation_feather_var: {
      value: cdktf.stringToHclTerraform(struct!.saturationFeatherVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    saturation_tolerance: {
      value: cdktf.stringToHclTerraform(struct!.saturationTolerance),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    saturation_tolerance_var: {
      value: cdktf.stringToHclTerraform(struct!.saturationToleranceVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitChromaKeyOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitChromaKey | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._hue !== undefined) {
      hasAnyValues = true;
      internalValueResult.hue = this._hue;
    }
    if (this._hueFeather !== undefined) {
      hasAnyValues = true;
      internalValueResult.hueFeather = this._hueFeather;
    }
    if (this._hueFeatherVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.hueFeatherVar = this._hueFeatherVar;
    }
    if (this._hueTolerance !== undefined) {
      hasAnyValues = true;
      internalValueResult.hueTolerance = this._hueTolerance;
    }
    if (this._hueToleranceVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.hueToleranceVar = this._hueToleranceVar;
    }
    if (this._hueVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.hueVar = this._hueVar;
    }
    if (this._lightnessFeather !== undefined) {
      hasAnyValues = true;
      internalValueResult.lightnessFeather = this._lightnessFeather;
    }
    if (this._lightnessFeatherVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.lightnessFeatherVar = this._lightnessFeatherVar;
    }
    if (this._lightnessTolerance !== undefined) {
      hasAnyValues = true;
      internalValueResult.lightnessTolerance = this._lightnessTolerance;
    }
    if (this._lightnessToleranceVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.lightnessToleranceVar = this._lightnessToleranceVar;
    }
    if (this._saturationFeather !== undefined) {
      hasAnyValues = true;
      internalValueResult.saturationFeather = this._saturationFeather;
    }
    if (this._saturationFeatherVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.saturationFeatherVar = this._saturationFeatherVar;
    }
    if (this._saturationTolerance !== undefined) {
      hasAnyValues = true;
      internalValueResult.saturationTolerance = this._saturationTolerance;
    }
    if (this._saturationToleranceVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.saturationToleranceVar = this._saturationToleranceVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitChromaKey | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._hue = undefined;
      this._hueFeather = undefined;
      this._hueFeatherVar = undefined;
      this._hueTolerance = undefined;
      this._hueToleranceVar = undefined;
      this._hueVar = undefined;
      this._lightnessFeather = undefined;
      this._lightnessFeatherVar = undefined;
      this._lightnessTolerance = undefined;
      this._lightnessToleranceVar = undefined;
      this._saturationFeather = undefined;
      this._saturationFeatherVar = undefined;
      this._saturationTolerance = undefined;
      this._saturationToleranceVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._hue = value.hue;
      this._hueFeather = value.hueFeather;
      this._hueFeatherVar = value.hueFeatherVar;
      this._hueTolerance = value.hueTolerance;
      this._hueToleranceVar = value.hueToleranceVar;
      this._hueVar = value.hueVar;
      this._lightnessFeather = value.lightnessFeather;
      this._lightnessFeatherVar = value.lightnessFeatherVar;
      this._lightnessTolerance = value.lightnessTolerance;
      this._lightnessToleranceVar = value.lightnessToleranceVar;
      this._saturationFeather = value.saturationFeather;
      this._saturationFeatherVar = value.saturationFeatherVar;
      this._saturationTolerance = value.saturationTolerance;
      this._saturationToleranceVar = value.saturationToleranceVar;
    }
  }

  // hue - computed: false, optional: true, required: false
  private _hue?: string; 
  public get hue() {
    return this.getStringAttribute('hue');
  }
  public set hue(value: string) {
    this._hue = value;
  }
  public resetHue() {
    this._hue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hueInput() {
    return this._hue;
  }

  // hue_feather - computed: false, optional: true, required: false
  private _hueFeather?: string; 
  public get hueFeather() {
    return this.getStringAttribute('hue_feather');
  }
  public set hueFeather(value: string) {
    this._hueFeather = value;
  }
  public resetHueFeather() {
    this._hueFeather = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hueFeatherInput() {
    return this._hueFeather;
  }

  // hue_feather_var - computed: false, optional: true, required: false
  private _hueFeatherVar?: string; 
  public get hueFeatherVar() {
    return this.getStringAttribute('hue_feather_var');
  }
  public set hueFeatherVar(value: string) {
    this._hueFeatherVar = value;
  }
  public resetHueFeatherVar() {
    this._hueFeatherVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hueFeatherVarInput() {
    return this._hueFeatherVar;
  }

  // hue_tolerance - computed: false, optional: true, required: false
  private _hueTolerance?: string; 
  public get hueTolerance() {
    return this.getStringAttribute('hue_tolerance');
  }
  public set hueTolerance(value: string) {
    this._hueTolerance = value;
  }
  public resetHueTolerance() {
    this._hueTolerance = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hueToleranceInput() {
    return this._hueTolerance;
  }

  // hue_tolerance_var - computed: false, optional: true, required: false
  private _hueToleranceVar?: string; 
  public get hueToleranceVar() {
    return this.getStringAttribute('hue_tolerance_var');
  }
  public set hueToleranceVar(value: string) {
    this._hueToleranceVar = value;
  }
  public resetHueToleranceVar() {
    this._hueToleranceVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hueToleranceVarInput() {
    return this._hueToleranceVar;
  }

  // hue_var - computed: false, optional: true, required: false
  private _hueVar?: string; 
  public get hueVar() {
    return this.getStringAttribute('hue_var');
  }
  public set hueVar(value: string) {
    this._hueVar = value;
  }
  public resetHueVar() {
    this._hueVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hueVarInput() {
    return this._hueVar;
  }

  // lightness_feather - computed: false, optional: true, required: false
  private _lightnessFeather?: string; 
  public get lightnessFeather() {
    return this.getStringAttribute('lightness_feather');
  }
  public set lightnessFeather(value: string) {
    this._lightnessFeather = value;
  }
  public resetLightnessFeather() {
    this._lightnessFeather = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get lightnessFeatherInput() {
    return this._lightnessFeather;
  }

  // lightness_feather_var - computed: false, optional: true, required: false
  private _lightnessFeatherVar?: string; 
  public get lightnessFeatherVar() {
    return this.getStringAttribute('lightness_feather_var');
  }
  public set lightnessFeatherVar(value: string) {
    this._lightnessFeatherVar = value;
  }
  public resetLightnessFeatherVar() {
    this._lightnessFeatherVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get lightnessFeatherVarInput() {
    return this._lightnessFeatherVar;
  }

  // lightness_tolerance - computed: false, optional: true, required: false
  private _lightnessTolerance?: string; 
  public get lightnessTolerance() {
    return this.getStringAttribute('lightness_tolerance');
  }
  public set lightnessTolerance(value: string) {
    this._lightnessTolerance = value;
  }
  public resetLightnessTolerance() {
    this._lightnessTolerance = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get lightnessToleranceInput() {
    return this._lightnessTolerance;
  }

  // lightness_tolerance_var - computed: false, optional: true, required: false
  private _lightnessToleranceVar?: string; 
  public get lightnessToleranceVar() {
    return this.getStringAttribute('lightness_tolerance_var');
  }
  public set lightnessToleranceVar(value: string) {
    this._lightnessToleranceVar = value;
  }
  public resetLightnessToleranceVar() {
    this._lightnessToleranceVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get lightnessToleranceVarInput() {
    return this._lightnessToleranceVar;
  }

  // saturation_feather - computed: false, optional: true, required: false
  private _saturationFeather?: string; 
  public get saturationFeather() {
    return this.getStringAttribute('saturation_feather');
  }
  public set saturationFeather(value: string) {
    this._saturationFeather = value;
  }
  public resetSaturationFeather() {
    this._saturationFeather = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get saturationFeatherInput() {
    return this._saturationFeather;
  }

  // saturation_feather_var - computed: false, optional: true, required: false
  private _saturationFeatherVar?: string; 
  public get saturationFeatherVar() {
    return this.getStringAttribute('saturation_feather_var');
  }
  public set saturationFeatherVar(value: string) {
    this._saturationFeatherVar = value;
  }
  public resetSaturationFeatherVar() {
    this._saturationFeatherVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get saturationFeatherVarInput() {
    return this._saturationFeatherVar;
  }

  // saturation_tolerance - computed: false, optional: true, required: false
  private _saturationTolerance?: string; 
  public get saturationTolerance() {
    return this.getStringAttribute('saturation_tolerance');
  }
  public set saturationTolerance(value: string) {
    this._saturationTolerance = value;
  }
  public resetSaturationTolerance() {
    this._saturationTolerance = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get saturationToleranceInput() {
    return this._saturationTolerance;
  }

  // saturation_tolerance_var - computed: false, optional: true, required: false
  private _saturationToleranceVar?: string; 
  public get saturationToleranceVar() {
    return this.getStringAttribute('saturation_tolerance_var');
  }
  public set saturationToleranceVar(value: string) {
    this._saturationToleranceVar = value;
  }
  public resetSaturationToleranceVar() {
    this._saturationToleranceVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get saturationToleranceVarInput() {
    return this._saturationToleranceVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitChromaKeyList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitChromaKey[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitChromaKeyOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitChromaKeyOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitCompositeImage {
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitCompositeImageToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitCompositeImageOutputReference | DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitCompositeImage): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitCompositeImageToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitCompositeImageOutputReference | DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitCompositeImage): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
  };
  return attrs;
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitCompositeImageOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false, 0);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitCompositeImage | undefined {
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitCompositeImage | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
    }
  }
}
export interface DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitComposite {
  /**
  * Compass direction indicating the corner or edge of the base image to place the applied image. Use Horizontal and Vertical Offset to adjust the applied image's gravity position
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#gravity DataAkamaiImagingPolicyImage#gravity}
  */
  readonly gravity?: string;
  /**
  * Compass direction indicating the corner or edge of the base image to place the applied image. Use Horizontal and Vertical Offset to adjust the applied image's gravity position
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#gravity_var DataAkamaiImagingPolicyImage#gravity_var}
  */
  readonly gravityVar?: string;
  /**
  * Place applied image on top of or underneath the base image. Watermarks are usually applied over. Backgrounds are usually applied under.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#placement DataAkamaiImagingPolicyImage#placement}
  */
  readonly placement?: string;
  /**
  * Place applied image on top of or underneath the base image. Watermarks are usually applied over. Backgrounds are usually applied under.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#placement_var DataAkamaiImagingPolicyImage#placement_var}
  */
  readonly placementVar?: string;
  /**
  * A multiplier to resize the applied image relative to the source image and preserve aspect ratio, 1 by default. Set the `scaleDimension` to calculate the `scale` from the source image's width or height.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#scale DataAkamaiImagingPolicyImage#scale}
  */
  readonly scale?: string;
  /**
  * The dimension, either `width` or `height`, of the source image to scale.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#scale_dimension DataAkamaiImagingPolicyImage#scale_dimension}
  */
  readonly scaleDimension?: string;
  /**
  * The dimension, either `width` or `height`, of the source image to scale.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#scale_dimension_var DataAkamaiImagingPolicyImage#scale_dimension_var}
  */
  readonly scaleDimensionVar?: string;
  /**
  * A multiplier to resize the applied image relative to the source image and preserve aspect ratio, 1 by default. Set the `scaleDimension` to calculate the `scale` from the source image's width or height.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#scale_var DataAkamaiImagingPolicyImage#scale_var}
  */
  readonly scaleVar?: string;
  /**
  * The x-axis position of the image to apply.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#x_position DataAkamaiImagingPolicyImage#x_position}
  */
  readonly xPosition?: string;
  /**
  * The x-axis position of the image to apply.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#x_position_var DataAkamaiImagingPolicyImage#x_position_var}
  */
  readonly xPositionVar?: string;
  /**
  * The y-axis position of the image to apply.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#y_position DataAkamaiImagingPolicyImage#y_position}
  */
  readonly yPosition?: string;
  /**
  * The y-axis position of the image to apply.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#y_position_var DataAkamaiImagingPolicyImage#y_position_var}
  */
  readonly yPositionVar?: string;
  /**
  * image block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#image DataAkamaiImagingPolicyImage#image}
  */
  readonly image: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitCompositeImage;
}

export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitCompositeToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitComposite | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    gravity: cdktf.stringToTerraform(struct!.gravity),
    gravity_var: cdktf.stringToTerraform(struct!.gravityVar),
    placement: cdktf.stringToTerraform(struct!.placement),
    placement_var: cdktf.stringToTerraform(struct!.placementVar),
    scale: cdktf.stringToTerraform(struct!.scale),
    scale_dimension: cdktf.stringToTerraform(struct!.scaleDimension),
    scale_dimension_var: cdktf.stringToTerraform(struct!.scaleDimensionVar),
    scale_var: cdktf.stringToTerraform(struct!.scaleVar),
    x_position: cdktf.stringToTerraform(struct!.xPosition),
    x_position_var: cdktf.stringToTerraform(struct!.xPositionVar),
    y_position: cdktf.stringToTerraform(struct!.yPosition),
    y_position_var: cdktf.stringToTerraform(struct!.yPositionVar),
    image: dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitCompositeImageToTerraform(struct!.image),
  }
}


export function dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitCompositeToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitComposite | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    gravity: {
      value: cdktf.stringToHclTerraform(struct!.gravity),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    gravity_var: {
      value: cdktf.stringToHclTerraform(struct!.gravityVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    placement: {
      value: cdktf.stringToHclTerraform(struct!.placement),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    placement_var: {
      value: cdktf.stringToHclTerraform(struct!.placementVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    scale: {
      value: cdktf.stringToHclTerraform(struct!.scale),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    scale_dimension: {
      value: cdktf.stringToHclTerraform(struct!.scaleDimension),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    scale_dimension_var: {
      value: cdktf.stringToHclTerraform(struct!.scaleDimensionVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    scale_var: {
      value: cdktf.stringToHclTerraform(struct!.scaleVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    x_position: {
      value: cdktf.stringToHclTerraform(struct!.xPosition),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    x_position_var: {
      value: cdktf.stringToHclTerraform(struct!.xPositionVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    y_position: {
      value: cdktf.stringToHclTerraform(struct!.yPosition),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    y_position_var: {
      value: cdktf.stringToHclTerraform(struct!.yPositionVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    image: {
      value: dataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitCompositeImageToHclTerraform(struct!.image),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitCompositeImageList",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitCompositeOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitComposite | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._gravity !== undefined) {
      hasAnyValues = true;
      internalValueResult.gravity = this._gravity;
    }
    if (this._gravityVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.gravityVar = this._gravityVar;
    }
    if (this._placement !== undefined) {
      hasAnyValues = true;
      internalValueResult.placement = this._placement;
    }
    if (this._placementVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.placementVar = this._placementVar;
    }
    if (this._scale !== undefined) {
      hasAnyValues = true;
      internalValueResult.scale = this._scale;
    }
    if (this._scaleDimension !== undefined) {
      hasAnyValues = true;
      internalValueResult.scaleDimension = this._scaleDimension;
    }
    if (this._scaleDimensionVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.scaleDimensionVar = this._scaleDimensionVar;
    }
    if (this._scaleVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.scaleVar = this._scaleVar;
    }
    if (this._xPosition !== undefined) {
      hasAnyValues = true;
      internalValueResult.xPosition = this._xPosition;
    }
    if (this._xPositionVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.xPositionVar = this._xPositionVar;
    }
    if (this._yPosition !== undefined) {
      hasAnyValues = true;
      internalValueResult.yPosition = this._yPosition;
    }
    if (this._yPositionVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.yPositionVar = this._yPositionVar;
    }
    if (this._image?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.image = this._image?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitComposite | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._gravity = undefined;
      this._gravityVar = undefined;
      this._placement = undefined;
      this._placementVar = undefined;
      this._scale = undefined;
      this._scaleDimension = undefined;
      this._scaleDimensionVar = undefined;
      this._scaleVar = undefined;
      this._xPosition = undefined;
      this._xPositionVar = undefined;
      this._yPosition = undefined;
      this._yPositionVar = undefined;
      this._image.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._gravity = value.gravity;
      this._gravityVar = value.gravityVar;
      this._placement = value.placement;
      this._placementVar = value.placementVar;
      this._scale = value.scale;
      this._scaleDimension = value.scaleDimension;
      this._scaleDimensionVar = value.scaleDimensionVar;
      this._scaleVar = value.scaleVar;
      this._xPosition = value.xPosition;
      this._xPositionVar = value.xPositionVar;
      this._yPosition = value.yPosition;
      this._yPositionVar = value.yPositionVar;
      this._image.internalValue = value.image;
    }
  }

  // gravity - computed: false, optional: true, required: false
  private _gravity?: string; 
  public get gravity() {
    return this.getStringAttribute('gravity');
  }
  public set gravity(value: string) {
    this._gravity = value;
  }
  public resetGravity() {
    this._gravity = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get gravityInput() {
    return this._gravity;
  }

  // gravity_var - computed: false, optional: true, required: false
  private _gravityVar?: string; 
  public get gravityVar() {
    return this.getStringAttribute('gravity_var');
  }
  public set gravityVar(value: string) {
    this._gravityVar = value;
  }
  public resetGravityVar() {
    this._gravityVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get gravityVarInput() {
    return this._gravityVar;
  }

  // placement - computed: false, optional: true, required: false
  private _placement?: string; 
  public get placement() {
    return this.getStringAttribute('placement');
  }
  public set placement(value: string) {
    this._placement = value;
  }
  public resetPlacement() {
    this._placement = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get placementInput() {
    return this._placement;
  }

  // placement_var - computed: false, optional: true, required: false
  private _placementVar?: string; 
  public get placementVar() {
    return this.getStringAttribute('placement_var');
  }
  public set placementVar(value: string) {
    this._placementVar = value;
  }
  public resetPlacementVar() {
    this._placementVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get placementVarInput() {
    return this._placementVar;
  }

  // scale - computed: false, optional: true, required: false
  private _scale?: string; 
  public get scale() {
    return this.getStringAttribute('scale');
  }
  public set scale(value: string) {
    this._scale = value;
  }
  public resetScale() {
    this._scale = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get scaleInput() {
    return this._scale;
  }

  // scale_dimension - computed: false, optional: true, required: false
  private _scaleDimension?: string; 
  public get scaleDimension() {
    return this.getStringAttribute('scale_dimension');
  }
  public set scaleDimension(value: string) {
    this._scaleDimension = value;
  }
  public resetScaleDimension() {
    this._scaleDimension = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get scaleDimensionInput() {
    return this._scaleDimension;
  }

  // scale_dimension_var - computed: false, optional: true, required: false
  private _scaleDimensionVar?: string; 
  public get scaleDimensionVar() {
    return this.getStringAttribute('scale_dimension_var');
  }
  public set scaleDimensionVar(value: string) {
    this._scaleDimensionVar = value;
  }
  public resetScaleDimensionVar() {
    this._scaleDimensionVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get scaleDimensionVarInput() {
    return this._scaleDimensionVar;
  }

  // scale_var - computed: false, optional: true, required: false
  private _scaleVar?: string; 
  public get scaleVar() {
    return this.getStringAttribute('scale_var');
  }
  public set scaleVar(value: string) {
    this._scaleVar = value;
  }
  public resetScaleVar() {
    this._scaleVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get scaleVarInput() {
    return this._scaleVar;
  }

  // x_position - computed: false, optional: true, required: false
  private _xPosition?: string; 
  public get xPosition() {
    return this.getStringAttribute('x_position');
  }
  public set xPosition(value: string) {
    this._xPosition = value;
  }
  public resetXPosition() {
    this._xPosition = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get xPositionInput() {
    return this._xPosition;
  }

  // x_position_var - computed: false, optional: true, required: false
  private _xPositionVar?: string; 
  public get xPositionVar() {
    return this.getStringAttribute('x_position_var');
  }
  public set xPositionVar(value: string) {
    this._xPositionVar = value;
  }
  public resetXPositionVar() {
    this._xPositionVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get xPositionVarInput() {
    return this._xPositionVar;
  }

  // y_position - computed: false, optional: true, required: false
  private _yPosition?: string; 
  public get yPosition() {
    return this.getStringAttribute('y_position');
  }
  public set yPosition(value: string) {
    this._yPosition = value;
  }
  public resetYPosition() {
    this._yPosition = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get yPositionInput() {
    return this._yPosition;
  }

  // y_position_var - computed: false, optional: true, required: false
  private _yPositionVar?: string; 
  public get yPositionVar() {
    return this.getStringAttribute('y_position_var');
  }
  public set yPositionVar(value: string) {
    this._yPositionVar = value;
  }
  public resetYPositionVar() {
    this._yPositionVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get yPositionVarInput() {
    return this._yPositionVar;
  }

  // image - computed: false, optional: false, required: true
  private _image = new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitCompositeImageOutputReference(this, "image");
  public get image() {
    return this._image;
  }
  public putImage(value: DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitCompositeImage) {
    this._image.internalValue = value;
  }
  // Temporarily expose input value. Use with caution.
  public get imageInput() {
    return this._image.internalValue;
  }
}

export class DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitCompositeList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitComposite[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitCompositeOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyTransformationsIfDimensionDefaultIfOrientationPortraitCompositeOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
