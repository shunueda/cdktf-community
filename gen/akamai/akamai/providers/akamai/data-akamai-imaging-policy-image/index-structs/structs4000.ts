import * as cdktf from 'cdktf';
import { DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsIfOrientationDefault,
dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsIfOrientationDefaultToTerraform,
dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsIfOrientationDefaultToHclTerraform,
DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsIfOrientationDefaultOutputReference,
DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsIfOrientationLandscape,
dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsIfOrientationLandscapeToTerraform,
dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsIfOrientationLandscapeToHclTerraform,
DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsIfOrientationLandscapeOutputReference,
DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsBackgroundColor,
dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsBackgroundColorToTerraform,
dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsBackgroundColorToHclTerraform,
DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsBackgroundColorList,
DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsBlur,
dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsBlurToTerraform,
dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsBlurToHclTerraform,
DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsBlurList,
DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsChromaKey,
dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsChromaKeyToTerraform,
dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsChromaKeyToHclTerraform,
DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsChromaKeyList,
DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsComposite,
dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsCompositeToTerraform,
dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsCompositeToHclTerraform,
DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsCompositeList,
DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsCompound,
dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsCompoundToTerraform,
dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsCompoundToHclTerraform,
DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsCompoundList,
DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsContrast,
dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsContrastToTerraform,
dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsContrastToHclTerraform,
DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsContrastList,
DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsGoop,
dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsGoopToTerraform,
dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsGoopToHclTerraform,
DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsGoopList,
DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsGrayscale,
dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsGrayscaleToTerraform,
dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsGrayscaleToHclTerraform,
DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsGrayscaleList,
DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsHsl,
dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsHslToTerraform,
dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsHslToHclTerraform,
DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsHslList,
DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsHsv,
dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsHsvToTerraform,
dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsHsvToHclTerraform,
DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsHsvList,
DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsIfDimension,
dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsIfDimensionToTerraform,
dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsIfDimensionToHclTerraform,
DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsIfDimensionList } from './structs3600'
import { DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefault,
dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultToTerraform,
dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultToHclTerraform,
DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultOutputReference } from './structs4400'
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsIfOrientationPortrait {
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsIfOrientationPortraitToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsIfOrientationPortraitOutputReference | DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsIfOrientationPortrait): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsIfOrientationPortraitToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsIfOrientationPortraitOutputReference | DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsIfOrientationPortrait): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
  };
  return attrs;
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsIfOrientationPortraitOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false, 0);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsIfOrientationPortrait | undefined {
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsIfOrientationPortrait | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
    }
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsIfOrientationSquare {
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsIfOrientationSquareToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsIfOrientationSquareOutputReference | DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsIfOrientationSquare): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsIfOrientationSquareToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsIfOrientationSquareOutputReference | DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsIfOrientationSquare): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
  };
  return attrs;
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsIfOrientationSquareOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false, 0);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsIfOrientationSquare | undefined {
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsIfOrientationSquare | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
    }
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsIfOrientation {
  /**
  * default block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#default DataAkamaiImagingPolicyImage#default}
  */
  readonly default?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsIfOrientationDefault;
  /**
  * landscape block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#landscape DataAkamaiImagingPolicyImage#landscape}
  */
  readonly landscape?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsIfOrientationLandscape;
  /**
  * portrait block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#portrait DataAkamaiImagingPolicyImage#portrait}
  */
  readonly portrait?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsIfOrientationPortrait;
  /**
  * square block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#square DataAkamaiImagingPolicyImage#square}
  */
  readonly square?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsIfOrientationSquare;
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsIfOrientationToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsIfOrientation | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    default: dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsIfOrientationDefaultToTerraform(struct!.default),
    landscape: dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsIfOrientationLandscapeToTerraform(struct!.landscape),
    portrait: dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsIfOrientationPortraitToTerraform(struct!.portrait),
    square: dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsIfOrientationSquareToTerraform(struct!.square),
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsIfOrientationToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsIfOrientation | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    default: {
      value: dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsIfOrientationDefaultToHclTerraform(struct!.default),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsIfOrientationDefaultList",
    },
    landscape: {
      value: dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsIfOrientationLandscapeToHclTerraform(struct!.landscape),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsIfOrientationLandscapeList",
    },
    portrait: {
      value: dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsIfOrientationPortraitToHclTerraform(struct!.portrait),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsIfOrientationPortraitList",
    },
    square: {
      value: dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsIfOrientationSquareToHclTerraform(struct!.square),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsIfOrientationSquareList",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsIfOrientationOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsIfOrientation | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._default?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.default = this._default?.internalValue;
    }
    if (this._landscape?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.landscape = this._landscape?.internalValue;
    }
    if (this._portrait?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.portrait = this._portrait?.internalValue;
    }
    if (this._square?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.square = this._square?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsIfOrientation | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._default.internalValue = undefined;
      this._landscape.internalValue = undefined;
      this._portrait.internalValue = undefined;
      this._square.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._default.internalValue = value.default;
      this._landscape.internalValue = value.landscape;
      this._portrait.internalValue = value.portrait;
      this._square.internalValue = value.square;
    }
  }

  // default - computed: false, optional: true, required: false
  private _default = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsIfOrientationDefaultOutputReference(this, "default");
  public get default() {
    return this._default;
  }
  public putDefault(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsIfOrientationDefault) {
    this._default.internalValue = value;
  }
  public resetDefault() {
    this._default.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get defaultInput() {
    return this._default.internalValue;
  }

  // landscape - computed: false, optional: true, required: false
  private _landscape = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsIfOrientationLandscapeOutputReference(this, "landscape");
  public get landscape() {
    return this._landscape;
  }
  public putLandscape(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsIfOrientationLandscape) {
    this._landscape.internalValue = value;
  }
  public resetLandscape() {
    this._landscape.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get landscapeInput() {
    return this._landscape.internalValue;
  }

  // portrait - computed: false, optional: true, required: false
  private _portrait = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsIfOrientationPortraitOutputReference(this, "portrait");
  public get portrait() {
    return this._portrait;
  }
  public putPortrait(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsIfOrientationPortrait) {
    this._portrait.internalValue = value;
  }
  public resetPortrait() {
    this._portrait.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get portraitInput() {
    return this._portrait.internalValue;
  }

  // square - computed: false, optional: true, required: false
  private _square = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsIfOrientationSquareOutputReference(this, "square");
  public get square() {
    return this._square;
  }
  public putSquare(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsIfOrientationSquare) {
    this._square.internalValue = value;
  }
  public resetSquare() {
    this._square.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get squareInput() {
    return this._square.internalValue;
  }
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsIfOrientationList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsIfOrientation[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsIfOrientationOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsIfOrientationOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsMaxColors {
  /**
  * The value representing the maximum number of colors to use with the source image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#colors DataAkamaiImagingPolicyImage#colors}
  */
  readonly colors?: string;
  /**
  * The value representing the maximum number of colors to use with the source image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#colors_var DataAkamaiImagingPolicyImage#colors_var}
  */
  readonly colorsVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsMaxColorsToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsMaxColors | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    colors: cdktf.stringToTerraform(struct!.colors),
    colors_var: cdktf.stringToTerraform(struct!.colorsVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsMaxColorsToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsMaxColors | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    colors: {
      value: cdktf.stringToHclTerraform(struct!.colors),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    colors_var: {
      value: cdktf.stringToHclTerraform(struct!.colorsVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsMaxColorsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsMaxColors | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._colors !== undefined) {
      hasAnyValues = true;
      internalValueResult.colors = this._colors;
    }
    if (this._colorsVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.colorsVar = this._colorsVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsMaxColors | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._colors = undefined;
      this._colorsVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._colors = value.colors;
      this._colorsVar = value.colorsVar;
    }
  }

  // colors - computed: false, optional: true, required: false
  private _colors?: string; 
  public get colors() {
    return this.getStringAttribute('colors');
  }
  public set colors(value: string) {
    this._colors = value;
  }
  public resetColors() {
    this._colors = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get colorsInput() {
    return this._colors;
  }

  // colors_var - computed: false, optional: true, required: false
  private _colorsVar?: string; 
  public get colorsVar() {
    return this.getStringAttribute('colors_var');
  }
  public set colorsVar(value: string) {
    this._colorsVar = value;
  }
  public resetColorsVar() {
    this._colorsVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get colorsVarInput() {
    return this._colorsVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsMaxColorsList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsMaxColors[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsMaxColorsOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsMaxColorsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsMirror {
  /**
  * Flips the image horizontally.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#horizontal DataAkamaiImagingPolicyImage#horizontal}
  */
  readonly horizontal?: string;
  /**
  * Flips the image horizontally.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#horizontal_var DataAkamaiImagingPolicyImage#horizontal_var}
  */
  readonly horizontalVar?: string;
  /**
  * Flips the image vertically.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#vertical DataAkamaiImagingPolicyImage#vertical}
  */
  readonly vertical?: string;
  /**
  * Flips the image vertically.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#vertical_var DataAkamaiImagingPolicyImage#vertical_var}
  */
  readonly verticalVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsMirrorToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsMirror | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    horizontal: cdktf.stringToTerraform(struct!.horizontal),
    horizontal_var: cdktf.stringToTerraform(struct!.horizontalVar),
    vertical: cdktf.stringToTerraform(struct!.vertical),
    vertical_var: cdktf.stringToTerraform(struct!.verticalVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsMirrorToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsMirror | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    horizontal: {
      value: cdktf.stringToHclTerraform(struct!.horizontal),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    horizontal_var: {
      value: cdktf.stringToHclTerraform(struct!.horizontalVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    vertical: {
      value: cdktf.stringToHclTerraform(struct!.vertical),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    vertical_var: {
      value: cdktf.stringToHclTerraform(struct!.verticalVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsMirrorOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsMirror | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._horizontal !== undefined) {
      hasAnyValues = true;
      internalValueResult.horizontal = this._horizontal;
    }
    if (this._horizontalVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.horizontalVar = this._horizontalVar;
    }
    if (this._vertical !== undefined) {
      hasAnyValues = true;
      internalValueResult.vertical = this._vertical;
    }
    if (this._verticalVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.verticalVar = this._verticalVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsMirror | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._horizontal = undefined;
      this._horizontalVar = undefined;
      this._vertical = undefined;
      this._verticalVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._horizontal = value.horizontal;
      this._horizontalVar = value.horizontalVar;
      this._vertical = value.vertical;
      this._verticalVar = value.verticalVar;
    }
  }

  // horizontal - computed: false, optional: true, required: false
  private _horizontal?: string; 
  public get horizontal() {
    return this.getStringAttribute('horizontal');
  }
  public set horizontal(value: string) {
    this._horizontal = value;
  }
  public resetHorizontal() {
    this._horizontal = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get horizontalInput() {
    return this._horizontal;
  }

  // horizontal_var - computed: false, optional: true, required: false
  private _horizontalVar?: string; 
  public get horizontalVar() {
    return this.getStringAttribute('horizontal_var');
  }
  public set horizontalVar(value: string) {
    this._horizontalVar = value;
  }
  public resetHorizontalVar() {
    this._horizontalVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get horizontalVarInput() {
    return this._horizontalVar;
  }

  // vertical - computed: false, optional: true, required: false
  private _vertical?: string; 
  public get vertical() {
    return this.getStringAttribute('vertical');
  }
  public set vertical(value: string) {
    this._vertical = value;
  }
  public resetVertical() {
    this._vertical = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get verticalInput() {
    return this._vertical;
  }

  // vertical_var - computed: false, optional: true, required: false
  private _verticalVar?: string; 
  public get verticalVar() {
    return this.getStringAttribute('vertical_var');
  }
  public set verticalVar(value: string) {
    this._verticalVar = value;
  }
  public resetVerticalVar() {
    this._verticalVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get verticalVarInput() {
    return this._verticalVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsMirrorList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsMirror[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsMirrorOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsMirrorOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsMonoHue {
  /**
  * Specify a hue by indicating the degree of rotation between 0 and 360 degrees around the color wheel. By default Mono Hue applies a red hue, 0.0 on the color wheel.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hue DataAkamaiImagingPolicyImage#hue}
  */
  readonly hue?: string;
  /**
  * Specify a hue by indicating the degree of rotation between 0 and 360 degrees around the color wheel. By default Mono Hue applies a red hue, 0.0 on the color wheel.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hue_var DataAkamaiImagingPolicyImage#hue_var}
  */
  readonly hueVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsMonoHueToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsMonoHue | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    hue: cdktf.stringToTerraform(struct!.hue),
    hue_var: cdktf.stringToTerraform(struct!.hueVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsMonoHueToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsMonoHue | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    hue: {
      value: cdktf.stringToHclTerraform(struct!.hue),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    hue_var: {
      value: cdktf.stringToHclTerraform(struct!.hueVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsMonoHueOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsMonoHue | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._hue !== undefined) {
      hasAnyValues = true;
      internalValueResult.hue = this._hue;
    }
    if (this._hueVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.hueVar = this._hueVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsMonoHue | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._hue = undefined;
      this._hueVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._hue = value.hue;
      this._hueVar = value.hueVar;
    }
  }

  // hue - computed: false, optional: true, required: false
  private _hue?: string; 
  public get hue() {
    return this.getStringAttribute('hue');
  }
  public set hue(value: string) {
    this._hue = value;
  }
  public resetHue() {
    this._hue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hueInput() {
    return this._hue;
  }

  // hue_var - computed: false, optional: true, required: false
  private _hueVar?: string; 
  public get hueVar() {
    return this.getStringAttribute('hue_var');
  }
  public set hueVar(value: string) {
    this._hueVar = value;
  }
  public resetHueVar() {
    this._hueVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hueVarInput() {
    return this._hueVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsMonoHueList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsMonoHue[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsMonoHueOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsMonoHueOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsOpacity {
  /**
  * Represents alpha values on a scale of `0` to `1`. Values below `1` increase transparency, and `0` is invisible. For images that have some transparency, values above `1` increase the opacity of the transparent portions.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#opacity DataAkamaiImagingPolicyImage#opacity}
  */
  readonly opacity?: string;
  /**
  * Represents alpha values on a scale of `0` to `1`. Values below `1` increase transparency, and `0` is invisible. For images that have some transparency, values above `1` increase the opacity of the transparent portions.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#opacity_var DataAkamaiImagingPolicyImage#opacity_var}
  */
  readonly opacityVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsOpacityToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsOpacity | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    opacity: cdktf.stringToTerraform(struct!.opacity),
    opacity_var: cdktf.stringToTerraform(struct!.opacityVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsOpacityToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsOpacity | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    opacity: {
      value: cdktf.stringToHclTerraform(struct!.opacity),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    opacity_var: {
      value: cdktf.stringToHclTerraform(struct!.opacityVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsOpacityOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsOpacity | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._opacity !== undefined) {
      hasAnyValues = true;
      internalValueResult.opacity = this._opacity;
    }
    if (this._opacityVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.opacityVar = this._opacityVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsOpacity | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._opacity = undefined;
      this._opacityVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._opacity = value.opacity;
      this._opacityVar = value.opacityVar;
    }
  }

  // opacity - computed: false, optional: true, required: false
  private _opacity?: string; 
  public get opacity() {
    return this.getStringAttribute('opacity');
  }
  public set opacity(value: string) {
    this._opacity = value;
  }
  public resetOpacity() {
    this._opacity = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get opacityInput() {
    return this._opacity;
  }

  // opacity_var - computed: false, optional: true, required: false
  private _opacityVar?: string; 
  public get opacityVar() {
    return this.getStringAttribute('opacity_var');
  }
  public set opacityVar(value: string) {
    this._opacityVar = value;
  }
  public resetOpacityVar() {
    this._opacityVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get opacityVarInput() {
    return this._opacityVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsOpacityList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsOpacity[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsOpacityOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsOpacityOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsRemoveColor {
  /**
  * The hexadecimal CSS color value to remove.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#color DataAkamaiImagingPolicyImage#color}
  */
  readonly color?: string;
  /**
  * The hexadecimal CSS color value to remove.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#color_var DataAkamaiImagingPolicyImage#color_var}
  */
  readonly colorVar?: string;
  /**
  * The RemoveColor transformation may create a hard edge around an image. To minimize these hard edges and make the removal of the color more gradual in appearance, use the Feather option. This option allows you to extend the color removal beyond the specified Tolerance. The pixels in this extended tolerance become semi-transparent - creating a softer edge.  The first realtime request for an image using the feather option may result in a slow transformation time. Subsequent requests are not impacted as they are served directly out of cache.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#feather DataAkamaiImagingPolicyImage#feather}
  */
  readonly feather?: string;
  /**
  * The RemoveColor transformation may create a hard edge around an image. To minimize these hard edges and make the removal of the color more gradual in appearance, use the Feather option. This option allows you to extend the color removal beyond the specified Tolerance. The pixels in this extended tolerance become semi-transparent - creating a softer edge.  The first realtime request for an image using the feather option may result in a slow transformation time. Subsequent requests are not impacted as they are served directly out of cache.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#feather_var DataAkamaiImagingPolicyImage#feather_var}
  */
  readonly featherVar?: string;
  /**
  * The Tolerance option defines how close the color needs to be to the selected color before it's changed to fully transparent. Set the Tolerance to 0.0 to remove only the exact color specified.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#tolerance DataAkamaiImagingPolicyImage#tolerance}
  */
  readonly tolerance?: string;
  /**
  * The Tolerance option defines how close the color needs to be to the selected color before it's changed to fully transparent. Set the Tolerance to 0.0 to remove only the exact color specified.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#tolerance_var DataAkamaiImagingPolicyImage#tolerance_var}
  */
  readonly toleranceVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsRemoveColorToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsRemoveColor | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    color: cdktf.stringToTerraform(struct!.color),
    color_var: cdktf.stringToTerraform(struct!.colorVar),
    feather: cdktf.stringToTerraform(struct!.feather),
    feather_var: cdktf.stringToTerraform(struct!.featherVar),
    tolerance: cdktf.stringToTerraform(struct!.tolerance),
    tolerance_var: cdktf.stringToTerraform(struct!.toleranceVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsRemoveColorToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsRemoveColor | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    color: {
      value: cdktf.stringToHclTerraform(struct!.color),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    color_var: {
      value: cdktf.stringToHclTerraform(struct!.colorVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    feather: {
      value: cdktf.stringToHclTerraform(struct!.feather),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    feather_var: {
      value: cdktf.stringToHclTerraform(struct!.featherVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    tolerance: {
      value: cdktf.stringToHclTerraform(struct!.tolerance),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    tolerance_var: {
      value: cdktf.stringToHclTerraform(struct!.toleranceVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsRemoveColorOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsRemoveColor | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._color !== undefined) {
      hasAnyValues = true;
      internalValueResult.color = this._color;
    }
    if (this._colorVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.colorVar = this._colorVar;
    }
    if (this._feather !== undefined) {
      hasAnyValues = true;
      internalValueResult.feather = this._feather;
    }
    if (this._featherVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.featherVar = this._featherVar;
    }
    if (this._tolerance !== undefined) {
      hasAnyValues = true;
      internalValueResult.tolerance = this._tolerance;
    }
    if (this._toleranceVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.toleranceVar = this._toleranceVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsRemoveColor | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._color = undefined;
      this._colorVar = undefined;
      this._feather = undefined;
      this._featherVar = undefined;
      this._tolerance = undefined;
      this._toleranceVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._color = value.color;
      this._colorVar = value.colorVar;
      this._feather = value.feather;
      this._featherVar = value.featherVar;
      this._tolerance = value.tolerance;
      this._toleranceVar = value.toleranceVar;
    }
  }

  // color - computed: false, optional: true, required: false
  private _color?: string; 
  public get color() {
    return this.getStringAttribute('color');
  }
  public set color(value: string) {
    this._color = value;
  }
  public resetColor() {
    this._color = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get colorInput() {
    return this._color;
  }

  // color_var - computed: false, optional: true, required: false
  private _colorVar?: string; 
  public get colorVar() {
    return this.getStringAttribute('color_var');
  }
  public set colorVar(value: string) {
    this._colorVar = value;
  }
  public resetColorVar() {
    this._colorVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get colorVarInput() {
    return this._colorVar;
  }

  // feather - computed: false, optional: true, required: false
  private _feather?: string; 
  public get feather() {
    return this.getStringAttribute('feather');
  }
  public set feather(value: string) {
    this._feather = value;
  }
  public resetFeather() {
    this._feather = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get featherInput() {
    return this._feather;
  }

  // feather_var - computed: false, optional: true, required: false
  private _featherVar?: string; 
  public get featherVar() {
    return this.getStringAttribute('feather_var');
  }
  public set featherVar(value: string) {
    this._featherVar = value;
  }
  public resetFeatherVar() {
    this._featherVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get featherVarInput() {
    return this._featherVar;
  }

  // tolerance - computed: false, optional: true, required: false
  private _tolerance?: string; 
  public get tolerance() {
    return this.getStringAttribute('tolerance');
  }
  public set tolerance(value: string) {
    this._tolerance = value;
  }
  public resetTolerance() {
    this._tolerance = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get toleranceInput() {
    return this._tolerance;
  }

  // tolerance_var - computed: false, optional: true, required: false
  private _toleranceVar?: string; 
  public get toleranceVar() {
    return this.getStringAttribute('tolerance_var');
  }
  public set toleranceVar(value: string) {
    this._toleranceVar = value;
  }
  public resetToleranceVar() {
    this._toleranceVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get toleranceVarInput() {
    return this._toleranceVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsRemoveColorList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsRemoveColor[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsRemoveColorOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsRemoveColorOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsUnsharpMask {
  /**
  * Set how much emphasis the filter applies to details. Higher values increase apparent sharpness of details.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#gain DataAkamaiImagingPolicyImage#gain}
  */
  readonly gain?: string;
  /**
  * Set how much emphasis the filter applies to details. Higher values increase apparent sharpness of details.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#gain_var DataAkamaiImagingPolicyImage#gain_var}
  */
  readonly gainVar?: string;
  /**
  * The standard deviation of the Gaussian distribution used in the in unsharp mask, measured in pixels, `1.0` by default. High values emphasize large details and low values emphasize small details.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#sigma DataAkamaiImagingPolicyImage#sigma}
  */
  readonly sigma?: string;
  /**
  * The standard deviation of the Gaussian distribution used in the in unsharp mask, measured in pixels, `1.0` by default. High values emphasize large details and low values emphasize small details.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#sigma_var DataAkamaiImagingPolicyImage#sigma_var}
  */
  readonly sigmaVar?: string;
  /**
  * Set the minimum change required to include a detail in the filter. Higher values discard more changes.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#threshold DataAkamaiImagingPolicyImage#threshold}
  */
  readonly threshold?: string;
  /**
  * Set the minimum change required to include a detail in the filter. Higher values discard more changes.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#threshold_var DataAkamaiImagingPolicyImage#threshold_var}
  */
  readonly thresholdVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsUnsharpMaskToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsUnsharpMask | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    gain: cdktf.stringToTerraform(struct!.gain),
    gain_var: cdktf.stringToTerraform(struct!.gainVar),
    sigma: cdktf.stringToTerraform(struct!.sigma),
    sigma_var: cdktf.stringToTerraform(struct!.sigmaVar),
    threshold: cdktf.stringToTerraform(struct!.threshold),
    threshold_var: cdktf.stringToTerraform(struct!.thresholdVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsUnsharpMaskToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsUnsharpMask | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    gain: {
      value: cdktf.stringToHclTerraform(struct!.gain),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    gain_var: {
      value: cdktf.stringToHclTerraform(struct!.gainVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    sigma: {
      value: cdktf.stringToHclTerraform(struct!.sigma),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    sigma_var: {
      value: cdktf.stringToHclTerraform(struct!.sigmaVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    threshold: {
      value: cdktf.stringToHclTerraform(struct!.threshold),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    threshold_var: {
      value: cdktf.stringToHclTerraform(struct!.thresholdVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsUnsharpMaskOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsUnsharpMask | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._gain !== undefined) {
      hasAnyValues = true;
      internalValueResult.gain = this._gain;
    }
    if (this._gainVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.gainVar = this._gainVar;
    }
    if (this._sigma !== undefined) {
      hasAnyValues = true;
      internalValueResult.sigma = this._sigma;
    }
    if (this._sigmaVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.sigmaVar = this._sigmaVar;
    }
    if (this._threshold !== undefined) {
      hasAnyValues = true;
      internalValueResult.threshold = this._threshold;
    }
    if (this._thresholdVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.thresholdVar = this._thresholdVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsUnsharpMask | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._gain = undefined;
      this._gainVar = undefined;
      this._sigma = undefined;
      this._sigmaVar = undefined;
      this._threshold = undefined;
      this._thresholdVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._gain = value.gain;
      this._gainVar = value.gainVar;
      this._sigma = value.sigma;
      this._sigmaVar = value.sigmaVar;
      this._threshold = value.threshold;
      this._thresholdVar = value.thresholdVar;
    }
  }

  // gain - computed: false, optional: true, required: false
  private _gain?: string; 
  public get gain() {
    return this.getStringAttribute('gain');
  }
  public set gain(value: string) {
    this._gain = value;
  }
  public resetGain() {
    this._gain = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get gainInput() {
    return this._gain;
  }

  // gain_var - computed: false, optional: true, required: false
  private _gainVar?: string; 
  public get gainVar() {
    return this.getStringAttribute('gain_var');
  }
  public set gainVar(value: string) {
    this._gainVar = value;
  }
  public resetGainVar() {
    this._gainVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get gainVarInput() {
    return this._gainVar;
  }

  // sigma - computed: false, optional: true, required: false
  private _sigma?: string; 
  public get sigma() {
    return this.getStringAttribute('sigma');
  }
  public set sigma(value: string) {
    this._sigma = value;
  }
  public resetSigma() {
    this._sigma = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get sigmaInput() {
    return this._sigma;
  }

  // sigma_var - computed: false, optional: true, required: false
  private _sigmaVar?: string; 
  public get sigmaVar() {
    return this.getStringAttribute('sigma_var');
  }
  public set sigmaVar(value: string) {
    this._sigmaVar = value;
  }
  public resetSigmaVar() {
    this._sigmaVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get sigmaVarInput() {
    return this._sigmaVar;
  }

  // threshold - computed: false, optional: true, required: false
  private _threshold?: string; 
  public get threshold() {
    return this.getStringAttribute('threshold');
  }
  public set threshold(value: string) {
    this._threshold = value;
  }
  public resetThreshold() {
    this._threshold = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get thresholdInput() {
    return this._threshold;
  }

  // threshold_var - computed: false, optional: true, required: false
  private _thresholdVar?: string; 
  public get thresholdVar() {
    return this.getStringAttribute('threshold_var');
  }
  public set thresholdVar(value: string) {
    this._thresholdVar = value;
  }
  public resetThresholdVar() {
    this._thresholdVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get thresholdVarInput() {
    return this._thresholdVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsUnsharpMaskList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsUnsharpMask[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsUnsharpMaskOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsUnsharpMaskOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformations {
  /**
  * background_color block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#background_color DataAkamaiImagingPolicyImage#background_color}
  */
  readonly backgroundColor?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsBackgroundColor[] | cdktf.IResolvable;
  /**
  * blur block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#blur DataAkamaiImagingPolicyImage#blur}
  */
  readonly blur?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsBlur[] | cdktf.IResolvable;
  /**
  * chroma_key block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#chroma_key DataAkamaiImagingPolicyImage#chroma_key}
  */
  readonly chromaKey?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsChromaKey[] | cdktf.IResolvable;
  /**
  * composite block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#composite DataAkamaiImagingPolicyImage#composite}
  */
  readonly composite?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsComposite[] | cdktf.IResolvable;
  /**
  * compound block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#compound DataAkamaiImagingPolicyImage#compound}
  */
  readonly compound?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsCompound[] | cdktf.IResolvable;
  /**
  * contrast block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#contrast DataAkamaiImagingPolicyImage#contrast}
  */
  readonly contrast?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsContrast[] | cdktf.IResolvable;
  /**
  * goop block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#goop DataAkamaiImagingPolicyImage#goop}
  */
  readonly goop?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsGoop[] | cdktf.IResolvable;
  /**
  * grayscale block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#grayscale DataAkamaiImagingPolicyImage#grayscale}
  */
  readonly grayscale?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsGrayscale[] | cdktf.IResolvable;
  /**
  * hsl block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hsl DataAkamaiImagingPolicyImage#hsl}
  */
  readonly hsl?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsHsl[] | cdktf.IResolvable;
  /**
  * hsv block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hsv DataAkamaiImagingPolicyImage#hsv}
  */
  readonly hsv?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsHsv[] | cdktf.IResolvable;
  /**
  * if_dimension block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#if_dimension DataAkamaiImagingPolicyImage#if_dimension}
  */
  readonly ifDimension?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsIfDimension[] | cdktf.IResolvable;
  /**
  * if_orientation block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#if_orientation DataAkamaiImagingPolicyImage#if_orientation}
  */
  readonly ifOrientation?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsIfOrientation[] | cdktf.IResolvable;
  /**
  * max_colors block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#max_colors DataAkamaiImagingPolicyImage#max_colors}
  */
  readonly maxColors?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsMaxColors[] | cdktf.IResolvable;
  /**
  * mirror block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#mirror DataAkamaiImagingPolicyImage#mirror}
  */
  readonly mirror?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsMirror[] | cdktf.IResolvable;
  /**
  * mono_hue block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#mono_hue DataAkamaiImagingPolicyImage#mono_hue}
  */
  readonly monoHue?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsMonoHue[] | cdktf.IResolvable;
  /**
  * opacity block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#opacity DataAkamaiImagingPolicyImage#opacity}
  */
  readonly opacity?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsOpacity[] | cdktf.IResolvable;
  /**
  * remove_color block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#remove_color DataAkamaiImagingPolicyImage#remove_color}
  */
  readonly removeColor?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsRemoveColor[] | cdktf.IResolvable;
  /**
  * unsharp_mask block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#unsharp_mask DataAkamaiImagingPolicyImage#unsharp_mask}
  */
  readonly unsharpMask?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsUnsharpMask[] | cdktf.IResolvable;
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformations | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    background_color: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsBackgroundColorToTerraform, true)(struct!.backgroundColor),
    blur: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsBlurToTerraform, true)(struct!.blur),
    chroma_key: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsChromaKeyToTerraform, true)(struct!.chromaKey),
    composite: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsCompositeToTerraform, true)(struct!.composite),
    compound: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsCompoundToTerraform, true)(struct!.compound),
    contrast: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsContrastToTerraform, true)(struct!.contrast),
    goop: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsGoopToTerraform, true)(struct!.goop),
    grayscale: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsGrayscaleToTerraform, true)(struct!.grayscale),
    hsl: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsHslToTerraform, true)(struct!.hsl),
    hsv: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsHsvToTerraform, true)(struct!.hsv),
    if_dimension: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsIfDimensionToTerraform, true)(struct!.ifDimension),
    if_orientation: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsIfOrientationToTerraform, true)(struct!.ifOrientation),
    max_colors: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsMaxColorsToTerraform, true)(struct!.maxColors),
    mirror: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsMirrorToTerraform, true)(struct!.mirror),
    mono_hue: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsMonoHueToTerraform, true)(struct!.monoHue),
    opacity: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsOpacityToTerraform, true)(struct!.opacity),
    remove_color: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsRemoveColorToTerraform, true)(struct!.removeColor),
    unsharp_mask: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsUnsharpMaskToTerraform, true)(struct!.unsharpMask),
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformations | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    background_color: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsBackgroundColorToHclTerraform, true)(struct!.backgroundColor),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsBackgroundColorList",
    },
    blur: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsBlurToHclTerraform, true)(struct!.blur),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsBlurList",
    },
    chroma_key: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsChromaKeyToHclTerraform, true)(struct!.chromaKey),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsChromaKeyList",
    },
    composite: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsCompositeToHclTerraform, true)(struct!.composite),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsCompositeList",
    },
    compound: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsCompoundToHclTerraform, true)(struct!.compound),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsCompoundList",
    },
    contrast: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsContrastToHclTerraform, true)(struct!.contrast),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsContrastList",
    },
    goop: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsGoopToHclTerraform, true)(struct!.goop),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsGoopList",
    },
    grayscale: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsGrayscaleToHclTerraform, true)(struct!.grayscale),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsGrayscaleList",
    },
    hsl: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsHslToHclTerraform, true)(struct!.hsl),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsHslList",
    },
    hsv: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsHsvToHclTerraform, true)(struct!.hsv),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsHsvList",
    },
    if_dimension: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsIfDimensionToHclTerraform, true)(struct!.ifDimension),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsIfDimensionList",
    },
    if_orientation: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsIfOrientationToHclTerraform, true)(struct!.ifOrientation),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsIfOrientationList",
    },
    max_colors: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsMaxColorsToHclTerraform, true)(struct!.maxColors),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsMaxColorsList",
    },
    mirror: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsMirrorToHclTerraform, true)(struct!.mirror),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsMirrorList",
    },
    mono_hue: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsMonoHueToHclTerraform, true)(struct!.monoHue),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsMonoHueList",
    },
    opacity: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsOpacityToHclTerraform, true)(struct!.opacity),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsOpacityList",
    },
    remove_color: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsRemoveColorToHclTerraform, true)(struct!.removeColor),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsRemoveColorList",
    },
    unsharp_mask: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsUnsharpMaskToHclTerraform, true)(struct!.unsharpMask),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsUnsharpMaskList",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformations | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._backgroundColor?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.backgroundColor = this._backgroundColor?.internalValue;
    }
    if (this._blur?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.blur = this._blur?.internalValue;
    }
    if (this._chromaKey?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.chromaKey = this._chromaKey?.internalValue;
    }
    if (this._composite?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.composite = this._composite?.internalValue;
    }
    if (this._compound?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.compound = this._compound?.internalValue;
    }
    if (this._contrast?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.contrast = this._contrast?.internalValue;
    }
    if (this._goop?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.goop = this._goop?.internalValue;
    }
    if (this._grayscale?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.grayscale = this._grayscale?.internalValue;
    }
    if (this._hsl?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.hsl = this._hsl?.internalValue;
    }
    if (this._hsv?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.hsv = this._hsv?.internalValue;
    }
    if (this._ifDimension?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.ifDimension = this._ifDimension?.internalValue;
    }
    if (this._ifOrientation?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.ifOrientation = this._ifOrientation?.internalValue;
    }
    if (this._maxColors?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.maxColors = this._maxColors?.internalValue;
    }
    if (this._mirror?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.mirror = this._mirror?.internalValue;
    }
    if (this._monoHue?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.monoHue = this._monoHue?.internalValue;
    }
    if (this._opacity?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.opacity = this._opacity?.internalValue;
    }
    if (this._removeColor?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.removeColor = this._removeColor?.internalValue;
    }
    if (this._unsharpMask?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.unsharpMask = this._unsharpMask?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformations | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._backgroundColor.internalValue = undefined;
      this._blur.internalValue = undefined;
      this._chromaKey.internalValue = undefined;
      this._composite.internalValue = undefined;
      this._compound.internalValue = undefined;
      this._contrast.internalValue = undefined;
      this._goop.internalValue = undefined;
      this._grayscale.internalValue = undefined;
      this._hsl.internalValue = undefined;
      this._hsv.internalValue = undefined;
      this._ifDimension.internalValue = undefined;
      this._ifOrientation.internalValue = undefined;
      this._maxColors.internalValue = undefined;
      this._mirror.internalValue = undefined;
      this._monoHue.internalValue = undefined;
      this._opacity.internalValue = undefined;
      this._removeColor.internalValue = undefined;
      this._unsharpMask.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._backgroundColor.internalValue = value.backgroundColor;
      this._blur.internalValue = value.blur;
      this._chromaKey.internalValue = value.chromaKey;
      this._composite.internalValue = value.composite;
      this._compound.internalValue = value.compound;
      this._contrast.internalValue = value.contrast;
      this._goop.internalValue = value.goop;
      this._grayscale.internalValue = value.grayscale;
      this._hsl.internalValue = value.hsl;
      this._hsv.internalValue = value.hsv;
      this._ifDimension.internalValue = value.ifDimension;
      this._ifOrientation.internalValue = value.ifOrientation;
      this._maxColors.internalValue = value.maxColors;
      this._mirror.internalValue = value.mirror;
      this._monoHue.internalValue = value.monoHue;
      this._opacity.internalValue = value.opacity;
      this._removeColor.internalValue = value.removeColor;
      this._unsharpMask.internalValue = value.unsharpMask;
    }
  }

  // background_color - computed: false, optional: true, required: false
  private _backgroundColor = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsBackgroundColorList(this, "background_color", false);
  public get backgroundColor() {
    return this._backgroundColor;
  }
  public putBackgroundColor(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsBackgroundColor[] | cdktf.IResolvable) {
    this._backgroundColor.internalValue = value;
  }
  public resetBackgroundColor() {
    this._backgroundColor.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get backgroundColorInput() {
    return this._backgroundColor.internalValue;
  }

  // blur - computed: false, optional: true, required: false
  private _blur = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsBlurList(this, "blur", false);
  public get blur() {
    return this._blur;
  }
  public putBlur(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsBlur[] | cdktf.IResolvable) {
    this._blur.internalValue = value;
  }
  public resetBlur() {
    this._blur.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get blurInput() {
    return this._blur.internalValue;
  }

  // chroma_key - computed: false, optional: true, required: false
  private _chromaKey = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsChromaKeyList(this, "chroma_key", false);
  public get chromaKey() {
    return this._chromaKey;
  }
  public putChromaKey(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsChromaKey[] | cdktf.IResolvable) {
    this._chromaKey.internalValue = value;
  }
  public resetChromaKey() {
    this._chromaKey.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get chromaKeyInput() {
    return this._chromaKey.internalValue;
  }

  // composite - computed: false, optional: true, required: false
  private _composite = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsCompositeList(this, "composite", false);
  public get composite() {
    return this._composite;
  }
  public putComposite(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsComposite[] | cdktf.IResolvable) {
    this._composite.internalValue = value;
  }
  public resetComposite() {
    this._composite.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get compositeInput() {
    return this._composite.internalValue;
  }

  // compound - computed: false, optional: true, required: false
  private _compound = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsCompoundList(this, "compound", false);
  public get compound() {
    return this._compound;
  }
  public putCompound(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsCompound[] | cdktf.IResolvable) {
    this._compound.internalValue = value;
  }
  public resetCompound() {
    this._compound.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get compoundInput() {
    return this._compound.internalValue;
  }

  // contrast - computed: false, optional: true, required: false
  private _contrast = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsContrastList(this, "contrast", false);
  public get contrast() {
    return this._contrast;
  }
  public putContrast(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsContrast[] | cdktf.IResolvable) {
    this._contrast.internalValue = value;
  }
  public resetContrast() {
    this._contrast.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get contrastInput() {
    return this._contrast.internalValue;
  }

  // goop - computed: false, optional: true, required: false
  private _goop = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsGoopList(this, "goop", false);
  public get goop() {
    return this._goop;
  }
  public putGoop(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsGoop[] | cdktf.IResolvable) {
    this._goop.internalValue = value;
  }
  public resetGoop() {
    this._goop.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get goopInput() {
    return this._goop.internalValue;
  }

  // grayscale - computed: false, optional: true, required: false
  private _grayscale = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsGrayscaleList(this, "grayscale", false);
  public get grayscale() {
    return this._grayscale;
  }
  public putGrayscale(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsGrayscale[] | cdktf.IResolvable) {
    this._grayscale.internalValue = value;
  }
  public resetGrayscale() {
    this._grayscale.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get grayscaleInput() {
    return this._grayscale.internalValue;
  }

  // hsl - computed: false, optional: true, required: false
  private _hsl = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsHslList(this, "hsl", false);
  public get hsl() {
    return this._hsl;
  }
  public putHsl(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsHsl[] | cdktf.IResolvable) {
    this._hsl.internalValue = value;
  }
  public resetHsl() {
    this._hsl.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hslInput() {
    return this._hsl.internalValue;
  }

  // hsv - computed: false, optional: true, required: false
  private _hsv = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsHsvList(this, "hsv", false);
  public get hsv() {
    return this._hsv;
  }
  public putHsv(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsHsv[] | cdktf.IResolvable) {
    this._hsv.internalValue = value;
  }
  public resetHsv() {
    this._hsv.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hsvInput() {
    return this._hsv.internalValue;
  }

  // if_dimension - computed: false, optional: true, required: false
  private _ifDimension = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsIfDimensionList(this, "if_dimension", false);
  public get ifDimension() {
    return this._ifDimension;
  }
  public putIfDimension(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsIfDimension[] | cdktf.IResolvable) {
    this._ifDimension.internalValue = value;
  }
  public resetIfDimension() {
    this._ifDimension.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get ifDimensionInput() {
    return this._ifDimension.internalValue;
  }

  // if_orientation - computed: false, optional: true, required: false
  private _ifOrientation = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsIfOrientationList(this, "if_orientation", false);
  public get ifOrientation() {
    return this._ifOrientation;
  }
  public putIfOrientation(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsIfOrientation[] | cdktf.IResolvable) {
    this._ifOrientation.internalValue = value;
  }
  public resetIfOrientation() {
    this._ifOrientation.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get ifOrientationInput() {
    return this._ifOrientation.internalValue;
  }

  // max_colors - computed: false, optional: true, required: false
  private _maxColors = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsMaxColorsList(this, "max_colors", false);
  public get maxColors() {
    return this._maxColors;
  }
  public putMaxColors(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsMaxColors[] | cdktf.IResolvable) {
    this._maxColors.internalValue = value;
  }
  public resetMaxColors() {
    this._maxColors.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get maxColorsInput() {
    return this._maxColors.internalValue;
  }

  // mirror - computed: false, optional: true, required: false
  private _mirror = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsMirrorList(this, "mirror", false);
  public get mirror() {
    return this._mirror;
  }
  public putMirror(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsMirror[] | cdktf.IResolvable) {
    this._mirror.internalValue = value;
  }
  public resetMirror() {
    this._mirror.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get mirrorInput() {
    return this._mirror.internalValue;
  }

  // mono_hue - computed: false, optional: true, required: false
  private _monoHue = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsMonoHueList(this, "mono_hue", false);
  public get monoHue() {
    return this._monoHue;
  }
  public putMonoHue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsMonoHue[] | cdktf.IResolvable) {
    this._monoHue.internalValue = value;
  }
  public resetMonoHue() {
    this._monoHue.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get monoHueInput() {
    return this._monoHue.internalValue;
  }

  // opacity - computed: false, optional: true, required: false
  private _opacity = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsOpacityList(this, "opacity", false);
  public get opacity() {
    return this._opacity;
  }
  public putOpacity(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsOpacity[] | cdktf.IResolvable) {
    this._opacity.internalValue = value;
  }
  public resetOpacity() {
    this._opacity.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get opacityInput() {
    return this._opacity.internalValue;
  }

  // remove_color - computed: false, optional: true, required: false
  private _removeColor = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsRemoveColorList(this, "remove_color", false);
  public get removeColor() {
    return this._removeColor;
  }
  public putRemoveColor(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsRemoveColor[] | cdktf.IResolvable) {
    this._removeColor.internalValue = value;
  }
  public resetRemoveColor() {
    this._removeColor.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get removeColorInput() {
    return this._removeColor.internalValue;
  }

  // unsharp_mask - computed: false, optional: true, required: false
  private _unsharpMask = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsUnsharpMaskList(this, "unsharp_mask", false);
  public get unsharpMask() {
    return this._unsharpMask;
  }
  public putUnsharpMask(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsUnsharpMask[] | cdktf.IResolvable) {
    this._unsharpMask.internalValue = value;
  }
  public resetUnsharpMask() {
    this._unsharpMask.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get unsharpMaskInput() {
    return this._unsharpMask.internalValue;
  }
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformations[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompound {
  /**
  * transformations block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#transformations DataAkamaiImagingPolicyImage#transformations}
  */
  readonly transformations?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformations[] | cdktf.IResolvable;
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompound | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    transformations: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsToTerraform, true)(struct!.transformations),
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompound | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    transformations: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsToHclTerraform, true)(struct!.transformations),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsList",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompound | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._transformations?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.transformations = this._transformations?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompound | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._transformations.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._transformations.internalValue = value.transformations;
    }
  }

  // transformations - computed: false, optional: true, required: false
  private _transformations = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformationsList(this, "transformations", false);
  public get transformations() {
    return this._transformations;
  }
  public putTransformations(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundTransformations[] | cdktf.IResolvable) {
    this._transformations.internalValue = value;
  }
  public resetTransformations() {
    this._transformations.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get transformationsInput() {
    return this._transformations.internalValue;
  }
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompound[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultCompoundOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultContrast {
  /**
  * Adjusts the brightness of the image. Positive values increase brightness and negative values decrease brightness. A value of  `1` produces a white image. A value of  `-1` produces a black image. The default value is `0`, which leaves the image unchanged. The acceptable value range is `-1.0` to `1.0`. Values outside of the acceptable range clamp to this range.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#brightness DataAkamaiImagingPolicyImage#brightness}
  */
  readonly brightness?: string;
  /**
  * Adjusts the brightness of the image. Positive values increase brightness and negative values decrease brightness. A value of  `1` produces a white image. A value of  `-1` produces a black image. The default value is `0`, which leaves the image unchanged. The acceptable value range is `-1.0` to `1.0`. Values outside of the acceptable range clamp to this range.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#brightness_var DataAkamaiImagingPolicyImage#brightness_var}
  */
  readonly brightnessVar?: string;
  /**
  * Adjusts the contrast of the image. Expressed as a range from `-1` to `1`, positive values increase contrast, negative values decrease it, while `0` leaves the image unchanged. Values outside of the `-1` to `1` range clamp to this range.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#contrast DataAkamaiImagingPolicyImage#contrast}
  */
  readonly contrast?: string;
  /**
  * Adjusts the contrast of the image. Expressed as a range from `-1` to `1`, positive values increase contrast, negative values decrease it, while `0` leaves the image unchanged. Values outside of the `-1` to `1` range clamp to this range.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#contrast_var DataAkamaiImagingPolicyImage#contrast_var}
  */
  readonly contrastVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultContrastToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultContrast | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    brightness: cdktf.stringToTerraform(struct!.brightness),
    brightness_var: cdktf.stringToTerraform(struct!.brightnessVar),
    contrast: cdktf.stringToTerraform(struct!.contrast),
    contrast_var: cdktf.stringToTerraform(struct!.contrastVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultContrastToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultContrast | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    brightness: {
      value: cdktf.stringToHclTerraform(struct!.brightness),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    brightness_var: {
      value: cdktf.stringToHclTerraform(struct!.brightnessVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    contrast: {
      value: cdktf.stringToHclTerraform(struct!.contrast),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    contrast_var: {
      value: cdktf.stringToHclTerraform(struct!.contrastVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultContrastOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultContrast | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._brightness !== undefined) {
      hasAnyValues = true;
      internalValueResult.brightness = this._brightness;
    }
    if (this._brightnessVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.brightnessVar = this._brightnessVar;
    }
    if (this._contrast !== undefined) {
      hasAnyValues = true;
      internalValueResult.contrast = this._contrast;
    }
    if (this._contrastVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.contrastVar = this._contrastVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultContrast | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._brightness = undefined;
      this._brightnessVar = undefined;
      this._contrast = undefined;
      this._contrastVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._brightness = value.brightness;
      this._brightnessVar = value.brightnessVar;
      this._contrast = value.contrast;
      this._contrastVar = value.contrastVar;
    }
  }

  // brightness - computed: false, optional: true, required: false
  private _brightness?: string; 
  public get brightness() {
    return this.getStringAttribute('brightness');
  }
  public set brightness(value: string) {
    this._brightness = value;
  }
  public resetBrightness() {
    this._brightness = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get brightnessInput() {
    return this._brightness;
  }

  // brightness_var - computed: false, optional: true, required: false
  private _brightnessVar?: string; 
  public get brightnessVar() {
    return this.getStringAttribute('brightness_var');
  }
  public set brightnessVar(value: string) {
    this._brightnessVar = value;
  }
  public resetBrightnessVar() {
    this._brightnessVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get brightnessVarInput() {
    return this._brightnessVar;
  }

  // contrast - computed: false, optional: true, required: false
  private _contrast?: string; 
  public get contrast() {
    return this.getStringAttribute('contrast');
  }
  public set contrast(value: string) {
    this._contrast = value;
  }
  public resetContrast() {
    this._contrast = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get contrastInput() {
    return this._contrast;
  }

  // contrast_var - computed: false, optional: true, required: false
  private _contrastVar?: string; 
  public get contrastVar() {
    return this.getStringAttribute('contrast_var');
  }
  public set contrastVar(value: string) {
    this._contrastVar = value;
  }
  public resetContrastVar() {
    this._contrastVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get contrastVarInput() {
    return this._contrastVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultContrastList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultContrast[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultContrastOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultContrastOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultGoop {
  /**
  * Specifies the greatest distance control points may move from their original position. A value of `1.0` shifts control points over as far as the next one in the original grid. A value of `0.0` leaves the image unchanged. Values under `0.5` work better for subtle distortions, otherwise control points may pass each other and cause a twisting effect.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#chaos DataAkamaiImagingPolicyImage#chaos}
  */
  readonly chaos?: string;
  /**
  * Specifies the greatest distance control points may move from their original position. A value of `1.0` shifts control points over as far as the next one in the original grid. A value of `0.0` leaves the image unchanged. Values under `0.5` work better for subtle distortions, otherwise control points may pass each other and cause a twisting effect.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#chaos_var DataAkamaiImagingPolicyImage#chaos_var}
  */
  readonly chaosVar?: string;
  /**
  * Controls the density of control points used to distort the image. The largest dimension of the input image is divided up to fit this number of control points. A grid of points is extended on the smaller dimension such that each row and column of control points is equidistant from each adjacent row or column. This parameter strongly affects transformation performance. Be careful choosing values above the default if you expect to transform medium to large size images.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#density DataAkamaiImagingPolicyImage#density}
  */
  readonly density?: string;
  /**
  * Controls the density of control points used to distort the image. The largest dimension of the input image is divided up to fit this number of control points. A grid of points is extended on the smaller dimension such that each row and column of control points is equidistant from each adjacent row or column. This parameter strongly affects transformation performance. Be careful choosing values above the default if you expect to transform medium to large size images.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#density_var DataAkamaiImagingPolicyImage#density_var}
  */
  readonly densityVar?: string;
  /**
  * By default, the distortion algorithm relies on inverse squares to calculate distance but this allows you to change the exponent. You shouldnt need to vary the default value of `2.0`.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#power DataAkamaiImagingPolicyImage#power}
  */
  readonly power?: string;
  /**
  * By default, the distortion algorithm relies on inverse squares to calculate distance but this allows you to change the exponent. You shouldnt need to vary the default value of `2.0`.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#power_var DataAkamaiImagingPolicyImage#power_var}
  */
  readonly powerVar?: string;
  /**
  * Specifies your own `seed` value as an alternative to the default, which is subject to variability. This allows for reproducible and deterministic distortions. If all parameters are kept equal and a constant seed is used, `Goop` distorts an input image consistently over many transformations. By default, this value is set to the current Epoch Time measured in milliseconds, which provides inconsistent transformation output.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#seed DataAkamaiImagingPolicyImage#seed}
  */
  readonly seed?: string;
  /**
  * Specifies your own `seed` value as an alternative to the default, which is subject to variability. This allows for reproducible and deterministic distortions. If all parameters are kept equal and a constant seed is used, `Goop` distorts an input image consistently over many transformations. By default, this value is set to the current Epoch Time measured in milliseconds, which provides inconsistent transformation output.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#seed_var DataAkamaiImagingPolicyImage#seed_var}
  */
  readonly seedVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultGoopToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultGoop | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    chaos: cdktf.stringToTerraform(struct!.chaos),
    chaos_var: cdktf.stringToTerraform(struct!.chaosVar),
    density: cdktf.stringToTerraform(struct!.density),
    density_var: cdktf.stringToTerraform(struct!.densityVar),
    power: cdktf.stringToTerraform(struct!.power),
    power_var: cdktf.stringToTerraform(struct!.powerVar),
    seed: cdktf.stringToTerraform(struct!.seed),
    seed_var: cdktf.stringToTerraform(struct!.seedVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultGoopToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultGoop | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    chaos: {
      value: cdktf.stringToHclTerraform(struct!.chaos),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    chaos_var: {
      value: cdktf.stringToHclTerraform(struct!.chaosVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    density: {
      value: cdktf.stringToHclTerraform(struct!.density),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    density_var: {
      value: cdktf.stringToHclTerraform(struct!.densityVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    power: {
      value: cdktf.stringToHclTerraform(struct!.power),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    power_var: {
      value: cdktf.stringToHclTerraform(struct!.powerVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    seed: {
      value: cdktf.stringToHclTerraform(struct!.seed),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    seed_var: {
      value: cdktf.stringToHclTerraform(struct!.seedVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultGoopOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultGoop | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._chaos !== undefined) {
      hasAnyValues = true;
      internalValueResult.chaos = this._chaos;
    }
    if (this._chaosVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.chaosVar = this._chaosVar;
    }
    if (this._density !== undefined) {
      hasAnyValues = true;
      internalValueResult.density = this._density;
    }
    if (this._densityVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.densityVar = this._densityVar;
    }
    if (this._power !== undefined) {
      hasAnyValues = true;
      internalValueResult.power = this._power;
    }
    if (this._powerVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.powerVar = this._powerVar;
    }
    if (this._seed !== undefined) {
      hasAnyValues = true;
      internalValueResult.seed = this._seed;
    }
    if (this._seedVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.seedVar = this._seedVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultGoop | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._chaos = undefined;
      this._chaosVar = undefined;
      this._density = undefined;
      this._densityVar = undefined;
      this._power = undefined;
      this._powerVar = undefined;
      this._seed = undefined;
      this._seedVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._chaos = value.chaos;
      this._chaosVar = value.chaosVar;
      this._density = value.density;
      this._densityVar = value.densityVar;
      this._power = value.power;
      this._powerVar = value.powerVar;
      this._seed = value.seed;
      this._seedVar = value.seedVar;
    }
  }

  // chaos - computed: false, optional: true, required: false
  private _chaos?: string; 
  public get chaos() {
    return this.getStringAttribute('chaos');
  }
  public set chaos(value: string) {
    this._chaos = value;
  }
  public resetChaos() {
    this._chaos = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get chaosInput() {
    return this._chaos;
  }

  // chaos_var - computed: false, optional: true, required: false
  private _chaosVar?: string; 
  public get chaosVar() {
    return this.getStringAttribute('chaos_var');
  }
  public set chaosVar(value: string) {
    this._chaosVar = value;
  }
  public resetChaosVar() {
    this._chaosVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get chaosVarInput() {
    return this._chaosVar;
  }

  // density - computed: false, optional: true, required: false
  private _density?: string; 
  public get density() {
    return this.getStringAttribute('density');
  }
  public set density(value: string) {
    this._density = value;
  }
  public resetDensity() {
    this._density = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get densityInput() {
    return this._density;
  }

  // density_var - computed: false, optional: true, required: false
  private _densityVar?: string; 
  public get densityVar() {
    return this.getStringAttribute('density_var');
  }
  public set densityVar(value: string) {
    this._densityVar = value;
  }
  public resetDensityVar() {
    this._densityVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get densityVarInput() {
    return this._densityVar;
  }

  // power - computed: false, optional: true, required: false
  private _power?: string; 
  public get power() {
    return this.getStringAttribute('power');
  }
  public set power(value: string) {
    this._power = value;
  }
  public resetPower() {
    this._power = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get powerInput() {
    return this._power;
  }

  // power_var - computed: false, optional: true, required: false
  private _powerVar?: string; 
  public get powerVar() {
    return this.getStringAttribute('power_var');
  }
  public set powerVar(value: string) {
    this._powerVar = value;
  }
  public resetPowerVar() {
    this._powerVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get powerVarInput() {
    return this._powerVar;
  }

  // seed - computed: false, optional: true, required: false
  private _seed?: string; 
  public get seed() {
    return this.getStringAttribute('seed');
  }
  public set seed(value: string) {
    this._seed = value;
  }
  public resetSeed() {
    this._seed = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get seedInput() {
    return this._seed;
  }

  // seed_var - computed: false, optional: true, required: false
  private _seedVar?: string; 
  public get seedVar() {
    return this.getStringAttribute('seed_var');
  }
  public set seedVar(value: string) {
    this._seedVar = value;
  }
  public resetSeedVar() {
    this._seedVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get seedVarInput() {
    return this._seedVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultGoopList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultGoop[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultGoopOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultGoopOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultGrayscale {
  /**
  * The algorithm used to transform colors to grays, either `Brightness`, `Lightness`, `Rec601`, or the default `Rec709`.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#type DataAkamaiImagingPolicyImage#type}
  */
  readonly type?: string;
  /**
  * The algorithm used to transform colors to grays, either `Brightness`, `Lightness`, `Rec601`, or the default `Rec709`.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#type_var DataAkamaiImagingPolicyImage#type_var}
  */
  readonly typeVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultGrayscaleToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultGrayscale | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    type: cdktf.stringToTerraform(struct!.type),
    type_var: cdktf.stringToTerraform(struct!.typeVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultGrayscaleToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultGrayscale | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    type: {
      value: cdktf.stringToHclTerraform(struct!.type),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    type_var: {
      value: cdktf.stringToHclTerraform(struct!.typeVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultGrayscaleOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultGrayscale | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._type !== undefined) {
      hasAnyValues = true;
      internalValueResult.type = this._type;
    }
    if (this._typeVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.typeVar = this._typeVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultGrayscale | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._type = undefined;
      this._typeVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._type = value.type;
      this._typeVar = value.typeVar;
    }
  }

  // type - computed: false, optional: true, required: false
  private _type?: string; 
  public get type() {
    return this.getStringAttribute('type');
  }
  public set type(value: string) {
    this._type = value;
  }
  public resetType() {
    this._type = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get typeInput() {
    return this._type;
  }

  // type_var - computed: false, optional: true, required: false
  private _typeVar?: string; 
  public get typeVar() {
    return this.getStringAttribute('type_var');
  }
  public set typeVar(value: string) {
    this._typeVar = value;
  }
  public resetTypeVar() {
    this._typeVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get typeVarInput() {
    return this._typeVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultGrayscaleList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultGrayscale[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultGrayscaleOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultGrayscaleOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultHsl {
  /**
  * The number of degrees to rotate colors around the color wheel, `0` by default.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hue DataAkamaiImagingPolicyImage#hue}
  */
  readonly hue?: string;
  /**
  * The number of degrees to rotate colors around the color wheel, `0` by default.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hue_var DataAkamaiImagingPolicyImage#hue_var}
  */
  readonly hueVar?: string;
  /**
  * A multiplier to adjust the lightness of colors in the image. Note that lightness is distinct from brightness. For example, reducing the lightness of a light green might give you a lime green whereas reducing the brightness of a light green might give you a darker shade of the same green. Values less than `1.0` decrease the lightness of colors in the image. Values greater than `1.0` increase the lightness of colors in the image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#lightness DataAkamaiImagingPolicyImage#lightness}
  */
  readonly lightness?: string;
  /**
  * A multiplier to adjust the lightness of colors in the image. Note that lightness is distinct from brightness. For example, reducing the lightness of a light green might give you a lime green whereas reducing the brightness of a light green might give you a darker shade of the same green. Values less than `1.0` decrease the lightness of colors in the image. Values greater than `1.0` increase the lightness of colors in the image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#lightness_var DataAkamaiImagingPolicyImage#lightness_var}
  */
  readonly lightnessVar?: string;
  /**
  * A multiplier to adjust the saturation of colors in the image. Values less than `1.0` decrease saturation and values greater than `1.0` increase the saturation. A value of `0.0` removes all color from the image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#saturation DataAkamaiImagingPolicyImage#saturation}
  */
  readonly saturation?: string;
  /**
  * A multiplier to adjust the saturation of colors in the image. Values less than `1.0` decrease saturation and values greater than `1.0` increase the saturation. A value of `0.0` removes all color from the image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#saturation_var DataAkamaiImagingPolicyImage#saturation_var}
  */
  readonly saturationVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultHslToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultHsl | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    hue: cdktf.stringToTerraform(struct!.hue),
    hue_var: cdktf.stringToTerraform(struct!.hueVar),
    lightness: cdktf.stringToTerraform(struct!.lightness),
    lightness_var: cdktf.stringToTerraform(struct!.lightnessVar),
    saturation: cdktf.stringToTerraform(struct!.saturation),
    saturation_var: cdktf.stringToTerraform(struct!.saturationVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultHslToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultHsl | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    hue: {
      value: cdktf.stringToHclTerraform(struct!.hue),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    hue_var: {
      value: cdktf.stringToHclTerraform(struct!.hueVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    lightness: {
      value: cdktf.stringToHclTerraform(struct!.lightness),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    lightness_var: {
      value: cdktf.stringToHclTerraform(struct!.lightnessVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    saturation: {
      value: cdktf.stringToHclTerraform(struct!.saturation),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    saturation_var: {
      value: cdktf.stringToHclTerraform(struct!.saturationVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultHslOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultHsl | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._hue !== undefined) {
      hasAnyValues = true;
      internalValueResult.hue = this._hue;
    }
    if (this._hueVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.hueVar = this._hueVar;
    }
    if (this._lightness !== undefined) {
      hasAnyValues = true;
      internalValueResult.lightness = this._lightness;
    }
    if (this._lightnessVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.lightnessVar = this._lightnessVar;
    }
    if (this._saturation !== undefined) {
      hasAnyValues = true;
      internalValueResult.saturation = this._saturation;
    }
    if (this._saturationVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.saturationVar = this._saturationVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultHsl | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._hue = undefined;
      this._hueVar = undefined;
      this._lightness = undefined;
      this._lightnessVar = undefined;
      this._saturation = undefined;
      this._saturationVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._hue = value.hue;
      this._hueVar = value.hueVar;
      this._lightness = value.lightness;
      this._lightnessVar = value.lightnessVar;
      this._saturation = value.saturation;
      this._saturationVar = value.saturationVar;
    }
  }

  // hue - computed: false, optional: true, required: false
  private _hue?: string; 
  public get hue() {
    return this.getStringAttribute('hue');
  }
  public set hue(value: string) {
    this._hue = value;
  }
  public resetHue() {
    this._hue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hueInput() {
    return this._hue;
  }

  // hue_var - computed: false, optional: true, required: false
  private _hueVar?: string; 
  public get hueVar() {
    return this.getStringAttribute('hue_var');
  }
  public set hueVar(value: string) {
    this._hueVar = value;
  }
  public resetHueVar() {
    this._hueVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hueVarInput() {
    return this._hueVar;
  }

  // lightness - computed: false, optional: true, required: false
  private _lightness?: string; 
  public get lightness() {
    return this.getStringAttribute('lightness');
  }
  public set lightness(value: string) {
    this._lightness = value;
  }
  public resetLightness() {
    this._lightness = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get lightnessInput() {
    return this._lightness;
  }

  // lightness_var - computed: false, optional: true, required: false
  private _lightnessVar?: string; 
  public get lightnessVar() {
    return this.getStringAttribute('lightness_var');
  }
  public set lightnessVar(value: string) {
    this._lightnessVar = value;
  }
  public resetLightnessVar() {
    this._lightnessVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get lightnessVarInput() {
    return this._lightnessVar;
  }

  // saturation - computed: false, optional: true, required: false
  private _saturation?: string; 
  public get saturation() {
    return this.getStringAttribute('saturation');
  }
  public set saturation(value: string) {
    this._saturation = value;
  }
  public resetSaturation() {
    this._saturation = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get saturationInput() {
    return this._saturation;
  }

  // saturation_var - computed: false, optional: true, required: false
  private _saturationVar?: string; 
  public get saturationVar() {
    return this.getStringAttribute('saturation_var');
  }
  public set saturationVar(value: string) {
    this._saturationVar = value;
  }
  public resetSaturationVar() {
    this._saturationVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get saturationVarInput() {
    return this._saturationVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultHslList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultHsl[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultHslOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultHslOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultHsv {
  /**
  * The number of degrees to rotate colors around the color wheel, `0.0` by default.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hue DataAkamaiImagingPolicyImage#hue}
  */
  readonly hue?: string;
  /**
  * The number of degrees to rotate colors around the color wheel, `0.0` by default.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hue_var DataAkamaiImagingPolicyImage#hue_var}
  */
  readonly hueVar?: string;
  /**
  * A multiplier to adjust the saturation of colors in the image. Values less than `1.0` decrease saturation and values greater than `1.0` increase the saturation. A value of `0.0` removes all color from the image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#saturation DataAkamaiImagingPolicyImage#saturation}
  */
  readonly saturation?: string;
  /**
  * A multiplier to adjust the saturation of colors in the image. Values less than `1.0` decrease saturation and values greater than `1.0` increase the saturation. A value of `0.0` removes all color from the image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#saturation_var DataAkamaiImagingPolicyImage#saturation_var}
  */
  readonly saturationVar?: string;
  /**
  * A multiplier to adjust the lightness or darkness of the images base color. Values less than 1.0 decrease the base colors in the image, making them appear darker. Values greater than 1.0 increase the base colors in the image, making them appear lighter.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#value DataAkamaiImagingPolicyImage#value}
  */
  readonly value?: string;
  /**
  * A multiplier to adjust the lightness or darkness of the images base color. Values less than 1.0 decrease the base colors in the image, making them appear darker. Values greater than 1.0 increase the base colors in the image, making them appear lighter.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#value_var DataAkamaiImagingPolicyImage#value_var}
  */
  readonly valueVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultHsvToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultHsv | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    hue: cdktf.stringToTerraform(struct!.hue),
    hue_var: cdktf.stringToTerraform(struct!.hueVar),
    saturation: cdktf.stringToTerraform(struct!.saturation),
    saturation_var: cdktf.stringToTerraform(struct!.saturationVar),
    value: cdktf.stringToTerraform(struct!.value),
    value_var: cdktf.stringToTerraform(struct!.valueVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultHsvToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultHsv | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    hue: {
      value: cdktf.stringToHclTerraform(struct!.hue),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    hue_var: {
      value: cdktf.stringToHclTerraform(struct!.hueVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    saturation: {
      value: cdktf.stringToHclTerraform(struct!.saturation),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    saturation_var: {
      value: cdktf.stringToHclTerraform(struct!.saturationVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    value: {
      value: cdktf.stringToHclTerraform(struct!.value),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    value_var: {
      value: cdktf.stringToHclTerraform(struct!.valueVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultHsvOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultHsv | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._hue !== undefined) {
      hasAnyValues = true;
      internalValueResult.hue = this._hue;
    }
    if (this._hueVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.hueVar = this._hueVar;
    }
    if (this._saturation !== undefined) {
      hasAnyValues = true;
      internalValueResult.saturation = this._saturation;
    }
    if (this._saturationVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.saturationVar = this._saturationVar;
    }
    if (this._value !== undefined) {
      hasAnyValues = true;
      internalValueResult.value = this._value;
    }
    if (this._valueVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.valueVar = this._valueVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultHsv | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._hue = undefined;
      this._hueVar = undefined;
      this._saturation = undefined;
      this._saturationVar = undefined;
      this._value = undefined;
      this._valueVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._hue = value.hue;
      this._hueVar = value.hueVar;
      this._saturation = value.saturation;
      this._saturationVar = value.saturationVar;
      this._value = value.value;
      this._valueVar = value.valueVar;
    }
  }

  // hue - computed: false, optional: true, required: false
  private _hue?: string; 
  public get hue() {
    return this.getStringAttribute('hue');
  }
  public set hue(value: string) {
    this._hue = value;
  }
  public resetHue() {
    this._hue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hueInput() {
    return this._hue;
  }

  // hue_var - computed: false, optional: true, required: false
  private _hueVar?: string; 
  public get hueVar() {
    return this.getStringAttribute('hue_var');
  }
  public set hueVar(value: string) {
    this._hueVar = value;
  }
  public resetHueVar() {
    this._hueVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hueVarInput() {
    return this._hueVar;
  }

  // saturation - computed: false, optional: true, required: false
  private _saturation?: string; 
  public get saturation() {
    return this.getStringAttribute('saturation');
  }
  public set saturation(value: string) {
    this._saturation = value;
  }
  public resetSaturation() {
    this._saturation = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get saturationInput() {
    return this._saturation;
  }

  // saturation_var - computed: false, optional: true, required: false
  private _saturationVar?: string; 
  public get saturationVar() {
    return this.getStringAttribute('saturation_var');
  }
  public set saturationVar(value: string) {
    this._saturationVar = value;
  }
  public resetSaturationVar() {
    this._saturationVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get saturationVarInput() {
    return this._saturationVar;
  }

  // value - computed: false, optional: true, required: false
  private _value?: string; 
  public get value() {
    return this.getStringAttribute('value');
  }
  public set value(value: string) {
    this._value = value;
  }
  public resetValue() {
    this._value = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get valueInput() {
    return this._value;
  }

  // value_var - computed: false, optional: true, required: false
  private _valueVar?: string; 
  public get valueVar() {
    return this.getStringAttribute('value_var');
  }
  public set valueVar(value: string) {
    this._valueVar = value;
  }
  public resetValueVar() {
    this._valueVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get valueVarInput() {
    return this._valueVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultHsvList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultHsv[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultHsvOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultHsvOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualBackgroundColor {
  /**
  * The hexadecimal CSS color value for the background.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#color DataAkamaiImagingPolicyImage#color}
  */
  readonly color?: string;
  /**
  * The hexadecimal CSS color value for the background.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#color_var DataAkamaiImagingPolicyImage#color_var}
  */
  readonly colorVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualBackgroundColorToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualBackgroundColor | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    color: cdktf.stringToTerraform(struct!.color),
    color_var: cdktf.stringToTerraform(struct!.colorVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualBackgroundColorToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualBackgroundColor | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    color: {
      value: cdktf.stringToHclTerraform(struct!.color),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    color_var: {
      value: cdktf.stringToHclTerraform(struct!.colorVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualBackgroundColorOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualBackgroundColor | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._color !== undefined) {
      hasAnyValues = true;
      internalValueResult.color = this._color;
    }
    if (this._colorVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.colorVar = this._colorVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualBackgroundColor | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._color = undefined;
      this._colorVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._color = value.color;
      this._colorVar = value.colorVar;
    }
  }

  // color - computed: false, optional: true, required: false
  private _color?: string; 
  public get color() {
    return this.getStringAttribute('color');
  }
  public set color(value: string) {
    this._color = value;
  }
  public resetColor() {
    this._color = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get colorInput() {
    return this._color;
  }

  // color_var - computed: false, optional: true, required: false
  private _colorVar?: string; 
  public get colorVar() {
    return this.getStringAttribute('color_var');
  }
  public set colorVar(value: string) {
    this._colorVar = value;
  }
  public resetColorVar() {
    this._colorVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get colorVarInput() {
    return this._colorVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualBackgroundColorList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualBackgroundColor[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualBackgroundColorOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualBackgroundColorOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualBlur {
  /**
  * The number of pixels to scatter the original pixel by to create the blur effect. Resulting images may be larger than the original as pixels at the edge of the image might scatter outside the image's original dimensions.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#sigma DataAkamaiImagingPolicyImage#sigma}
  */
  readonly sigma?: string;
  /**
  * The number of pixels to scatter the original pixel by to create the blur effect. Resulting images may be larger than the original as pixels at the edge of the image might scatter outside the image's original dimensions.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#sigma_var DataAkamaiImagingPolicyImage#sigma_var}
  */
  readonly sigmaVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualBlurToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualBlur | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    sigma: cdktf.stringToTerraform(struct!.sigma),
    sigma_var: cdktf.stringToTerraform(struct!.sigmaVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualBlurToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualBlur | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    sigma: {
      value: cdktf.stringToHclTerraform(struct!.sigma),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    sigma_var: {
      value: cdktf.stringToHclTerraform(struct!.sigmaVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualBlurOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualBlur | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._sigma !== undefined) {
      hasAnyValues = true;
      internalValueResult.sigma = this._sigma;
    }
    if (this._sigmaVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.sigmaVar = this._sigmaVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualBlur | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._sigma = undefined;
      this._sigmaVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._sigma = value.sigma;
      this._sigmaVar = value.sigmaVar;
    }
  }

  // sigma - computed: false, optional: true, required: false
  private _sigma?: string; 
  public get sigma() {
    return this.getStringAttribute('sigma');
  }
  public set sigma(value: string) {
    this._sigma = value;
  }
  public resetSigma() {
    this._sigma = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get sigmaInput() {
    return this._sigma;
  }

  // sigma_var - computed: false, optional: true, required: false
  private _sigmaVar?: string; 
  public get sigmaVar() {
    return this.getStringAttribute('sigma_var');
  }
  public set sigmaVar(value: string) {
    this._sigmaVar = value;
  }
  public resetSigmaVar() {
    this._sigmaVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get sigmaVarInput() {
    return this._sigmaVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualBlurList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualBlur[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualBlurOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualBlurOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualChromaKey {
  /**
  * The hue to remove. Enter the degree of rotation between 0 and 360 degrees around the color wheel. By default Chroma Key removes a green hue, 120° on the color wheel.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hue DataAkamaiImagingPolicyImage#hue}
  */
  readonly hue?: string;
  /**
  * How much additional hue to make semi-transparent beyond the Hue Tolerance. By default Hue Feather is 0.083 which applies semi-transparency to hues 30° around the Hue Tolerance.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hue_feather DataAkamaiImagingPolicyImage#hue_feather}
  */
  readonly hueFeather?: string;
  /**
  * How much additional hue to make semi-transparent beyond the Hue Tolerance. By default Hue Feather is 0.083 which applies semi-transparency to hues 30° around the Hue Tolerance.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hue_feather_var DataAkamaiImagingPolicyImage#hue_feather_var}
  */
  readonly hueFeatherVar?: string;
  /**
  * How close a color's hue needs to be to the selected hue for it to be changed to fully transparent. If you enter the maximum value of 1.0 the entire image is made transparent. By default Hue Tolerance is approximately 0.083 or 8.3% of the color wheel. This value corresponds to 30° around the specified hue.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hue_tolerance DataAkamaiImagingPolicyImage#hue_tolerance}
  */
  readonly hueTolerance?: string;
  /**
  * How close a color's hue needs to be to the selected hue for it to be changed to fully transparent. If you enter the maximum value of 1.0 the entire image is made transparent. By default Hue Tolerance is approximately 0.083 or 8.3% of the color wheel. This value corresponds to 30° around the specified hue.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hue_tolerance_var DataAkamaiImagingPolicyImage#hue_tolerance_var}
  */
  readonly hueToleranceVar?: string;
  /**
  * The hue to remove. Enter the degree of rotation between 0 and 360 degrees around the color wheel. By default Chroma Key removes a green hue, 120° on the color wheel.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hue_var DataAkamaiImagingPolicyImage#hue_var}
  */
  readonly hueVar?: string;
  /**
  * How much additional lightness to make semi-transparent beyond the Lightness Tolerance. The default value of 0.1 corresponds to 10% away from the tolerated lightness towards full black or full white.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#lightness_feather DataAkamaiImagingPolicyImage#lightness_feather}
  */
  readonly lightnessFeather?: string;
  /**
  * How much additional lightness to make semi-transparent beyond the Lightness Tolerance. The default value of 0.1 corresponds to 10% away from the tolerated lightness towards full black or full white.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#lightness_feather_var DataAkamaiImagingPolicyImage#lightness_feather_var}
  */
  readonly lightnessFeatherVar?: string;
  /**
  * How much of the lightest part and darkest part of a color to preserve. For example, you can space this value out from the middle (i.e. 0.5 lightness or full color) to help preserve the splash lighting impact in the image. You can define how close the color needs to be to the full color to remove it from your image. The default value of 0.75 means that a colour must be within 75% of the full color to full white or full black for full removal.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#lightness_tolerance DataAkamaiImagingPolicyImage#lightness_tolerance}
  */
  readonly lightnessTolerance?: string;
  /**
  * How much of the lightest part and darkest part of a color to preserve. For example, you can space this value out from the middle (i.e. 0.5 lightness or full color) to help preserve the splash lighting impact in the image. You can define how close the color needs to be to the full color to remove it from your image. The default value of 0.75 means that a colour must be within 75% of the full color to full white or full black for full removal.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#lightness_tolerance_var DataAkamaiImagingPolicyImage#lightness_tolerance_var}
  */
  readonly lightnessToleranceVar?: string;
  /**
  * How much additional saturation to make semi-transparent beyond the Saturation Tolerance. By default Saturation Feather is 0.1 which applies semi-transparency to hues 10% below the saturationTolerance.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#saturation_feather DataAkamaiImagingPolicyImage#saturation_feather}
  */
  readonly saturationFeather?: string;
  /**
  * How much additional saturation to make semi-transparent beyond the Saturation Tolerance. By default Saturation Feather is 0.1 which applies semi-transparency to hues 10% below the saturationTolerance.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#saturation_feather_var DataAkamaiImagingPolicyImage#saturation_feather_var}
  */
  readonly saturationFeatherVar?: string;
  /**
  * How close a color's saturation needs to be to full saturation for it to be changed to fully transparent. For example, you can define how green the color needs to be to remove it from your image. The default value of 0.75 means that a color must be within 75% of full saturation in order to be made fully transparent.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#saturation_tolerance DataAkamaiImagingPolicyImage#saturation_tolerance}
  */
  readonly saturationTolerance?: string;
  /**
  * How close a color's saturation needs to be to full saturation for it to be changed to fully transparent. For example, you can define how green the color needs to be to remove it from your image. The default value of 0.75 means that a color must be within 75% of full saturation in order to be made fully transparent.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#saturation_tolerance_var DataAkamaiImagingPolicyImage#saturation_tolerance_var}
  */
  readonly saturationToleranceVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualChromaKeyToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualChromaKey | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    hue: cdktf.stringToTerraform(struct!.hue),
    hue_feather: cdktf.stringToTerraform(struct!.hueFeather),
    hue_feather_var: cdktf.stringToTerraform(struct!.hueFeatherVar),
    hue_tolerance: cdktf.stringToTerraform(struct!.hueTolerance),
    hue_tolerance_var: cdktf.stringToTerraform(struct!.hueToleranceVar),
    hue_var: cdktf.stringToTerraform(struct!.hueVar),
    lightness_feather: cdktf.stringToTerraform(struct!.lightnessFeather),
    lightness_feather_var: cdktf.stringToTerraform(struct!.lightnessFeatherVar),
    lightness_tolerance: cdktf.stringToTerraform(struct!.lightnessTolerance),
    lightness_tolerance_var: cdktf.stringToTerraform(struct!.lightnessToleranceVar),
    saturation_feather: cdktf.stringToTerraform(struct!.saturationFeather),
    saturation_feather_var: cdktf.stringToTerraform(struct!.saturationFeatherVar),
    saturation_tolerance: cdktf.stringToTerraform(struct!.saturationTolerance),
    saturation_tolerance_var: cdktf.stringToTerraform(struct!.saturationToleranceVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualChromaKeyToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualChromaKey | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    hue: {
      value: cdktf.stringToHclTerraform(struct!.hue),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    hue_feather: {
      value: cdktf.stringToHclTerraform(struct!.hueFeather),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    hue_feather_var: {
      value: cdktf.stringToHclTerraform(struct!.hueFeatherVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    hue_tolerance: {
      value: cdktf.stringToHclTerraform(struct!.hueTolerance),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    hue_tolerance_var: {
      value: cdktf.stringToHclTerraform(struct!.hueToleranceVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    hue_var: {
      value: cdktf.stringToHclTerraform(struct!.hueVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    lightness_feather: {
      value: cdktf.stringToHclTerraform(struct!.lightnessFeather),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    lightness_feather_var: {
      value: cdktf.stringToHclTerraform(struct!.lightnessFeatherVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    lightness_tolerance: {
      value: cdktf.stringToHclTerraform(struct!.lightnessTolerance),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    lightness_tolerance_var: {
      value: cdktf.stringToHclTerraform(struct!.lightnessToleranceVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    saturation_feather: {
      value: cdktf.stringToHclTerraform(struct!.saturationFeather),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    saturation_feather_var: {
      value: cdktf.stringToHclTerraform(struct!.saturationFeatherVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    saturation_tolerance: {
      value: cdktf.stringToHclTerraform(struct!.saturationTolerance),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    saturation_tolerance_var: {
      value: cdktf.stringToHclTerraform(struct!.saturationToleranceVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualChromaKeyOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualChromaKey | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._hue !== undefined) {
      hasAnyValues = true;
      internalValueResult.hue = this._hue;
    }
    if (this._hueFeather !== undefined) {
      hasAnyValues = true;
      internalValueResult.hueFeather = this._hueFeather;
    }
    if (this._hueFeatherVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.hueFeatherVar = this._hueFeatherVar;
    }
    if (this._hueTolerance !== undefined) {
      hasAnyValues = true;
      internalValueResult.hueTolerance = this._hueTolerance;
    }
    if (this._hueToleranceVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.hueToleranceVar = this._hueToleranceVar;
    }
    if (this._hueVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.hueVar = this._hueVar;
    }
    if (this._lightnessFeather !== undefined) {
      hasAnyValues = true;
      internalValueResult.lightnessFeather = this._lightnessFeather;
    }
    if (this._lightnessFeatherVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.lightnessFeatherVar = this._lightnessFeatherVar;
    }
    if (this._lightnessTolerance !== undefined) {
      hasAnyValues = true;
      internalValueResult.lightnessTolerance = this._lightnessTolerance;
    }
    if (this._lightnessToleranceVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.lightnessToleranceVar = this._lightnessToleranceVar;
    }
    if (this._saturationFeather !== undefined) {
      hasAnyValues = true;
      internalValueResult.saturationFeather = this._saturationFeather;
    }
    if (this._saturationFeatherVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.saturationFeatherVar = this._saturationFeatherVar;
    }
    if (this._saturationTolerance !== undefined) {
      hasAnyValues = true;
      internalValueResult.saturationTolerance = this._saturationTolerance;
    }
    if (this._saturationToleranceVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.saturationToleranceVar = this._saturationToleranceVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualChromaKey | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._hue = undefined;
      this._hueFeather = undefined;
      this._hueFeatherVar = undefined;
      this._hueTolerance = undefined;
      this._hueToleranceVar = undefined;
      this._hueVar = undefined;
      this._lightnessFeather = undefined;
      this._lightnessFeatherVar = undefined;
      this._lightnessTolerance = undefined;
      this._lightnessToleranceVar = undefined;
      this._saturationFeather = undefined;
      this._saturationFeatherVar = undefined;
      this._saturationTolerance = undefined;
      this._saturationToleranceVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._hue = value.hue;
      this._hueFeather = value.hueFeather;
      this._hueFeatherVar = value.hueFeatherVar;
      this._hueTolerance = value.hueTolerance;
      this._hueToleranceVar = value.hueToleranceVar;
      this._hueVar = value.hueVar;
      this._lightnessFeather = value.lightnessFeather;
      this._lightnessFeatherVar = value.lightnessFeatherVar;
      this._lightnessTolerance = value.lightnessTolerance;
      this._lightnessToleranceVar = value.lightnessToleranceVar;
      this._saturationFeather = value.saturationFeather;
      this._saturationFeatherVar = value.saturationFeatherVar;
      this._saturationTolerance = value.saturationTolerance;
      this._saturationToleranceVar = value.saturationToleranceVar;
    }
  }

  // hue - computed: false, optional: true, required: false
  private _hue?: string; 
  public get hue() {
    return this.getStringAttribute('hue');
  }
  public set hue(value: string) {
    this._hue = value;
  }
  public resetHue() {
    this._hue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hueInput() {
    return this._hue;
  }

  // hue_feather - computed: false, optional: true, required: false
  private _hueFeather?: string; 
  public get hueFeather() {
    return this.getStringAttribute('hue_feather');
  }
  public set hueFeather(value: string) {
    this._hueFeather = value;
  }
  public resetHueFeather() {
    this._hueFeather = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hueFeatherInput() {
    return this._hueFeather;
  }

  // hue_feather_var - computed: false, optional: true, required: false
  private _hueFeatherVar?: string; 
  public get hueFeatherVar() {
    return this.getStringAttribute('hue_feather_var');
  }
  public set hueFeatherVar(value: string) {
    this._hueFeatherVar = value;
  }
  public resetHueFeatherVar() {
    this._hueFeatherVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hueFeatherVarInput() {
    return this._hueFeatherVar;
  }

  // hue_tolerance - computed: false, optional: true, required: false
  private _hueTolerance?: string; 
  public get hueTolerance() {
    return this.getStringAttribute('hue_tolerance');
  }
  public set hueTolerance(value: string) {
    this._hueTolerance = value;
  }
  public resetHueTolerance() {
    this._hueTolerance = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hueToleranceInput() {
    return this._hueTolerance;
  }

  // hue_tolerance_var - computed: false, optional: true, required: false
  private _hueToleranceVar?: string; 
  public get hueToleranceVar() {
    return this.getStringAttribute('hue_tolerance_var');
  }
  public set hueToleranceVar(value: string) {
    this._hueToleranceVar = value;
  }
  public resetHueToleranceVar() {
    this._hueToleranceVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hueToleranceVarInput() {
    return this._hueToleranceVar;
  }

  // hue_var - computed: false, optional: true, required: false
  private _hueVar?: string; 
  public get hueVar() {
    return this.getStringAttribute('hue_var');
  }
  public set hueVar(value: string) {
    this._hueVar = value;
  }
  public resetHueVar() {
    this._hueVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hueVarInput() {
    return this._hueVar;
  }

  // lightness_feather - computed: false, optional: true, required: false
  private _lightnessFeather?: string; 
  public get lightnessFeather() {
    return this.getStringAttribute('lightness_feather');
  }
  public set lightnessFeather(value: string) {
    this._lightnessFeather = value;
  }
  public resetLightnessFeather() {
    this._lightnessFeather = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get lightnessFeatherInput() {
    return this._lightnessFeather;
  }

  // lightness_feather_var - computed: false, optional: true, required: false
  private _lightnessFeatherVar?: string; 
  public get lightnessFeatherVar() {
    return this.getStringAttribute('lightness_feather_var');
  }
  public set lightnessFeatherVar(value: string) {
    this._lightnessFeatherVar = value;
  }
  public resetLightnessFeatherVar() {
    this._lightnessFeatherVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get lightnessFeatherVarInput() {
    return this._lightnessFeatherVar;
  }

  // lightness_tolerance - computed: false, optional: true, required: false
  private _lightnessTolerance?: string; 
  public get lightnessTolerance() {
    return this.getStringAttribute('lightness_tolerance');
  }
  public set lightnessTolerance(value: string) {
    this._lightnessTolerance = value;
  }
  public resetLightnessTolerance() {
    this._lightnessTolerance = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get lightnessToleranceInput() {
    return this._lightnessTolerance;
  }

  // lightness_tolerance_var - computed: false, optional: true, required: false
  private _lightnessToleranceVar?: string; 
  public get lightnessToleranceVar() {
    return this.getStringAttribute('lightness_tolerance_var');
  }
  public set lightnessToleranceVar(value: string) {
    this._lightnessToleranceVar = value;
  }
  public resetLightnessToleranceVar() {
    this._lightnessToleranceVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get lightnessToleranceVarInput() {
    return this._lightnessToleranceVar;
  }

  // saturation_feather - computed: false, optional: true, required: false
  private _saturationFeather?: string; 
  public get saturationFeather() {
    return this.getStringAttribute('saturation_feather');
  }
  public set saturationFeather(value: string) {
    this._saturationFeather = value;
  }
  public resetSaturationFeather() {
    this._saturationFeather = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get saturationFeatherInput() {
    return this._saturationFeather;
  }

  // saturation_feather_var - computed: false, optional: true, required: false
  private _saturationFeatherVar?: string; 
  public get saturationFeatherVar() {
    return this.getStringAttribute('saturation_feather_var');
  }
  public set saturationFeatherVar(value: string) {
    this._saturationFeatherVar = value;
  }
  public resetSaturationFeatherVar() {
    this._saturationFeatherVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get saturationFeatherVarInput() {
    return this._saturationFeatherVar;
  }

  // saturation_tolerance - computed: false, optional: true, required: false
  private _saturationTolerance?: string; 
  public get saturationTolerance() {
    return this.getStringAttribute('saturation_tolerance');
  }
  public set saturationTolerance(value: string) {
    this._saturationTolerance = value;
  }
  public resetSaturationTolerance() {
    this._saturationTolerance = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get saturationToleranceInput() {
    return this._saturationTolerance;
  }

  // saturation_tolerance_var - computed: false, optional: true, required: false
  private _saturationToleranceVar?: string; 
  public get saturationToleranceVar() {
    return this.getStringAttribute('saturation_tolerance_var');
  }
  public set saturationToleranceVar(value: string) {
    this._saturationToleranceVar = value;
  }
  public resetSaturationToleranceVar() {
    this._saturationToleranceVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get saturationToleranceVarInput() {
    return this._saturationToleranceVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualChromaKeyList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualChromaKey[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualChromaKeyOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualChromaKeyOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualCompositeImage {
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualCompositeImageToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualCompositeImageOutputReference | DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualCompositeImage): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualCompositeImageToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualCompositeImageOutputReference | DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualCompositeImage): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
  };
  return attrs;
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualCompositeImageOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false, 0);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualCompositeImage | undefined {
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualCompositeImage | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
    }
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualComposite {
  /**
  * Compass direction indicating the corner or edge of the base image to place the applied image. Use Horizontal and Vertical Offset to adjust the applied image's gravity position
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#gravity DataAkamaiImagingPolicyImage#gravity}
  */
  readonly gravity?: string;
  /**
  * Compass direction indicating the corner or edge of the base image to place the applied image. Use Horizontal and Vertical Offset to adjust the applied image's gravity position
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#gravity_var DataAkamaiImagingPolicyImage#gravity_var}
  */
  readonly gravityVar?: string;
  /**
  * Place applied image on top of or underneath the base image. Watermarks are usually applied over. Backgrounds are usually applied under.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#placement DataAkamaiImagingPolicyImage#placement}
  */
  readonly placement?: string;
  /**
  * Place applied image on top of or underneath the base image. Watermarks are usually applied over. Backgrounds are usually applied under.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#placement_var DataAkamaiImagingPolicyImage#placement_var}
  */
  readonly placementVar?: string;
  /**
  * A multiplier to resize the applied image relative to the source image and preserve aspect ratio, 1 by default. Set the `scaleDimension` to calculate the `scale` from the source image's width or height.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#scale DataAkamaiImagingPolicyImage#scale}
  */
  readonly scale?: string;
  /**
  * The dimension, either `width` or `height`, of the source image to scale.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#scale_dimension DataAkamaiImagingPolicyImage#scale_dimension}
  */
  readonly scaleDimension?: string;
  /**
  * The dimension, either `width` or `height`, of the source image to scale.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#scale_dimension_var DataAkamaiImagingPolicyImage#scale_dimension_var}
  */
  readonly scaleDimensionVar?: string;
  /**
  * A multiplier to resize the applied image relative to the source image and preserve aspect ratio, 1 by default. Set the `scaleDimension` to calculate the `scale` from the source image's width or height.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#scale_var DataAkamaiImagingPolicyImage#scale_var}
  */
  readonly scaleVar?: string;
  /**
  * The x-axis position of the image to apply.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#x_position DataAkamaiImagingPolicyImage#x_position}
  */
  readonly xPosition?: string;
  /**
  * The x-axis position of the image to apply.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#x_position_var DataAkamaiImagingPolicyImage#x_position_var}
  */
  readonly xPositionVar?: string;
  /**
  * The y-axis position of the image to apply.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#y_position DataAkamaiImagingPolicyImage#y_position}
  */
  readonly yPosition?: string;
  /**
  * The y-axis position of the image to apply.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#y_position_var DataAkamaiImagingPolicyImage#y_position_var}
  */
  readonly yPositionVar?: string;
  /**
  * image block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#image DataAkamaiImagingPolicyImage#image}
  */
  readonly image: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualCompositeImage;
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualCompositeToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualComposite | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    gravity: cdktf.stringToTerraform(struct!.gravity),
    gravity_var: cdktf.stringToTerraform(struct!.gravityVar),
    placement: cdktf.stringToTerraform(struct!.placement),
    placement_var: cdktf.stringToTerraform(struct!.placementVar),
    scale: cdktf.stringToTerraform(struct!.scale),
    scale_dimension: cdktf.stringToTerraform(struct!.scaleDimension),
    scale_dimension_var: cdktf.stringToTerraform(struct!.scaleDimensionVar),
    scale_var: cdktf.stringToTerraform(struct!.scaleVar),
    x_position: cdktf.stringToTerraform(struct!.xPosition),
    x_position_var: cdktf.stringToTerraform(struct!.xPositionVar),
    y_position: cdktf.stringToTerraform(struct!.yPosition),
    y_position_var: cdktf.stringToTerraform(struct!.yPositionVar),
    image: dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualCompositeImageToTerraform(struct!.image),
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualCompositeToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualComposite | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    gravity: {
      value: cdktf.stringToHclTerraform(struct!.gravity),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    gravity_var: {
      value: cdktf.stringToHclTerraform(struct!.gravityVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    placement: {
      value: cdktf.stringToHclTerraform(struct!.placement),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    placement_var: {
      value: cdktf.stringToHclTerraform(struct!.placementVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    scale: {
      value: cdktf.stringToHclTerraform(struct!.scale),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    scale_dimension: {
      value: cdktf.stringToHclTerraform(struct!.scaleDimension),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    scale_dimension_var: {
      value: cdktf.stringToHclTerraform(struct!.scaleDimensionVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    scale_var: {
      value: cdktf.stringToHclTerraform(struct!.scaleVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    x_position: {
      value: cdktf.stringToHclTerraform(struct!.xPosition),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    x_position_var: {
      value: cdktf.stringToHclTerraform(struct!.xPositionVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    y_position: {
      value: cdktf.stringToHclTerraform(struct!.yPosition),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    y_position_var: {
      value: cdktf.stringToHclTerraform(struct!.yPositionVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    image: {
      value: dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualCompositeImageToHclTerraform(struct!.image),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualCompositeImageList",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualCompositeOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualComposite | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._gravity !== undefined) {
      hasAnyValues = true;
      internalValueResult.gravity = this._gravity;
    }
    if (this._gravityVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.gravityVar = this._gravityVar;
    }
    if (this._placement !== undefined) {
      hasAnyValues = true;
      internalValueResult.placement = this._placement;
    }
    if (this._placementVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.placementVar = this._placementVar;
    }
    if (this._scale !== undefined) {
      hasAnyValues = true;
      internalValueResult.scale = this._scale;
    }
    if (this._scaleDimension !== undefined) {
      hasAnyValues = true;
      internalValueResult.scaleDimension = this._scaleDimension;
    }
    if (this._scaleDimensionVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.scaleDimensionVar = this._scaleDimensionVar;
    }
    if (this._scaleVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.scaleVar = this._scaleVar;
    }
    if (this._xPosition !== undefined) {
      hasAnyValues = true;
      internalValueResult.xPosition = this._xPosition;
    }
    if (this._xPositionVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.xPositionVar = this._xPositionVar;
    }
    if (this._yPosition !== undefined) {
      hasAnyValues = true;
      internalValueResult.yPosition = this._yPosition;
    }
    if (this._yPositionVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.yPositionVar = this._yPositionVar;
    }
    if (this._image?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.image = this._image?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualComposite | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._gravity = undefined;
      this._gravityVar = undefined;
      this._placement = undefined;
      this._placementVar = undefined;
      this._scale = undefined;
      this._scaleDimension = undefined;
      this._scaleDimensionVar = undefined;
      this._scaleVar = undefined;
      this._xPosition = undefined;
      this._xPositionVar = undefined;
      this._yPosition = undefined;
      this._yPositionVar = undefined;
      this._image.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._gravity = value.gravity;
      this._gravityVar = value.gravityVar;
      this._placement = value.placement;
      this._placementVar = value.placementVar;
      this._scale = value.scale;
      this._scaleDimension = value.scaleDimension;
      this._scaleDimensionVar = value.scaleDimensionVar;
      this._scaleVar = value.scaleVar;
      this._xPosition = value.xPosition;
      this._xPositionVar = value.xPositionVar;
      this._yPosition = value.yPosition;
      this._yPositionVar = value.yPositionVar;
      this._image.internalValue = value.image;
    }
  }

  // gravity - computed: false, optional: true, required: false
  private _gravity?: string; 
  public get gravity() {
    return this.getStringAttribute('gravity');
  }
  public set gravity(value: string) {
    this._gravity = value;
  }
  public resetGravity() {
    this._gravity = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get gravityInput() {
    return this._gravity;
  }

  // gravity_var - computed: false, optional: true, required: false
  private _gravityVar?: string; 
  public get gravityVar() {
    return this.getStringAttribute('gravity_var');
  }
  public set gravityVar(value: string) {
    this._gravityVar = value;
  }
  public resetGravityVar() {
    this._gravityVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get gravityVarInput() {
    return this._gravityVar;
  }

  // placement - computed: false, optional: true, required: false
  private _placement?: string; 
  public get placement() {
    return this.getStringAttribute('placement');
  }
  public set placement(value: string) {
    this._placement = value;
  }
  public resetPlacement() {
    this._placement = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get placementInput() {
    return this._placement;
  }

  // placement_var - computed: false, optional: true, required: false
  private _placementVar?: string; 
  public get placementVar() {
    return this.getStringAttribute('placement_var');
  }
  public set placementVar(value: string) {
    this._placementVar = value;
  }
  public resetPlacementVar() {
    this._placementVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get placementVarInput() {
    return this._placementVar;
  }

  // scale - computed: false, optional: true, required: false
  private _scale?: string; 
  public get scale() {
    return this.getStringAttribute('scale');
  }
  public set scale(value: string) {
    this._scale = value;
  }
  public resetScale() {
    this._scale = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get scaleInput() {
    return this._scale;
  }

  // scale_dimension - computed: false, optional: true, required: false
  private _scaleDimension?: string; 
  public get scaleDimension() {
    return this.getStringAttribute('scale_dimension');
  }
  public set scaleDimension(value: string) {
    this._scaleDimension = value;
  }
  public resetScaleDimension() {
    this._scaleDimension = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get scaleDimensionInput() {
    return this._scaleDimension;
  }

  // scale_dimension_var - computed: false, optional: true, required: false
  private _scaleDimensionVar?: string; 
  public get scaleDimensionVar() {
    return this.getStringAttribute('scale_dimension_var');
  }
  public set scaleDimensionVar(value: string) {
    this._scaleDimensionVar = value;
  }
  public resetScaleDimensionVar() {
    this._scaleDimensionVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get scaleDimensionVarInput() {
    return this._scaleDimensionVar;
  }

  // scale_var - computed: false, optional: true, required: false
  private _scaleVar?: string; 
  public get scaleVar() {
    return this.getStringAttribute('scale_var');
  }
  public set scaleVar(value: string) {
    this._scaleVar = value;
  }
  public resetScaleVar() {
    this._scaleVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get scaleVarInput() {
    return this._scaleVar;
  }

  // x_position - computed: false, optional: true, required: false
  private _xPosition?: string; 
  public get xPosition() {
    return this.getStringAttribute('x_position');
  }
  public set xPosition(value: string) {
    this._xPosition = value;
  }
  public resetXPosition() {
    this._xPosition = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get xPositionInput() {
    return this._xPosition;
  }

  // x_position_var - computed: false, optional: true, required: false
  private _xPositionVar?: string; 
  public get xPositionVar() {
    return this.getStringAttribute('x_position_var');
  }
  public set xPositionVar(value: string) {
    this._xPositionVar = value;
  }
  public resetXPositionVar() {
    this._xPositionVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get xPositionVarInput() {
    return this._xPositionVar;
  }

  // y_position - computed: false, optional: true, required: false
  private _yPosition?: string; 
  public get yPosition() {
    return this.getStringAttribute('y_position');
  }
  public set yPosition(value: string) {
    this._yPosition = value;
  }
  public resetYPosition() {
    this._yPosition = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get yPositionInput() {
    return this._yPosition;
  }

  // y_position_var - computed: false, optional: true, required: false
  private _yPositionVar?: string; 
  public get yPositionVar() {
    return this.getStringAttribute('y_position_var');
  }
  public set yPositionVar(value: string) {
    this._yPositionVar = value;
  }
  public resetYPositionVar() {
    this._yPositionVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get yPositionVarInput() {
    return this._yPositionVar;
  }

  // image - computed: false, optional: false, required: true
  private _image = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualCompositeImageOutputReference(this, "image");
  public get image() {
    return this._image;
  }
  public putImage(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualCompositeImage) {
    this._image.internalValue = value;
  }
  // Temporarily expose input value. Use with caution.
  public get imageInput() {
    return this._image.internalValue;
  }
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualCompositeList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualComposite[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualCompositeOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualCompositeOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualCompoundTransformations {
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualCompoundTransformationsToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualCompoundTransformations | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualCompoundTransformationsToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualCompoundTransformations | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
  };
  return attrs;
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualCompoundTransformationsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualCompoundTransformations | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualCompoundTransformations | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
    }
  }
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualCompoundTransformationsList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualCompoundTransformations[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualCompoundTransformationsOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualCompoundTransformationsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualCompound {
  /**
  * transformations block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#transformations DataAkamaiImagingPolicyImage#transformations}
  */
  readonly transformations?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualCompoundTransformations[] | cdktf.IResolvable;
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualCompoundToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualCompound | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    transformations: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualCompoundTransformationsToTerraform, true)(struct!.transformations),
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualCompoundToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualCompound | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    transformations: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualCompoundTransformationsToHclTerraform, true)(struct!.transformations),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualCompoundTransformationsList",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualCompoundOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualCompound | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._transformations?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.transformations = this._transformations?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualCompound | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._transformations.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._transformations.internalValue = value.transformations;
    }
  }

  // transformations - computed: false, optional: true, required: false
  private _transformations = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualCompoundTransformationsList(this, "transformations", false);
  public get transformations() {
    return this._transformations;
  }
  public putTransformations(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualCompoundTransformations[] | cdktf.IResolvable) {
    this._transformations.internalValue = value;
  }
  public resetTransformations() {
    this._transformations.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get transformationsInput() {
    return this._transformations.internalValue;
  }
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualCompoundList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualCompound[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualCompoundOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualCompoundOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualContrast {
  /**
  * Adjusts the brightness of the image. Positive values increase brightness and negative values decrease brightness. A value of  `1` produces a white image. A value of  `-1` produces a black image. The default value is `0`, which leaves the image unchanged. The acceptable value range is `-1.0` to `1.0`. Values outside of the acceptable range clamp to this range.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#brightness DataAkamaiImagingPolicyImage#brightness}
  */
  readonly brightness?: string;
  /**
  * Adjusts the brightness of the image. Positive values increase brightness and negative values decrease brightness. A value of  `1` produces a white image. A value of  `-1` produces a black image. The default value is `0`, which leaves the image unchanged. The acceptable value range is `-1.0` to `1.0`. Values outside of the acceptable range clamp to this range.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#brightness_var DataAkamaiImagingPolicyImage#brightness_var}
  */
  readonly brightnessVar?: string;
  /**
  * Adjusts the contrast of the image. Expressed as a range from `-1` to `1`, positive values increase contrast, negative values decrease it, while `0` leaves the image unchanged. Values outside of the `-1` to `1` range clamp to this range.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#contrast DataAkamaiImagingPolicyImage#contrast}
  */
  readonly contrast?: string;
  /**
  * Adjusts the contrast of the image. Expressed as a range from `-1` to `1`, positive values increase contrast, negative values decrease it, while `0` leaves the image unchanged. Values outside of the `-1` to `1` range clamp to this range.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#contrast_var DataAkamaiImagingPolicyImage#contrast_var}
  */
  readonly contrastVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualContrastToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualContrast | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    brightness: cdktf.stringToTerraform(struct!.brightness),
    brightness_var: cdktf.stringToTerraform(struct!.brightnessVar),
    contrast: cdktf.stringToTerraform(struct!.contrast),
    contrast_var: cdktf.stringToTerraform(struct!.contrastVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualContrastToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualContrast | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    brightness: {
      value: cdktf.stringToHclTerraform(struct!.brightness),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    brightness_var: {
      value: cdktf.stringToHclTerraform(struct!.brightnessVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    contrast: {
      value: cdktf.stringToHclTerraform(struct!.contrast),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    contrast_var: {
      value: cdktf.stringToHclTerraform(struct!.contrastVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualContrastOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualContrast | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._brightness !== undefined) {
      hasAnyValues = true;
      internalValueResult.brightness = this._brightness;
    }
    if (this._brightnessVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.brightnessVar = this._brightnessVar;
    }
    if (this._contrast !== undefined) {
      hasAnyValues = true;
      internalValueResult.contrast = this._contrast;
    }
    if (this._contrastVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.contrastVar = this._contrastVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualContrast | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._brightness = undefined;
      this._brightnessVar = undefined;
      this._contrast = undefined;
      this._contrastVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._brightness = value.brightness;
      this._brightnessVar = value.brightnessVar;
      this._contrast = value.contrast;
      this._contrastVar = value.contrastVar;
    }
  }

  // brightness - computed: false, optional: true, required: false
  private _brightness?: string; 
  public get brightness() {
    return this.getStringAttribute('brightness');
  }
  public set brightness(value: string) {
    this._brightness = value;
  }
  public resetBrightness() {
    this._brightness = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get brightnessInput() {
    return this._brightness;
  }

  // brightness_var - computed: false, optional: true, required: false
  private _brightnessVar?: string; 
  public get brightnessVar() {
    return this.getStringAttribute('brightness_var');
  }
  public set brightnessVar(value: string) {
    this._brightnessVar = value;
  }
  public resetBrightnessVar() {
    this._brightnessVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get brightnessVarInput() {
    return this._brightnessVar;
  }

  // contrast - computed: false, optional: true, required: false
  private _contrast?: string; 
  public get contrast() {
    return this.getStringAttribute('contrast');
  }
  public set contrast(value: string) {
    this._contrast = value;
  }
  public resetContrast() {
    this._contrast = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get contrastInput() {
    return this._contrast;
  }

  // contrast_var - computed: false, optional: true, required: false
  private _contrastVar?: string; 
  public get contrastVar() {
    return this.getStringAttribute('contrast_var');
  }
  public set contrastVar(value: string) {
    this._contrastVar = value;
  }
  public resetContrastVar() {
    this._contrastVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get contrastVarInput() {
    return this._contrastVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualContrastList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualContrast[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualContrastOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualContrastOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualGoop {
  /**
  * Specifies the greatest distance control points may move from their original position. A value of `1.0` shifts control points over as far as the next one in the original grid. A value of `0.0` leaves the image unchanged. Values under `0.5` work better for subtle distortions, otherwise control points may pass each other and cause a twisting effect.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#chaos DataAkamaiImagingPolicyImage#chaos}
  */
  readonly chaos?: string;
  /**
  * Specifies the greatest distance control points may move from their original position. A value of `1.0` shifts control points over as far as the next one in the original grid. A value of `0.0` leaves the image unchanged. Values under `0.5` work better for subtle distortions, otherwise control points may pass each other and cause a twisting effect.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#chaos_var DataAkamaiImagingPolicyImage#chaos_var}
  */
  readonly chaosVar?: string;
  /**
  * Controls the density of control points used to distort the image. The largest dimension of the input image is divided up to fit this number of control points. A grid of points is extended on the smaller dimension such that each row and column of control points is equidistant from each adjacent row or column. This parameter strongly affects transformation performance. Be careful choosing values above the default if you expect to transform medium to large size images.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#density DataAkamaiImagingPolicyImage#density}
  */
  readonly density?: string;
  /**
  * Controls the density of control points used to distort the image. The largest dimension of the input image is divided up to fit this number of control points. A grid of points is extended on the smaller dimension such that each row and column of control points is equidistant from each adjacent row or column. This parameter strongly affects transformation performance. Be careful choosing values above the default if you expect to transform medium to large size images.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#density_var DataAkamaiImagingPolicyImage#density_var}
  */
  readonly densityVar?: string;
  /**
  * By default, the distortion algorithm relies on inverse squares to calculate distance but this allows you to change the exponent. You shouldnt need to vary the default value of `2.0`.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#power DataAkamaiImagingPolicyImage#power}
  */
  readonly power?: string;
  /**
  * By default, the distortion algorithm relies on inverse squares to calculate distance but this allows you to change the exponent. You shouldnt need to vary the default value of `2.0`.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#power_var DataAkamaiImagingPolicyImage#power_var}
  */
  readonly powerVar?: string;
  /**
  * Specifies your own `seed` value as an alternative to the default, which is subject to variability. This allows for reproducible and deterministic distortions. If all parameters are kept equal and a constant seed is used, `Goop` distorts an input image consistently over many transformations. By default, this value is set to the current Epoch Time measured in milliseconds, which provides inconsistent transformation output.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#seed DataAkamaiImagingPolicyImage#seed}
  */
  readonly seed?: string;
  /**
  * Specifies your own `seed` value as an alternative to the default, which is subject to variability. This allows for reproducible and deterministic distortions. If all parameters are kept equal and a constant seed is used, `Goop` distorts an input image consistently over many transformations. By default, this value is set to the current Epoch Time measured in milliseconds, which provides inconsistent transformation output.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#seed_var DataAkamaiImagingPolicyImage#seed_var}
  */
  readonly seedVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualGoopToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualGoop | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    chaos: cdktf.stringToTerraform(struct!.chaos),
    chaos_var: cdktf.stringToTerraform(struct!.chaosVar),
    density: cdktf.stringToTerraform(struct!.density),
    density_var: cdktf.stringToTerraform(struct!.densityVar),
    power: cdktf.stringToTerraform(struct!.power),
    power_var: cdktf.stringToTerraform(struct!.powerVar),
    seed: cdktf.stringToTerraform(struct!.seed),
    seed_var: cdktf.stringToTerraform(struct!.seedVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualGoopToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualGoop | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    chaos: {
      value: cdktf.stringToHclTerraform(struct!.chaos),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    chaos_var: {
      value: cdktf.stringToHclTerraform(struct!.chaosVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    density: {
      value: cdktf.stringToHclTerraform(struct!.density),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    density_var: {
      value: cdktf.stringToHclTerraform(struct!.densityVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    power: {
      value: cdktf.stringToHclTerraform(struct!.power),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    power_var: {
      value: cdktf.stringToHclTerraform(struct!.powerVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    seed: {
      value: cdktf.stringToHclTerraform(struct!.seed),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    seed_var: {
      value: cdktf.stringToHclTerraform(struct!.seedVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualGoopOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualGoop | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._chaos !== undefined) {
      hasAnyValues = true;
      internalValueResult.chaos = this._chaos;
    }
    if (this._chaosVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.chaosVar = this._chaosVar;
    }
    if (this._density !== undefined) {
      hasAnyValues = true;
      internalValueResult.density = this._density;
    }
    if (this._densityVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.densityVar = this._densityVar;
    }
    if (this._power !== undefined) {
      hasAnyValues = true;
      internalValueResult.power = this._power;
    }
    if (this._powerVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.powerVar = this._powerVar;
    }
    if (this._seed !== undefined) {
      hasAnyValues = true;
      internalValueResult.seed = this._seed;
    }
    if (this._seedVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.seedVar = this._seedVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualGoop | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._chaos = undefined;
      this._chaosVar = undefined;
      this._density = undefined;
      this._densityVar = undefined;
      this._power = undefined;
      this._powerVar = undefined;
      this._seed = undefined;
      this._seedVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._chaos = value.chaos;
      this._chaosVar = value.chaosVar;
      this._density = value.density;
      this._densityVar = value.densityVar;
      this._power = value.power;
      this._powerVar = value.powerVar;
      this._seed = value.seed;
      this._seedVar = value.seedVar;
    }
  }

  // chaos - computed: false, optional: true, required: false
  private _chaos?: string; 
  public get chaos() {
    return this.getStringAttribute('chaos');
  }
  public set chaos(value: string) {
    this._chaos = value;
  }
  public resetChaos() {
    this._chaos = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get chaosInput() {
    return this._chaos;
  }

  // chaos_var - computed: false, optional: true, required: false
  private _chaosVar?: string; 
  public get chaosVar() {
    return this.getStringAttribute('chaos_var');
  }
  public set chaosVar(value: string) {
    this._chaosVar = value;
  }
  public resetChaosVar() {
    this._chaosVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get chaosVarInput() {
    return this._chaosVar;
  }

  // density - computed: false, optional: true, required: false
  private _density?: string; 
  public get density() {
    return this.getStringAttribute('density');
  }
  public set density(value: string) {
    this._density = value;
  }
  public resetDensity() {
    this._density = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get densityInput() {
    return this._density;
  }

  // density_var - computed: false, optional: true, required: false
  private _densityVar?: string; 
  public get densityVar() {
    return this.getStringAttribute('density_var');
  }
  public set densityVar(value: string) {
    this._densityVar = value;
  }
  public resetDensityVar() {
    this._densityVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get densityVarInput() {
    return this._densityVar;
  }

  // power - computed: false, optional: true, required: false
  private _power?: string; 
  public get power() {
    return this.getStringAttribute('power');
  }
  public set power(value: string) {
    this._power = value;
  }
  public resetPower() {
    this._power = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get powerInput() {
    return this._power;
  }

  // power_var - computed: false, optional: true, required: false
  private _powerVar?: string; 
  public get powerVar() {
    return this.getStringAttribute('power_var');
  }
  public set powerVar(value: string) {
    this._powerVar = value;
  }
  public resetPowerVar() {
    this._powerVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get powerVarInput() {
    return this._powerVar;
  }

  // seed - computed: false, optional: true, required: false
  private _seed?: string; 
  public get seed() {
    return this.getStringAttribute('seed');
  }
  public set seed(value: string) {
    this._seed = value;
  }
  public resetSeed() {
    this._seed = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get seedInput() {
    return this._seed;
  }

  // seed_var - computed: false, optional: true, required: false
  private _seedVar?: string; 
  public get seedVar() {
    return this.getStringAttribute('seed_var');
  }
  public set seedVar(value: string) {
    this._seedVar = value;
  }
  public resetSeedVar() {
    this._seedVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get seedVarInput() {
    return this._seedVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualGoopList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualGoop[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualGoopOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualGoopOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualGrayscale {
  /**
  * The algorithm used to transform colors to grays, either `Brightness`, `Lightness`, `Rec601`, or the default `Rec709`.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#type DataAkamaiImagingPolicyImage#type}
  */
  readonly type?: string;
  /**
  * The algorithm used to transform colors to grays, either `Brightness`, `Lightness`, `Rec601`, or the default `Rec709`.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#type_var DataAkamaiImagingPolicyImage#type_var}
  */
  readonly typeVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualGrayscaleToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualGrayscale | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    type: cdktf.stringToTerraform(struct!.type),
    type_var: cdktf.stringToTerraform(struct!.typeVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualGrayscaleToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualGrayscale | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    type: {
      value: cdktf.stringToHclTerraform(struct!.type),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    type_var: {
      value: cdktf.stringToHclTerraform(struct!.typeVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualGrayscaleOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualGrayscale | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._type !== undefined) {
      hasAnyValues = true;
      internalValueResult.type = this._type;
    }
    if (this._typeVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.typeVar = this._typeVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualGrayscale | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._type = undefined;
      this._typeVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._type = value.type;
      this._typeVar = value.typeVar;
    }
  }

  // type - computed: false, optional: true, required: false
  private _type?: string; 
  public get type() {
    return this.getStringAttribute('type');
  }
  public set type(value: string) {
    this._type = value;
  }
  public resetType() {
    this._type = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get typeInput() {
    return this._type;
  }

  // type_var - computed: false, optional: true, required: false
  private _typeVar?: string; 
  public get typeVar() {
    return this.getStringAttribute('type_var');
  }
  public set typeVar(value: string) {
    this._typeVar = value;
  }
  public resetTypeVar() {
    this._typeVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get typeVarInput() {
    return this._typeVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualGrayscaleList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualGrayscale[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualGrayscaleOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualGrayscaleOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualHsl {
  /**
  * The number of degrees to rotate colors around the color wheel, `0` by default.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hue DataAkamaiImagingPolicyImage#hue}
  */
  readonly hue?: string;
  /**
  * The number of degrees to rotate colors around the color wheel, `0` by default.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hue_var DataAkamaiImagingPolicyImage#hue_var}
  */
  readonly hueVar?: string;
  /**
  * A multiplier to adjust the lightness of colors in the image. Note that lightness is distinct from brightness. For example, reducing the lightness of a light green might give you a lime green whereas reducing the brightness of a light green might give you a darker shade of the same green. Values less than `1.0` decrease the lightness of colors in the image. Values greater than `1.0` increase the lightness of colors in the image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#lightness DataAkamaiImagingPolicyImage#lightness}
  */
  readonly lightness?: string;
  /**
  * A multiplier to adjust the lightness of colors in the image. Note that lightness is distinct from brightness. For example, reducing the lightness of a light green might give you a lime green whereas reducing the brightness of a light green might give you a darker shade of the same green. Values less than `1.0` decrease the lightness of colors in the image. Values greater than `1.0` increase the lightness of colors in the image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#lightness_var DataAkamaiImagingPolicyImage#lightness_var}
  */
  readonly lightnessVar?: string;
  /**
  * A multiplier to adjust the saturation of colors in the image. Values less than `1.0` decrease saturation and values greater than `1.0` increase the saturation. A value of `0.0` removes all color from the image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#saturation DataAkamaiImagingPolicyImage#saturation}
  */
  readonly saturation?: string;
  /**
  * A multiplier to adjust the saturation of colors in the image. Values less than `1.0` decrease saturation and values greater than `1.0` increase the saturation. A value of `0.0` removes all color from the image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#saturation_var DataAkamaiImagingPolicyImage#saturation_var}
  */
  readonly saturationVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualHslToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualHsl | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    hue: cdktf.stringToTerraform(struct!.hue),
    hue_var: cdktf.stringToTerraform(struct!.hueVar),
    lightness: cdktf.stringToTerraform(struct!.lightness),
    lightness_var: cdktf.stringToTerraform(struct!.lightnessVar),
    saturation: cdktf.stringToTerraform(struct!.saturation),
    saturation_var: cdktf.stringToTerraform(struct!.saturationVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualHslToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualHsl | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    hue: {
      value: cdktf.stringToHclTerraform(struct!.hue),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    hue_var: {
      value: cdktf.stringToHclTerraform(struct!.hueVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    lightness: {
      value: cdktf.stringToHclTerraform(struct!.lightness),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    lightness_var: {
      value: cdktf.stringToHclTerraform(struct!.lightnessVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    saturation: {
      value: cdktf.stringToHclTerraform(struct!.saturation),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    saturation_var: {
      value: cdktf.stringToHclTerraform(struct!.saturationVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualHslOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualHsl | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._hue !== undefined) {
      hasAnyValues = true;
      internalValueResult.hue = this._hue;
    }
    if (this._hueVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.hueVar = this._hueVar;
    }
    if (this._lightness !== undefined) {
      hasAnyValues = true;
      internalValueResult.lightness = this._lightness;
    }
    if (this._lightnessVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.lightnessVar = this._lightnessVar;
    }
    if (this._saturation !== undefined) {
      hasAnyValues = true;
      internalValueResult.saturation = this._saturation;
    }
    if (this._saturationVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.saturationVar = this._saturationVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualHsl | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._hue = undefined;
      this._hueVar = undefined;
      this._lightness = undefined;
      this._lightnessVar = undefined;
      this._saturation = undefined;
      this._saturationVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._hue = value.hue;
      this._hueVar = value.hueVar;
      this._lightness = value.lightness;
      this._lightnessVar = value.lightnessVar;
      this._saturation = value.saturation;
      this._saturationVar = value.saturationVar;
    }
  }

  // hue - computed: false, optional: true, required: false
  private _hue?: string; 
  public get hue() {
    return this.getStringAttribute('hue');
  }
  public set hue(value: string) {
    this._hue = value;
  }
  public resetHue() {
    this._hue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hueInput() {
    return this._hue;
  }

  // hue_var - computed: false, optional: true, required: false
  private _hueVar?: string; 
  public get hueVar() {
    return this.getStringAttribute('hue_var');
  }
  public set hueVar(value: string) {
    this._hueVar = value;
  }
  public resetHueVar() {
    this._hueVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hueVarInput() {
    return this._hueVar;
  }

  // lightness - computed: false, optional: true, required: false
  private _lightness?: string; 
  public get lightness() {
    return this.getStringAttribute('lightness');
  }
  public set lightness(value: string) {
    this._lightness = value;
  }
  public resetLightness() {
    this._lightness = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get lightnessInput() {
    return this._lightness;
  }

  // lightness_var - computed: false, optional: true, required: false
  private _lightnessVar?: string; 
  public get lightnessVar() {
    return this.getStringAttribute('lightness_var');
  }
  public set lightnessVar(value: string) {
    this._lightnessVar = value;
  }
  public resetLightnessVar() {
    this._lightnessVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get lightnessVarInput() {
    return this._lightnessVar;
  }

  // saturation - computed: false, optional: true, required: false
  private _saturation?: string; 
  public get saturation() {
    return this.getStringAttribute('saturation');
  }
  public set saturation(value: string) {
    this._saturation = value;
  }
  public resetSaturation() {
    this._saturation = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get saturationInput() {
    return this._saturation;
  }

  // saturation_var - computed: false, optional: true, required: false
  private _saturationVar?: string; 
  public get saturationVar() {
    return this.getStringAttribute('saturation_var');
  }
  public set saturationVar(value: string) {
    this._saturationVar = value;
  }
  public resetSaturationVar() {
    this._saturationVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get saturationVarInput() {
    return this._saturationVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualHslList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualHsl[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualHslOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualHslOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualHsv {
  /**
  * The number of degrees to rotate colors around the color wheel, `0.0` by default.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hue DataAkamaiImagingPolicyImage#hue}
  */
  readonly hue?: string;
  /**
  * The number of degrees to rotate colors around the color wheel, `0.0` by default.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hue_var DataAkamaiImagingPolicyImage#hue_var}
  */
  readonly hueVar?: string;
  /**
  * A multiplier to adjust the saturation of colors in the image. Values less than `1.0` decrease saturation and values greater than `1.0` increase the saturation. A value of `0.0` removes all color from the image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#saturation DataAkamaiImagingPolicyImage#saturation}
  */
  readonly saturation?: string;
  /**
  * A multiplier to adjust the saturation of colors in the image. Values less than `1.0` decrease saturation and values greater than `1.0` increase the saturation. A value of `0.0` removes all color from the image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#saturation_var DataAkamaiImagingPolicyImage#saturation_var}
  */
  readonly saturationVar?: string;
  /**
  * A multiplier to adjust the lightness or darkness of the images base color. Values less than 1.0 decrease the base colors in the image, making them appear darker. Values greater than 1.0 increase the base colors in the image, making them appear lighter.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#value DataAkamaiImagingPolicyImage#value}
  */
  readonly value?: string;
  /**
  * A multiplier to adjust the lightness or darkness of the images base color. Values less than 1.0 decrease the base colors in the image, making them appear darker. Values greater than 1.0 increase the base colors in the image, making them appear lighter.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#value_var DataAkamaiImagingPolicyImage#value_var}
  */
  readonly valueVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualHsvToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualHsv | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    hue: cdktf.stringToTerraform(struct!.hue),
    hue_var: cdktf.stringToTerraform(struct!.hueVar),
    saturation: cdktf.stringToTerraform(struct!.saturation),
    saturation_var: cdktf.stringToTerraform(struct!.saturationVar),
    value: cdktf.stringToTerraform(struct!.value),
    value_var: cdktf.stringToTerraform(struct!.valueVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualHsvToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualHsv | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    hue: {
      value: cdktf.stringToHclTerraform(struct!.hue),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    hue_var: {
      value: cdktf.stringToHclTerraform(struct!.hueVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    saturation: {
      value: cdktf.stringToHclTerraform(struct!.saturation),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    saturation_var: {
      value: cdktf.stringToHclTerraform(struct!.saturationVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    value: {
      value: cdktf.stringToHclTerraform(struct!.value),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    value_var: {
      value: cdktf.stringToHclTerraform(struct!.valueVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualHsvOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualHsv | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._hue !== undefined) {
      hasAnyValues = true;
      internalValueResult.hue = this._hue;
    }
    if (this._hueVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.hueVar = this._hueVar;
    }
    if (this._saturation !== undefined) {
      hasAnyValues = true;
      internalValueResult.saturation = this._saturation;
    }
    if (this._saturationVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.saturationVar = this._saturationVar;
    }
    if (this._value !== undefined) {
      hasAnyValues = true;
      internalValueResult.value = this._value;
    }
    if (this._valueVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.valueVar = this._valueVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualHsv | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._hue = undefined;
      this._hueVar = undefined;
      this._saturation = undefined;
      this._saturationVar = undefined;
      this._value = undefined;
      this._valueVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._hue = value.hue;
      this._hueVar = value.hueVar;
      this._saturation = value.saturation;
      this._saturationVar = value.saturationVar;
      this._value = value.value;
      this._valueVar = value.valueVar;
    }
  }

  // hue - computed: false, optional: true, required: false
  private _hue?: string; 
  public get hue() {
    return this.getStringAttribute('hue');
  }
  public set hue(value: string) {
    this._hue = value;
  }
  public resetHue() {
    this._hue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hueInput() {
    return this._hue;
  }

  // hue_var - computed: false, optional: true, required: false
  private _hueVar?: string; 
  public get hueVar() {
    return this.getStringAttribute('hue_var');
  }
  public set hueVar(value: string) {
    this._hueVar = value;
  }
  public resetHueVar() {
    this._hueVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hueVarInput() {
    return this._hueVar;
  }

  // saturation - computed: false, optional: true, required: false
  private _saturation?: string; 
  public get saturation() {
    return this.getStringAttribute('saturation');
  }
  public set saturation(value: string) {
    this._saturation = value;
  }
  public resetSaturation() {
    this._saturation = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get saturationInput() {
    return this._saturation;
  }

  // saturation_var - computed: false, optional: true, required: false
  private _saturationVar?: string; 
  public get saturationVar() {
    return this.getStringAttribute('saturation_var');
  }
  public set saturationVar(value: string) {
    this._saturationVar = value;
  }
  public resetSaturationVar() {
    this._saturationVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get saturationVarInput() {
    return this._saturationVar;
  }

  // value - computed: false, optional: true, required: false
  private _value?: string; 
  public get value() {
    return this.getStringAttribute('value');
  }
  public set value(value: string) {
    this._value = value;
  }
  public resetValue() {
    this._value = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get valueInput() {
    return this._value;
  }

  // value_var - computed: false, optional: true, required: false
  private _valueVar?: string; 
  public get valueVar() {
    return this.getStringAttribute('value_var');
  }
  public set valueVar(value: string) {
    this._valueVar = value;
  }
  public resetValueVar() {
    this._valueVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get valueVarInput() {
    return this._valueVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualHsvList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualHsv[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualHsvOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualHsvOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfDimensionDefault {
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfDimensionDefaultToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfDimensionDefaultOutputReference | DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfDimensionDefault): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfDimensionDefaultToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfDimensionDefaultOutputReference | DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfDimensionDefault): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
  };
  return attrs;
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfDimensionDefaultOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false, 0);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfDimensionDefault | undefined {
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfDimensionDefault | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
    }
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfDimensionEqual {
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfDimensionEqualToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfDimensionEqualOutputReference | DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfDimensionEqual): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfDimensionEqualToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfDimensionEqualOutputReference | DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfDimensionEqual): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
  };
  return attrs;
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfDimensionEqualOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false, 0);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfDimensionEqual | undefined {
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfDimensionEqual | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
    }
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfDimensionGreaterThan {
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfDimensionGreaterThanToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfDimensionGreaterThanOutputReference | DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfDimensionGreaterThan): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfDimensionGreaterThanToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfDimensionGreaterThanOutputReference | DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfDimensionGreaterThan): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
  };
  return attrs;
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfDimensionGreaterThanOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false, 0);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfDimensionGreaterThan | undefined {
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfDimensionGreaterThan | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
    }
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfDimensionLessThan {
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfDimensionLessThanToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfDimensionLessThanOutputReference | DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfDimensionLessThan): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfDimensionLessThanToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfDimensionLessThanOutputReference | DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfDimensionLessThan): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
  };
  return attrs;
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfDimensionLessThanOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false, 0);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfDimensionLessThan | undefined {
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfDimensionLessThan | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
    }
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfDimension {
  /**
  * The dimension to use to select the transformation, either `height`, `width`, or `both`.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#dimension DataAkamaiImagingPolicyImage#dimension}
  */
  readonly dimension?: string;
  /**
  * The dimension to use to select the transformation, either `height`, `width`, or `both`.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#dimension_var DataAkamaiImagingPolicyImage#dimension_var}
  */
  readonly dimensionVar?: string;
  /**
  * The value to compare against the source image dimension. For example, if the image dimension is less than the value the lessThan transformation is applied.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#value DataAkamaiImagingPolicyImage#value}
  */
  readonly value?: string;
  /**
  * The value to compare against the source image dimension. For example, if the image dimension is less than the value the lessThan transformation is applied.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#value_var DataAkamaiImagingPolicyImage#value_var}
  */
  readonly valueVar?: string;
  /**
  * default block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#default DataAkamaiImagingPolicyImage#default}
  */
  readonly default?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfDimensionDefault;
  /**
  * equal block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#equal DataAkamaiImagingPolicyImage#equal}
  */
  readonly equal?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfDimensionEqual;
  /**
  * greater_than block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#greater_than DataAkamaiImagingPolicyImage#greater_than}
  */
  readonly greaterThan?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfDimensionGreaterThan;
  /**
  * less_than block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#less_than DataAkamaiImagingPolicyImage#less_than}
  */
  readonly lessThan?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfDimensionLessThan;
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfDimensionToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfDimension | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    dimension: cdktf.stringToTerraform(struct!.dimension),
    dimension_var: cdktf.stringToTerraform(struct!.dimensionVar),
    value: cdktf.stringToTerraform(struct!.value),
    value_var: cdktf.stringToTerraform(struct!.valueVar),
    default: dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfDimensionDefaultToTerraform(struct!.default),
    equal: dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfDimensionEqualToTerraform(struct!.equal),
    greater_than: dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfDimensionGreaterThanToTerraform(struct!.greaterThan),
    less_than: dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfDimensionLessThanToTerraform(struct!.lessThan),
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfDimensionToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfDimension | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    dimension: {
      value: cdktf.stringToHclTerraform(struct!.dimension),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    dimension_var: {
      value: cdktf.stringToHclTerraform(struct!.dimensionVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    value: {
      value: cdktf.stringToHclTerraform(struct!.value),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    value_var: {
      value: cdktf.stringToHclTerraform(struct!.valueVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    default: {
      value: dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfDimensionDefaultToHclTerraform(struct!.default),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfDimensionDefaultList",
    },
    equal: {
      value: dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfDimensionEqualToHclTerraform(struct!.equal),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfDimensionEqualList",
    },
    greater_than: {
      value: dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfDimensionGreaterThanToHclTerraform(struct!.greaterThan),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfDimensionGreaterThanList",
    },
    less_than: {
      value: dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfDimensionLessThanToHclTerraform(struct!.lessThan),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfDimensionLessThanList",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfDimensionOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfDimension | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._dimension !== undefined) {
      hasAnyValues = true;
      internalValueResult.dimension = this._dimension;
    }
    if (this._dimensionVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.dimensionVar = this._dimensionVar;
    }
    if (this._value !== undefined) {
      hasAnyValues = true;
      internalValueResult.value = this._value;
    }
    if (this._valueVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.valueVar = this._valueVar;
    }
    if (this._default?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.default = this._default?.internalValue;
    }
    if (this._equal?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.equal = this._equal?.internalValue;
    }
    if (this._greaterThan?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.greaterThan = this._greaterThan?.internalValue;
    }
    if (this._lessThan?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.lessThan = this._lessThan?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfDimension | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._dimension = undefined;
      this._dimensionVar = undefined;
      this._value = undefined;
      this._valueVar = undefined;
      this._default.internalValue = undefined;
      this._equal.internalValue = undefined;
      this._greaterThan.internalValue = undefined;
      this._lessThan.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._dimension = value.dimension;
      this._dimensionVar = value.dimensionVar;
      this._value = value.value;
      this._valueVar = value.valueVar;
      this._default.internalValue = value.default;
      this._equal.internalValue = value.equal;
      this._greaterThan.internalValue = value.greaterThan;
      this._lessThan.internalValue = value.lessThan;
    }
  }

  // dimension - computed: false, optional: true, required: false
  private _dimension?: string; 
  public get dimension() {
    return this.getStringAttribute('dimension');
  }
  public set dimension(value: string) {
    this._dimension = value;
  }
  public resetDimension() {
    this._dimension = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get dimensionInput() {
    return this._dimension;
  }

  // dimension_var - computed: false, optional: true, required: false
  private _dimensionVar?: string; 
  public get dimensionVar() {
    return this.getStringAttribute('dimension_var');
  }
  public set dimensionVar(value: string) {
    this._dimensionVar = value;
  }
  public resetDimensionVar() {
    this._dimensionVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get dimensionVarInput() {
    return this._dimensionVar;
  }

  // value - computed: false, optional: true, required: false
  private _value?: string; 
  public get value() {
    return this.getStringAttribute('value');
  }
  public set value(value: string) {
    this._value = value;
  }
  public resetValue() {
    this._value = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get valueInput() {
    return this._value;
  }

  // value_var - computed: false, optional: true, required: false
  private _valueVar?: string; 
  public get valueVar() {
    return this.getStringAttribute('value_var');
  }
  public set valueVar(value: string) {
    this._valueVar = value;
  }
  public resetValueVar() {
    this._valueVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get valueVarInput() {
    return this._valueVar;
  }

  // default - computed: false, optional: true, required: false
  private _default = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfDimensionDefaultOutputReference(this, "default");
  public get default() {
    return this._default;
  }
  public putDefault(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfDimensionDefault) {
    this._default.internalValue = value;
  }
  public resetDefault() {
    this._default.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get defaultInput() {
    return this._default.internalValue;
  }

  // equal - computed: false, optional: true, required: false
  private _equal = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfDimensionEqualOutputReference(this, "equal");
  public get equal() {
    return this._equal;
  }
  public putEqual(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfDimensionEqual) {
    this._equal.internalValue = value;
  }
  public resetEqual() {
    this._equal.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get equalInput() {
    return this._equal.internalValue;
  }

  // greater_than - computed: false, optional: true, required: false
  private _greaterThan = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfDimensionGreaterThanOutputReference(this, "greater_than");
  public get greaterThan() {
    return this._greaterThan;
  }
  public putGreaterThan(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfDimensionGreaterThan) {
    this._greaterThan.internalValue = value;
  }
  public resetGreaterThan() {
    this._greaterThan.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get greaterThanInput() {
    return this._greaterThan.internalValue;
  }

  // less_than - computed: false, optional: true, required: false
  private _lessThan = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfDimensionLessThanOutputReference(this, "less_than");
  public get lessThan() {
    return this._lessThan;
  }
  public putLessThan(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfDimensionLessThan) {
    this._lessThan.internalValue = value;
  }
  public resetLessThan() {
    this._lessThan.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get lessThanInput() {
    return this._lessThan.internalValue;
  }
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfDimensionList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfDimension[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfDimensionOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfDimensionOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfOrientationDefault {
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfOrientationDefaultToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfOrientationDefaultOutputReference | DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfOrientationDefault): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfOrientationDefaultToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfOrientationDefaultOutputReference | DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfOrientationDefault): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
  };
  return attrs;
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfOrientationDefaultOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false, 0);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfOrientationDefault | undefined {
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfOrientationDefault | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
    }
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfOrientationLandscape {
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfOrientationLandscapeToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfOrientationLandscapeOutputReference | DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfOrientationLandscape): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfOrientationLandscapeToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfOrientationLandscapeOutputReference | DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfOrientationLandscape): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
  };
  return attrs;
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfOrientationLandscapeOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false, 0);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfOrientationLandscape | undefined {
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfOrientationLandscape | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
    }
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfOrientationPortrait {
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfOrientationPortraitToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfOrientationPortraitOutputReference | DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfOrientationPortrait): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfOrientationPortraitToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfOrientationPortraitOutputReference | DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfOrientationPortrait): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
  };
  return attrs;
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfOrientationPortraitOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false, 0);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfOrientationPortrait | undefined {
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfOrientationPortrait | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
    }
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfOrientationSquare {
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfOrientationSquareToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfOrientationSquareOutputReference | DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfOrientationSquare): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfOrientationSquareToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfOrientationSquareOutputReference | DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfOrientationSquare): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
  };
  return attrs;
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfOrientationSquareOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false, 0);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfOrientationSquare | undefined {
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfOrientationSquare | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
    }
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfOrientation {
  /**
  * default block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#default DataAkamaiImagingPolicyImage#default}
  */
  readonly default?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfOrientationDefault;
  /**
  * landscape block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#landscape DataAkamaiImagingPolicyImage#landscape}
  */
  readonly landscape?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfOrientationLandscape;
  /**
  * portrait block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#portrait DataAkamaiImagingPolicyImage#portrait}
  */
  readonly portrait?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfOrientationPortrait;
  /**
  * square block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#square DataAkamaiImagingPolicyImage#square}
  */
  readonly square?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfOrientationSquare;
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfOrientationToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfOrientation | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    default: dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfOrientationDefaultToTerraform(struct!.default),
    landscape: dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfOrientationLandscapeToTerraform(struct!.landscape),
    portrait: dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfOrientationPortraitToTerraform(struct!.portrait),
    square: dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfOrientationSquareToTerraform(struct!.square),
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfOrientationToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfOrientation | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    default: {
      value: dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfOrientationDefaultToHclTerraform(struct!.default),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfOrientationDefaultList",
    },
    landscape: {
      value: dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfOrientationLandscapeToHclTerraform(struct!.landscape),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfOrientationLandscapeList",
    },
    portrait: {
      value: dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfOrientationPortraitToHclTerraform(struct!.portrait),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfOrientationPortraitList",
    },
    square: {
      value: dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfOrientationSquareToHclTerraform(struct!.square),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfOrientationSquareList",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfOrientationOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfOrientation | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._default?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.default = this._default?.internalValue;
    }
    if (this._landscape?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.landscape = this._landscape?.internalValue;
    }
    if (this._portrait?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.portrait = this._portrait?.internalValue;
    }
    if (this._square?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.square = this._square?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfOrientation | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._default.internalValue = undefined;
      this._landscape.internalValue = undefined;
      this._portrait.internalValue = undefined;
      this._square.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._default.internalValue = value.default;
      this._landscape.internalValue = value.landscape;
      this._portrait.internalValue = value.portrait;
      this._square.internalValue = value.square;
    }
  }

  // default - computed: false, optional: true, required: false
  private _default = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfOrientationDefaultOutputReference(this, "default");
  public get default() {
    return this._default;
  }
  public putDefault(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfOrientationDefault) {
    this._default.internalValue = value;
  }
  public resetDefault() {
    this._default.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get defaultInput() {
    return this._default.internalValue;
  }

  // landscape - computed: false, optional: true, required: false
  private _landscape = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfOrientationLandscapeOutputReference(this, "landscape");
  public get landscape() {
    return this._landscape;
  }
  public putLandscape(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfOrientationLandscape) {
    this._landscape.internalValue = value;
  }
  public resetLandscape() {
    this._landscape.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get landscapeInput() {
    return this._landscape.internalValue;
  }

  // portrait - computed: false, optional: true, required: false
  private _portrait = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfOrientationPortraitOutputReference(this, "portrait");
  public get portrait() {
    return this._portrait;
  }
  public putPortrait(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfOrientationPortrait) {
    this._portrait.internalValue = value;
  }
  public resetPortrait() {
    this._portrait.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get portraitInput() {
    return this._portrait.internalValue;
  }

  // square - computed: false, optional: true, required: false
  private _square = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfOrientationSquareOutputReference(this, "square");
  public get square() {
    return this._square;
  }
  public putSquare(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfOrientationSquare) {
    this._square.internalValue = value;
  }
  public resetSquare() {
    this._square.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get squareInput() {
    return this._square.internalValue;
  }
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfOrientationList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfOrientation[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfOrientationOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfOrientationOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualMaxColors {
  /**
  * The value representing the maximum number of colors to use with the source image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#colors DataAkamaiImagingPolicyImage#colors}
  */
  readonly colors?: string;
  /**
  * The value representing the maximum number of colors to use with the source image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#colors_var DataAkamaiImagingPolicyImage#colors_var}
  */
  readonly colorsVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualMaxColorsToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualMaxColors | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    colors: cdktf.stringToTerraform(struct!.colors),
    colors_var: cdktf.stringToTerraform(struct!.colorsVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualMaxColorsToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualMaxColors | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    colors: {
      value: cdktf.stringToHclTerraform(struct!.colors),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    colors_var: {
      value: cdktf.stringToHclTerraform(struct!.colorsVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualMaxColorsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualMaxColors | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._colors !== undefined) {
      hasAnyValues = true;
      internalValueResult.colors = this._colors;
    }
    if (this._colorsVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.colorsVar = this._colorsVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualMaxColors | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._colors = undefined;
      this._colorsVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._colors = value.colors;
      this._colorsVar = value.colorsVar;
    }
  }

  // colors - computed: false, optional: true, required: false
  private _colors?: string; 
  public get colors() {
    return this.getStringAttribute('colors');
  }
  public set colors(value: string) {
    this._colors = value;
  }
  public resetColors() {
    this._colors = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get colorsInput() {
    return this._colors;
  }

  // colors_var - computed: false, optional: true, required: false
  private _colorsVar?: string; 
  public get colorsVar() {
    return this.getStringAttribute('colors_var');
  }
  public set colorsVar(value: string) {
    this._colorsVar = value;
  }
  public resetColorsVar() {
    this._colorsVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get colorsVarInput() {
    return this._colorsVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualMaxColorsList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualMaxColors[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualMaxColorsOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualMaxColorsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualMirror {
  /**
  * Flips the image horizontally.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#horizontal DataAkamaiImagingPolicyImage#horizontal}
  */
  readonly horizontal?: string;
  /**
  * Flips the image horizontally.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#horizontal_var DataAkamaiImagingPolicyImage#horizontal_var}
  */
  readonly horizontalVar?: string;
  /**
  * Flips the image vertically.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#vertical DataAkamaiImagingPolicyImage#vertical}
  */
  readonly vertical?: string;
  /**
  * Flips the image vertically.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#vertical_var DataAkamaiImagingPolicyImage#vertical_var}
  */
  readonly verticalVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualMirrorToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualMirror | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    horizontal: cdktf.stringToTerraform(struct!.horizontal),
    horizontal_var: cdktf.stringToTerraform(struct!.horizontalVar),
    vertical: cdktf.stringToTerraform(struct!.vertical),
    vertical_var: cdktf.stringToTerraform(struct!.verticalVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualMirrorToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualMirror | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    horizontal: {
      value: cdktf.stringToHclTerraform(struct!.horizontal),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    horizontal_var: {
      value: cdktf.stringToHclTerraform(struct!.horizontalVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    vertical: {
      value: cdktf.stringToHclTerraform(struct!.vertical),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    vertical_var: {
      value: cdktf.stringToHclTerraform(struct!.verticalVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualMirrorOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualMirror | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._horizontal !== undefined) {
      hasAnyValues = true;
      internalValueResult.horizontal = this._horizontal;
    }
    if (this._horizontalVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.horizontalVar = this._horizontalVar;
    }
    if (this._vertical !== undefined) {
      hasAnyValues = true;
      internalValueResult.vertical = this._vertical;
    }
    if (this._verticalVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.verticalVar = this._verticalVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualMirror | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._horizontal = undefined;
      this._horizontalVar = undefined;
      this._vertical = undefined;
      this._verticalVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._horizontal = value.horizontal;
      this._horizontalVar = value.horizontalVar;
      this._vertical = value.vertical;
      this._verticalVar = value.verticalVar;
    }
  }

  // horizontal - computed: false, optional: true, required: false
  private _horizontal?: string; 
  public get horizontal() {
    return this.getStringAttribute('horizontal');
  }
  public set horizontal(value: string) {
    this._horizontal = value;
  }
  public resetHorizontal() {
    this._horizontal = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get horizontalInput() {
    return this._horizontal;
  }

  // horizontal_var - computed: false, optional: true, required: false
  private _horizontalVar?: string; 
  public get horizontalVar() {
    return this.getStringAttribute('horizontal_var');
  }
  public set horizontalVar(value: string) {
    this._horizontalVar = value;
  }
  public resetHorizontalVar() {
    this._horizontalVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get horizontalVarInput() {
    return this._horizontalVar;
  }

  // vertical - computed: false, optional: true, required: false
  private _vertical?: string; 
  public get vertical() {
    return this.getStringAttribute('vertical');
  }
  public set vertical(value: string) {
    this._vertical = value;
  }
  public resetVertical() {
    this._vertical = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get verticalInput() {
    return this._vertical;
  }

  // vertical_var - computed: false, optional: true, required: false
  private _verticalVar?: string; 
  public get verticalVar() {
    return this.getStringAttribute('vertical_var');
  }
  public set verticalVar(value: string) {
    this._verticalVar = value;
  }
  public resetVerticalVar() {
    this._verticalVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get verticalVarInput() {
    return this._verticalVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualMirrorList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualMirror[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualMirrorOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualMirrorOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualMonoHue {
  /**
  * Specify a hue by indicating the degree of rotation between 0 and 360 degrees around the color wheel. By default Mono Hue applies a red hue, 0.0 on the color wheel.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hue DataAkamaiImagingPolicyImage#hue}
  */
  readonly hue?: string;
  /**
  * Specify a hue by indicating the degree of rotation between 0 and 360 degrees around the color wheel. By default Mono Hue applies a red hue, 0.0 on the color wheel.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hue_var DataAkamaiImagingPolicyImage#hue_var}
  */
  readonly hueVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualMonoHueToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualMonoHue | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    hue: cdktf.stringToTerraform(struct!.hue),
    hue_var: cdktf.stringToTerraform(struct!.hueVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualMonoHueToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualMonoHue | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    hue: {
      value: cdktf.stringToHclTerraform(struct!.hue),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    hue_var: {
      value: cdktf.stringToHclTerraform(struct!.hueVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualMonoHueOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualMonoHue | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._hue !== undefined) {
      hasAnyValues = true;
      internalValueResult.hue = this._hue;
    }
    if (this._hueVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.hueVar = this._hueVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualMonoHue | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._hue = undefined;
      this._hueVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._hue = value.hue;
      this._hueVar = value.hueVar;
    }
  }

  // hue - computed: false, optional: true, required: false
  private _hue?: string; 
  public get hue() {
    return this.getStringAttribute('hue');
  }
  public set hue(value: string) {
    this._hue = value;
  }
  public resetHue() {
    this._hue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hueInput() {
    return this._hue;
  }

  // hue_var - computed: false, optional: true, required: false
  private _hueVar?: string; 
  public get hueVar() {
    return this.getStringAttribute('hue_var');
  }
  public set hueVar(value: string) {
    this._hueVar = value;
  }
  public resetHueVar() {
    this._hueVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hueVarInput() {
    return this._hueVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualMonoHueList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualMonoHue[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualMonoHueOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualMonoHueOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualOpacity {
  /**
  * Represents alpha values on a scale of `0` to `1`. Values below `1` increase transparency, and `0` is invisible. For images that have some transparency, values above `1` increase the opacity of the transparent portions.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#opacity DataAkamaiImagingPolicyImage#opacity}
  */
  readonly opacity?: string;
  /**
  * Represents alpha values on a scale of `0` to `1`. Values below `1` increase transparency, and `0` is invisible. For images that have some transparency, values above `1` increase the opacity of the transparent portions.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#opacity_var DataAkamaiImagingPolicyImage#opacity_var}
  */
  readonly opacityVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualOpacityToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualOpacity | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    opacity: cdktf.stringToTerraform(struct!.opacity),
    opacity_var: cdktf.stringToTerraform(struct!.opacityVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualOpacityToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualOpacity | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    opacity: {
      value: cdktf.stringToHclTerraform(struct!.opacity),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    opacity_var: {
      value: cdktf.stringToHclTerraform(struct!.opacityVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualOpacityOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualOpacity | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._opacity !== undefined) {
      hasAnyValues = true;
      internalValueResult.opacity = this._opacity;
    }
    if (this._opacityVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.opacityVar = this._opacityVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualOpacity | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._opacity = undefined;
      this._opacityVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._opacity = value.opacity;
      this._opacityVar = value.opacityVar;
    }
  }

  // opacity - computed: false, optional: true, required: false
  private _opacity?: string; 
  public get opacity() {
    return this.getStringAttribute('opacity');
  }
  public set opacity(value: string) {
    this._opacity = value;
  }
  public resetOpacity() {
    this._opacity = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get opacityInput() {
    return this._opacity;
  }

  // opacity_var - computed: false, optional: true, required: false
  private _opacityVar?: string; 
  public get opacityVar() {
    return this.getStringAttribute('opacity_var');
  }
  public set opacityVar(value: string) {
    this._opacityVar = value;
  }
  public resetOpacityVar() {
    this._opacityVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get opacityVarInput() {
    return this._opacityVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualOpacityList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualOpacity[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualOpacityOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualOpacityOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualRemoveColor {
  /**
  * The hexadecimal CSS color value to remove.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#color DataAkamaiImagingPolicyImage#color}
  */
  readonly color?: string;
  /**
  * The hexadecimal CSS color value to remove.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#color_var DataAkamaiImagingPolicyImage#color_var}
  */
  readonly colorVar?: string;
  /**
  * The RemoveColor transformation may create a hard edge around an image. To minimize these hard edges and make the removal of the color more gradual in appearance, use the Feather option. This option allows you to extend the color removal beyond the specified Tolerance. The pixels in this extended tolerance become semi-transparent - creating a softer edge.  The first realtime request for an image using the feather option may result in a slow transformation time. Subsequent requests are not impacted as they are served directly out of cache.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#feather DataAkamaiImagingPolicyImage#feather}
  */
  readonly feather?: string;
  /**
  * The RemoveColor transformation may create a hard edge around an image. To minimize these hard edges and make the removal of the color more gradual in appearance, use the Feather option. This option allows you to extend the color removal beyond the specified Tolerance. The pixels in this extended tolerance become semi-transparent - creating a softer edge.  The first realtime request for an image using the feather option may result in a slow transformation time. Subsequent requests are not impacted as they are served directly out of cache.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#feather_var DataAkamaiImagingPolicyImage#feather_var}
  */
  readonly featherVar?: string;
  /**
  * The Tolerance option defines how close the color needs to be to the selected color before it's changed to fully transparent. Set the Tolerance to 0.0 to remove only the exact color specified.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#tolerance DataAkamaiImagingPolicyImage#tolerance}
  */
  readonly tolerance?: string;
  /**
  * The Tolerance option defines how close the color needs to be to the selected color before it's changed to fully transparent. Set the Tolerance to 0.0 to remove only the exact color specified.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#tolerance_var DataAkamaiImagingPolicyImage#tolerance_var}
  */
  readonly toleranceVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualRemoveColorToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualRemoveColor | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    color: cdktf.stringToTerraform(struct!.color),
    color_var: cdktf.stringToTerraform(struct!.colorVar),
    feather: cdktf.stringToTerraform(struct!.feather),
    feather_var: cdktf.stringToTerraform(struct!.featherVar),
    tolerance: cdktf.stringToTerraform(struct!.tolerance),
    tolerance_var: cdktf.stringToTerraform(struct!.toleranceVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualRemoveColorToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualRemoveColor | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    color: {
      value: cdktf.stringToHclTerraform(struct!.color),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    color_var: {
      value: cdktf.stringToHclTerraform(struct!.colorVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    feather: {
      value: cdktf.stringToHclTerraform(struct!.feather),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    feather_var: {
      value: cdktf.stringToHclTerraform(struct!.featherVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    tolerance: {
      value: cdktf.stringToHclTerraform(struct!.tolerance),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    tolerance_var: {
      value: cdktf.stringToHclTerraform(struct!.toleranceVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualRemoveColorOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualRemoveColor | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._color !== undefined) {
      hasAnyValues = true;
      internalValueResult.color = this._color;
    }
    if (this._colorVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.colorVar = this._colorVar;
    }
    if (this._feather !== undefined) {
      hasAnyValues = true;
      internalValueResult.feather = this._feather;
    }
    if (this._featherVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.featherVar = this._featherVar;
    }
    if (this._tolerance !== undefined) {
      hasAnyValues = true;
      internalValueResult.tolerance = this._tolerance;
    }
    if (this._toleranceVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.toleranceVar = this._toleranceVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualRemoveColor | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._color = undefined;
      this._colorVar = undefined;
      this._feather = undefined;
      this._featherVar = undefined;
      this._tolerance = undefined;
      this._toleranceVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._color = value.color;
      this._colorVar = value.colorVar;
      this._feather = value.feather;
      this._featherVar = value.featherVar;
      this._tolerance = value.tolerance;
      this._toleranceVar = value.toleranceVar;
    }
  }

  // color - computed: false, optional: true, required: false
  private _color?: string; 
  public get color() {
    return this.getStringAttribute('color');
  }
  public set color(value: string) {
    this._color = value;
  }
  public resetColor() {
    this._color = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get colorInput() {
    return this._color;
  }

  // color_var - computed: false, optional: true, required: false
  private _colorVar?: string; 
  public get colorVar() {
    return this.getStringAttribute('color_var');
  }
  public set colorVar(value: string) {
    this._colorVar = value;
  }
  public resetColorVar() {
    this._colorVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get colorVarInput() {
    return this._colorVar;
  }

  // feather - computed: false, optional: true, required: false
  private _feather?: string; 
  public get feather() {
    return this.getStringAttribute('feather');
  }
  public set feather(value: string) {
    this._feather = value;
  }
  public resetFeather() {
    this._feather = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get featherInput() {
    return this._feather;
  }

  // feather_var - computed: false, optional: true, required: false
  private _featherVar?: string; 
  public get featherVar() {
    return this.getStringAttribute('feather_var');
  }
  public set featherVar(value: string) {
    this._featherVar = value;
  }
  public resetFeatherVar() {
    this._featherVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get featherVarInput() {
    return this._featherVar;
  }

  // tolerance - computed: false, optional: true, required: false
  private _tolerance?: string; 
  public get tolerance() {
    return this.getStringAttribute('tolerance');
  }
  public set tolerance(value: string) {
    this._tolerance = value;
  }
  public resetTolerance() {
    this._tolerance = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get toleranceInput() {
    return this._tolerance;
  }

  // tolerance_var - computed: false, optional: true, required: false
  private _toleranceVar?: string; 
  public get toleranceVar() {
    return this.getStringAttribute('tolerance_var');
  }
  public set toleranceVar(value: string) {
    this._toleranceVar = value;
  }
  public resetToleranceVar() {
    this._toleranceVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get toleranceVarInput() {
    return this._toleranceVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualRemoveColorList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualRemoveColor[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualRemoveColorOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualRemoveColorOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualUnsharpMask {
  /**
  * Set how much emphasis the filter applies to details. Higher values increase apparent sharpness of details.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#gain DataAkamaiImagingPolicyImage#gain}
  */
  readonly gain?: string;
  /**
  * Set how much emphasis the filter applies to details. Higher values increase apparent sharpness of details.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#gain_var DataAkamaiImagingPolicyImage#gain_var}
  */
  readonly gainVar?: string;
  /**
  * The standard deviation of the Gaussian distribution used in the in unsharp mask, measured in pixels, `1.0` by default. High values emphasize large details and low values emphasize small details.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#sigma DataAkamaiImagingPolicyImage#sigma}
  */
  readonly sigma?: string;
  /**
  * The standard deviation of the Gaussian distribution used in the in unsharp mask, measured in pixels, `1.0` by default. High values emphasize large details and low values emphasize small details.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#sigma_var DataAkamaiImagingPolicyImage#sigma_var}
  */
  readonly sigmaVar?: string;
  /**
  * Set the minimum change required to include a detail in the filter. Higher values discard more changes.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#threshold DataAkamaiImagingPolicyImage#threshold}
  */
  readonly threshold?: string;
  /**
  * Set the minimum change required to include a detail in the filter. Higher values discard more changes.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#threshold_var DataAkamaiImagingPolicyImage#threshold_var}
  */
  readonly thresholdVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualUnsharpMaskToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualUnsharpMask | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    gain: cdktf.stringToTerraform(struct!.gain),
    gain_var: cdktf.stringToTerraform(struct!.gainVar),
    sigma: cdktf.stringToTerraform(struct!.sigma),
    sigma_var: cdktf.stringToTerraform(struct!.sigmaVar),
    threshold: cdktf.stringToTerraform(struct!.threshold),
    threshold_var: cdktf.stringToTerraform(struct!.thresholdVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualUnsharpMaskToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualUnsharpMask | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    gain: {
      value: cdktf.stringToHclTerraform(struct!.gain),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    gain_var: {
      value: cdktf.stringToHclTerraform(struct!.gainVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    sigma: {
      value: cdktf.stringToHclTerraform(struct!.sigma),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    sigma_var: {
      value: cdktf.stringToHclTerraform(struct!.sigmaVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    threshold: {
      value: cdktf.stringToHclTerraform(struct!.threshold),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    threshold_var: {
      value: cdktf.stringToHclTerraform(struct!.thresholdVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualUnsharpMaskOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualUnsharpMask | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._gain !== undefined) {
      hasAnyValues = true;
      internalValueResult.gain = this._gain;
    }
    if (this._gainVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.gainVar = this._gainVar;
    }
    if (this._sigma !== undefined) {
      hasAnyValues = true;
      internalValueResult.sigma = this._sigma;
    }
    if (this._sigmaVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.sigmaVar = this._sigmaVar;
    }
    if (this._threshold !== undefined) {
      hasAnyValues = true;
      internalValueResult.threshold = this._threshold;
    }
    if (this._thresholdVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.thresholdVar = this._thresholdVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualUnsharpMask | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._gain = undefined;
      this._gainVar = undefined;
      this._sigma = undefined;
      this._sigmaVar = undefined;
      this._threshold = undefined;
      this._thresholdVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._gain = value.gain;
      this._gainVar = value.gainVar;
      this._sigma = value.sigma;
      this._sigmaVar = value.sigmaVar;
      this._threshold = value.threshold;
      this._thresholdVar = value.thresholdVar;
    }
  }

  // gain - computed: false, optional: true, required: false
  private _gain?: string; 
  public get gain() {
    return this.getStringAttribute('gain');
  }
  public set gain(value: string) {
    this._gain = value;
  }
  public resetGain() {
    this._gain = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get gainInput() {
    return this._gain;
  }

  // gain_var - computed: false, optional: true, required: false
  private _gainVar?: string; 
  public get gainVar() {
    return this.getStringAttribute('gain_var');
  }
  public set gainVar(value: string) {
    this._gainVar = value;
  }
  public resetGainVar() {
    this._gainVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get gainVarInput() {
    return this._gainVar;
  }

  // sigma - computed: false, optional: true, required: false
  private _sigma?: string; 
  public get sigma() {
    return this.getStringAttribute('sigma');
  }
  public set sigma(value: string) {
    this._sigma = value;
  }
  public resetSigma() {
    this._sigma = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get sigmaInput() {
    return this._sigma;
  }

  // sigma_var - computed: false, optional: true, required: false
  private _sigmaVar?: string; 
  public get sigmaVar() {
    return this.getStringAttribute('sigma_var');
  }
  public set sigmaVar(value: string) {
    this._sigmaVar = value;
  }
  public resetSigmaVar() {
    this._sigmaVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get sigmaVarInput() {
    return this._sigmaVar;
  }

  // threshold - computed: false, optional: true, required: false
  private _threshold?: string; 
  public get threshold() {
    return this.getStringAttribute('threshold');
  }
  public set threshold(value: string) {
    this._threshold = value;
  }
  public resetThreshold() {
    this._threshold = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get thresholdInput() {
    return this._threshold;
  }

  // threshold_var - computed: false, optional: true, required: false
  private _thresholdVar?: string; 
  public get thresholdVar() {
    return this.getStringAttribute('threshold_var');
  }
  public set thresholdVar(value: string) {
    this._thresholdVar = value;
  }
  public resetThresholdVar() {
    this._thresholdVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get thresholdVarInput() {
    return this._thresholdVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualUnsharpMaskList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualUnsharpMask[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualUnsharpMaskOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualUnsharpMaskOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqual {
  /**
  * background_color block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#background_color DataAkamaiImagingPolicyImage#background_color}
  */
  readonly backgroundColor?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualBackgroundColor[] | cdktf.IResolvable;
  /**
  * blur block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#blur DataAkamaiImagingPolicyImage#blur}
  */
  readonly blur?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualBlur[] | cdktf.IResolvable;
  /**
  * chroma_key block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#chroma_key DataAkamaiImagingPolicyImage#chroma_key}
  */
  readonly chromaKey?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualChromaKey[] | cdktf.IResolvable;
  /**
  * composite block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#composite DataAkamaiImagingPolicyImage#composite}
  */
  readonly composite?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualComposite[] | cdktf.IResolvable;
  /**
  * compound block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#compound DataAkamaiImagingPolicyImage#compound}
  */
  readonly compound?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualCompound[] | cdktf.IResolvable;
  /**
  * contrast block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#contrast DataAkamaiImagingPolicyImage#contrast}
  */
  readonly contrast?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualContrast[] | cdktf.IResolvable;
  /**
  * goop block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#goop DataAkamaiImagingPolicyImage#goop}
  */
  readonly goop?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualGoop[] | cdktf.IResolvable;
  /**
  * grayscale block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#grayscale DataAkamaiImagingPolicyImage#grayscale}
  */
  readonly grayscale?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualGrayscale[] | cdktf.IResolvable;
  /**
  * hsl block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hsl DataAkamaiImagingPolicyImage#hsl}
  */
  readonly hsl?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualHsl[] | cdktf.IResolvable;
  /**
  * hsv block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hsv DataAkamaiImagingPolicyImage#hsv}
  */
  readonly hsv?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualHsv[] | cdktf.IResolvable;
  /**
  * if_dimension block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#if_dimension DataAkamaiImagingPolicyImage#if_dimension}
  */
  readonly ifDimension?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfDimension[] | cdktf.IResolvable;
  /**
  * if_orientation block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#if_orientation DataAkamaiImagingPolicyImage#if_orientation}
  */
  readonly ifOrientation?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfOrientation[] | cdktf.IResolvable;
  /**
  * max_colors block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#max_colors DataAkamaiImagingPolicyImage#max_colors}
  */
  readonly maxColors?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualMaxColors[] | cdktf.IResolvable;
  /**
  * mirror block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#mirror DataAkamaiImagingPolicyImage#mirror}
  */
  readonly mirror?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualMirror[] | cdktf.IResolvable;
  /**
  * mono_hue block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#mono_hue DataAkamaiImagingPolicyImage#mono_hue}
  */
  readonly monoHue?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualMonoHue[] | cdktf.IResolvable;
  /**
  * opacity block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#opacity DataAkamaiImagingPolicyImage#opacity}
  */
  readonly opacity?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualOpacity[] | cdktf.IResolvable;
  /**
  * remove_color block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#remove_color DataAkamaiImagingPolicyImage#remove_color}
  */
  readonly removeColor?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualRemoveColor[] | cdktf.IResolvable;
  /**
  * unsharp_mask block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#unsharp_mask DataAkamaiImagingPolicyImage#unsharp_mask}
  */
  readonly unsharpMask?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualUnsharpMask[] | cdktf.IResolvable;
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualOutputReference | DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqual): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    background_color: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualBackgroundColorToTerraform, true)(struct!.backgroundColor),
    blur: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualBlurToTerraform, true)(struct!.blur),
    chroma_key: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualChromaKeyToTerraform, true)(struct!.chromaKey),
    composite: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualCompositeToTerraform, true)(struct!.composite),
    compound: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualCompoundToTerraform, true)(struct!.compound),
    contrast: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualContrastToTerraform, true)(struct!.contrast),
    goop: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualGoopToTerraform, true)(struct!.goop),
    grayscale: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualGrayscaleToTerraform, true)(struct!.grayscale),
    hsl: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualHslToTerraform, true)(struct!.hsl),
    hsv: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualHsvToTerraform, true)(struct!.hsv),
    if_dimension: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfDimensionToTerraform, true)(struct!.ifDimension),
    if_orientation: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfOrientationToTerraform, true)(struct!.ifOrientation),
    max_colors: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualMaxColorsToTerraform, true)(struct!.maxColors),
    mirror: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualMirrorToTerraform, true)(struct!.mirror),
    mono_hue: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualMonoHueToTerraform, true)(struct!.monoHue),
    opacity: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualOpacityToTerraform, true)(struct!.opacity),
    remove_color: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualRemoveColorToTerraform, true)(struct!.removeColor),
    unsharp_mask: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualUnsharpMaskToTerraform, true)(struct!.unsharpMask),
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualOutputReference | DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqual): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    background_color: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualBackgroundColorToHclTerraform, true)(struct!.backgroundColor),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualBackgroundColorList",
    },
    blur: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualBlurToHclTerraform, true)(struct!.blur),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualBlurList",
    },
    chroma_key: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualChromaKeyToHclTerraform, true)(struct!.chromaKey),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualChromaKeyList",
    },
    composite: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualCompositeToHclTerraform, true)(struct!.composite),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualCompositeList",
    },
    compound: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualCompoundToHclTerraform, true)(struct!.compound),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualCompoundList",
    },
    contrast: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualContrastToHclTerraform, true)(struct!.contrast),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualContrastList",
    },
    goop: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualGoopToHclTerraform, true)(struct!.goop),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualGoopList",
    },
    grayscale: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualGrayscaleToHclTerraform, true)(struct!.grayscale),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualGrayscaleList",
    },
    hsl: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualHslToHclTerraform, true)(struct!.hsl),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualHslList",
    },
    hsv: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualHsvToHclTerraform, true)(struct!.hsv),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualHsvList",
    },
    if_dimension: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfDimensionToHclTerraform, true)(struct!.ifDimension),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfDimensionList",
    },
    if_orientation: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfOrientationToHclTerraform, true)(struct!.ifOrientation),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfOrientationList",
    },
    max_colors: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualMaxColorsToHclTerraform, true)(struct!.maxColors),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualMaxColorsList",
    },
    mirror: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualMirrorToHclTerraform, true)(struct!.mirror),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualMirrorList",
    },
    mono_hue: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualMonoHueToHclTerraform, true)(struct!.monoHue),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualMonoHueList",
    },
    opacity: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualOpacityToHclTerraform, true)(struct!.opacity),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualOpacityList",
    },
    remove_color: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualRemoveColorToHclTerraform, true)(struct!.removeColor),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualRemoveColorList",
    },
    unsharp_mask: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualUnsharpMaskToHclTerraform, true)(struct!.unsharpMask),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualUnsharpMaskList",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false, 0);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqual | undefined {
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._backgroundColor?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.backgroundColor = this._backgroundColor?.internalValue;
    }
    if (this._blur?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.blur = this._blur?.internalValue;
    }
    if (this._chromaKey?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.chromaKey = this._chromaKey?.internalValue;
    }
    if (this._composite?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.composite = this._composite?.internalValue;
    }
    if (this._compound?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.compound = this._compound?.internalValue;
    }
    if (this._contrast?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.contrast = this._contrast?.internalValue;
    }
    if (this._goop?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.goop = this._goop?.internalValue;
    }
    if (this._grayscale?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.grayscale = this._grayscale?.internalValue;
    }
    if (this._hsl?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.hsl = this._hsl?.internalValue;
    }
    if (this._hsv?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.hsv = this._hsv?.internalValue;
    }
    if (this._ifDimension?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.ifDimension = this._ifDimension?.internalValue;
    }
    if (this._ifOrientation?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.ifOrientation = this._ifOrientation?.internalValue;
    }
    if (this._maxColors?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.maxColors = this._maxColors?.internalValue;
    }
    if (this._mirror?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.mirror = this._mirror?.internalValue;
    }
    if (this._monoHue?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.monoHue = this._monoHue?.internalValue;
    }
    if (this._opacity?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.opacity = this._opacity?.internalValue;
    }
    if (this._removeColor?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.removeColor = this._removeColor?.internalValue;
    }
    if (this._unsharpMask?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.unsharpMask = this._unsharpMask?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqual | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this._backgroundColor.internalValue = undefined;
      this._blur.internalValue = undefined;
      this._chromaKey.internalValue = undefined;
      this._composite.internalValue = undefined;
      this._compound.internalValue = undefined;
      this._contrast.internalValue = undefined;
      this._goop.internalValue = undefined;
      this._grayscale.internalValue = undefined;
      this._hsl.internalValue = undefined;
      this._hsv.internalValue = undefined;
      this._ifDimension.internalValue = undefined;
      this._ifOrientation.internalValue = undefined;
      this._maxColors.internalValue = undefined;
      this._mirror.internalValue = undefined;
      this._monoHue.internalValue = undefined;
      this._opacity.internalValue = undefined;
      this._removeColor.internalValue = undefined;
      this._unsharpMask.internalValue = undefined;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this._backgroundColor.internalValue = value.backgroundColor;
      this._blur.internalValue = value.blur;
      this._chromaKey.internalValue = value.chromaKey;
      this._composite.internalValue = value.composite;
      this._compound.internalValue = value.compound;
      this._contrast.internalValue = value.contrast;
      this._goop.internalValue = value.goop;
      this._grayscale.internalValue = value.grayscale;
      this._hsl.internalValue = value.hsl;
      this._hsv.internalValue = value.hsv;
      this._ifDimension.internalValue = value.ifDimension;
      this._ifOrientation.internalValue = value.ifOrientation;
      this._maxColors.internalValue = value.maxColors;
      this._mirror.internalValue = value.mirror;
      this._monoHue.internalValue = value.monoHue;
      this._opacity.internalValue = value.opacity;
      this._removeColor.internalValue = value.removeColor;
      this._unsharpMask.internalValue = value.unsharpMask;
    }
  }

  // background_color - computed: false, optional: true, required: false
  private _backgroundColor = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualBackgroundColorList(this, "background_color", false);
  public get backgroundColor() {
    return this._backgroundColor;
  }
  public putBackgroundColor(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualBackgroundColor[] | cdktf.IResolvable) {
    this._backgroundColor.internalValue = value;
  }
  public resetBackgroundColor() {
    this._backgroundColor.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get backgroundColorInput() {
    return this._backgroundColor.internalValue;
  }

  // blur - computed: false, optional: true, required: false
  private _blur = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualBlurList(this, "blur", false);
  public get blur() {
    return this._blur;
  }
  public putBlur(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualBlur[] | cdktf.IResolvable) {
    this._blur.internalValue = value;
  }
  public resetBlur() {
    this._blur.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get blurInput() {
    return this._blur.internalValue;
  }

  // chroma_key - computed: false, optional: true, required: false
  private _chromaKey = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualChromaKeyList(this, "chroma_key", false);
  public get chromaKey() {
    return this._chromaKey;
  }
  public putChromaKey(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualChromaKey[] | cdktf.IResolvable) {
    this._chromaKey.internalValue = value;
  }
  public resetChromaKey() {
    this._chromaKey.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get chromaKeyInput() {
    return this._chromaKey.internalValue;
  }

  // composite - computed: false, optional: true, required: false
  private _composite = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualCompositeList(this, "composite", false);
  public get composite() {
    return this._composite;
  }
  public putComposite(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualComposite[] | cdktf.IResolvable) {
    this._composite.internalValue = value;
  }
  public resetComposite() {
    this._composite.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get compositeInput() {
    return this._composite.internalValue;
  }

  // compound - computed: false, optional: true, required: false
  private _compound = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualCompoundList(this, "compound", false);
  public get compound() {
    return this._compound;
  }
  public putCompound(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualCompound[] | cdktf.IResolvable) {
    this._compound.internalValue = value;
  }
  public resetCompound() {
    this._compound.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get compoundInput() {
    return this._compound.internalValue;
  }

  // contrast - computed: false, optional: true, required: false
  private _contrast = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualContrastList(this, "contrast", false);
  public get contrast() {
    return this._contrast;
  }
  public putContrast(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualContrast[] | cdktf.IResolvable) {
    this._contrast.internalValue = value;
  }
  public resetContrast() {
    this._contrast.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get contrastInput() {
    return this._contrast.internalValue;
  }

  // goop - computed: false, optional: true, required: false
  private _goop = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualGoopList(this, "goop", false);
  public get goop() {
    return this._goop;
  }
  public putGoop(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualGoop[] | cdktf.IResolvable) {
    this._goop.internalValue = value;
  }
  public resetGoop() {
    this._goop.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get goopInput() {
    return this._goop.internalValue;
  }

  // grayscale - computed: false, optional: true, required: false
  private _grayscale = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualGrayscaleList(this, "grayscale", false);
  public get grayscale() {
    return this._grayscale;
  }
  public putGrayscale(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualGrayscale[] | cdktf.IResolvable) {
    this._grayscale.internalValue = value;
  }
  public resetGrayscale() {
    this._grayscale.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get grayscaleInput() {
    return this._grayscale.internalValue;
  }

  // hsl - computed: false, optional: true, required: false
  private _hsl = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualHslList(this, "hsl", false);
  public get hsl() {
    return this._hsl;
  }
  public putHsl(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualHsl[] | cdktf.IResolvable) {
    this._hsl.internalValue = value;
  }
  public resetHsl() {
    this._hsl.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hslInput() {
    return this._hsl.internalValue;
  }

  // hsv - computed: false, optional: true, required: false
  private _hsv = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualHsvList(this, "hsv", false);
  public get hsv() {
    return this._hsv;
  }
  public putHsv(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualHsv[] | cdktf.IResolvable) {
    this._hsv.internalValue = value;
  }
  public resetHsv() {
    this._hsv.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hsvInput() {
    return this._hsv.internalValue;
  }

  // if_dimension - computed: false, optional: true, required: false
  private _ifDimension = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfDimensionList(this, "if_dimension", false);
  public get ifDimension() {
    return this._ifDimension;
  }
  public putIfDimension(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfDimension[] | cdktf.IResolvable) {
    this._ifDimension.internalValue = value;
  }
  public resetIfDimension() {
    this._ifDimension.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get ifDimensionInput() {
    return this._ifDimension.internalValue;
  }

  // if_orientation - computed: false, optional: true, required: false
  private _ifOrientation = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfOrientationList(this, "if_orientation", false);
  public get ifOrientation() {
    return this._ifOrientation;
  }
  public putIfOrientation(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualIfOrientation[] | cdktf.IResolvable) {
    this._ifOrientation.internalValue = value;
  }
  public resetIfOrientation() {
    this._ifOrientation.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get ifOrientationInput() {
    return this._ifOrientation.internalValue;
  }

  // max_colors - computed: false, optional: true, required: false
  private _maxColors = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualMaxColorsList(this, "max_colors", false);
  public get maxColors() {
    return this._maxColors;
  }
  public putMaxColors(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualMaxColors[] | cdktf.IResolvable) {
    this._maxColors.internalValue = value;
  }
  public resetMaxColors() {
    this._maxColors.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get maxColorsInput() {
    return this._maxColors.internalValue;
  }

  // mirror - computed: false, optional: true, required: false
  private _mirror = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualMirrorList(this, "mirror", false);
  public get mirror() {
    return this._mirror;
  }
  public putMirror(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualMirror[] | cdktf.IResolvable) {
    this._mirror.internalValue = value;
  }
  public resetMirror() {
    this._mirror.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get mirrorInput() {
    return this._mirror.internalValue;
  }

  // mono_hue - computed: false, optional: true, required: false
  private _monoHue = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualMonoHueList(this, "mono_hue", false);
  public get monoHue() {
    return this._monoHue;
  }
  public putMonoHue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualMonoHue[] | cdktf.IResolvable) {
    this._monoHue.internalValue = value;
  }
  public resetMonoHue() {
    this._monoHue.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get monoHueInput() {
    return this._monoHue.internalValue;
  }

  // opacity - computed: false, optional: true, required: false
  private _opacity = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualOpacityList(this, "opacity", false);
  public get opacity() {
    return this._opacity;
  }
  public putOpacity(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualOpacity[] | cdktf.IResolvable) {
    this._opacity.internalValue = value;
  }
  public resetOpacity() {
    this._opacity.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get opacityInput() {
    return this._opacity.internalValue;
  }

  // remove_color - computed: false, optional: true, required: false
  private _removeColor = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualRemoveColorList(this, "remove_color", false);
  public get removeColor() {
    return this._removeColor;
  }
  public putRemoveColor(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualRemoveColor[] | cdktf.IResolvable) {
    this._removeColor.internalValue = value;
  }
  public resetRemoveColor() {
    this._removeColor.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get removeColorInput() {
    return this._removeColor.internalValue;
  }

  // unsharp_mask - computed: false, optional: true, required: false
  private _unsharpMask = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualUnsharpMaskList(this, "unsharp_mask", false);
  public get unsharpMask() {
    return this._unsharpMask;
  }
  public putUnsharpMask(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualUnsharpMask[] | cdktf.IResolvable) {
    this._unsharpMask.internalValue = value;
  }
  public resetUnsharpMask() {
    this._unsharpMask.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get unsharpMaskInput() {
    return this._unsharpMask.internalValue;
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanBackgroundColor {
  /**
  * The hexadecimal CSS color value for the background.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#color DataAkamaiImagingPolicyImage#color}
  */
  readonly color?: string;
  /**
  * The hexadecimal CSS color value for the background.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#color_var DataAkamaiImagingPolicyImage#color_var}
  */
  readonly colorVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanBackgroundColorToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanBackgroundColor | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    color: cdktf.stringToTerraform(struct!.color),
    color_var: cdktf.stringToTerraform(struct!.colorVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanBackgroundColorToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanBackgroundColor | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    color: {
      value: cdktf.stringToHclTerraform(struct!.color),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    color_var: {
      value: cdktf.stringToHclTerraform(struct!.colorVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanBackgroundColorOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanBackgroundColor | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._color !== undefined) {
      hasAnyValues = true;
      internalValueResult.color = this._color;
    }
    if (this._colorVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.colorVar = this._colorVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanBackgroundColor | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._color = undefined;
      this._colorVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._color = value.color;
      this._colorVar = value.colorVar;
    }
  }

  // color - computed: false, optional: true, required: false
  private _color?: string; 
  public get color() {
    return this.getStringAttribute('color');
  }
  public set color(value: string) {
    this._color = value;
  }
  public resetColor() {
    this._color = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get colorInput() {
    return this._color;
  }

  // color_var - computed: false, optional: true, required: false
  private _colorVar?: string; 
  public get colorVar() {
    return this.getStringAttribute('color_var');
  }
  public set colorVar(value: string) {
    this._colorVar = value;
  }
  public resetColorVar() {
    this._colorVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get colorVarInput() {
    return this._colorVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanBackgroundColorList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanBackgroundColor[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanBackgroundColorOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanBackgroundColorOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanBlur {
  /**
  * The number of pixels to scatter the original pixel by to create the blur effect. Resulting images may be larger than the original as pixels at the edge of the image might scatter outside the image's original dimensions.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#sigma DataAkamaiImagingPolicyImage#sigma}
  */
  readonly sigma?: string;
  /**
  * The number of pixels to scatter the original pixel by to create the blur effect. Resulting images may be larger than the original as pixels at the edge of the image might scatter outside the image's original dimensions.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#sigma_var DataAkamaiImagingPolicyImage#sigma_var}
  */
  readonly sigmaVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanBlurToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanBlur | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    sigma: cdktf.stringToTerraform(struct!.sigma),
    sigma_var: cdktf.stringToTerraform(struct!.sigmaVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanBlurToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanBlur | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    sigma: {
      value: cdktf.stringToHclTerraform(struct!.sigma),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    sigma_var: {
      value: cdktf.stringToHclTerraform(struct!.sigmaVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanBlurOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanBlur | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._sigma !== undefined) {
      hasAnyValues = true;
      internalValueResult.sigma = this._sigma;
    }
    if (this._sigmaVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.sigmaVar = this._sigmaVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanBlur | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._sigma = undefined;
      this._sigmaVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._sigma = value.sigma;
      this._sigmaVar = value.sigmaVar;
    }
  }

  // sigma - computed: false, optional: true, required: false
  private _sigma?: string; 
  public get sigma() {
    return this.getStringAttribute('sigma');
  }
  public set sigma(value: string) {
    this._sigma = value;
  }
  public resetSigma() {
    this._sigma = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get sigmaInput() {
    return this._sigma;
  }

  // sigma_var - computed: false, optional: true, required: false
  private _sigmaVar?: string; 
  public get sigmaVar() {
    return this.getStringAttribute('sigma_var');
  }
  public set sigmaVar(value: string) {
    this._sigmaVar = value;
  }
  public resetSigmaVar() {
    this._sigmaVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get sigmaVarInput() {
    return this._sigmaVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanBlurList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanBlur[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanBlurOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanBlurOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanChromaKey {
  /**
  * The hue to remove. Enter the degree of rotation between 0 and 360 degrees around the color wheel. By default Chroma Key removes a green hue, 120° on the color wheel.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hue DataAkamaiImagingPolicyImage#hue}
  */
  readonly hue?: string;
  /**
  * How much additional hue to make semi-transparent beyond the Hue Tolerance. By default Hue Feather is 0.083 which applies semi-transparency to hues 30° around the Hue Tolerance.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hue_feather DataAkamaiImagingPolicyImage#hue_feather}
  */
  readonly hueFeather?: string;
  /**
  * How much additional hue to make semi-transparent beyond the Hue Tolerance. By default Hue Feather is 0.083 which applies semi-transparency to hues 30° around the Hue Tolerance.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hue_feather_var DataAkamaiImagingPolicyImage#hue_feather_var}
  */
  readonly hueFeatherVar?: string;
  /**
  * How close a color's hue needs to be to the selected hue for it to be changed to fully transparent. If you enter the maximum value of 1.0 the entire image is made transparent. By default Hue Tolerance is approximately 0.083 or 8.3% of the color wheel. This value corresponds to 30° around the specified hue.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hue_tolerance DataAkamaiImagingPolicyImage#hue_tolerance}
  */
  readonly hueTolerance?: string;
  /**
  * How close a color's hue needs to be to the selected hue for it to be changed to fully transparent. If you enter the maximum value of 1.0 the entire image is made transparent. By default Hue Tolerance is approximately 0.083 or 8.3% of the color wheel. This value corresponds to 30° around the specified hue.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hue_tolerance_var DataAkamaiImagingPolicyImage#hue_tolerance_var}
  */
  readonly hueToleranceVar?: string;
  /**
  * The hue to remove. Enter the degree of rotation between 0 and 360 degrees around the color wheel. By default Chroma Key removes a green hue, 120° on the color wheel.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hue_var DataAkamaiImagingPolicyImage#hue_var}
  */
  readonly hueVar?: string;
  /**
  * How much additional lightness to make semi-transparent beyond the Lightness Tolerance. The default value of 0.1 corresponds to 10% away from the tolerated lightness towards full black or full white.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#lightness_feather DataAkamaiImagingPolicyImage#lightness_feather}
  */
  readonly lightnessFeather?: string;
  /**
  * How much additional lightness to make semi-transparent beyond the Lightness Tolerance. The default value of 0.1 corresponds to 10% away from the tolerated lightness towards full black or full white.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#lightness_feather_var DataAkamaiImagingPolicyImage#lightness_feather_var}
  */
  readonly lightnessFeatherVar?: string;
  /**
  * How much of the lightest part and darkest part of a color to preserve. For example, you can space this value out from the middle (i.e. 0.5 lightness or full color) to help preserve the splash lighting impact in the image. You can define how close the color needs to be to the full color to remove it from your image. The default value of 0.75 means that a colour must be within 75% of the full color to full white or full black for full removal.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#lightness_tolerance DataAkamaiImagingPolicyImage#lightness_tolerance}
  */
  readonly lightnessTolerance?: string;
  /**
  * How much of the lightest part and darkest part of a color to preserve. For example, you can space this value out from the middle (i.e. 0.5 lightness or full color) to help preserve the splash lighting impact in the image. You can define how close the color needs to be to the full color to remove it from your image. The default value of 0.75 means that a colour must be within 75% of the full color to full white or full black for full removal.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#lightness_tolerance_var DataAkamaiImagingPolicyImage#lightness_tolerance_var}
  */
  readonly lightnessToleranceVar?: string;
  /**
  * How much additional saturation to make semi-transparent beyond the Saturation Tolerance. By default Saturation Feather is 0.1 which applies semi-transparency to hues 10% below the saturationTolerance.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#saturation_feather DataAkamaiImagingPolicyImage#saturation_feather}
  */
  readonly saturationFeather?: string;
  /**
  * How much additional saturation to make semi-transparent beyond the Saturation Tolerance. By default Saturation Feather is 0.1 which applies semi-transparency to hues 10% below the saturationTolerance.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#saturation_feather_var DataAkamaiImagingPolicyImage#saturation_feather_var}
  */
  readonly saturationFeatherVar?: string;
  /**
  * How close a color's saturation needs to be to full saturation for it to be changed to fully transparent. For example, you can define how green the color needs to be to remove it from your image. The default value of 0.75 means that a color must be within 75% of full saturation in order to be made fully transparent.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#saturation_tolerance DataAkamaiImagingPolicyImage#saturation_tolerance}
  */
  readonly saturationTolerance?: string;
  /**
  * How close a color's saturation needs to be to full saturation for it to be changed to fully transparent. For example, you can define how green the color needs to be to remove it from your image. The default value of 0.75 means that a color must be within 75% of full saturation in order to be made fully transparent.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#saturation_tolerance_var DataAkamaiImagingPolicyImage#saturation_tolerance_var}
  */
  readonly saturationToleranceVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanChromaKeyToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanChromaKey | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    hue: cdktf.stringToTerraform(struct!.hue),
    hue_feather: cdktf.stringToTerraform(struct!.hueFeather),
    hue_feather_var: cdktf.stringToTerraform(struct!.hueFeatherVar),
    hue_tolerance: cdktf.stringToTerraform(struct!.hueTolerance),
    hue_tolerance_var: cdktf.stringToTerraform(struct!.hueToleranceVar),
    hue_var: cdktf.stringToTerraform(struct!.hueVar),
    lightness_feather: cdktf.stringToTerraform(struct!.lightnessFeather),
    lightness_feather_var: cdktf.stringToTerraform(struct!.lightnessFeatherVar),
    lightness_tolerance: cdktf.stringToTerraform(struct!.lightnessTolerance),
    lightness_tolerance_var: cdktf.stringToTerraform(struct!.lightnessToleranceVar),
    saturation_feather: cdktf.stringToTerraform(struct!.saturationFeather),
    saturation_feather_var: cdktf.stringToTerraform(struct!.saturationFeatherVar),
    saturation_tolerance: cdktf.stringToTerraform(struct!.saturationTolerance),
    saturation_tolerance_var: cdktf.stringToTerraform(struct!.saturationToleranceVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanChromaKeyToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanChromaKey | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    hue: {
      value: cdktf.stringToHclTerraform(struct!.hue),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    hue_feather: {
      value: cdktf.stringToHclTerraform(struct!.hueFeather),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    hue_feather_var: {
      value: cdktf.stringToHclTerraform(struct!.hueFeatherVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    hue_tolerance: {
      value: cdktf.stringToHclTerraform(struct!.hueTolerance),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    hue_tolerance_var: {
      value: cdktf.stringToHclTerraform(struct!.hueToleranceVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    hue_var: {
      value: cdktf.stringToHclTerraform(struct!.hueVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    lightness_feather: {
      value: cdktf.stringToHclTerraform(struct!.lightnessFeather),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    lightness_feather_var: {
      value: cdktf.stringToHclTerraform(struct!.lightnessFeatherVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    lightness_tolerance: {
      value: cdktf.stringToHclTerraform(struct!.lightnessTolerance),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    lightness_tolerance_var: {
      value: cdktf.stringToHclTerraform(struct!.lightnessToleranceVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    saturation_feather: {
      value: cdktf.stringToHclTerraform(struct!.saturationFeather),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    saturation_feather_var: {
      value: cdktf.stringToHclTerraform(struct!.saturationFeatherVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    saturation_tolerance: {
      value: cdktf.stringToHclTerraform(struct!.saturationTolerance),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    saturation_tolerance_var: {
      value: cdktf.stringToHclTerraform(struct!.saturationToleranceVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanChromaKeyOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanChromaKey | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._hue !== undefined) {
      hasAnyValues = true;
      internalValueResult.hue = this._hue;
    }
    if (this._hueFeather !== undefined) {
      hasAnyValues = true;
      internalValueResult.hueFeather = this._hueFeather;
    }
    if (this._hueFeatherVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.hueFeatherVar = this._hueFeatherVar;
    }
    if (this._hueTolerance !== undefined) {
      hasAnyValues = true;
      internalValueResult.hueTolerance = this._hueTolerance;
    }
    if (this._hueToleranceVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.hueToleranceVar = this._hueToleranceVar;
    }
    if (this._hueVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.hueVar = this._hueVar;
    }
    if (this._lightnessFeather !== undefined) {
      hasAnyValues = true;
      internalValueResult.lightnessFeather = this._lightnessFeather;
    }
    if (this._lightnessFeatherVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.lightnessFeatherVar = this._lightnessFeatherVar;
    }
    if (this._lightnessTolerance !== undefined) {
      hasAnyValues = true;
      internalValueResult.lightnessTolerance = this._lightnessTolerance;
    }
    if (this._lightnessToleranceVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.lightnessToleranceVar = this._lightnessToleranceVar;
    }
    if (this._saturationFeather !== undefined) {
      hasAnyValues = true;
      internalValueResult.saturationFeather = this._saturationFeather;
    }
    if (this._saturationFeatherVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.saturationFeatherVar = this._saturationFeatherVar;
    }
    if (this._saturationTolerance !== undefined) {
      hasAnyValues = true;
      internalValueResult.saturationTolerance = this._saturationTolerance;
    }
    if (this._saturationToleranceVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.saturationToleranceVar = this._saturationToleranceVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanChromaKey | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._hue = undefined;
      this._hueFeather = undefined;
      this._hueFeatherVar = undefined;
      this._hueTolerance = undefined;
      this._hueToleranceVar = undefined;
      this._hueVar = undefined;
      this._lightnessFeather = undefined;
      this._lightnessFeatherVar = undefined;
      this._lightnessTolerance = undefined;
      this._lightnessToleranceVar = undefined;
      this._saturationFeather = undefined;
      this._saturationFeatherVar = undefined;
      this._saturationTolerance = undefined;
      this._saturationToleranceVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._hue = value.hue;
      this._hueFeather = value.hueFeather;
      this._hueFeatherVar = value.hueFeatherVar;
      this._hueTolerance = value.hueTolerance;
      this._hueToleranceVar = value.hueToleranceVar;
      this._hueVar = value.hueVar;
      this._lightnessFeather = value.lightnessFeather;
      this._lightnessFeatherVar = value.lightnessFeatherVar;
      this._lightnessTolerance = value.lightnessTolerance;
      this._lightnessToleranceVar = value.lightnessToleranceVar;
      this._saturationFeather = value.saturationFeather;
      this._saturationFeatherVar = value.saturationFeatherVar;
      this._saturationTolerance = value.saturationTolerance;
      this._saturationToleranceVar = value.saturationToleranceVar;
    }
  }

  // hue - computed: false, optional: true, required: false
  private _hue?: string; 
  public get hue() {
    return this.getStringAttribute('hue');
  }
  public set hue(value: string) {
    this._hue = value;
  }
  public resetHue() {
    this._hue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hueInput() {
    return this._hue;
  }

  // hue_feather - computed: false, optional: true, required: false
  private _hueFeather?: string; 
  public get hueFeather() {
    return this.getStringAttribute('hue_feather');
  }
  public set hueFeather(value: string) {
    this._hueFeather = value;
  }
  public resetHueFeather() {
    this._hueFeather = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hueFeatherInput() {
    return this._hueFeather;
  }

  // hue_feather_var - computed: false, optional: true, required: false
  private _hueFeatherVar?: string; 
  public get hueFeatherVar() {
    return this.getStringAttribute('hue_feather_var');
  }
  public set hueFeatherVar(value: string) {
    this._hueFeatherVar = value;
  }
  public resetHueFeatherVar() {
    this._hueFeatherVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hueFeatherVarInput() {
    return this._hueFeatherVar;
  }

  // hue_tolerance - computed: false, optional: true, required: false
  private _hueTolerance?: string; 
  public get hueTolerance() {
    return this.getStringAttribute('hue_tolerance');
  }
  public set hueTolerance(value: string) {
    this._hueTolerance = value;
  }
  public resetHueTolerance() {
    this._hueTolerance = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hueToleranceInput() {
    return this._hueTolerance;
  }

  // hue_tolerance_var - computed: false, optional: true, required: false
  private _hueToleranceVar?: string; 
  public get hueToleranceVar() {
    return this.getStringAttribute('hue_tolerance_var');
  }
  public set hueToleranceVar(value: string) {
    this._hueToleranceVar = value;
  }
  public resetHueToleranceVar() {
    this._hueToleranceVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hueToleranceVarInput() {
    return this._hueToleranceVar;
  }

  // hue_var - computed: false, optional: true, required: false
  private _hueVar?: string; 
  public get hueVar() {
    return this.getStringAttribute('hue_var');
  }
  public set hueVar(value: string) {
    this._hueVar = value;
  }
  public resetHueVar() {
    this._hueVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hueVarInput() {
    return this._hueVar;
  }

  // lightness_feather - computed: false, optional: true, required: false
  private _lightnessFeather?: string; 
  public get lightnessFeather() {
    return this.getStringAttribute('lightness_feather');
  }
  public set lightnessFeather(value: string) {
    this._lightnessFeather = value;
  }
  public resetLightnessFeather() {
    this._lightnessFeather = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get lightnessFeatherInput() {
    return this._lightnessFeather;
  }

  // lightness_feather_var - computed: false, optional: true, required: false
  private _lightnessFeatherVar?: string; 
  public get lightnessFeatherVar() {
    return this.getStringAttribute('lightness_feather_var');
  }
  public set lightnessFeatherVar(value: string) {
    this._lightnessFeatherVar = value;
  }
  public resetLightnessFeatherVar() {
    this._lightnessFeatherVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get lightnessFeatherVarInput() {
    return this._lightnessFeatherVar;
  }

  // lightness_tolerance - computed: false, optional: true, required: false
  private _lightnessTolerance?: string; 
  public get lightnessTolerance() {
    return this.getStringAttribute('lightness_tolerance');
  }
  public set lightnessTolerance(value: string) {
    this._lightnessTolerance = value;
  }
  public resetLightnessTolerance() {
    this._lightnessTolerance = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get lightnessToleranceInput() {
    return this._lightnessTolerance;
  }

  // lightness_tolerance_var - computed: false, optional: true, required: false
  private _lightnessToleranceVar?: string; 
  public get lightnessToleranceVar() {
    return this.getStringAttribute('lightness_tolerance_var');
  }
  public set lightnessToleranceVar(value: string) {
    this._lightnessToleranceVar = value;
  }
  public resetLightnessToleranceVar() {
    this._lightnessToleranceVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get lightnessToleranceVarInput() {
    return this._lightnessToleranceVar;
  }

  // saturation_feather - computed: false, optional: true, required: false
  private _saturationFeather?: string; 
  public get saturationFeather() {
    return this.getStringAttribute('saturation_feather');
  }
  public set saturationFeather(value: string) {
    this._saturationFeather = value;
  }
  public resetSaturationFeather() {
    this._saturationFeather = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get saturationFeatherInput() {
    return this._saturationFeather;
  }

  // saturation_feather_var - computed: false, optional: true, required: false
  private _saturationFeatherVar?: string; 
  public get saturationFeatherVar() {
    return this.getStringAttribute('saturation_feather_var');
  }
  public set saturationFeatherVar(value: string) {
    this._saturationFeatherVar = value;
  }
  public resetSaturationFeatherVar() {
    this._saturationFeatherVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get saturationFeatherVarInput() {
    return this._saturationFeatherVar;
  }

  // saturation_tolerance - computed: false, optional: true, required: false
  private _saturationTolerance?: string; 
  public get saturationTolerance() {
    return this.getStringAttribute('saturation_tolerance');
  }
  public set saturationTolerance(value: string) {
    this._saturationTolerance = value;
  }
  public resetSaturationTolerance() {
    this._saturationTolerance = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get saturationToleranceInput() {
    return this._saturationTolerance;
  }

  // saturation_tolerance_var - computed: false, optional: true, required: false
  private _saturationToleranceVar?: string; 
  public get saturationToleranceVar() {
    return this.getStringAttribute('saturation_tolerance_var');
  }
  public set saturationToleranceVar(value: string) {
    this._saturationToleranceVar = value;
  }
  public resetSaturationToleranceVar() {
    this._saturationToleranceVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get saturationToleranceVarInput() {
    return this._saturationToleranceVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanChromaKeyList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanChromaKey[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanChromaKeyOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanChromaKeyOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanCompositeImage {
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanCompositeImageToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanCompositeImageOutputReference | DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanCompositeImage): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanCompositeImageToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanCompositeImageOutputReference | DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanCompositeImage): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
  };
  return attrs;
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanCompositeImageOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false, 0);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanCompositeImage | undefined {
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanCompositeImage | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
    }
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanComposite {
  /**
  * Compass direction indicating the corner or edge of the base image to place the applied image. Use Horizontal and Vertical Offset to adjust the applied image's gravity position
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#gravity DataAkamaiImagingPolicyImage#gravity}
  */
  readonly gravity?: string;
  /**
  * Compass direction indicating the corner or edge of the base image to place the applied image. Use Horizontal and Vertical Offset to adjust the applied image's gravity position
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#gravity_var DataAkamaiImagingPolicyImage#gravity_var}
  */
  readonly gravityVar?: string;
  /**
  * Place applied image on top of or underneath the base image. Watermarks are usually applied over. Backgrounds are usually applied under.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#placement DataAkamaiImagingPolicyImage#placement}
  */
  readonly placement?: string;
  /**
  * Place applied image on top of or underneath the base image. Watermarks are usually applied over. Backgrounds are usually applied under.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#placement_var DataAkamaiImagingPolicyImage#placement_var}
  */
  readonly placementVar?: string;
  /**
  * A multiplier to resize the applied image relative to the source image and preserve aspect ratio, 1 by default. Set the `scaleDimension` to calculate the `scale` from the source image's width or height.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#scale DataAkamaiImagingPolicyImage#scale}
  */
  readonly scale?: string;
  /**
  * The dimension, either `width` or `height`, of the source image to scale.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#scale_dimension DataAkamaiImagingPolicyImage#scale_dimension}
  */
  readonly scaleDimension?: string;
  /**
  * The dimension, either `width` or `height`, of the source image to scale.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#scale_dimension_var DataAkamaiImagingPolicyImage#scale_dimension_var}
  */
  readonly scaleDimensionVar?: string;
  /**
  * A multiplier to resize the applied image relative to the source image and preserve aspect ratio, 1 by default. Set the `scaleDimension` to calculate the `scale` from the source image's width or height.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#scale_var DataAkamaiImagingPolicyImage#scale_var}
  */
  readonly scaleVar?: string;
  /**
  * The x-axis position of the image to apply.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#x_position DataAkamaiImagingPolicyImage#x_position}
  */
  readonly xPosition?: string;
  /**
  * The x-axis position of the image to apply.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#x_position_var DataAkamaiImagingPolicyImage#x_position_var}
  */
  readonly xPositionVar?: string;
  /**
  * The y-axis position of the image to apply.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#y_position DataAkamaiImagingPolicyImage#y_position}
  */
  readonly yPosition?: string;
  /**
  * The y-axis position of the image to apply.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#y_position_var DataAkamaiImagingPolicyImage#y_position_var}
  */
  readonly yPositionVar?: string;
  /**
  * image block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#image DataAkamaiImagingPolicyImage#image}
  */
  readonly image: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanCompositeImage;
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanCompositeToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanComposite | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    gravity: cdktf.stringToTerraform(struct!.gravity),
    gravity_var: cdktf.stringToTerraform(struct!.gravityVar),
    placement: cdktf.stringToTerraform(struct!.placement),
    placement_var: cdktf.stringToTerraform(struct!.placementVar),
    scale: cdktf.stringToTerraform(struct!.scale),
    scale_dimension: cdktf.stringToTerraform(struct!.scaleDimension),
    scale_dimension_var: cdktf.stringToTerraform(struct!.scaleDimensionVar),
    scale_var: cdktf.stringToTerraform(struct!.scaleVar),
    x_position: cdktf.stringToTerraform(struct!.xPosition),
    x_position_var: cdktf.stringToTerraform(struct!.xPositionVar),
    y_position: cdktf.stringToTerraform(struct!.yPosition),
    y_position_var: cdktf.stringToTerraform(struct!.yPositionVar),
    image: dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanCompositeImageToTerraform(struct!.image),
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanCompositeToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanComposite | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    gravity: {
      value: cdktf.stringToHclTerraform(struct!.gravity),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    gravity_var: {
      value: cdktf.stringToHclTerraform(struct!.gravityVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    placement: {
      value: cdktf.stringToHclTerraform(struct!.placement),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    placement_var: {
      value: cdktf.stringToHclTerraform(struct!.placementVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    scale: {
      value: cdktf.stringToHclTerraform(struct!.scale),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    scale_dimension: {
      value: cdktf.stringToHclTerraform(struct!.scaleDimension),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    scale_dimension_var: {
      value: cdktf.stringToHclTerraform(struct!.scaleDimensionVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    scale_var: {
      value: cdktf.stringToHclTerraform(struct!.scaleVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    x_position: {
      value: cdktf.stringToHclTerraform(struct!.xPosition),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    x_position_var: {
      value: cdktf.stringToHclTerraform(struct!.xPositionVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    y_position: {
      value: cdktf.stringToHclTerraform(struct!.yPosition),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    y_position_var: {
      value: cdktf.stringToHclTerraform(struct!.yPositionVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    image: {
      value: dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanCompositeImageToHclTerraform(struct!.image),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanCompositeImageList",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanCompositeOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanComposite | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._gravity !== undefined) {
      hasAnyValues = true;
      internalValueResult.gravity = this._gravity;
    }
    if (this._gravityVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.gravityVar = this._gravityVar;
    }
    if (this._placement !== undefined) {
      hasAnyValues = true;
      internalValueResult.placement = this._placement;
    }
    if (this._placementVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.placementVar = this._placementVar;
    }
    if (this._scale !== undefined) {
      hasAnyValues = true;
      internalValueResult.scale = this._scale;
    }
    if (this._scaleDimension !== undefined) {
      hasAnyValues = true;
      internalValueResult.scaleDimension = this._scaleDimension;
    }
    if (this._scaleDimensionVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.scaleDimensionVar = this._scaleDimensionVar;
    }
    if (this._scaleVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.scaleVar = this._scaleVar;
    }
    if (this._xPosition !== undefined) {
      hasAnyValues = true;
      internalValueResult.xPosition = this._xPosition;
    }
    if (this._xPositionVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.xPositionVar = this._xPositionVar;
    }
    if (this._yPosition !== undefined) {
      hasAnyValues = true;
      internalValueResult.yPosition = this._yPosition;
    }
    if (this._yPositionVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.yPositionVar = this._yPositionVar;
    }
    if (this._image?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.image = this._image?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanComposite | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._gravity = undefined;
      this._gravityVar = undefined;
      this._placement = undefined;
      this._placementVar = undefined;
      this._scale = undefined;
      this._scaleDimension = undefined;
      this._scaleDimensionVar = undefined;
      this._scaleVar = undefined;
      this._xPosition = undefined;
      this._xPositionVar = undefined;
      this._yPosition = undefined;
      this._yPositionVar = undefined;
      this._image.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._gravity = value.gravity;
      this._gravityVar = value.gravityVar;
      this._placement = value.placement;
      this._placementVar = value.placementVar;
      this._scale = value.scale;
      this._scaleDimension = value.scaleDimension;
      this._scaleDimensionVar = value.scaleDimensionVar;
      this._scaleVar = value.scaleVar;
      this._xPosition = value.xPosition;
      this._xPositionVar = value.xPositionVar;
      this._yPosition = value.yPosition;
      this._yPositionVar = value.yPositionVar;
      this._image.internalValue = value.image;
    }
  }

  // gravity - computed: false, optional: true, required: false
  private _gravity?: string; 
  public get gravity() {
    return this.getStringAttribute('gravity');
  }
  public set gravity(value: string) {
    this._gravity = value;
  }
  public resetGravity() {
    this._gravity = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get gravityInput() {
    return this._gravity;
  }

  // gravity_var - computed: false, optional: true, required: false
  private _gravityVar?: string; 
  public get gravityVar() {
    return this.getStringAttribute('gravity_var');
  }
  public set gravityVar(value: string) {
    this._gravityVar = value;
  }
  public resetGravityVar() {
    this._gravityVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get gravityVarInput() {
    return this._gravityVar;
  }

  // placement - computed: false, optional: true, required: false
  private _placement?: string; 
  public get placement() {
    return this.getStringAttribute('placement');
  }
  public set placement(value: string) {
    this._placement = value;
  }
  public resetPlacement() {
    this._placement = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get placementInput() {
    return this._placement;
  }

  // placement_var - computed: false, optional: true, required: false
  private _placementVar?: string; 
  public get placementVar() {
    return this.getStringAttribute('placement_var');
  }
  public set placementVar(value: string) {
    this._placementVar = value;
  }
  public resetPlacementVar() {
    this._placementVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get placementVarInput() {
    return this._placementVar;
  }

  // scale - computed: false, optional: true, required: false
  private _scale?: string; 
  public get scale() {
    return this.getStringAttribute('scale');
  }
  public set scale(value: string) {
    this._scale = value;
  }
  public resetScale() {
    this._scale = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get scaleInput() {
    return this._scale;
  }

  // scale_dimension - computed: false, optional: true, required: false
  private _scaleDimension?: string; 
  public get scaleDimension() {
    return this.getStringAttribute('scale_dimension');
  }
  public set scaleDimension(value: string) {
    this._scaleDimension = value;
  }
  public resetScaleDimension() {
    this._scaleDimension = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get scaleDimensionInput() {
    return this._scaleDimension;
  }

  // scale_dimension_var - computed: false, optional: true, required: false
  private _scaleDimensionVar?: string; 
  public get scaleDimensionVar() {
    return this.getStringAttribute('scale_dimension_var');
  }
  public set scaleDimensionVar(value: string) {
    this._scaleDimensionVar = value;
  }
  public resetScaleDimensionVar() {
    this._scaleDimensionVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get scaleDimensionVarInput() {
    return this._scaleDimensionVar;
  }

  // scale_var - computed: false, optional: true, required: false
  private _scaleVar?: string; 
  public get scaleVar() {
    return this.getStringAttribute('scale_var');
  }
  public set scaleVar(value: string) {
    this._scaleVar = value;
  }
  public resetScaleVar() {
    this._scaleVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get scaleVarInput() {
    return this._scaleVar;
  }

  // x_position - computed: false, optional: true, required: false
  private _xPosition?: string; 
  public get xPosition() {
    return this.getStringAttribute('x_position');
  }
  public set xPosition(value: string) {
    this._xPosition = value;
  }
  public resetXPosition() {
    this._xPosition = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get xPositionInput() {
    return this._xPosition;
  }

  // x_position_var - computed: false, optional: true, required: false
  private _xPositionVar?: string; 
  public get xPositionVar() {
    return this.getStringAttribute('x_position_var');
  }
  public set xPositionVar(value: string) {
    this._xPositionVar = value;
  }
  public resetXPositionVar() {
    this._xPositionVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get xPositionVarInput() {
    return this._xPositionVar;
  }

  // y_position - computed: false, optional: true, required: false
  private _yPosition?: string; 
  public get yPosition() {
    return this.getStringAttribute('y_position');
  }
  public set yPosition(value: string) {
    this._yPosition = value;
  }
  public resetYPosition() {
    this._yPosition = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get yPositionInput() {
    return this._yPosition;
  }

  // y_position_var - computed: false, optional: true, required: false
  private _yPositionVar?: string; 
  public get yPositionVar() {
    return this.getStringAttribute('y_position_var');
  }
  public set yPositionVar(value: string) {
    this._yPositionVar = value;
  }
  public resetYPositionVar() {
    this._yPositionVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get yPositionVarInput() {
    return this._yPositionVar;
  }

  // image - computed: false, optional: false, required: true
  private _image = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanCompositeImageOutputReference(this, "image");
  public get image() {
    return this._image;
  }
  public putImage(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanCompositeImage) {
    this._image.internalValue = value;
  }
  // Temporarily expose input value. Use with caution.
  public get imageInput() {
    return this._image.internalValue;
  }
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanCompositeList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanComposite[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanCompositeOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanCompositeOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanCompoundTransformations {
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanCompoundTransformationsToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanCompoundTransformations | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanCompoundTransformationsToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanCompoundTransformations | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
  };
  return attrs;
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanCompoundTransformationsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanCompoundTransformations | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanCompoundTransformations | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
    }
  }
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanCompoundTransformationsList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanCompoundTransformations[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanCompoundTransformationsOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanCompoundTransformationsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanCompound {
  /**
  * transformations block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#transformations DataAkamaiImagingPolicyImage#transformations}
  */
  readonly transformations?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanCompoundTransformations[] | cdktf.IResolvable;
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanCompoundToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanCompound | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    transformations: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanCompoundTransformationsToTerraform, true)(struct!.transformations),
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanCompoundToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanCompound | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    transformations: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanCompoundTransformationsToHclTerraform, true)(struct!.transformations),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanCompoundTransformationsList",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanCompoundOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanCompound | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._transformations?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.transformations = this._transformations?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanCompound | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._transformations.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._transformations.internalValue = value.transformations;
    }
  }

  // transformations - computed: false, optional: true, required: false
  private _transformations = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanCompoundTransformationsList(this, "transformations", false);
  public get transformations() {
    return this._transformations;
  }
  public putTransformations(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanCompoundTransformations[] | cdktf.IResolvable) {
    this._transformations.internalValue = value;
  }
  public resetTransformations() {
    this._transformations.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get transformationsInput() {
    return this._transformations.internalValue;
  }
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanCompoundList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanCompound[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanCompoundOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanCompoundOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanContrast {
  /**
  * Adjusts the brightness of the image. Positive values increase brightness and negative values decrease brightness. A value of  `1` produces a white image. A value of  `-1` produces a black image. The default value is `0`, which leaves the image unchanged. The acceptable value range is `-1.0` to `1.0`. Values outside of the acceptable range clamp to this range.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#brightness DataAkamaiImagingPolicyImage#brightness}
  */
  readonly brightness?: string;
  /**
  * Adjusts the brightness of the image. Positive values increase brightness and negative values decrease brightness. A value of  `1` produces a white image. A value of  `-1` produces a black image. The default value is `0`, which leaves the image unchanged. The acceptable value range is `-1.0` to `1.0`. Values outside of the acceptable range clamp to this range.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#brightness_var DataAkamaiImagingPolicyImage#brightness_var}
  */
  readonly brightnessVar?: string;
  /**
  * Adjusts the contrast of the image. Expressed as a range from `-1` to `1`, positive values increase contrast, negative values decrease it, while `0` leaves the image unchanged. Values outside of the `-1` to `1` range clamp to this range.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#contrast DataAkamaiImagingPolicyImage#contrast}
  */
  readonly contrast?: string;
  /**
  * Adjusts the contrast of the image. Expressed as a range from `-1` to `1`, positive values increase contrast, negative values decrease it, while `0` leaves the image unchanged. Values outside of the `-1` to `1` range clamp to this range.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#contrast_var DataAkamaiImagingPolicyImage#contrast_var}
  */
  readonly contrastVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanContrastToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanContrast | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    brightness: cdktf.stringToTerraform(struct!.brightness),
    brightness_var: cdktf.stringToTerraform(struct!.brightnessVar),
    contrast: cdktf.stringToTerraform(struct!.contrast),
    contrast_var: cdktf.stringToTerraform(struct!.contrastVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanContrastToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanContrast | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    brightness: {
      value: cdktf.stringToHclTerraform(struct!.brightness),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    brightness_var: {
      value: cdktf.stringToHclTerraform(struct!.brightnessVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    contrast: {
      value: cdktf.stringToHclTerraform(struct!.contrast),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    contrast_var: {
      value: cdktf.stringToHclTerraform(struct!.contrastVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanContrastOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanContrast | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._brightness !== undefined) {
      hasAnyValues = true;
      internalValueResult.brightness = this._brightness;
    }
    if (this._brightnessVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.brightnessVar = this._brightnessVar;
    }
    if (this._contrast !== undefined) {
      hasAnyValues = true;
      internalValueResult.contrast = this._contrast;
    }
    if (this._contrastVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.contrastVar = this._contrastVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanContrast | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._brightness = undefined;
      this._brightnessVar = undefined;
      this._contrast = undefined;
      this._contrastVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._brightness = value.brightness;
      this._brightnessVar = value.brightnessVar;
      this._contrast = value.contrast;
      this._contrastVar = value.contrastVar;
    }
  }

  // brightness - computed: false, optional: true, required: false
  private _brightness?: string; 
  public get brightness() {
    return this.getStringAttribute('brightness');
  }
  public set brightness(value: string) {
    this._brightness = value;
  }
  public resetBrightness() {
    this._brightness = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get brightnessInput() {
    return this._brightness;
  }

  // brightness_var - computed: false, optional: true, required: false
  private _brightnessVar?: string; 
  public get brightnessVar() {
    return this.getStringAttribute('brightness_var');
  }
  public set brightnessVar(value: string) {
    this._brightnessVar = value;
  }
  public resetBrightnessVar() {
    this._brightnessVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get brightnessVarInput() {
    return this._brightnessVar;
  }

  // contrast - computed: false, optional: true, required: false
  private _contrast?: string; 
  public get contrast() {
    return this.getStringAttribute('contrast');
  }
  public set contrast(value: string) {
    this._contrast = value;
  }
  public resetContrast() {
    this._contrast = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get contrastInput() {
    return this._contrast;
  }

  // contrast_var - computed: false, optional: true, required: false
  private _contrastVar?: string; 
  public get contrastVar() {
    return this.getStringAttribute('contrast_var');
  }
  public set contrastVar(value: string) {
    this._contrastVar = value;
  }
  public resetContrastVar() {
    this._contrastVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get contrastVarInput() {
    return this._contrastVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanContrastList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanContrast[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanContrastOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanContrastOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanGoop {
  /**
  * Specifies the greatest distance control points may move from their original position. A value of `1.0` shifts control points over as far as the next one in the original grid. A value of `0.0` leaves the image unchanged. Values under `0.5` work better for subtle distortions, otherwise control points may pass each other and cause a twisting effect.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#chaos DataAkamaiImagingPolicyImage#chaos}
  */
  readonly chaos?: string;
  /**
  * Specifies the greatest distance control points may move from their original position. A value of `1.0` shifts control points over as far as the next one in the original grid. A value of `0.0` leaves the image unchanged. Values under `0.5` work better for subtle distortions, otherwise control points may pass each other and cause a twisting effect.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#chaos_var DataAkamaiImagingPolicyImage#chaos_var}
  */
  readonly chaosVar?: string;
  /**
  * Controls the density of control points used to distort the image. The largest dimension of the input image is divided up to fit this number of control points. A grid of points is extended on the smaller dimension such that each row and column of control points is equidistant from each adjacent row or column. This parameter strongly affects transformation performance. Be careful choosing values above the default if you expect to transform medium to large size images.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#density DataAkamaiImagingPolicyImage#density}
  */
  readonly density?: string;
  /**
  * Controls the density of control points used to distort the image. The largest dimension of the input image is divided up to fit this number of control points. A grid of points is extended on the smaller dimension such that each row and column of control points is equidistant from each adjacent row or column. This parameter strongly affects transformation performance. Be careful choosing values above the default if you expect to transform medium to large size images.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#density_var DataAkamaiImagingPolicyImage#density_var}
  */
  readonly densityVar?: string;
  /**
  * By default, the distortion algorithm relies on inverse squares to calculate distance but this allows you to change the exponent. You shouldnt need to vary the default value of `2.0`.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#power DataAkamaiImagingPolicyImage#power}
  */
  readonly power?: string;
  /**
  * By default, the distortion algorithm relies on inverse squares to calculate distance but this allows you to change the exponent. You shouldnt need to vary the default value of `2.0`.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#power_var DataAkamaiImagingPolicyImage#power_var}
  */
  readonly powerVar?: string;
  /**
  * Specifies your own `seed` value as an alternative to the default, which is subject to variability. This allows for reproducible and deterministic distortions. If all parameters are kept equal and a constant seed is used, `Goop` distorts an input image consistently over many transformations. By default, this value is set to the current Epoch Time measured in milliseconds, which provides inconsistent transformation output.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#seed DataAkamaiImagingPolicyImage#seed}
  */
  readonly seed?: string;
  /**
  * Specifies your own `seed` value as an alternative to the default, which is subject to variability. This allows for reproducible and deterministic distortions. If all parameters are kept equal and a constant seed is used, `Goop` distorts an input image consistently over many transformations. By default, this value is set to the current Epoch Time measured in milliseconds, which provides inconsistent transformation output.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#seed_var DataAkamaiImagingPolicyImage#seed_var}
  */
  readonly seedVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanGoopToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanGoop | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    chaos: cdktf.stringToTerraform(struct!.chaos),
    chaos_var: cdktf.stringToTerraform(struct!.chaosVar),
    density: cdktf.stringToTerraform(struct!.density),
    density_var: cdktf.stringToTerraform(struct!.densityVar),
    power: cdktf.stringToTerraform(struct!.power),
    power_var: cdktf.stringToTerraform(struct!.powerVar),
    seed: cdktf.stringToTerraform(struct!.seed),
    seed_var: cdktf.stringToTerraform(struct!.seedVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanGoopToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanGoop | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    chaos: {
      value: cdktf.stringToHclTerraform(struct!.chaos),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    chaos_var: {
      value: cdktf.stringToHclTerraform(struct!.chaosVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    density: {
      value: cdktf.stringToHclTerraform(struct!.density),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    density_var: {
      value: cdktf.stringToHclTerraform(struct!.densityVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    power: {
      value: cdktf.stringToHclTerraform(struct!.power),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    power_var: {
      value: cdktf.stringToHclTerraform(struct!.powerVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    seed: {
      value: cdktf.stringToHclTerraform(struct!.seed),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    seed_var: {
      value: cdktf.stringToHclTerraform(struct!.seedVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanGoopOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanGoop | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._chaos !== undefined) {
      hasAnyValues = true;
      internalValueResult.chaos = this._chaos;
    }
    if (this._chaosVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.chaosVar = this._chaosVar;
    }
    if (this._density !== undefined) {
      hasAnyValues = true;
      internalValueResult.density = this._density;
    }
    if (this._densityVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.densityVar = this._densityVar;
    }
    if (this._power !== undefined) {
      hasAnyValues = true;
      internalValueResult.power = this._power;
    }
    if (this._powerVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.powerVar = this._powerVar;
    }
    if (this._seed !== undefined) {
      hasAnyValues = true;
      internalValueResult.seed = this._seed;
    }
    if (this._seedVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.seedVar = this._seedVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanGoop | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._chaos = undefined;
      this._chaosVar = undefined;
      this._density = undefined;
      this._densityVar = undefined;
      this._power = undefined;
      this._powerVar = undefined;
      this._seed = undefined;
      this._seedVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._chaos = value.chaos;
      this._chaosVar = value.chaosVar;
      this._density = value.density;
      this._densityVar = value.densityVar;
      this._power = value.power;
      this._powerVar = value.powerVar;
      this._seed = value.seed;
      this._seedVar = value.seedVar;
    }
  }

  // chaos - computed: false, optional: true, required: false
  private _chaos?: string; 
  public get chaos() {
    return this.getStringAttribute('chaos');
  }
  public set chaos(value: string) {
    this._chaos = value;
  }
  public resetChaos() {
    this._chaos = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get chaosInput() {
    return this._chaos;
  }

  // chaos_var - computed: false, optional: true, required: false
  private _chaosVar?: string; 
  public get chaosVar() {
    return this.getStringAttribute('chaos_var');
  }
  public set chaosVar(value: string) {
    this._chaosVar = value;
  }
  public resetChaosVar() {
    this._chaosVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get chaosVarInput() {
    return this._chaosVar;
  }

  // density - computed: false, optional: true, required: false
  private _density?: string; 
  public get density() {
    return this.getStringAttribute('density');
  }
  public set density(value: string) {
    this._density = value;
  }
  public resetDensity() {
    this._density = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get densityInput() {
    return this._density;
  }

  // density_var - computed: false, optional: true, required: false
  private _densityVar?: string; 
  public get densityVar() {
    return this.getStringAttribute('density_var');
  }
  public set densityVar(value: string) {
    this._densityVar = value;
  }
  public resetDensityVar() {
    this._densityVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get densityVarInput() {
    return this._densityVar;
  }

  // power - computed: false, optional: true, required: false
  private _power?: string; 
  public get power() {
    return this.getStringAttribute('power');
  }
  public set power(value: string) {
    this._power = value;
  }
  public resetPower() {
    this._power = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get powerInput() {
    return this._power;
  }

  // power_var - computed: false, optional: true, required: false
  private _powerVar?: string; 
  public get powerVar() {
    return this.getStringAttribute('power_var');
  }
  public set powerVar(value: string) {
    this._powerVar = value;
  }
  public resetPowerVar() {
    this._powerVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get powerVarInput() {
    return this._powerVar;
  }

  // seed - computed: false, optional: true, required: false
  private _seed?: string; 
  public get seed() {
    return this.getStringAttribute('seed');
  }
  public set seed(value: string) {
    this._seed = value;
  }
  public resetSeed() {
    this._seed = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get seedInput() {
    return this._seed;
  }

  // seed_var - computed: false, optional: true, required: false
  private _seedVar?: string; 
  public get seedVar() {
    return this.getStringAttribute('seed_var');
  }
  public set seedVar(value: string) {
    this._seedVar = value;
  }
  public resetSeedVar() {
    this._seedVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get seedVarInput() {
    return this._seedVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanGoopList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanGoop[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanGoopOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanGoopOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanGrayscale {
  /**
  * The algorithm used to transform colors to grays, either `Brightness`, `Lightness`, `Rec601`, or the default `Rec709`.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#type DataAkamaiImagingPolicyImage#type}
  */
  readonly type?: string;
  /**
  * The algorithm used to transform colors to grays, either `Brightness`, `Lightness`, `Rec601`, or the default `Rec709`.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#type_var DataAkamaiImagingPolicyImage#type_var}
  */
  readonly typeVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanGrayscaleToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanGrayscale | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    type: cdktf.stringToTerraform(struct!.type),
    type_var: cdktf.stringToTerraform(struct!.typeVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanGrayscaleToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanGrayscale | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    type: {
      value: cdktf.stringToHclTerraform(struct!.type),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    type_var: {
      value: cdktf.stringToHclTerraform(struct!.typeVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanGrayscaleOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanGrayscale | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._type !== undefined) {
      hasAnyValues = true;
      internalValueResult.type = this._type;
    }
    if (this._typeVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.typeVar = this._typeVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanGrayscale | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._type = undefined;
      this._typeVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._type = value.type;
      this._typeVar = value.typeVar;
    }
  }

  // type - computed: false, optional: true, required: false
  private _type?: string; 
  public get type() {
    return this.getStringAttribute('type');
  }
  public set type(value: string) {
    this._type = value;
  }
  public resetType() {
    this._type = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get typeInput() {
    return this._type;
  }

  // type_var - computed: false, optional: true, required: false
  private _typeVar?: string; 
  public get typeVar() {
    return this.getStringAttribute('type_var');
  }
  public set typeVar(value: string) {
    this._typeVar = value;
  }
  public resetTypeVar() {
    this._typeVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get typeVarInput() {
    return this._typeVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanGrayscaleList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanGrayscale[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanGrayscaleOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanGrayscaleOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanHsl {
  /**
  * The number of degrees to rotate colors around the color wheel, `0` by default.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hue DataAkamaiImagingPolicyImage#hue}
  */
  readonly hue?: string;
  /**
  * The number of degrees to rotate colors around the color wheel, `0` by default.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hue_var DataAkamaiImagingPolicyImage#hue_var}
  */
  readonly hueVar?: string;
  /**
  * A multiplier to adjust the lightness of colors in the image. Note that lightness is distinct from brightness. For example, reducing the lightness of a light green might give you a lime green whereas reducing the brightness of a light green might give you a darker shade of the same green. Values less than `1.0` decrease the lightness of colors in the image. Values greater than `1.0` increase the lightness of colors in the image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#lightness DataAkamaiImagingPolicyImage#lightness}
  */
  readonly lightness?: string;
  /**
  * A multiplier to adjust the lightness of colors in the image. Note that lightness is distinct from brightness. For example, reducing the lightness of a light green might give you a lime green whereas reducing the brightness of a light green might give you a darker shade of the same green. Values less than `1.0` decrease the lightness of colors in the image. Values greater than `1.0` increase the lightness of colors in the image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#lightness_var DataAkamaiImagingPolicyImage#lightness_var}
  */
  readonly lightnessVar?: string;
  /**
  * A multiplier to adjust the saturation of colors in the image. Values less than `1.0` decrease saturation and values greater than `1.0` increase the saturation. A value of `0.0` removes all color from the image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#saturation DataAkamaiImagingPolicyImage#saturation}
  */
  readonly saturation?: string;
  /**
  * A multiplier to adjust the saturation of colors in the image. Values less than `1.0` decrease saturation and values greater than `1.0` increase the saturation. A value of `0.0` removes all color from the image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#saturation_var DataAkamaiImagingPolicyImage#saturation_var}
  */
  readonly saturationVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanHslToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanHsl | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    hue: cdktf.stringToTerraform(struct!.hue),
    hue_var: cdktf.stringToTerraform(struct!.hueVar),
    lightness: cdktf.stringToTerraform(struct!.lightness),
    lightness_var: cdktf.stringToTerraform(struct!.lightnessVar),
    saturation: cdktf.stringToTerraform(struct!.saturation),
    saturation_var: cdktf.stringToTerraform(struct!.saturationVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanHslToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanHsl | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    hue: {
      value: cdktf.stringToHclTerraform(struct!.hue),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    hue_var: {
      value: cdktf.stringToHclTerraform(struct!.hueVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    lightness: {
      value: cdktf.stringToHclTerraform(struct!.lightness),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    lightness_var: {
      value: cdktf.stringToHclTerraform(struct!.lightnessVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    saturation: {
      value: cdktf.stringToHclTerraform(struct!.saturation),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    saturation_var: {
      value: cdktf.stringToHclTerraform(struct!.saturationVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanHslOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanHsl | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._hue !== undefined) {
      hasAnyValues = true;
      internalValueResult.hue = this._hue;
    }
    if (this._hueVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.hueVar = this._hueVar;
    }
    if (this._lightness !== undefined) {
      hasAnyValues = true;
      internalValueResult.lightness = this._lightness;
    }
    if (this._lightnessVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.lightnessVar = this._lightnessVar;
    }
    if (this._saturation !== undefined) {
      hasAnyValues = true;
      internalValueResult.saturation = this._saturation;
    }
    if (this._saturationVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.saturationVar = this._saturationVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanHsl | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._hue = undefined;
      this._hueVar = undefined;
      this._lightness = undefined;
      this._lightnessVar = undefined;
      this._saturation = undefined;
      this._saturationVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._hue = value.hue;
      this._hueVar = value.hueVar;
      this._lightness = value.lightness;
      this._lightnessVar = value.lightnessVar;
      this._saturation = value.saturation;
      this._saturationVar = value.saturationVar;
    }
  }

  // hue - computed: false, optional: true, required: false
  private _hue?: string; 
  public get hue() {
    return this.getStringAttribute('hue');
  }
  public set hue(value: string) {
    this._hue = value;
  }
  public resetHue() {
    this._hue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hueInput() {
    return this._hue;
  }

  // hue_var - computed: false, optional: true, required: false
  private _hueVar?: string; 
  public get hueVar() {
    return this.getStringAttribute('hue_var');
  }
  public set hueVar(value: string) {
    this._hueVar = value;
  }
  public resetHueVar() {
    this._hueVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hueVarInput() {
    return this._hueVar;
  }

  // lightness - computed: false, optional: true, required: false
  private _lightness?: string; 
  public get lightness() {
    return this.getStringAttribute('lightness');
  }
  public set lightness(value: string) {
    this._lightness = value;
  }
  public resetLightness() {
    this._lightness = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get lightnessInput() {
    return this._lightness;
  }

  // lightness_var - computed: false, optional: true, required: false
  private _lightnessVar?: string; 
  public get lightnessVar() {
    return this.getStringAttribute('lightness_var');
  }
  public set lightnessVar(value: string) {
    this._lightnessVar = value;
  }
  public resetLightnessVar() {
    this._lightnessVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get lightnessVarInput() {
    return this._lightnessVar;
  }

  // saturation - computed: false, optional: true, required: false
  private _saturation?: string; 
  public get saturation() {
    return this.getStringAttribute('saturation');
  }
  public set saturation(value: string) {
    this._saturation = value;
  }
  public resetSaturation() {
    this._saturation = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get saturationInput() {
    return this._saturation;
  }

  // saturation_var - computed: false, optional: true, required: false
  private _saturationVar?: string; 
  public get saturationVar() {
    return this.getStringAttribute('saturation_var');
  }
  public set saturationVar(value: string) {
    this._saturationVar = value;
  }
  public resetSaturationVar() {
    this._saturationVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get saturationVarInput() {
    return this._saturationVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanHslList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanHsl[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanHslOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanHslOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanHsv {
  /**
  * The number of degrees to rotate colors around the color wheel, `0.0` by default.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hue DataAkamaiImagingPolicyImage#hue}
  */
  readonly hue?: string;
  /**
  * The number of degrees to rotate colors around the color wheel, `0.0` by default.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hue_var DataAkamaiImagingPolicyImage#hue_var}
  */
  readonly hueVar?: string;
  /**
  * A multiplier to adjust the saturation of colors in the image. Values less than `1.0` decrease saturation and values greater than `1.0` increase the saturation. A value of `0.0` removes all color from the image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#saturation DataAkamaiImagingPolicyImage#saturation}
  */
  readonly saturation?: string;
  /**
  * A multiplier to adjust the saturation of colors in the image. Values less than `1.0` decrease saturation and values greater than `1.0` increase the saturation. A value of `0.0` removes all color from the image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#saturation_var DataAkamaiImagingPolicyImage#saturation_var}
  */
  readonly saturationVar?: string;
  /**
  * A multiplier to adjust the lightness or darkness of the images base color. Values less than 1.0 decrease the base colors in the image, making them appear darker. Values greater than 1.0 increase the base colors in the image, making them appear lighter.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#value DataAkamaiImagingPolicyImage#value}
  */
  readonly value?: string;
  /**
  * A multiplier to adjust the lightness or darkness of the images base color. Values less than 1.0 decrease the base colors in the image, making them appear darker. Values greater than 1.0 increase the base colors in the image, making them appear lighter.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#value_var DataAkamaiImagingPolicyImage#value_var}
  */
  readonly valueVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanHsvToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanHsv | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    hue: cdktf.stringToTerraform(struct!.hue),
    hue_var: cdktf.stringToTerraform(struct!.hueVar),
    saturation: cdktf.stringToTerraform(struct!.saturation),
    saturation_var: cdktf.stringToTerraform(struct!.saturationVar),
    value: cdktf.stringToTerraform(struct!.value),
    value_var: cdktf.stringToTerraform(struct!.valueVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanHsvToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanHsv | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    hue: {
      value: cdktf.stringToHclTerraform(struct!.hue),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    hue_var: {
      value: cdktf.stringToHclTerraform(struct!.hueVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    saturation: {
      value: cdktf.stringToHclTerraform(struct!.saturation),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    saturation_var: {
      value: cdktf.stringToHclTerraform(struct!.saturationVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    value: {
      value: cdktf.stringToHclTerraform(struct!.value),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    value_var: {
      value: cdktf.stringToHclTerraform(struct!.valueVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanHsvOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanHsv | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._hue !== undefined) {
      hasAnyValues = true;
      internalValueResult.hue = this._hue;
    }
    if (this._hueVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.hueVar = this._hueVar;
    }
    if (this._saturation !== undefined) {
      hasAnyValues = true;
      internalValueResult.saturation = this._saturation;
    }
    if (this._saturationVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.saturationVar = this._saturationVar;
    }
    if (this._value !== undefined) {
      hasAnyValues = true;
      internalValueResult.value = this._value;
    }
    if (this._valueVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.valueVar = this._valueVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanHsv | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._hue = undefined;
      this._hueVar = undefined;
      this._saturation = undefined;
      this._saturationVar = undefined;
      this._value = undefined;
      this._valueVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._hue = value.hue;
      this._hueVar = value.hueVar;
      this._saturation = value.saturation;
      this._saturationVar = value.saturationVar;
      this._value = value.value;
      this._valueVar = value.valueVar;
    }
  }

  // hue - computed: false, optional: true, required: false
  private _hue?: string; 
  public get hue() {
    return this.getStringAttribute('hue');
  }
  public set hue(value: string) {
    this._hue = value;
  }
  public resetHue() {
    this._hue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hueInput() {
    return this._hue;
  }

  // hue_var - computed: false, optional: true, required: false
  private _hueVar?: string; 
  public get hueVar() {
    return this.getStringAttribute('hue_var');
  }
  public set hueVar(value: string) {
    this._hueVar = value;
  }
  public resetHueVar() {
    this._hueVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hueVarInput() {
    return this._hueVar;
  }

  // saturation - computed: false, optional: true, required: false
  private _saturation?: string; 
  public get saturation() {
    return this.getStringAttribute('saturation');
  }
  public set saturation(value: string) {
    this._saturation = value;
  }
  public resetSaturation() {
    this._saturation = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get saturationInput() {
    return this._saturation;
  }

  // saturation_var - computed: false, optional: true, required: false
  private _saturationVar?: string; 
  public get saturationVar() {
    return this.getStringAttribute('saturation_var');
  }
  public set saturationVar(value: string) {
    this._saturationVar = value;
  }
  public resetSaturationVar() {
    this._saturationVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get saturationVarInput() {
    return this._saturationVar;
  }

  // value - computed: false, optional: true, required: false
  private _value?: string; 
  public get value() {
    return this.getStringAttribute('value');
  }
  public set value(value: string) {
    this._value = value;
  }
  public resetValue() {
    this._value = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get valueInput() {
    return this._value;
  }

  // value_var - computed: false, optional: true, required: false
  private _valueVar?: string; 
  public get valueVar() {
    return this.getStringAttribute('value_var');
  }
  public set valueVar(value: string) {
    this._valueVar = value;
  }
  public resetValueVar() {
    this._valueVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get valueVarInput() {
    return this._valueVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanHsvList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanHsv[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanHsvOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanHsvOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfDimensionDefault {
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfDimensionDefaultToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfDimensionDefaultOutputReference | DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfDimensionDefault): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfDimensionDefaultToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfDimensionDefaultOutputReference | DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfDimensionDefault): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
  };
  return attrs;
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfDimensionDefaultOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false, 0);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfDimensionDefault | undefined {
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfDimensionDefault | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
    }
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfDimensionEqual {
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfDimensionEqualToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfDimensionEqualOutputReference | DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfDimensionEqual): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfDimensionEqualToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfDimensionEqualOutputReference | DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfDimensionEqual): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
  };
  return attrs;
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfDimensionEqualOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false, 0);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfDimensionEqual | undefined {
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfDimensionEqual | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
    }
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfDimensionGreaterThan {
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfDimensionGreaterThanToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfDimensionGreaterThanOutputReference | DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfDimensionGreaterThan): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfDimensionGreaterThanToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfDimensionGreaterThanOutputReference | DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfDimensionGreaterThan): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
  };
  return attrs;
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfDimensionGreaterThanOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false, 0);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfDimensionGreaterThan | undefined {
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfDimensionGreaterThan | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
    }
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfDimensionLessThan {
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfDimensionLessThanToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfDimensionLessThanOutputReference | DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfDimensionLessThan): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfDimensionLessThanToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfDimensionLessThanOutputReference | DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfDimensionLessThan): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
  };
  return attrs;
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfDimensionLessThanOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false, 0);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfDimensionLessThan | undefined {
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfDimensionLessThan | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
    }
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfDimension {
  /**
  * The dimension to use to select the transformation, either `height`, `width`, or `both`.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#dimension DataAkamaiImagingPolicyImage#dimension}
  */
  readonly dimension?: string;
  /**
  * The dimension to use to select the transformation, either `height`, `width`, or `both`.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#dimension_var DataAkamaiImagingPolicyImage#dimension_var}
  */
  readonly dimensionVar?: string;
  /**
  * The value to compare against the source image dimension. For example, if the image dimension is less than the value the lessThan transformation is applied.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#value DataAkamaiImagingPolicyImage#value}
  */
  readonly value?: string;
  /**
  * The value to compare against the source image dimension. For example, if the image dimension is less than the value the lessThan transformation is applied.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#value_var DataAkamaiImagingPolicyImage#value_var}
  */
  readonly valueVar?: string;
  /**
  * default block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#default DataAkamaiImagingPolicyImage#default}
  */
  readonly default?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfDimensionDefault;
  /**
  * equal block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#equal DataAkamaiImagingPolicyImage#equal}
  */
  readonly equal?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfDimensionEqual;
  /**
  * greater_than block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#greater_than DataAkamaiImagingPolicyImage#greater_than}
  */
  readonly greaterThan?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfDimensionGreaterThan;
  /**
  * less_than block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#less_than DataAkamaiImagingPolicyImage#less_than}
  */
  readonly lessThan?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfDimensionLessThan;
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfDimensionToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfDimension | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    dimension: cdktf.stringToTerraform(struct!.dimension),
    dimension_var: cdktf.stringToTerraform(struct!.dimensionVar),
    value: cdktf.stringToTerraform(struct!.value),
    value_var: cdktf.stringToTerraform(struct!.valueVar),
    default: dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfDimensionDefaultToTerraform(struct!.default),
    equal: dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfDimensionEqualToTerraform(struct!.equal),
    greater_than: dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfDimensionGreaterThanToTerraform(struct!.greaterThan),
    less_than: dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfDimensionLessThanToTerraform(struct!.lessThan),
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfDimensionToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfDimension | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    dimension: {
      value: cdktf.stringToHclTerraform(struct!.dimension),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    dimension_var: {
      value: cdktf.stringToHclTerraform(struct!.dimensionVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    value: {
      value: cdktf.stringToHclTerraform(struct!.value),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    value_var: {
      value: cdktf.stringToHclTerraform(struct!.valueVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    default: {
      value: dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfDimensionDefaultToHclTerraform(struct!.default),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfDimensionDefaultList",
    },
    equal: {
      value: dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfDimensionEqualToHclTerraform(struct!.equal),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfDimensionEqualList",
    },
    greater_than: {
      value: dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfDimensionGreaterThanToHclTerraform(struct!.greaterThan),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfDimensionGreaterThanList",
    },
    less_than: {
      value: dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfDimensionLessThanToHclTerraform(struct!.lessThan),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfDimensionLessThanList",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfDimensionOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfDimension | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._dimension !== undefined) {
      hasAnyValues = true;
      internalValueResult.dimension = this._dimension;
    }
    if (this._dimensionVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.dimensionVar = this._dimensionVar;
    }
    if (this._value !== undefined) {
      hasAnyValues = true;
      internalValueResult.value = this._value;
    }
    if (this._valueVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.valueVar = this._valueVar;
    }
    if (this._default?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.default = this._default?.internalValue;
    }
    if (this._equal?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.equal = this._equal?.internalValue;
    }
    if (this._greaterThan?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.greaterThan = this._greaterThan?.internalValue;
    }
    if (this._lessThan?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.lessThan = this._lessThan?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfDimension | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._dimension = undefined;
      this._dimensionVar = undefined;
      this._value = undefined;
      this._valueVar = undefined;
      this._default.internalValue = undefined;
      this._equal.internalValue = undefined;
      this._greaterThan.internalValue = undefined;
      this._lessThan.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._dimension = value.dimension;
      this._dimensionVar = value.dimensionVar;
      this._value = value.value;
      this._valueVar = value.valueVar;
      this._default.internalValue = value.default;
      this._equal.internalValue = value.equal;
      this._greaterThan.internalValue = value.greaterThan;
      this._lessThan.internalValue = value.lessThan;
    }
  }

  // dimension - computed: false, optional: true, required: false
  private _dimension?: string; 
  public get dimension() {
    return this.getStringAttribute('dimension');
  }
  public set dimension(value: string) {
    this._dimension = value;
  }
  public resetDimension() {
    this._dimension = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get dimensionInput() {
    return this._dimension;
  }

  // dimension_var - computed: false, optional: true, required: false
  private _dimensionVar?: string; 
  public get dimensionVar() {
    return this.getStringAttribute('dimension_var');
  }
  public set dimensionVar(value: string) {
    this._dimensionVar = value;
  }
  public resetDimensionVar() {
    this._dimensionVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get dimensionVarInput() {
    return this._dimensionVar;
  }

  // value - computed: false, optional: true, required: false
  private _value?: string; 
  public get value() {
    return this.getStringAttribute('value');
  }
  public set value(value: string) {
    this._value = value;
  }
  public resetValue() {
    this._value = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get valueInput() {
    return this._value;
  }

  // value_var - computed: false, optional: true, required: false
  private _valueVar?: string; 
  public get valueVar() {
    return this.getStringAttribute('value_var');
  }
  public set valueVar(value: string) {
    this._valueVar = value;
  }
  public resetValueVar() {
    this._valueVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get valueVarInput() {
    return this._valueVar;
  }

  // default - computed: false, optional: true, required: false
  private _default = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfDimensionDefaultOutputReference(this, "default");
  public get default() {
    return this._default;
  }
  public putDefault(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfDimensionDefault) {
    this._default.internalValue = value;
  }
  public resetDefault() {
    this._default.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get defaultInput() {
    return this._default.internalValue;
  }

  // equal - computed: false, optional: true, required: false
  private _equal = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfDimensionEqualOutputReference(this, "equal");
  public get equal() {
    return this._equal;
  }
  public putEqual(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfDimensionEqual) {
    this._equal.internalValue = value;
  }
  public resetEqual() {
    this._equal.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get equalInput() {
    return this._equal.internalValue;
  }

  // greater_than - computed: false, optional: true, required: false
  private _greaterThan = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfDimensionGreaterThanOutputReference(this, "greater_than");
  public get greaterThan() {
    return this._greaterThan;
  }
  public putGreaterThan(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfDimensionGreaterThan) {
    this._greaterThan.internalValue = value;
  }
  public resetGreaterThan() {
    this._greaterThan.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get greaterThanInput() {
    return this._greaterThan.internalValue;
  }

  // less_than - computed: false, optional: true, required: false
  private _lessThan = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfDimensionLessThanOutputReference(this, "less_than");
  public get lessThan() {
    return this._lessThan;
  }
  public putLessThan(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfDimensionLessThan) {
    this._lessThan.internalValue = value;
  }
  public resetLessThan() {
    this._lessThan.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get lessThanInput() {
    return this._lessThan.internalValue;
  }
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfDimensionList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfDimension[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfDimensionOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfDimensionOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfOrientationDefault {
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfOrientationDefaultToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfOrientationDefaultOutputReference | DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfOrientationDefault): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfOrientationDefaultToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfOrientationDefaultOutputReference | DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfOrientationDefault): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
  };
  return attrs;
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfOrientationDefaultOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false, 0);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfOrientationDefault | undefined {
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfOrientationDefault | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
    }
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfOrientationLandscape {
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfOrientationLandscapeToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfOrientationLandscapeOutputReference | DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfOrientationLandscape): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfOrientationLandscapeToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfOrientationLandscapeOutputReference | DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfOrientationLandscape): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
  };
  return attrs;
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfOrientationLandscapeOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false, 0);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfOrientationLandscape | undefined {
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfOrientationLandscape | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
    }
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfOrientationPortrait {
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfOrientationPortraitToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfOrientationPortraitOutputReference | DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfOrientationPortrait): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfOrientationPortraitToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfOrientationPortraitOutputReference | DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfOrientationPortrait): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
  };
  return attrs;
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfOrientationPortraitOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false, 0);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfOrientationPortrait | undefined {
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfOrientationPortrait | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
    }
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfOrientationSquare {
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfOrientationSquareToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfOrientationSquareOutputReference | DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfOrientationSquare): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfOrientationSquareToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfOrientationSquareOutputReference | DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfOrientationSquare): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
  };
  return attrs;
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfOrientationSquareOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false, 0);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfOrientationSquare | undefined {
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfOrientationSquare | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
    }
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfOrientation {
  /**
  * default block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#default DataAkamaiImagingPolicyImage#default}
  */
  readonly default?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfOrientationDefault;
  /**
  * landscape block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#landscape DataAkamaiImagingPolicyImage#landscape}
  */
  readonly landscape?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfOrientationLandscape;
  /**
  * portrait block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#portrait DataAkamaiImagingPolicyImage#portrait}
  */
  readonly portrait?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfOrientationPortrait;
  /**
  * square block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#square DataAkamaiImagingPolicyImage#square}
  */
  readonly square?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfOrientationSquare;
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfOrientationToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfOrientation | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    default: dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfOrientationDefaultToTerraform(struct!.default),
    landscape: dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfOrientationLandscapeToTerraform(struct!.landscape),
    portrait: dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfOrientationPortraitToTerraform(struct!.portrait),
    square: dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfOrientationSquareToTerraform(struct!.square),
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfOrientationToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfOrientation | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    default: {
      value: dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfOrientationDefaultToHclTerraform(struct!.default),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfOrientationDefaultList",
    },
    landscape: {
      value: dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfOrientationLandscapeToHclTerraform(struct!.landscape),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfOrientationLandscapeList",
    },
    portrait: {
      value: dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfOrientationPortraitToHclTerraform(struct!.portrait),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfOrientationPortraitList",
    },
    square: {
      value: dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfOrientationSquareToHclTerraform(struct!.square),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfOrientationSquareList",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfOrientationOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfOrientation | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._default?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.default = this._default?.internalValue;
    }
    if (this._landscape?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.landscape = this._landscape?.internalValue;
    }
    if (this._portrait?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.portrait = this._portrait?.internalValue;
    }
    if (this._square?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.square = this._square?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfOrientation | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._default.internalValue = undefined;
      this._landscape.internalValue = undefined;
      this._portrait.internalValue = undefined;
      this._square.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._default.internalValue = value.default;
      this._landscape.internalValue = value.landscape;
      this._portrait.internalValue = value.portrait;
      this._square.internalValue = value.square;
    }
  }

  // default - computed: false, optional: true, required: false
  private _default = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfOrientationDefaultOutputReference(this, "default");
  public get default() {
    return this._default;
  }
  public putDefault(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfOrientationDefault) {
    this._default.internalValue = value;
  }
  public resetDefault() {
    this._default.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get defaultInput() {
    return this._default.internalValue;
  }

  // landscape - computed: false, optional: true, required: false
  private _landscape = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfOrientationLandscapeOutputReference(this, "landscape");
  public get landscape() {
    return this._landscape;
  }
  public putLandscape(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfOrientationLandscape) {
    this._landscape.internalValue = value;
  }
  public resetLandscape() {
    this._landscape.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get landscapeInput() {
    return this._landscape.internalValue;
  }

  // portrait - computed: false, optional: true, required: false
  private _portrait = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfOrientationPortraitOutputReference(this, "portrait");
  public get portrait() {
    return this._portrait;
  }
  public putPortrait(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfOrientationPortrait) {
    this._portrait.internalValue = value;
  }
  public resetPortrait() {
    this._portrait.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get portraitInput() {
    return this._portrait.internalValue;
  }

  // square - computed: false, optional: true, required: false
  private _square = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfOrientationSquareOutputReference(this, "square");
  public get square() {
    return this._square;
  }
  public putSquare(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfOrientationSquare) {
    this._square.internalValue = value;
  }
  public resetSquare() {
    this._square.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get squareInput() {
    return this._square.internalValue;
  }
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfOrientationList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfOrientation[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfOrientationOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfOrientationOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanMaxColors {
  /**
  * The value representing the maximum number of colors to use with the source image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#colors DataAkamaiImagingPolicyImage#colors}
  */
  readonly colors?: string;
  /**
  * The value representing the maximum number of colors to use with the source image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#colors_var DataAkamaiImagingPolicyImage#colors_var}
  */
  readonly colorsVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanMaxColorsToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanMaxColors | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    colors: cdktf.stringToTerraform(struct!.colors),
    colors_var: cdktf.stringToTerraform(struct!.colorsVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanMaxColorsToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanMaxColors | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    colors: {
      value: cdktf.stringToHclTerraform(struct!.colors),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    colors_var: {
      value: cdktf.stringToHclTerraform(struct!.colorsVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanMaxColorsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanMaxColors | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._colors !== undefined) {
      hasAnyValues = true;
      internalValueResult.colors = this._colors;
    }
    if (this._colorsVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.colorsVar = this._colorsVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanMaxColors | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._colors = undefined;
      this._colorsVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._colors = value.colors;
      this._colorsVar = value.colorsVar;
    }
  }

  // colors - computed: false, optional: true, required: false
  private _colors?: string; 
  public get colors() {
    return this.getStringAttribute('colors');
  }
  public set colors(value: string) {
    this._colors = value;
  }
  public resetColors() {
    this._colors = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get colorsInput() {
    return this._colors;
  }

  // colors_var - computed: false, optional: true, required: false
  private _colorsVar?: string; 
  public get colorsVar() {
    return this.getStringAttribute('colors_var');
  }
  public set colorsVar(value: string) {
    this._colorsVar = value;
  }
  public resetColorsVar() {
    this._colorsVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get colorsVarInput() {
    return this._colorsVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanMaxColorsList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanMaxColors[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanMaxColorsOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanMaxColorsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanMirror {
  /**
  * Flips the image horizontally.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#horizontal DataAkamaiImagingPolicyImage#horizontal}
  */
  readonly horizontal?: string;
  /**
  * Flips the image horizontally.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#horizontal_var DataAkamaiImagingPolicyImage#horizontal_var}
  */
  readonly horizontalVar?: string;
  /**
  * Flips the image vertically.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#vertical DataAkamaiImagingPolicyImage#vertical}
  */
  readonly vertical?: string;
  /**
  * Flips the image vertically.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#vertical_var DataAkamaiImagingPolicyImage#vertical_var}
  */
  readonly verticalVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanMirrorToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanMirror | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    horizontal: cdktf.stringToTerraform(struct!.horizontal),
    horizontal_var: cdktf.stringToTerraform(struct!.horizontalVar),
    vertical: cdktf.stringToTerraform(struct!.vertical),
    vertical_var: cdktf.stringToTerraform(struct!.verticalVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanMirrorToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanMirror | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    horizontal: {
      value: cdktf.stringToHclTerraform(struct!.horizontal),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    horizontal_var: {
      value: cdktf.stringToHclTerraform(struct!.horizontalVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    vertical: {
      value: cdktf.stringToHclTerraform(struct!.vertical),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    vertical_var: {
      value: cdktf.stringToHclTerraform(struct!.verticalVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanMirrorOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanMirror | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._horizontal !== undefined) {
      hasAnyValues = true;
      internalValueResult.horizontal = this._horizontal;
    }
    if (this._horizontalVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.horizontalVar = this._horizontalVar;
    }
    if (this._vertical !== undefined) {
      hasAnyValues = true;
      internalValueResult.vertical = this._vertical;
    }
    if (this._verticalVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.verticalVar = this._verticalVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanMirror | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._horizontal = undefined;
      this._horizontalVar = undefined;
      this._vertical = undefined;
      this._verticalVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._horizontal = value.horizontal;
      this._horizontalVar = value.horizontalVar;
      this._vertical = value.vertical;
      this._verticalVar = value.verticalVar;
    }
  }

  // horizontal - computed: false, optional: true, required: false
  private _horizontal?: string; 
  public get horizontal() {
    return this.getStringAttribute('horizontal');
  }
  public set horizontal(value: string) {
    this._horizontal = value;
  }
  public resetHorizontal() {
    this._horizontal = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get horizontalInput() {
    return this._horizontal;
  }

  // horizontal_var - computed: false, optional: true, required: false
  private _horizontalVar?: string; 
  public get horizontalVar() {
    return this.getStringAttribute('horizontal_var');
  }
  public set horizontalVar(value: string) {
    this._horizontalVar = value;
  }
  public resetHorizontalVar() {
    this._horizontalVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get horizontalVarInput() {
    return this._horizontalVar;
  }

  // vertical - computed: false, optional: true, required: false
  private _vertical?: string; 
  public get vertical() {
    return this.getStringAttribute('vertical');
  }
  public set vertical(value: string) {
    this._vertical = value;
  }
  public resetVertical() {
    this._vertical = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get verticalInput() {
    return this._vertical;
  }

  // vertical_var - computed: false, optional: true, required: false
  private _verticalVar?: string; 
  public get verticalVar() {
    return this.getStringAttribute('vertical_var');
  }
  public set verticalVar(value: string) {
    this._verticalVar = value;
  }
  public resetVerticalVar() {
    this._verticalVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get verticalVarInput() {
    return this._verticalVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanMirrorList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanMirror[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanMirrorOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanMirrorOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanMonoHue {
  /**
  * Specify a hue by indicating the degree of rotation between 0 and 360 degrees around the color wheel. By default Mono Hue applies a red hue, 0.0 on the color wheel.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hue DataAkamaiImagingPolicyImage#hue}
  */
  readonly hue?: string;
  /**
  * Specify a hue by indicating the degree of rotation between 0 and 360 degrees around the color wheel. By default Mono Hue applies a red hue, 0.0 on the color wheel.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hue_var DataAkamaiImagingPolicyImage#hue_var}
  */
  readonly hueVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanMonoHueToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanMonoHue | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    hue: cdktf.stringToTerraform(struct!.hue),
    hue_var: cdktf.stringToTerraform(struct!.hueVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanMonoHueToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanMonoHue | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    hue: {
      value: cdktf.stringToHclTerraform(struct!.hue),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    hue_var: {
      value: cdktf.stringToHclTerraform(struct!.hueVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanMonoHueOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanMonoHue | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._hue !== undefined) {
      hasAnyValues = true;
      internalValueResult.hue = this._hue;
    }
    if (this._hueVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.hueVar = this._hueVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanMonoHue | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._hue = undefined;
      this._hueVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._hue = value.hue;
      this._hueVar = value.hueVar;
    }
  }

  // hue - computed: false, optional: true, required: false
  private _hue?: string; 
  public get hue() {
    return this.getStringAttribute('hue');
  }
  public set hue(value: string) {
    this._hue = value;
  }
  public resetHue() {
    this._hue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hueInput() {
    return this._hue;
  }

  // hue_var - computed: false, optional: true, required: false
  private _hueVar?: string; 
  public get hueVar() {
    return this.getStringAttribute('hue_var');
  }
  public set hueVar(value: string) {
    this._hueVar = value;
  }
  public resetHueVar() {
    this._hueVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hueVarInput() {
    return this._hueVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanMonoHueList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanMonoHue[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanMonoHueOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanMonoHueOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanOpacity {
  /**
  * Represents alpha values on a scale of `0` to `1`. Values below `1` increase transparency, and `0` is invisible. For images that have some transparency, values above `1` increase the opacity of the transparent portions.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#opacity DataAkamaiImagingPolicyImage#opacity}
  */
  readonly opacity?: string;
  /**
  * Represents alpha values on a scale of `0` to `1`. Values below `1` increase transparency, and `0` is invisible. For images that have some transparency, values above `1` increase the opacity of the transparent portions.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#opacity_var DataAkamaiImagingPolicyImage#opacity_var}
  */
  readonly opacityVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanOpacityToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanOpacity | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    opacity: cdktf.stringToTerraform(struct!.opacity),
    opacity_var: cdktf.stringToTerraform(struct!.opacityVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanOpacityToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanOpacity | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    opacity: {
      value: cdktf.stringToHclTerraform(struct!.opacity),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    opacity_var: {
      value: cdktf.stringToHclTerraform(struct!.opacityVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanOpacityOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanOpacity | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._opacity !== undefined) {
      hasAnyValues = true;
      internalValueResult.opacity = this._opacity;
    }
    if (this._opacityVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.opacityVar = this._opacityVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanOpacity | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._opacity = undefined;
      this._opacityVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._opacity = value.opacity;
      this._opacityVar = value.opacityVar;
    }
  }

  // opacity - computed: false, optional: true, required: false
  private _opacity?: string; 
  public get opacity() {
    return this.getStringAttribute('opacity');
  }
  public set opacity(value: string) {
    this._opacity = value;
  }
  public resetOpacity() {
    this._opacity = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get opacityInput() {
    return this._opacity;
  }

  // opacity_var - computed: false, optional: true, required: false
  private _opacityVar?: string; 
  public get opacityVar() {
    return this.getStringAttribute('opacity_var');
  }
  public set opacityVar(value: string) {
    this._opacityVar = value;
  }
  public resetOpacityVar() {
    this._opacityVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get opacityVarInput() {
    return this._opacityVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanOpacityList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanOpacity[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanOpacityOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanOpacityOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanRemoveColor {
  /**
  * The hexadecimal CSS color value to remove.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#color DataAkamaiImagingPolicyImage#color}
  */
  readonly color?: string;
  /**
  * The hexadecimal CSS color value to remove.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#color_var DataAkamaiImagingPolicyImage#color_var}
  */
  readonly colorVar?: string;
  /**
  * The RemoveColor transformation may create a hard edge around an image. To minimize these hard edges and make the removal of the color more gradual in appearance, use the Feather option. This option allows you to extend the color removal beyond the specified Tolerance. The pixels in this extended tolerance become semi-transparent - creating a softer edge.  The first realtime request for an image using the feather option may result in a slow transformation time. Subsequent requests are not impacted as they are served directly out of cache.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#feather DataAkamaiImagingPolicyImage#feather}
  */
  readonly feather?: string;
  /**
  * The RemoveColor transformation may create a hard edge around an image. To minimize these hard edges and make the removal of the color more gradual in appearance, use the Feather option. This option allows you to extend the color removal beyond the specified Tolerance. The pixels in this extended tolerance become semi-transparent - creating a softer edge.  The first realtime request for an image using the feather option may result in a slow transformation time. Subsequent requests are not impacted as they are served directly out of cache.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#feather_var DataAkamaiImagingPolicyImage#feather_var}
  */
  readonly featherVar?: string;
  /**
  * The Tolerance option defines how close the color needs to be to the selected color before it's changed to fully transparent. Set the Tolerance to 0.0 to remove only the exact color specified.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#tolerance DataAkamaiImagingPolicyImage#tolerance}
  */
  readonly tolerance?: string;
  /**
  * The Tolerance option defines how close the color needs to be to the selected color before it's changed to fully transparent. Set the Tolerance to 0.0 to remove only the exact color specified.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#tolerance_var DataAkamaiImagingPolicyImage#tolerance_var}
  */
  readonly toleranceVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanRemoveColorToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanRemoveColor | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    color: cdktf.stringToTerraform(struct!.color),
    color_var: cdktf.stringToTerraform(struct!.colorVar),
    feather: cdktf.stringToTerraform(struct!.feather),
    feather_var: cdktf.stringToTerraform(struct!.featherVar),
    tolerance: cdktf.stringToTerraform(struct!.tolerance),
    tolerance_var: cdktf.stringToTerraform(struct!.toleranceVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanRemoveColorToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanRemoveColor | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    color: {
      value: cdktf.stringToHclTerraform(struct!.color),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    color_var: {
      value: cdktf.stringToHclTerraform(struct!.colorVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    feather: {
      value: cdktf.stringToHclTerraform(struct!.feather),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    feather_var: {
      value: cdktf.stringToHclTerraform(struct!.featherVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    tolerance: {
      value: cdktf.stringToHclTerraform(struct!.tolerance),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    tolerance_var: {
      value: cdktf.stringToHclTerraform(struct!.toleranceVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanRemoveColorOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanRemoveColor | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._color !== undefined) {
      hasAnyValues = true;
      internalValueResult.color = this._color;
    }
    if (this._colorVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.colorVar = this._colorVar;
    }
    if (this._feather !== undefined) {
      hasAnyValues = true;
      internalValueResult.feather = this._feather;
    }
    if (this._featherVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.featherVar = this._featherVar;
    }
    if (this._tolerance !== undefined) {
      hasAnyValues = true;
      internalValueResult.tolerance = this._tolerance;
    }
    if (this._toleranceVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.toleranceVar = this._toleranceVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanRemoveColor | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._color = undefined;
      this._colorVar = undefined;
      this._feather = undefined;
      this._featherVar = undefined;
      this._tolerance = undefined;
      this._toleranceVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._color = value.color;
      this._colorVar = value.colorVar;
      this._feather = value.feather;
      this._featherVar = value.featherVar;
      this._tolerance = value.tolerance;
      this._toleranceVar = value.toleranceVar;
    }
  }

  // color - computed: false, optional: true, required: false
  private _color?: string; 
  public get color() {
    return this.getStringAttribute('color');
  }
  public set color(value: string) {
    this._color = value;
  }
  public resetColor() {
    this._color = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get colorInput() {
    return this._color;
  }

  // color_var - computed: false, optional: true, required: false
  private _colorVar?: string; 
  public get colorVar() {
    return this.getStringAttribute('color_var');
  }
  public set colorVar(value: string) {
    this._colorVar = value;
  }
  public resetColorVar() {
    this._colorVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get colorVarInput() {
    return this._colorVar;
  }

  // feather - computed: false, optional: true, required: false
  private _feather?: string; 
  public get feather() {
    return this.getStringAttribute('feather');
  }
  public set feather(value: string) {
    this._feather = value;
  }
  public resetFeather() {
    this._feather = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get featherInput() {
    return this._feather;
  }

  // feather_var - computed: false, optional: true, required: false
  private _featherVar?: string; 
  public get featherVar() {
    return this.getStringAttribute('feather_var');
  }
  public set featherVar(value: string) {
    this._featherVar = value;
  }
  public resetFeatherVar() {
    this._featherVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get featherVarInput() {
    return this._featherVar;
  }

  // tolerance - computed: false, optional: true, required: false
  private _tolerance?: string; 
  public get tolerance() {
    return this.getStringAttribute('tolerance');
  }
  public set tolerance(value: string) {
    this._tolerance = value;
  }
  public resetTolerance() {
    this._tolerance = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get toleranceInput() {
    return this._tolerance;
  }

  // tolerance_var - computed: false, optional: true, required: false
  private _toleranceVar?: string; 
  public get toleranceVar() {
    return this.getStringAttribute('tolerance_var');
  }
  public set toleranceVar(value: string) {
    this._toleranceVar = value;
  }
  public resetToleranceVar() {
    this._toleranceVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get toleranceVarInput() {
    return this._toleranceVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanRemoveColorList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanRemoveColor[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanRemoveColorOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanRemoveColorOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanUnsharpMask {
  /**
  * Set how much emphasis the filter applies to details. Higher values increase apparent sharpness of details.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#gain DataAkamaiImagingPolicyImage#gain}
  */
  readonly gain?: string;
  /**
  * Set how much emphasis the filter applies to details. Higher values increase apparent sharpness of details.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#gain_var DataAkamaiImagingPolicyImage#gain_var}
  */
  readonly gainVar?: string;
  /**
  * The standard deviation of the Gaussian distribution used in the in unsharp mask, measured in pixels, `1.0` by default. High values emphasize large details and low values emphasize small details.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#sigma DataAkamaiImagingPolicyImage#sigma}
  */
  readonly sigma?: string;
  /**
  * The standard deviation of the Gaussian distribution used in the in unsharp mask, measured in pixels, `1.0` by default. High values emphasize large details and low values emphasize small details.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#sigma_var DataAkamaiImagingPolicyImage#sigma_var}
  */
  readonly sigmaVar?: string;
  /**
  * Set the minimum change required to include a detail in the filter. Higher values discard more changes.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#threshold DataAkamaiImagingPolicyImage#threshold}
  */
  readonly threshold?: string;
  /**
  * Set the minimum change required to include a detail in the filter. Higher values discard more changes.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#threshold_var DataAkamaiImagingPolicyImage#threshold_var}
  */
  readonly thresholdVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanUnsharpMaskToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanUnsharpMask | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    gain: cdktf.stringToTerraform(struct!.gain),
    gain_var: cdktf.stringToTerraform(struct!.gainVar),
    sigma: cdktf.stringToTerraform(struct!.sigma),
    sigma_var: cdktf.stringToTerraform(struct!.sigmaVar),
    threshold: cdktf.stringToTerraform(struct!.threshold),
    threshold_var: cdktf.stringToTerraform(struct!.thresholdVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanUnsharpMaskToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanUnsharpMask | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    gain: {
      value: cdktf.stringToHclTerraform(struct!.gain),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    gain_var: {
      value: cdktf.stringToHclTerraform(struct!.gainVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    sigma: {
      value: cdktf.stringToHclTerraform(struct!.sigma),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    sigma_var: {
      value: cdktf.stringToHclTerraform(struct!.sigmaVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    threshold: {
      value: cdktf.stringToHclTerraform(struct!.threshold),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    threshold_var: {
      value: cdktf.stringToHclTerraform(struct!.thresholdVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanUnsharpMaskOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanUnsharpMask | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._gain !== undefined) {
      hasAnyValues = true;
      internalValueResult.gain = this._gain;
    }
    if (this._gainVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.gainVar = this._gainVar;
    }
    if (this._sigma !== undefined) {
      hasAnyValues = true;
      internalValueResult.sigma = this._sigma;
    }
    if (this._sigmaVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.sigmaVar = this._sigmaVar;
    }
    if (this._threshold !== undefined) {
      hasAnyValues = true;
      internalValueResult.threshold = this._threshold;
    }
    if (this._thresholdVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.thresholdVar = this._thresholdVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanUnsharpMask | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._gain = undefined;
      this._gainVar = undefined;
      this._sigma = undefined;
      this._sigmaVar = undefined;
      this._threshold = undefined;
      this._thresholdVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._gain = value.gain;
      this._gainVar = value.gainVar;
      this._sigma = value.sigma;
      this._sigmaVar = value.sigmaVar;
      this._threshold = value.threshold;
      this._thresholdVar = value.thresholdVar;
    }
  }

  // gain - computed: false, optional: true, required: false
  private _gain?: string; 
  public get gain() {
    return this.getStringAttribute('gain');
  }
  public set gain(value: string) {
    this._gain = value;
  }
  public resetGain() {
    this._gain = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get gainInput() {
    return this._gain;
  }

  // gain_var - computed: false, optional: true, required: false
  private _gainVar?: string; 
  public get gainVar() {
    return this.getStringAttribute('gain_var');
  }
  public set gainVar(value: string) {
    this._gainVar = value;
  }
  public resetGainVar() {
    this._gainVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get gainVarInput() {
    return this._gainVar;
  }

  // sigma - computed: false, optional: true, required: false
  private _sigma?: string; 
  public get sigma() {
    return this.getStringAttribute('sigma');
  }
  public set sigma(value: string) {
    this._sigma = value;
  }
  public resetSigma() {
    this._sigma = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get sigmaInput() {
    return this._sigma;
  }

  // sigma_var - computed: false, optional: true, required: false
  private _sigmaVar?: string; 
  public get sigmaVar() {
    return this.getStringAttribute('sigma_var');
  }
  public set sigmaVar(value: string) {
    this._sigmaVar = value;
  }
  public resetSigmaVar() {
    this._sigmaVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get sigmaVarInput() {
    return this._sigmaVar;
  }

  // threshold - computed: false, optional: true, required: false
  private _threshold?: string; 
  public get threshold() {
    return this.getStringAttribute('threshold');
  }
  public set threshold(value: string) {
    this._threshold = value;
  }
  public resetThreshold() {
    this._threshold = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get thresholdInput() {
    return this._threshold;
  }

  // threshold_var - computed: false, optional: true, required: false
  private _thresholdVar?: string; 
  public get thresholdVar() {
    return this.getStringAttribute('threshold_var');
  }
  public set thresholdVar(value: string) {
    this._thresholdVar = value;
  }
  public resetThresholdVar() {
    this._thresholdVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get thresholdVarInput() {
    return this._thresholdVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanUnsharpMaskList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanUnsharpMask[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanUnsharpMaskOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanUnsharpMaskOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThan {
  /**
  * background_color block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#background_color DataAkamaiImagingPolicyImage#background_color}
  */
  readonly backgroundColor?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanBackgroundColor[] | cdktf.IResolvable;
  /**
  * blur block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#blur DataAkamaiImagingPolicyImage#blur}
  */
  readonly blur?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanBlur[] | cdktf.IResolvable;
  /**
  * chroma_key block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#chroma_key DataAkamaiImagingPolicyImage#chroma_key}
  */
  readonly chromaKey?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanChromaKey[] | cdktf.IResolvable;
  /**
  * composite block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#composite DataAkamaiImagingPolicyImage#composite}
  */
  readonly composite?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanComposite[] | cdktf.IResolvable;
  /**
  * compound block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#compound DataAkamaiImagingPolicyImage#compound}
  */
  readonly compound?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanCompound[] | cdktf.IResolvable;
  /**
  * contrast block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#contrast DataAkamaiImagingPolicyImage#contrast}
  */
  readonly contrast?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanContrast[] | cdktf.IResolvable;
  /**
  * goop block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#goop DataAkamaiImagingPolicyImage#goop}
  */
  readonly goop?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanGoop[] | cdktf.IResolvable;
  /**
  * grayscale block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#grayscale DataAkamaiImagingPolicyImage#grayscale}
  */
  readonly grayscale?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanGrayscale[] | cdktf.IResolvable;
  /**
  * hsl block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hsl DataAkamaiImagingPolicyImage#hsl}
  */
  readonly hsl?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanHsl[] | cdktf.IResolvable;
  /**
  * hsv block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hsv DataAkamaiImagingPolicyImage#hsv}
  */
  readonly hsv?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanHsv[] | cdktf.IResolvable;
  /**
  * if_dimension block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#if_dimension DataAkamaiImagingPolicyImage#if_dimension}
  */
  readonly ifDimension?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfDimension[] | cdktf.IResolvable;
  /**
  * if_orientation block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#if_orientation DataAkamaiImagingPolicyImage#if_orientation}
  */
  readonly ifOrientation?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfOrientation[] | cdktf.IResolvable;
  /**
  * max_colors block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#max_colors DataAkamaiImagingPolicyImage#max_colors}
  */
  readonly maxColors?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanMaxColors[] | cdktf.IResolvable;
  /**
  * mirror block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#mirror DataAkamaiImagingPolicyImage#mirror}
  */
  readonly mirror?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanMirror[] | cdktf.IResolvable;
  /**
  * mono_hue block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#mono_hue DataAkamaiImagingPolicyImage#mono_hue}
  */
  readonly monoHue?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanMonoHue[] | cdktf.IResolvable;
  /**
  * opacity block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#opacity DataAkamaiImagingPolicyImage#opacity}
  */
  readonly opacity?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanOpacity[] | cdktf.IResolvable;
  /**
  * remove_color block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#remove_color DataAkamaiImagingPolicyImage#remove_color}
  */
  readonly removeColor?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanRemoveColor[] | cdktf.IResolvable;
  /**
  * unsharp_mask block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#unsharp_mask DataAkamaiImagingPolicyImage#unsharp_mask}
  */
  readonly unsharpMask?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanUnsharpMask[] | cdktf.IResolvable;
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanOutputReference | DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThan): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    background_color: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanBackgroundColorToTerraform, true)(struct!.backgroundColor),
    blur: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanBlurToTerraform, true)(struct!.blur),
    chroma_key: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanChromaKeyToTerraform, true)(struct!.chromaKey),
    composite: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanCompositeToTerraform, true)(struct!.composite),
    compound: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanCompoundToTerraform, true)(struct!.compound),
    contrast: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanContrastToTerraform, true)(struct!.contrast),
    goop: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanGoopToTerraform, true)(struct!.goop),
    grayscale: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanGrayscaleToTerraform, true)(struct!.grayscale),
    hsl: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanHslToTerraform, true)(struct!.hsl),
    hsv: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanHsvToTerraform, true)(struct!.hsv),
    if_dimension: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfDimensionToTerraform, true)(struct!.ifDimension),
    if_orientation: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfOrientationToTerraform, true)(struct!.ifOrientation),
    max_colors: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanMaxColorsToTerraform, true)(struct!.maxColors),
    mirror: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanMirrorToTerraform, true)(struct!.mirror),
    mono_hue: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanMonoHueToTerraform, true)(struct!.monoHue),
    opacity: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanOpacityToTerraform, true)(struct!.opacity),
    remove_color: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanRemoveColorToTerraform, true)(struct!.removeColor),
    unsharp_mask: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanUnsharpMaskToTerraform, true)(struct!.unsharpMask),
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanOutputReference | DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThan): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    background_color: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanBackgroundColorToHclTerraform, true)(struct!.backgroundColor),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanBackgroundColorList",
    },
    blur: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanBlurToHclTerraform, true)(struct!.blur),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanBlurList",
    },
    chroma_key: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanChromaKeyToHclTerraform, true)(struct!.chromaKey),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanChromaKeyList",
    },
    composite: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanCompositeToHclTerraform, true)(struct!.composite),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanCompositeList",
    },
    compound: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanCompoundToHclTerraform, true)(struct!.compound),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanCompoundList",
    },
    contrast: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanContrastToHclTerraform, true)(struct!.contrast),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanContrastList",
    },
    goop: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanGoopToHclTerraform, true)(struct!.goop),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanGoopList",
    },
    grayscale: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanGrayscaleToHclTerraform, true)(struct!.grayscale),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanGrayscaleList",
    },
    hsl: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanHslToHclTerraform, true)(struct!.hsl),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanHslList",
    },
    hsv: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanHsvToHclTerraform, true)(struct!.hsv),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanHsvList",
    },
    if_dimension: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfDimensionToHclTerraform, true)(struct!.ifDimension),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfDimensionList",
    },
    if_orientation: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfOrientationToHclTerraform, true)(struct!.ifOrientation),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfOrientationList",
    },
    max_colors: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanMaxColorsToHclTerraform, true)(struct!.maxColors),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanMaxColorsList",
    },
    mirror: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanMirrorToHclTerraform, true)(struct!.mirror),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanMirrorList",
    },
    mono_hue: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanMonoHueToHclTerraform, true)(struct!.monoHue),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanMonoHueList",
    },
    opacity: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanOpacityToHclTerraform, true)(struct!.opacity),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanOpacityList",
    },
    remove_color: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanRemoveColorToHclTerraform, true)(struct!.removeColor),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanRemoveColorList",
    },
    unsharp_mask: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanUnsharpMaskToHclTerraform, true)(struct!.unsharpMask),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanUnsharpMaskList",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false, 0);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThan | undefined {
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._backgroundColor?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.backgroundColor = this._backgroundColor?.internalValue;
    }
    if (this._blur?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.blur = this._blur?.internalValue;
    }
    if (this._chromaKey?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.chromaKey = this._chromaKey?.internalValue;
    }
    if (this._composite?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.composite = this._composite?.internalValue;
    }
    if (this._compound?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.compound = this._compound?.internalValue;
    }
    if (this._contrast?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.contrast = this._contrast?.internalValue;
    }
    if (this._goop?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.goop = this._goop?.internalValue;
    }
    if (this._grayscale?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.grayscale = this._grayscale?.internalValue;
    }
    if (this._hsl?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.hsl = this._hsl?.internalValue;
    }
    if (this._hsv?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.hsv = this._hsv?.internalValue;
    }
    if (this._ifDimension?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.ifDimension = this._ifDimension?.internalValue;
    }
    if (this._ifOrientation?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.ifOrientation = this._ifOrientation?.internalValue;
    }
    if (this._maxColors?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.maxColors = this._maxColors?.internalValue;
    }
    if (this._mirror?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.mirror = this._mirror?.internalValue;
    }
    if (this._monoHue?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.monoHue = this._monoHue?.internalValue;
    }
    if (this._opacity?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.opacity = this._opacity?.internalValue;
    }
    if (this._removeColor?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.removeColor = this._removeColor?.internalValue;
    }
    if (this._unsharpMask?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.unsharpMask = this._unsharpMask?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThan | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this._backgroundColor.internalValue = undefined;
      this._blur.internalValue = undefined;
      this._chromaKey.internalValue = undefined;
      this._composite.internalValue = undefined;
      this._compound.internalValue = undefined;
      this._contrast.internalValue = undefined;
      this._goop.internalValue = undefined;
      this._grayscale.internalValue = undefined;
      this._hsl.internalValue = undefined;
      this._hsv.internalValue = undefined;
      this._ifDimension.internalValue = undefined;
      this._ifOrientation.internalValue = undefined;
      this._maxColors.internalValue = undefined;
      this._mirror.internalValue = undefined;
      this._monoHue.internalValue = undefined;
      this._opacity.internalValue = undefined;
      this._removeColor.internalValue = undefined;
      this._unsharpMask.internalValue = undefined;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this._backgroundColor.internalValue = value.backgroundColor;
      this._blur.internalValue = value.blur;
      this._chromaKey.internalValue = value.chromaKey;
      this._composite.internalValue = value.composite;
      this._compound.internalValue = value.compound;
      this._contrast.internalValue = value.contrast;
      this._goop.internalValue = value.goop;
      this._grayscale.internalValue = value.grayscale;
      this._hsl.internalValue = value.hsl;
      this._hsv.internalValue = value.hsv;
      this._ifDimension.internalValue = value.ifDimension;
      this._ifOrientation.internalValue = value.ifOrientation;
      this._maxColors.internalValue = value.maxColors;
      this._mirror.internalValue = value.mirror;
      this._monoHue.internalValue = value.monoHue;
      this._opacity.internalValue = value.opacity;
      this._removeColor.internalValue = value.removeColor;
      this._unsharpMask.internalValue = value.unsharpMask;
    }
  }

  // background_color - computed: false, optional: true, required: false
  private _backgroundColor = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanBackgroundColorList(this, "background_color", false);
  public get backgroundColor() {
    return this._backgroundColor;
  }
  public putBackgroundColor(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanBackgroundColor[] | cdktf.IResolvable) {
    this._backgroundColor.internalValue = value;
  }
  public resetBackgroundColor() {
    this._backgroundColor.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get backgroundColorInput() {
    return this._backgroundColor.internalValue;
  }

  // blur - computed: false, optional: true, required: false
  private _blur = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanBlurList(this, "blur", false);
  public get blur() {
    return this._blur;
  }
  public putBlur(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanBlur[] | cdktf.IResolvable) {
    this._blur.internalValue = value;
  }
  public resetBlur() {
    this._blur.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get blurInput() {
    return this._blur.internalValue;
  }

  // chroma_key - computed: false, optional: true, required: false
  private _chromaKey = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanChromaKeyList(this, "chroma_key", false);
  public get chromaKey() {
    return this._chromaKey;
  }
  public putChromaKey(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanChromaKey[] | cdktf.IResolvable) {
    this._chromaKey.internalValue = value;
  }
  public resetChromaKey() {
    this._chromaKey.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get chromaKeyInput() {
    return this._chromaKey.internalValue;
  }

  // composite - computed: false, optional: true, required: false
  private _composite = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanCompositeList(this, "composite", false);
  public get composite() {
    return this._composite;
  }
  public putComposite(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanComposite[] | cdktf.IResolvable) {
    this._composite.internalValue = value;
  }
  public resetComposite() {
    this._composite.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get compositeInput() {
    return this._composite.internalValue;
  }

  // compound - computed: false, optional: true, required: false
  private _compound = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanCompoundList(this, "compound", false);
  public get compound() {
    return this._compound;
  }
  public putCompound(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanCompound[] | cdktf.IResolvable) {
    this._compound.internalValue = value;
  }
  public resetCompound() {
    this._compound.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get compoundInput() {
    return this._compound.internalValue;
  }

  // contrast - computed: false, optional: true, required: false
  private _contrast = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanContrastList(this, "contrast", false);
  public get contrast() {
    return this._contrast;
  }
  public putContrast(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanContrast[] | cdktf.IResolvable) {
    this._contrast.internalValue = value;
  }
  public resetContrast() {
    this._contrast.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get contrastInput() {
    return this._contrast.internalValue;
  }

  // goop - computed: false, optional: true, required: false
  private _goop = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanGoopList(this, "goop", false);
  public get goop() {
    return this._goop;
  }
  public putGoop(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanGoop[] | cdktf.IResolvable) {
    this._goop.internalValue = value;
  }
  public resetGoop() {
    this._goop.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get goopInput() {
    return this._goop.internalValue;
  }

  // grayscale - computed: false, optional: true, required: false
  private _grayscale = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanGrayscaleList(this, "grayscale", false);
  public get grayscale() {
    return this._grayscale;
  }
  public putGrayscale(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanGrayscale[] | cdktf.IResolvable) {
    this._grayscale.internalValue = value;
  }
  public resetGrayscale() {
    this._grayscale.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get grayscaleInput() {
    return this._grayscale.internalValue;
  }

  // hsl - computed: false, optional: true, required: false
  private _hsl = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanHslList(this, "hsl", false);
  public get hsl() {
    return this._hsl;
  }
  public putHsl(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanHsl[] | cdktf.IResolvable) {
    this._hsl.internalValue = value;
  }
  public resetHsl() {
    this._hsl.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hslInput() {
    return this._hsl.internalValue;
  }

  // hsv - computed: false, optional: true, required: false
  private _hsv = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanHsvList(this, "hsv", false);
  public get hsv() {
    return this._hsv;
  }
  public putHsv(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanHsv[] | cdktf.IResolvable) {
    this._hsv.internalValue = value;
  }
  public resetHsv() {
    this._hsv.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hsvInput() {
    return this._hsv.internalValue;
  }

  // if_dimension - computed: false, optional: true, required: false
  private _ifDimension = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfDimensionList(this, "if_dimension", false);
  public get ifDimension() {
    return this._ifDimension;
  }
  public putIfDimension(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfDimension[] | cdktf.IResolvable) {
    this._ifDimension.internalValue = value;
  }
  public resetIfDimension() {
    this._ifDimension.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get ifDimensionInput() {
    return this._ifDimension.internalValue;
  }

  // if_orientation - computed: false, optional: true, required: false
  private _ifOrientation = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfOrientationList(this, "if_orientation", false);
  public get ifOrientation() {
    return this._ifOrientation;
  }
  public putIfOrientation(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanIfOrientation[] | cdktf.IResolvable) {
    this._ifOrientation.internalValue = value;
  }
  public resetIfOrientation() {
    this._ifOrientation.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get ifOrientationInput() {
    return this._ifOrientation.internalValue;
  }

  // max_colors - computed: false, optional: true, required: false
  private _maxColors = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanMaxColorsList(this, "max_colors", false);
  public get maxColors() {
    return this._maxColors;
  }
  public putMaxColors(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanMaxColors[] | cdktf.IResolvable) {
    this._maxColors.internalValue = value;
  }
  public resetMaxColors() {
    this._maxColors.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get maxColorsInput() {
    return this._maxColors.internalValue;
  }

  // mirror - computed: false, optional: true, required: false
  private _mirror = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanMirrorList(this, "mirror", false);
  public get mirror() {
    return this._mirror;
  }
  public putMirror(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanMirror[] | cdktf.IResolvable) {
    this._mirror.internalValue = value;
  }
  public resetMirror() {
    this._mirror.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get mirrorInput() {
    return this._mirror.internalValue;
  }

  // mono_hue - computed: false, optional: true, required: false
  private _monoHue = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanMonoHueList(this, "mono_hue", false);
  public get monoHue() {
    return this._monoHue;
  }
  public putMonoHue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanMonoHue[] | cdktf.IResolvable) {
    this._monoHue.internalValue = value;
  }
  public resetMonoHue() {
    this._monoHue.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get monoHueInput() {
    return this._monoHue.internalValue;
  }

  // opacity - computed: false, optional: true, required: false
  private _opacity = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanOpacityList(this, "opacity", false);
  public get opacity() {
    return this._opacity;
  }
  public putOpacity(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanOpacity[] | cdktf.IResolvable) {
    this._opacity.internalValue = value;
  }
  public resetOpacity() {
    this._opacity.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get opacityInput() {
    return this._opacity.internalValue;
  }

  // remove_color - computed: false, optional: true, required: false
  private _removeColor = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanRemoveColorList(this, "remove_color", false);
  public get removeColor() {
    return this._removeColor;
  }
  public putRemoveColor(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanRemoveColor[] | cdktf.IResolvable) {
    this._removeColor.internalValue = value;
  }
  public resetRemoveColor() {
    this._removeColor.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get removeColorInput() {
    return this._removeColor.internalValue;
  }

  // unsharp_mask - computed: false, optional: true, required: false
  private _unsharpMask = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanUnsharpMaskList(this, "unsharp_mask", false);
  public get unsharpMask() {
    return this._unsharpMask;
  }
  public putUnsharpMask(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanUnsharpMask[] | cdktf.IResolvable) {
    this._unsharpMask.internalValue = value;
  }
  public resetUnsharpMask() {
    this._unsharpMask.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get unsharpMaskInput() {
    return this._unsharpMask.internalValue;
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanBackgroundColor {
  /**
  * The hexadecimal CSS color value for the background.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#color DataAkamaiImagingPolicyImage#color}
  */
  readonly color?: string;
  /**
  * The hexadecimal CSS color value for the background.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#color_var DataAkamaiImagingPolicyImage#color_var}
  */
  readonly colorVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanBackgroundColorToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanBackgroundColor | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    color: cdktf.stringToTerraform(struct!.color),
    color_var: cdktf.stringToTerraform(struct!.colorVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanBackgroundColorToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanBackgroundColor | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    color: {
      value: cdktf.stringToHclTerraform(struct!.color),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    color_var: {
      value: cdktf.stringToHclTerraform(struct!.colorVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanBackgroundColorOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanBackgroundColor | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._color !== undefined) {
      hasAnyValues = true;
      internalValueResult.color = this._color;
    }
    if (this._colorVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.colorVar = this._colorVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanBackgroundColor | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._color = undefined;
      this._colorVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._color = value.color;
      this._colorVar = value.colorVar;
    }
  }

  // color - computed: false, optional: true, required: false
  private _color?: string; 
  public get color() {
    return this.getStringAttribute('color');
  }
  public set color(value: string) {
    this._color = value;
  }
  public resetColor() {
    this._color = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get colorInput() {
    return this._color;
  }

  // color_var - computed: false, optional: true, required: false
  private _colorVar?: string; 
  public get colorVar() {
    return this.getStringAttribute('color_var');
  }
  public set colorVar(value: string) {
    this._colorVar = value;
  }
  public resetColorVar() {
    this._colorVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get colorVarInput() {
    return this._colorVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanBackgroundColorList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanBackgroundColor[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanBackgroundColorOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanBackgroundColorOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanBlur {
  /**
  * The number of pixels to scatter the original pixel by to create the blur effect. Resulting images may be larger than the original as pixels at the edge of the image might scatter outside the image's original dimensions.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#sigma DataAkamaiImagingPolicyImage#sigma}
  */
  readonly sigma?: string;
  /**
  * The number of pixels to scatter the original pixel by to create the blur effect. Resulting images may be larger than the original as pixels at the edge of the image might scatter outside the image's original dimensions.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#sigma_var DataAkamaiImagingPolicyImage#sigma_var}
  */
  readonly sigmaVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanBlurToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanBlur | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    sigma: cdktf.stringToTerraform(struct!.sigma),
    sigma_var: cdktf.stringToTerraform(struct!.sigmaVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanBlurToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanBlur | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    sigma: {
      value: cdktf.stringToHclTerraform(struct!.sigma),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    sigma_var: {
      value: cdktf.stringToHclTerraform(struct!.sigmaVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanBlurOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanBlur | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._sigma !== undefined) {
      hasAnyValues = true;
      internalValueResult.sigma = this._sigma;
    }
    if (this._sigmaVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.sigmaVar = this._sigmaVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanBlur | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._sigma = undefined;
      this._sigmaVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._sigma = value.sigma;
      this._sigmaVar = value.sigmaVar;
    }
  }

  // sigma - computed: false, optional: true, required: false
  private _sigma?: string; 
  public get sigma() {
    return this.getStringAttribute('sigma');
  }
  public set sigma(value: string) {
    this._sigma = value;
  }
  public resetSigma() {
    this._sigma = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get sigmaInput() {
    return this._sigma;
  }

  // sigma_var - computed: false, optional: true, required: false
  private _sigmaVar?: string; 
  public get sigmaVar() {
    return this.getStringAttribute('sigma_var');
  }
  public set sigmaVar(value: string) {
    this._sigmaVar = value;
  }
  public resetSigmaVar() {
    this._sigmaVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get sigmaVarInput() {
    return this._sigmaVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanBlurList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanBlur[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanBlurOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanBlurOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanChromaKey {
  /**
  * The hue to remove. Enter the degree of rotation between 0 and 360 degrees around the color wheel. By default Chroma Key removes a green hue, 120° on the color wheel.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hue DataAkamaiImagingPolicyImage#hue}
  */
  readonly hue?: string;
  /**
  * How much additional hue to make semi-transparent beyond the Hue Tolerance. By default Hue Feather is 0.083 which applies semi-transparency to hues 30° around the Hue Tolerance.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hue_feather DataAkamaiImagingPolicyImage#hue_feather}
  */
  readonly hueFeather?: string;
  /**
  * How much additional hue to make semi-transparent beyond the Hue Tolerance. By default Hue Feather is 0.083 which applies semi-transparency to hues 30° around the Hue Tolerance.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hue_feather_var DataAkamaiImagingPolicyImage#hue_feather_var}
  */
  readonly hueFeatherVar?: string;
  /**
  * How close a color's hue needs to be to the selected hue for it to be changed to fully transparent. If you enter the maximum value of 1.0 the entire image is made transparent. By default Hue Tolerance is approximately 0.083 or 8.3% of the color wheel. This value corresponds to 30° around the specified hue.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hue_tolerance DataAkamaiImagingPolicyImage#hue_tolerance}
  */
  readonly hueTolerance?: string;
  /**
  * How close a color's hue needs to be to the selected hue for it to be changed to fully transparent. If you enter the maximum value of 1.0 the entire image is made transparent. By default Hue Tolerance is approximately 0.083 or 8.3% of the color wheel. This value corresponds to 30° around the specified hue.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hue_tolerance_var DataAkamaiImagingPolicyImage#hue_tolerance_var}
  */
  readonly hueToleranceVar?: string;
  /**
  * The hue to remove. Enter the degree of rotation between 0 and 360 degrees around the color wheel. By default Chroma Key removes a green hue, 120° on the color wheel.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hue_var DataAkamaiImagingPolicyImage#hue_var}
  */
  readonly hueVar?: string;
  /**
  * How much additional lightness to make semi-transparent beyond the Lightness Tolerance. The default value of 0.1 corresponds to 10% away from the tolerated lightness towards full black or full white.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#lightness_feather DataAkamaiImagingPolicyImage#lightness_feather}
  */
  readonly lightnessFeather?: string;
  /**
  * How much additional lightness to make semi-transparent beyond the Lightness Tolerance. The default value of 0.1 corresponds to 10% away from the tolerated lightness towards full black or full white.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#lightness_feather_var DataAkamaiImagingPolicyImage#lightness_feather_var}
  */
  readonly lightnessFeatherVar?: string;
  /**
  * How much of the lightest part and darkest part of a color to preserve. For example, you can space this value out from the middle (i.e. 0.5 lightness or full color) to help preserve the splash lighting impact in the image. You can define how close the color needs to be to the full color to remove it from your image. The default value of 0.75 means that a colour must be within 75% of the full color to full white or full black for full removal.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#lightness_tolerance DataAkamaiImagingPolicyImage#lightness_tolerance}
  */
  readonly lightnessTolerance?: string;
  /**
  * How much of the lightest part and darkest part of a color to preserve. For example, you can space this value out from the middle (i.e. 0.5 lightness or full color) to help preserve the splash lighting impact in the image. You can define how close the color needs to be to the full color to remove it from your image. The default value of 0.75 means that a colour must be within 75% of the full color to full white or full black for full removal.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#lightness_tolerance_var DataAkamaiImagingPolicyImage#lightness_tolerance_var}
  */
  readonly lightnessToleranceVar?: string;
  /**
  * How much additional saturation to make semi-transparent beyond the Saturation Tolerance. By default Saturation Feather is 0.1 which applies semi-transparency to hues 10% below the saturationTolerance.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#saturation_feather DataAkamaiImagingPolicyImage#saturation_feather}
  */
  readonly saturationFeather?: string;
  /**
  * How much additional saturation to make semi-transparent beyond the Saturation Tolerance. By default Saturation Feather is 0.1 which applies semi-transparency to hues 10% below the saturationTolerance.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#saturation_feather_var DataAkamaiImagingPolicyImage#saturation_feather_var}
  */
  readonly saturationFeatherVar?: string;
  /**
  * How close a color's saturation needs to be to full saturation for it to be changed to fully transparent. For example, you can define how green the color needs to be to remove it from your image. The default value of 0.75 means that a color must be within 75% of full saturation in order to be made fully transparent.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#saturation_tolerance DataAkamaiImagingPolicyImage#saturation_tolerance}
  */
  readonly saturationTolerance?: string;
  /**
  * How close a color's saturation needs to be to full saturation for it to be changed to fully transparent. For example, you can define how green the color needs to be to remove it from your image. The default value of 0.75 means that a color must be within 75% of full saturation in order to be made fully transparent.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#saturation_tolerance_var DataAkamaiImagingPolicyImage#saturation_tolerance_var}
  */
  readonly saturationToleranceVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanChromaKeyToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanChromaKey | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    hue: cdktf.stringToTerraform(struct!.hue),
    hue_feather: cdktf.stringToTerraform(struct!.hueFeather),
    hue_feather_var: cdktf.stringToTerraform(struct!.hueFeatherVar),
    hue_tolerance: cdktf.stringToTerraform(struct!.hueTolerance),
    hue_tolerance_var: cdktf.stringToTerraform(struct!.hueToleranceVar),
    hue_var: cdktf.stringToTerraform(struct!.hueVar),
    lightness_feather: cdktf.stringToTerraform(struct!.lightnessFeather),
    lightness_feather_var: cdktf.stringToTerraform(struct!.lightnessFeatherVar),
    lightness_tolerance: cdktf.stringToTerraform(struct!.lightnessTolerance),
    lightness_tolerance_var: cdktf.stringToTerraform(struct!.lightnessToleranceVar),
    saturation_feather: cdktf.stringToTerraform(struct!.saturationFeather),
    saturation_feather_var: cdktf.stringToTerraform(struct!.saturationFeatherVar),
    saturation_tolerance: cdktf.stringToTerraform(struct!.saturationTolerance),
    saturation_tolerance_var: cdktf.stringToTerraform(struct!.saturationToleranceVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanChromaKeyToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanChromaKey | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    hue: {
      value: cdktf.stringToHclTerraform(struct!.hue),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    hue_feather: {
      value: cdktf.stringToHclTerraform(struct!.hueFeather),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    hue_feather_var: {
      value: cdktf.stringToHclTerraform(struct!.hueFeatherVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    hue_tolerance: {
      value: cdktf.stringToHclTerraform(struct!.hueTolerance),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    hue_tolerance_var: {
      value: cdktf.stringToHclTerraform(struct!.hueToleranceVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    hue_var: {
      value: cdktf.stringToHclTerraform(struct!.hueVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    lightness_feather: {
      value: cdktf.stringToHclTerraform(struct!.lightnessFeather),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    lightness_feather_var: {
      value: cdktf.stringToHclTerraform(struct!.lightnessFeatherVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    lightness_tolerance: {
      value: cdktf.stringToHclTerraform(struct!.lightnessTolerance),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    lightness_tolerance_var: {
      value: cdktf.stringToHclTerraform(struct!.lightnessToleranceVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    saturation_feather: {
      value: cdktf.stringToHclTerraform(struct!.saturationFeather),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    saturation_feather_var: {
      value: cdktf.stringToHclTerraform(struct!.saturationFeatherVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    saturation_tolerance: {
      value: cdktf.stringToHclTerraform(struct!.saturationTolerance),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    saturation_tolerance_var: {
      value: cdktf.stringToHclTerraform(struct!.saturationToleranceVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanChromaKeyOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanChromaKey | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._hue !== undefined) {
      hasAnyValues = true;
      internalValueResult.hue = this._hue;
    }
    if (this._hueFeather !== undefined) {
      hasAnyValues = true;
      internalValueResult.hueFeather = this._hueFeather;
    }
    if (this._hueFeatherVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.hueFeatherVar = this._hueFeatherVar;
    }
    if (this._hueTolerance !== undefined) {
      hasAnyValues = true;
      internalValueResult.hueTolerance = this._hueTolerance;
    }
    if (this._hueToleranceVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.hueToleranceVar = this._hueToleranceVar;
    }
    if (this._hueVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.hueVar = this._hueVar;
    }
    if (this._lightnessFeather !== undefined) {
      hasAnyValues = true;
      internalValueResult.lightnessFeather = this._lightnessFeather;
    }
    if (this._lightnessFeatherVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.lightnessFeatherVar = this._lightnessFeatherVar;
    }
    if (this._lightnessTolerance !== undefined) {
      hasAnyValues = true;
      internalValueResult.lightnessTolerance = this._lightnessTolerance;
    }
    if (this._lightnessToleranceVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.lightnessToleranceVar = this._lightnessToleranceVar;
    }
    if (this._saturationFeather !== undefined) {
      hasAnyValues = true;
      internalValueResult.saturationFeather = this._saturationFeather;
    }
    if (this._saturationFeatherVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.saturationFeatherVar = this._saturationFeatherVar;
    }
    if (this._saturationTolerance !== undefined) {
      hasAnyValues = true;
      internalValueResult.saturationTolerance = this._saturationTolerance;
    }
    if (this._saturationToleranceVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.saturationToleranceVar = this._saturationToleranceVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanChromaKey | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._hue = undefined;
      this._hueFeather = undefined;
      this._hueFeatherVar = undefined;
      this._hueTolerance = undefined;
      this._hueToleranceVar = undefined;
      this._hueVar = undefined;
      this._lightnessFeather = undefined;
      this._lightnessFeatherVar = undefined;
      this._lightnessTolerance = undefined;
      this._lightnessToleranceVar = undefined;
      this._saturationFeather = undefined;
      this._saturationFeatherVar = undefined;
      this._saturationTolerance = undefined;
      this._saturationToleranceVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._hue = value.hue;
      this._hueFeather = value.hueFeather;
      this._hueFeatherVar = value.hueFeatherVar;
      this._hueTolerance = value.hueTolerance;
      this._hueToleranceVar = value.hueToleranceVar;
      this._hueVar = value.hueVar;
      this._lightnessFeather = value.lightnessFeather;
      this._lightnessFeatherVar = value.lightnessFeatherVar;
      this._lightnessTolerance = value.lightnessTolerance;
      this._lightnessToleranceVar = value.lightnessToleranceVar;
      this._saturationFeather = value.saturationFeather;
      this._saturationFeatherVar = value.saturationFeatherVar;
      this._saturationTolerance = value.saturationTolerance;
      this._saturationToleranceVar = value.saturationToleranceVar;
    }
  }

  // hue - computed: false, optional: true, required: false
  private _hue?: string; 
  public get hue() {
    return this.getStringAttribute('hue');
  }
  public set hue(value: string) {
    this._hue = value;
  }
  public resetHue() {
    this._hue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hueInput() {
    return this._hue;
  }

  // hue_feather - computed: false, optional: true, required: false
  private _hueFeather?: string; 
  public get hueFeather() {
    return this.getStringAttribute('hue_feather');
  }
  public set hueFeather(value: string) {
    this._hueFeather = value;
  }
  public resetHueFeather() {
    this._hueFeather = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hueFeatherInput() {
    return this._hueFeather;
  }

  // hue_feather_var - computed: false, optional: true, required: false
  private _hueFeatherVar?: string; 
  public get hueFeatherVar() {
    return this.getStringAttribute('hue_feather_var');
  }
  public set hueFeatherVar(value: string) {
    this._hueFeatherVar = value;
  }
  public resetHueFeatherVar() {
    this._hueFeatherVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hueFeatherVarInput() {
    return this._hueFeatherVar;
  }

  // hue_tolerance - computed: false, optional: true, required: false
  private _hueTolerance?: string; 
  public get hueTolerance() {
    return this.getStringAttribute('hue_tolerance');
  }
  public set hueTolerance(value: string) {
    this._hueTolerance = value;
  }
  public resetHueTolerance() {
    this._hueTolerance = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hueToleranceInput() {
    return this._hueTolerance;
  }

  // hue_tolerance_var - computed: false, optional: true, required: false
  private _hueToleranceVar?: string; 
  public get hueToleranceVar() {
    return this.getStringAttribute('hue_tolerance_var');
  }
  public set hueToleranceVar(value: string) {
    this._hueToleranceVar = value;
  }
  public resetHueToleranceVar() {
    this._hueToleranceVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hueToleranceVarInput() {
    return this._hueToleranceVar;
  }

  // hue_var - computed: false, optional: true, required: false
  private _hueVar?: string; 
  public get hueVar() {
    return this.getStringAttribute('hue_var');
  }
  public set hueVar(value: string) {
    this._hueVar = value;
  }
  public resetHueVar() {
    this._hueVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hueVarInput() {
    return this._hueVar;
  }

  // lightness_feather - computed: false, optional: true, required: false
  private _lightnessFeather?: string; 
  public get lightnessFeather() {
    return this.getStringAttribute('lightness_feather');
  }
  public set lightnessFeather(value: string) {
    this._lightnessFeather = value;
  }
  public resetLightnessFeather() {
    this._lightnessFeather = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get lightnessFeatherInput() {
    return this._lightnessFeather;
  }

  // lightness_feather_var - computed: false, optional: true, required: false
  private _lightnessFeatherVar?: string; 
  public get lightnessFeatherVar() {
    return this.getStringAttribute('lightness_feather_var');
  }
  public set lightnessFeatherVar(value: string) {
    this._lightnessFeatherVar = value;
  }
  public resetLightnessFeatherVar() {
    this._lightnessFeatherVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get lightnessFeatherVarInput() {
    return this._lightnessFeatherVar;
  }

  // lightness_tolerance - computed: false, optional: true, required: false
  private _lightnessTolerance?: string; 
  public get lightnessTolerance() {
    return this.getStringAttribute('lightness_tolerance');
  }
  public set lightnessTolerance(value: string) {
    this._lightnessTolerance = value;
  }
  public resetLightnessTolerance() {
    this._lightnessTolerance = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get lightnessToleranceInput() {
    return this._lightnessTolerance;
  }

  // lightness_tolerance_var - computed: false, optional: true, required: false
  private _lightnessToleranceVar?: string; 
  public get lightnessToleranceVar() {
    return this.getStringAttribute('lightness_tolerance_var');
  }
  public set lightnessToleranceVar(value: string) {
    this._lightnessToleranceVar = value;
  }
  public resetLightnessToleranceVar() {
    this._lightnessToleranceVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get lightnessToleranceVarInput() {
    return this._lightnessToleranceVar;
  }

  // saturation_feather - computed: false, optional: true, required: false
  private _saturationFeather?: string; 
  public get saturationFeather() {
    return this.getStringAttribute('saturation_feather');
  }
  public set saturationFeather(value: string) {
    this._saturationFeather = value;
  }
  public resetSaturationFeather() {
    this._saturationFeather = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get saturationFeatherInput() {
    return this._saturationFeather;
  }

  // saturation_feather_var - computed: false, optional: true, required: false
  private _saturationFeatherVar?: string; 
  public get saturationFeatherVar() {
    return this.getStringAttribute('saturation_feather_var');
  }
  public set saturationFeatherVar(value: string) {
    this._saturationFeatherVar = value;
  }
  public resetSaturationFeatherVar() {
    this._saturationFeatherVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get saturationFeatherVarInput() {
    return this._saturationFeatherVar;
  }

  // saturation_tolerance - computed: false, optional: true, required: false
  private _saturationTolerance?: string; 
  public get saturationTolerance() {
    return this.getStringAttribute('saturation_tolerance');
  }
  public set saturationTolerance(value: string) {
    this._saturationTolerance = value;
  }
  public resetSaturationTolerance() {
    this._saturationTolerance = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get saturationToleranceInput() {
    return this._saturationTolerance;
  }

  // saturation_tolerance_var - computed: false, optional: true, required: false
  private _saturationToleranceVar?: string; 
  public get saturationToleranceVar() {
    return this.getStringAttribute('saturation_tolerance_var');
  }
  public set saturationToleranceVar(value: string) {
    this._saturationToleranceVar = value;
  }
  public resetSaturationToleranceVar() {
    this._saturationToleranceVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get saturationToleranceVarInput() {
    return this._saturationToleranceVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanChromaKeyList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanChromaKey[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanChromaKeyOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanChromaKeyOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanCompositeImage {
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanCompositeImageToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanCompositeImageOutputReference | DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanCompositeImage): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanCompositeImageToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanCompositeImageOutputReference | DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanCompositeImage): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
  };
  return attrs;
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanCompositeImageOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false, 0);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanCompositeImage | undefined {
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanCompositeImage | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
    }
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanComposite {
  /**
  * Compass direction indicating the corner or edge of the base image to place the applied image. Use Horizontal and Vertical Offset to adjust the applied image's gravity position
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#gravity DataAkamaiImagingPolicyImage#gravity}
  */
  readonly gravity?: string;
  /**
  * Compass direction indicating the corner or edge of the base image to place the applied image. Use Horizontal and Vertical Offset to adjust the applied image's gravity position
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#gravity_var DataAkamaiImagingPolicyImage#gravity_var}
  */
  readonly gravityVar?: string;
  /**
  * Place applied image on top of or underneath the base image. Watermarks are usually applied over. Backgrounds are usually applied under.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#placement DataAkamaiImagingPolicyImage#placement}
  */
  readonly placement?: string;
  /**
  * Place applied image on top of or underneath the base image. Watermarks are usually applied over. Backgrounds are usually applied under.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#placement_var DataAkamaiImagingPolicyImage#placement_var}
  */
  readonly placementVar?: string;
  /**
  * A multiplier to resize the applied image relative to the source image and preserve aspect ratio, 1 by default. Set the `scaleDimension` to calculate the `scale` from the source image's width or height.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#scale DataAkamaiImagingPolicyImage#scale}
  */
  readonly scale?: string;
  /**
  * The dimension, either `width` or `height`, of the source image to scale.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#scale_dimension DataAkamaiImagingPolicyImage#scale_dimension}
  */
  readonly scaleDimension?: string;
  /**
  * The dimension, either `width` or `height`, of the source image to scale.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#scale_dimension_var DataAkamaiImagingPolicyImage#scale_dimension_var}
  */
  readonly scaleDimensionVar?: string;
  /**
  * A multiplier to resize the applied image relative to the source image and preserve aspect ratio, 1 by default. Set the `scaleDimension` to calculate the `scale` from the source image's width or height.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#scale_var DataAkamaiImagingPolicyImage#scale_var}
  */
  readonly scaleVar?: string;
  /**
  * The x-axis position of the image to apply.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#x_position DataAkamaiImagingPolicyImage#x_position}
  */
  readonly xPosition?: string;
  /**
  * The x-axis position of the image to apply.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#x_position_var DataAkamaiImagingPolicyImage#x_position_var}
  */
  readonly xPositionVar?: string;
  /**
  * The y-axis position of the image to apply.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#y_position DataAkamaiImagingPolicyImage#y_position}
  */
  readonly yPosition?: string;
  /**
  * The y-axis position of the image to apply.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#y_position_var DataAkamaiImagingPolicyImage#y_position_var}
  */
  readonly yPositionVar?: string;
  /**
  * image block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#image DataAkamaiImagingPolicyImage#image}
  */
  readonly image: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanCompositeImage;
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanCompositeToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanComposite | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    gravity: cdktf.stringToTerraform(struct!.gravity),
    gravity_var: cdktf.stringToTerraform(struct!.gravityVar),
    placement: cdktf.stringToTerraform(struct!.placement),
    placement_var: cdktf.stringToTerraform(struct!.placementVar),
    scale: cdktf.stringToTerraform(struct!.scale),
    scale_dimension: cdktf.stringToTerraform(struct!.scaleDimension),
    scale_dimension_var: cdktf.stringToTerraform(struct!.scaleDimensionVar),
    scale_var: cdktf.stringToTerraform(struct!.scaleVar),
    x_position: cdktf.stringToTerraform(struct!.xPosition),
    x_position_var: cdktf.stringToTerraform(struct!.xPositionVar),
    y_position: cdktf.stringToTerraform(struct!.yPosition),
    y_position_var: cdktf.stringToTerraform(struct!.yPositionVar),
    image: dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanCompositeImageToTerraform(struct!.image),
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanCompositeToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanComposite | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    gravity: {
      value: cdktf.stringToHclTerraform(struct!.gravity),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    gravity_var: {
      value: cdktf.stringToHclTerraform(struct!.gravityVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    placement: {
      value: cdktf.stringToHclTerraform(struct!.placement),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    placement_var: {
      value: cdktf.stringToHclTerraform(struct!.placementVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    scale: {
      value: cdktf.stringToHclTerraform(struct!.scale),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    scale_dimension: {
      value: cdktf.stringToHclTerraform(struct!.scaleDimension),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    scale_dimension_var: {
      value: cdktf.stringToHclTerraform(struct!.scaleDimensionVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    scale_var: {
      value: cdktf.stringToHclTerraform(struct!.scaleVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    x_position: {
      value: cdktf.stringToHclTerraform(struct!.xPosition),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    x_position_var: {
      value: cdktf.stringToHclTerraform(struct!.xPositionVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    y_position: {
      value: cdktf.stringToHclTerraform(struct!.yPosition),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    y_position_var: {
      value: cdktf.stringToHclTerraform(struct!.yPositionVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    image: {
      value: dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanCompositeImageToHclTerraform(struct!.image),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanCompositeImageList",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanCompositeOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanComposite | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._gravity !== undefined) {
      hasAnyValues = true;
      internalValueResult.gravity = this._gravity;
    }
    if (this._gravityVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.gravityVar = this._gravityVar;
    }
    if (this._placement !== undefined) {
      hasAnyValues = true;
      internalValueResult.placement = this._placement;
    }
    if (this._placementVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.placementVar = this._placementVar;
    }
    if (this._scale !== undefined) {
      hasAnyValues = true;
      internalValueResult.scale = this._scale;
    }
    if (this._scaleDimension !== undefined) {
      hasAnyValues = true;
      internalValueResult.scaleDimension = this._scaleDimension;
    }
    if (this._scaleDimensionVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.scaleDimensionVar = this._scaleDimensionVar;
    }
    if (this._scaleVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.scaleVar = this._scaleVar;
    }
    if (this._xPosition !== undefined) {
      hasAnyValues = true;
      internalValueResult.xPosition = this._xPosition;
    }
    if (this._xPositionVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.xPositionVar = this._xPositionVar;
    }
    if (this._yPosition !== undefined) {
      hasAnyValues = true;
      internalValueResult.yPosition = this._yPosition;
    }
    if (this._yPositionVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.yPositionVar = this._yPositionVar;
    }
    if (this._image?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.image = this._image?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanComposite | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._gravity = undefined;
      this._gravityVar = undefined;
      this._placement = undefined;
      this._placementVar = undefined;
      this._scale = undefined;
      this._scaleDimension = undefined;
      this._scaleDimensionVar = undefined;
      this._scaleVar = undefined;
      this._xPosition = undefined;
      this._xPositionVar = undefined;
      this._yPosition = undefined;
      this._yPositionVar = undefined;
      this._image.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._gravity = value.gravity;
      this._gravityVar = value.gravityVar;
      this._placement = value.placement;
      this._placementVar = value.placementVar;
      this._scale = value.scale;
      this._scaleDimension = value.scaleDimension;
      this._scaleDimensionVar = value.scaleDimensionVar;
      this._scaleVar = value.scaleVar;
      this._xPosition = value.xPosition;
      this._xPositionVar = value.xPositionVar;
      this._yPosition = value.yPosition;
      this._yPositionVar = value.yPositionVar;
      this._image.internalValue = value.image;
    }
  }

  // gravity - computed: false, optional: true, required: false
  private _gravity?: string; 
  public get gravity() {
    return this.getStringAttribute('gravity');
  }
  public set gravity(value: string) {
    this._gravity = value;
  }
  public resetGravity() {
    this._gravity = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get gravityInput() {
    return this._gravity;
  }

  // gravity_var - computed: false, optional: true, required: false
  private _gravityVar?: string; 
  public get gravityVar() {
    return this.getStringAttribute('gravity_var');
  }
  public set gravityVar(value: string) {
    this._gravityVar = value;
  }
  public resetGravityVar() {
    this._gravityVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get gravityVarInput() {
    return this._gravityVar;
  }

  // placement - computed: false, optional: true, required: false
  private _placement?: string; 
  public get placement() {
    return this.getStringAttribute('placement');
  }
  public set placement(value: string) {
    this._placement = value;
  }
  public resetPlacement() {
    this._placement = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get placementInput() {
    return this._placement;
  }

  // placement_var - computed: false, optional: true, required: false
  private _placementVar?: string; 
  public get placementVar() {
    return this.getStringAttribute('placement_var');
  }
  public set placementVar(value: string) {
    this._placementVar = value;
  }
  public resetPlacementVar() {
    this._placementVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get placementVarInput() {
    return this._placementVar;
  }

  // scale - computed: false, optional: true, required: false
  private _scale?: string; 
  public get scale() {
    return this.getStringAttribute('scale');
  }
  public set scale(value: string) {
    this._scale = value;
  }
  public resetScale() {
    this._scale = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get scaleInput() {
    return this._scale;
  }

  // scale_dimension - computed: false, optional: true, required: false
  private _scaleDimension?: string; 
  public get scaleDimension() {
    return this.getStringAttribute('scale_dimension');
  }
  public set scaleDimension(value: string) {
    this._scaleDimension = value;
  }
  public resetScaleDimension() {
    this._scaleDimension = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get scaleDimensionInput() {
    return this._scaleDimension;
  }

  // scale_dimension_var - computed: false, optional: true, required: false
  private _scaleDimensionVar?: string; 
  public get scaleDimensionVar() {
    return this.getStringAttribute('scale_dimension_var');
  }
  public set scaleDimensionVar(value: string) {
    this._scaleDimensionVar = value;
  }
  public resetScaleDimensionVar() {
    this._scaleDimensionVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get scaleDimensionVarInput() {
    return this._scaleDimensionVar;
  }

  // scale_var - computed: false, optional: true, required: false
  private _scaleVar?: string; 
  public get scaleVar() {
    return this.getStringAttribute('scale_var');
  }
  public set scaleVar(value: string) {
    this._scaleVar = value;
  }
  public resetScaleVar() {
    this._scaleVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get scaleVarInput() {
    return this._scaleVar;
  }

  // x_position - computed: false, optional: true, required: false
  private _xPosition?: string; 
  public get xPosition() {
    return this.getStringAttribute('x_position');
  }
  public set xPosition(value: string) {
    this._xPosition = value;
  }
  public resetXPosition() {
    this._xPosition = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get xPositionInput() {
    return this._xPosition;
  }

  // x_position_var - computed: false, optional: true, required: false
  private _xPositionVar?: string; 
  public get xPositionVar() {
    return this.getStringAttribute('x_position_var');
  }
  public set xPositionVar(value: string) {
    this._xPositionVar = value;
  }
  public resetXPositionVar() {
    this._xPositionVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get xPositionVarInput() {
    return this._xPositionVar;
  }

  // y_position - computed: false, optional: true, required: false
  private _yPosition?: string; 
  public get yPosition() {
    return this.getStringAttribute('y_position');
  }
  public set yPosition(value: string) {
    this._yPosition = value;
  }
  public resetYPosition() {
    this._yPosition = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get yPositionInput() {
    return this._yPosition;
  }

  // y_position_var - computed: false, optional: true, required: false
  private _yPositionVar?: string; 
  public get yPositionVar() {
    return this.getStringAttribute('y_position_var');
  }
  public set yPositionVar(value: string) {
    this._yPositionVar = value;
  }
  public resetYPositionVar() {
    this._yPositionVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get yPositionVarInput() {
    return this._yPositionVar;
  }

  // image - computed: false, optional: false, required: true
  private _image = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanCompositeImageOutputReference(this, "image");
  public get image() {
    return this._image;
  }
  public putImage(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanCompositeImage) {
    this._image.internalValue = value;
  }
  // Temporarily expose input value. Use with caution.
  public get imageInput() {
    return this._image.internalValue;
  }
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanCompositeList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanComposite[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanCompositeOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanCompositeOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanCompoundTransformations {
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanCompoundTransformationsToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanCompoundTransformations | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanCompoundTransformationsToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanCompoundTransformations | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
  };
  return attrs;
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanCompoundTransformationsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanCompoundTransformations | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanCompoundTransformations | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
    }
  }
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanCompoundTransformationsList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanCompoundTransformations[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanCompoundTransformationsOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanCompoundTransformationsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanCompound {
  /**
  * transformations block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#transformations DataAkamaiImagingPolicyImage#transformations}
  */
  readonly transformations?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanCompoundTransformations[] | cdktf.IResolvable;
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanCompoundToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanCompound | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    transformations: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanCompoundTransformationsToTerraform, true)(struct!.transformations),
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanCompoundToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanCompound | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    transformations: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanCompoundTransformationsToHclTerraform, true)(struct!.transformations),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanCompoundTransformationsList",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanCompoundOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanCompound | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._transformations?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.transformations = this._transformations?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanCompound | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._transformations.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._transformations.internalValue = value.transformations;
    }
  }

  // transformations - computed: false, optional: true, required: false
  private _transformations = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanCompoundTransformationsList(this, "transformations", false);
  public get transformations() {
    return this._transformations;
  }
  public putTransformations(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanCompoundTransformations[] | cdktf.IResolvable) {
    this._transformations.internalValue = value;
  }
  public resetTransformations() {
    this._transformations.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get transformationsInput() {
    return this._transformations.internalValue;
  }
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanCompoundList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanCompound[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanCompoundOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanCompoundOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanContrast {
  /**
  * Adjusts the brightness of the image. Positive values increase brightness and negative values decrease brightness. A value of  `1` produces a white image. A value of  `-1` produces a black image. The default value is `0`, which leaves the image unchanged. The acceptable value range is `-1.0` to `1.0`. Values outside of the acceptable range clamp to this range.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#brightness DataAkamaiImagingPolicyImage#brightness}
  */
  readonly brightness?: string;
  /**
  * Adjusts the brightness of the image. Positive values increase brightness and negative values decrease brightness. A value of  `1` produces a white image. A value of  `-1` produces a black image. The default value is `0`, which leaves the image unchanged. The acceptable value range is `-1.0` to `1.0`. Values outside of the acceptable range clamp to this range.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#brightness_var DataAkamaiImagingPolicyImage#brightness_var}
  */
  readonly brightnessVar?: string;
  /**
  * Adjusts the contrast of the image. Expressed as a range from `-1` to `1`, positive values increase contrast, negative values decrease it, while `0` leaves the image unchanged. Values outside of the `-1` to `1` range clamp to this range.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#contrast DataAkamaiImagingPolicyImage#contrast}
  */
  readonly contrast?: string;
  /**
  * Adjusts the contrast of the image. Expressed as a range from `-1` to `1`, positive values increase contrast, negative values decrease it, while `0` leaves the image unchanged. Values outside of the `-1` to `1` range clamp to this range.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#contrast_var DataAkamaiImagingPolicyImage#contrast_var}
  */
  readonly contrastVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanContrastToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanContrast | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    brightness: cdktf.stringToTerraform(struct!.brightness),
    brightness_var: cdktf.stringToTerraform(struct!.brightnessVar),
    contrast: cdktf.stringToTerraform(struct!.contrast),
    contrast_var: cdktf.stringToTerraform(struct!.contrastVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanContrastToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanContrast | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    brightness: {
      value: cdktf.stringToHclTerraform(struct!.brightness),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    brightness_var: {
      value: cdktf.stringToHclTerraform(struct!.brightnessVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    contrast: {
      value: cdktf.stringToHclTerraform(struct!.contrast),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    contrast_var: {
      value: cdktf.stringToHclTerraform(struct!.contrastVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanContrastOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanContrast | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._brightness !== undefined) {
      hasAnyValues = true;
      internalValueResult.brightness = this._brightness;
    }
    if (this._brightnessVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.brightnessVar = this._brightnessVar;
    }
    if (this._contrast !== undefined) {
      hasAnyValues = true;
      internalValueResult.contrast = this._contrast;
    }
    if (this._contrastVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.contrastVar = this._contrastVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanContrast | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._brightness = undefined;
      this._brightnessVar = undefined;
      this._contrast = undefined;
      this._contrastVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._brightness = value.brightness;
      this._brightnessVar = value.brightnessVar;
      this._contrast = value.contrast;
      this._contrastVar = value.contrastVar;
    }
  }

  // brightness - computed: false, optional: true, required: false
  private _brightness?: string; 
  public get brightness() {
    return this.getStringAttribute('brightness');
  }
  public set brightness(value: string) {
    this._brightness = value;
  }
  public resetBrightness() {
    this._brightness = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get brightnessInput() {
    return this._brightness;
  }

  // brightness_var - computed: false, optional: true, required: false
  private _brightnessVar?: string; 
  public get brightnessVar() {
    return this.getStringAttribute('brightness_var');
  }
  public set brightnessVar(value: string) {
    this._brightnessVar = value;
  }
  public resetBrightnessVar() {
    this._brightnessVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get brightnessVarInput() {
    return this._brightnessVar;
  }

  // contrast - computed: false, optional: true, required: false
  private _contrast?: string; 
  public get contrast() {
    return this.getStringAttribute('contrast');
  }
  public set contrast(value: string) {
    this._contrast = value;
  }
  public resetContrast() {
    this._contrast = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get contrastInput() {
    return this._contrast;
  }

  // contrast_var - computed: false, optional: true, required: false
  private _contrastVar?: string; 
  public get contrastVar() {
    return this.getStringAttribute('contrast_var');
  }
  public set contrastVar(value: string) {
    this._contrastVar = value;
  }
  public resetContrastVar() {
    this._contrastVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get contrastVarInput() {
    return this._contrastVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanContrastList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanContrast[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanContrastOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanContrastOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanGoop {
  /**
  * Specifies the greatest distance control points may move from their original position. A value of `1.0` shifts control points over as far as the next one in the original grid. A value of `0.0` leaves the image unchanged. Values under `0.5` work better for subtle distortions, otherwise control points may pass each other and cause a twisting effect.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#chaos DataAkamaiImagingPolicyImage#chaos}
  */
  readonly chaos?: string;
  /**
  * Specifies the greatest distance control points may move from their original position. A value of `1.0` shifts control points over as far as the next one in the original grid. A value of `0.0` leaves the image unchanged. Values under `0.5` work better for subtle distortions, otherwise control points may pass each other and cause a twisting effect.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#chaos_var DataAkamaiImagingPolicyImage#chaos_var}
  */
  readonly chaosVar?: string;
  /**
  * Controls the density of control points used to distort the image. The largest dimension of the input image is divided up to fit this number of control points. A grid of points is extended on the smaller dimension such that each row and column of control points is equidistant from each adjacent row or column. This parameter strongly affects transformation performance. Be careful choosing values above the default if you expect to transform medium to large size images.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#density DataAkamaiImagingPolicyImage#density}
  */
  readonly density?: string;
  /**
  * Controls the density of control points used to distort the image. The largest dimension of the input image is divided up to fit this number of control points. A grid of points is extended on the smaller dimension such that each row and column of control points is equidistant from each adjacent row or column. This parameter strongly affects transformation performance. Be careful choosing values above the default if you expect to transform medium to large size images.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#density_var DataAkamaiImagingPolicyImage#density_var}
  */
  readonly densityVar?: string;
  /**
  * By default, the distortion algorithm relies on inverse squares to calculate distance but this allows you to change the exponent. You shouldnt need to vary the default value of `2.0`.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#power DataAkamaiImagingPolicyImage#power}
  */
  readonly power?: string;
  /**
  * By default, the distortion algorithm relies on inverse squares to calculate distance but this allows you to change the exponent. You shouldnt need to vary the default value of `2.0`.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#power_var DataAkamaiImagingPolicyImage#power_var}
  */
  readonly powerVar?: string;
  /**
  * Specifies your own `seed` value as an alternative to the default, which is subject to variability. This allows for reproducible and deterministic distortions. If all parameters are kept equal and a constant seed is used, `Goop` distorts an input image consistently over many transformations. By default, this value is set to the current Epoch Time measured in milliseconds, which provides inconsistent transformation output.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#seed DataAkamaiImagingPolicyImage#seed}
  */
  readonly seed?: string;
  /**
  * Specifies your own `seed` value as an alternative to the default, which is subject to variability. This allows for reproducible and deterministic distortions. If all parameters are kept equal and a constant seed is used, `Goop` distorts an input image consistently over many transformations. By default, this value is set to the current Epoch Time measured in milliseconds, which provides inconsistent transformation output.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#seed_var DataAkamaiImagingPolicyImage#seed_var}
  */
  readonly seedVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanGoopToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanGoop | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    chaos: cdktf.stringToTerraform(struct!.chaos),
    chaos_var: cdktf.stringToTerraform(struct!.chaosVar),
    density: cdktf.stringToTerraform(struct!.density),
    density_var: cdktf.stringToTerraform(struct!.densityVar),
    power: cdktf.stringToTerraform(struct!.power),
    power_var: cdktf.stringToTerraform(struct!.powerVar),
    seed: cdktf.stringToTerraform(struct!.seed),
    seed_var: cdktf.stringToTerraform(struct!.seedVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanGoopToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanGoop | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    chaos: {
      value: cdktf.stringToHclTerraform(struct!.chaos),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    chaos_var: {
      value: cdktf.stringToHclTerraform(struct!.chaosVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    density: {
      value: cdktf.stringToHclTerraform(struct!.density),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    density_var: {
      value: cdktf.stringToHclTerraform(struct!.densityVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    power: {
      value: cdktf.stringToHclTerraform(struct!.power),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    power_var: {
      value: cdktf.stringToHclTerraform(struct!.powerVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    seed: {
      value: cdktf.stringToHclTerraform(struct!.seed),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    seed_var: {
      value: cdktf.stringToHclTerraform(struct!.seedVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanGoopOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanGoop | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._chaos !== undefined) {
      hasAnyValues = true;
      internalValueResult.chaos = this._chaos;
    }
    if (this._chaosVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.chaosVar = this._chaosVar;
    }
    if (this._density !== undefined) {
      hasAnyValues = true;
      internalValueResult.density = this._density;
    }
    if (this._densityVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.densityVar = this._densityVar;
    }
    if (this._power !== undefined) {
      hasAnyValues = true;
      internalValueResult.power = this._power;
    }
    if (this._powerVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.powerVar = this._powerVar;
    }
    if (this._seed !== undefined) {
      hasAnyValues = true;
      internalValueResult.seed = this._seed;
    }
    if (this._seedVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.seedVar = this._seedVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanGoop | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._chaos = undefined;
      this._chaosVar = undefined;
      this._density = undefined;
      this._densityVar = undefined;
      this._power = undefined;
      this._powerVar = undefined;
      this._seed = undefined;
      this._seedVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._chaos = value.chaos;
      this._chaosVar = value.chaosVar;
      this._density = value.density;
      this._densityVar = value.densityVar;
      this._power = value.power;
      this._powerVar = value.powerVar;
      this._seed = value.seed;
      this._seedVar = value.seedVar;
    }
  }

  // chaos - computed: false, optional: true, required: false
  private _chaos?: string; 
  public get chaos() {
    return this.getStringAttribute('chaos');
  }
  public set chaos(value: string) {
    this._chaos = value;
  }
  public resetChaos() {
    this._chaos = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get chaosInput() {
    return this._chaos;
  }

  // chaos_var - computed: false, optional: true, required: false
  private _chaosVar?: string; 
  public get chaosVar() {
    return this.getStringAttribute('chaos_var');
  }
  public set chaosVar(value: string) {
    this._chaosVar = value;
  }
  public resetChaosVar() {
    this._chaosVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get chaosVarInput() {
    return this._chaosVar;
  }

  // density - computed: false, optional: true, required: false
  private _density?: string; 
  public get density() {
    return this.getStringAttribute('density');
  }
  public set density(value: string) {
    this._density = value;
  }
  public resetDensity() {
    this._density = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get densityInput() {
    return this._density;
  }

  // density_var - computed: false, optional: true, required: false
  private _densityVar?: string; 
  public get densityVar() {
    return this.getStringAttribute('density_var');
  }
  public set densityVar(value: string) {
    this._densityVar = value;
  }
  public resetDensityVar() {
    this._densityVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get densityVarInput() {
    return this._densityVar;
  }

  // power - computed: false, optional: true, required: false
  private _power?: string; 
  public get power() {
    return this.getStringAttribute('power');
  }
  public set power(value: string) {
    this._power = value;
  }
  public resetPower() {
    this._power = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get powerInput() {
    return this._power;
  }

  // power_var - computed: false, optional: true, required: false
  private _powerVar?: string; 
  public get powerVar() {
    return this.getStringAttribute('power_var');
  }
  public set powerVar(value: string) {
    this._powerVar = value;
  }
  public resetPowerVar() {
    this._powerVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get powerVarInput() {
    return this._powerVar;
  }

  // seed - computed: false, optional: true, required: false
  private _seed?: string; 
  public get seed() {
    return this.getStringAttribute('seed');
  }
  public set seed(value: string) {
    this._seed = value;
  }
  public resetSeed() {
    this._seed = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get seedInput() {
    return this._seed;
  }

  // seed_var - computed: false, optional: true, required: false
  private _seedVar?: string; 
  public get seedVar() {
    return this.getStringAttribute('seed_var');
  }
  public set seedVar(value: string) {
    this._seedVar = value;
  }
  public resetSeedVar() {
    this._seedVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get seedVarInput() {
    return this._seedVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanGoopList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanGoop[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanGoopOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanGoopOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanGrayscale {
  /**
  * The algorithm used to transform colors to grays, either `Brightness`, `Lightness`, `Rec601`, or the default `Rec709`.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#type DataAkamaiImagingPolicyImage#type}
  */
  readonly type?: string;
  /**
  * The algorithm used to transform colors to grays, either `Brightness`, `Lightness`, `Rec601`, or the default `Rec709`.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#type_var DataAkamaiImagingPolicyImage#type_var}
  */
  readonly typeVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanGrayscaleToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanGrayscale | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    type: cdktf.stringToTerraform(struct!.type),
    type_var: cdktf.stringToTerraform(struct!.typeVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanGrayscaleToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanGrayscale | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    type: {
      value: cdktf.stringToHclTerraform(struct!.type),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    type_var: {
      value: cdktf.stringToHclTerraform(struct!.typeVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanGrayscaleOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanGrayscale | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._type !== undefined) {
      hasAnyValues = true;
      internalValueResult.type = this._type;
    }
    if (this._typeVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.typeVar = this._typeVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanGrayscale | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._type = undefined;
      this._typeVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._type = value.type;
      this._typeVar = value.typeVar;
    }
  }

  // type - computed: false, optional: true, required: false
  private _type?: string; 
  public get type() {
    return this.getStringAttribute('type');
  }
  public set type(value: string) {
    this._type = value;
  }
  public resetType() {
    this._type = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get typeInput() {
    return this._type;
  }

  // type_var - computed: false, optional: true, required: false
  private _typeVar?: string; 
  public get typeVar() {
    return this.getStringAttribute('type_var');
  }
  public set typeVar(value: string) {
    this._typeVar = value;
  }
  public resetTypeVar() {
    this._typeVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get typeVarInput() {
    return this._typeVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanGrayscaleList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanGrayscale[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanGrayscaleOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanGrayscaleOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanHsl {
  /**
  * The number of degrees to rotate colors around the color wheel, `0` by default.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hue DataAkamaiImagingPolicyImage#hue}
  */
  readonly hue?: string;
  /**
  * The number of degrees to rotate colors around the color wheel, `0` by default.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hue_var DataAkamaiImagingPolicyImage#hue_var}
  */
  readonly hueVar?: string;
  /**
  * A multiplier to adjust the lightness of colors in the image. Note that lightness is distinct from brightness. For example, reducing the lightness of a light green might give you a lime green whereas reducing the brightness of a light green might give you a darker shade of the same green. Values less than `1.0` decrease the lightness of colors in the image. Values greater than `1.0` increase the lightness of colors in the image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#lightness DataAkamaiImagingPolicyImage#lightness}
  */
  readonly lightness?: string;
  /**
  * A multiplier to adjust the lightness of colors in the image. Note that lightness is distinct from brightness. For example, reducing the lightness of a light green might give you a lime green whereas reducing the brightness of a light green might give you a darker shade of the same green. Values less than `1.0` decrease the lightness of colors in the image. Values greater than `1.0` increase the lightness of colors in the image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#lightness_var DataAkamaiImagingPolicyImage#lightness_var}
  */
  readonly lightnessVar?: string;
  /**
  * A multiplier to adjust the saturation of colors in the image. Values less than `1.0` decrease saturation and values greater than `1.0` increase the saturation. A value of `0.0` removes all color from the image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#saturation DataAkamaiImagingPolicyImage#saturation}
  */
  readonly saturation?: string;
  /**
  * A multiplier to adjust the saturation of colors in the image. Values less than `1.0` decrease saturation and values greater than `1.0` increase the saturation. A value of `0.0` removes all color from the image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#saturation_var DataAkamaiImagingPolicyImage#saturation_var}
  */
  readonly saturationVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanHslToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanHsl | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    hue: cdktf.stringToTerraform(struct!.hue),
    hue_var: cdktf.stringToTerraform(struct!.hueVar),
    lightness: cdktf.stringToTerraform(struct!.lightness),
    lightness_var: cdktf.stringToTerraform(struct!.lightnessVar),
    saturation: cdktf.stringToTerraform(struct!.saturation),
    saturation_var: cdktf.stringToTerraform(struct!.saturationVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanHslToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanHsl | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    hue: {
      value: cdktf.stringToHclTerraform(struct!.hue),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    hue_var: {
      value: cdktf.stringToHclTerraform(struct!.hueVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    lightness: {
      value: cdktf.stringToHclTerraform(struct!.lightness),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    lightness_var: {
      value: cdktf.stringToHclTerraform(struct!.lightnessVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    saturation: {
      value: cdktf.stringToHclTerraform(struct!.saturation),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    saturation_var: {
      value: cdktf.stringToHclTerraform(struct!.saturationVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanHslOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanHsl | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._hue !== undefined) {
      hasAnyValues = true;
      internalValueResult.hue = this._hue;
    }
    if (this._hueVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.hueVar = this._hueVar;
    }
    if (this._lightness !== undefined) {
      hasAnyValues = true;
      internalValueResult.lightness = this._lightness;
    }
    if (this._lightnessVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.lightnessVar = this._lightnessVar;
    }
    if (this._saturation !== undefined) {
      hasAnyValues = true;
      internalValueResult.saturation = this._saturation;
    }
    if (this._saturationVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.saturationVar = this._saturationVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanHsl | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._hue = undefined;
      this._hueVar = undefined;
      this._lightness = undefined;
      this._lightnessVar = undefined;
      this._saturation = undefined;
      this._saturationVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._hue = value.hue;
      this._hueVar = value.hueVar;
      this._lightness = value.lightness;
      this._lightnessVar = value.lightnessVar;
      this._saturation = value.saturation;
      this._saturationVar = value.saturationVar;
    }
  }

  // hue - computed: false, optional: true, required: false
  private _hue?: string; 
  public get hue() {
    return this.getStringAttribute('hue');
  }
  public set hue(value: string) {
    this._hue = value;
  }
  public resetHue() {
    this._hue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hueInput() {
    return this._hue;
  }

  // hue_var - computed: false, optional: true, required: false
  private _hueVar?: string; 
  public get hueVar() {
    return this.getStringAttribute('hue_var');
  }
  public set hueVar(value: string) {
    this._hueVar = value;
  }
  public resetHueVar() {
    this._hueVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hueVarInput() {
    return this._hueVar;
  }

  // lightness - computed: false, optional: true, required: false
  private _lightness?: string; 
  public get lightness() {
    return this.getStringAttribute('lightness');
  }
  public set lightness(value: string) {
    this._lightness = value;
  }
  public resetLightness() {
    this._lightness = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get lightnessInput() {
    return this._lightness;
  }

  // lightness_var - computed: false, optional: true, required: false
  private _lightnessVar?: string; 
  public get lightnessVar() {
    return this.getStringAttribute('lightness_var');
  }
  public set lightnessVar(value: string) {
    this._lightnessVar = value;
  }
  public resetLightnessVar() {
    this._lightnessVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get lightnessVarInput() {
    return this._lightnessVar;
  }

  // saturation - computed: false, optional: true, required: false
  private _saturation?: string; 
  public get saturation() {
    return this.getStringAttribute('saturation');
  }
  public set saturation(value: string) {
    this._saturation = value;
  }
  public resetSaturation() {
    this._saturation = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get saturationInput() {
    return this._saturation;
  }

  // saturation_var - computed: false, optional: true, required: false
  private _saturationVar?: string; 
  public get saturationVar() {
    return this.getStringAttribute('saturation_var');
  }
  public set saturationVar(value: string) {
    this._saturationVar = value;
  }
  public resetSaturationVar() {
    this._saturationVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get saturationVarInput() {
    return this._saturationVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanHslList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanHsl[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanHslOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanHslOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanHsv {
  /**
  * The number of degrees to rotate colors around the color wheel, `0.0` by default.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hue DataAkamaiImagingPolicyImage#hue}
  */
  readonly hue?: string;
  /**
  * The number of degrees to rotate colors around the color wheel, `0.0` by default.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hue_var DataAkamaiImagingPolicyImage#hue_var}
  */
  readonly hueVar?: string;
  /**
  * A multiplier to adjust the saturation of colors in the image. Values less than `1.0` decrease saturation and values greater than `1.0` increase the saturation. A value of `0.0` removes all color from the image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#saturation DataAkamaiImagingPolicyImage#saturation}
  */
  readonly saturation?: string;
  /**
  * A multiplier to adjust the saturation of colors in the image. Values less than `1.0` decrease saturation and values greater than `1.0` increase the saturation. A value of `0.0` removes all color from the image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#saturation_var DataAkamaiImagingPolicyImage#saturation_var}
  */
  readonly saturationVar?: string;
  /**
  * A multiplier to adjust the lightness or darkness of the images base color. Values less than 1.0 decrease the base colors in the image, making them appear darker. Values greater than 1.0 increase the base colors in the image, making them appear lighter.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#value DataAkamaiImagingPolicyImage#value}
  */
  readonly value?: string;
  /**
  * A multiplier to adjust the lightness or darkness of the images base color. Values less than 1.0 decrease the base colors in the image, making them appear darker. Values greater than 1.0 increase the base colors in the image, making them appear lighter.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#value_var DataAkamaiImagingPolicyImage#value_var}
  */
  readonly valueVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanHsvToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanHsv | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    hue: cdktf.stringToTerraform(struct!.hue),
    hue_var: cdktf.stringToTerraform(struct!.hueVar),
    saturation: cdktf.stringToTerraform(struct!.saturation),
    saturation_var: cdktf.stringToTerraform(struct!.saturationVar),
    value: cdktf.stringToTerraform(struct!.value),
    value_var: cdktf.stringToTerraform(struct!.valueVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanHsvToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanHsv | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    hue: {
      value: cdktf.stringToHclTerraform(struct!.hue),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    hue_var: {
      value: cdktf.stringToHclTerraform(struct!.hueVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    saturation: {
      value: cdktf.stringToHclTerraform(struct!.saturation),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    saturation_var: {
      value: cdktf.stringToHclTerraform(struct!.saturationVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    value: {
      value: cdktf.stringToHclTerraform(struct!.value),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    value_var: {
      value: cdktf.stringToHclTerraform(struct!.valueVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanHsvOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanHsv | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._hue !== undefined) {
      hasAnyValues = true;
      internalValueResult.hue = this._hue;
    }
    if (this._hueVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.hueVar = this._hueVar;
    }
    if (this._saturation !== undefined) {
      hasAnyValues = true;
      internalValueResult.saturation = this._saturation;
    }
    if (this._saturationVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.saturationVar = this._saturationVar;
    }
    if (this._value !== undefined) {
      hasAnyValues = true;
      internalValueResult.value = this._value;
    }
    if (this._valueVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.valueVar = this._valueVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanHsv | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._hue = undefined;
      this._hueVar = undefined;
      this._saturation = undefined;
      this._saturationVar = undefined;
      this._value = undefined;
      this._valueVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._hue = value.hue;
      this._hueVar = value.hueVar;
      this._saturation = value.saturation;
      this._saturationVar = value.saturationVar;
      this._value = value.value;
      this._valueVar = value.valueVar;
    }
  }

  // hue - computed: false, optional: true, required: false
  private _hue?: string; 
  public get hue() {
    return this.getStringAttribute('hue');
  }
  public set hue(value: string) {
    this._hue = value;
  }
  public resetHue() {
    this._hue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hueInput() {
    return this._hue;
  }

  // hue_var - computed: false, optional: true, required: false
  private _hueVar?: string; 
  public get hueVar() {
    return this.getStringAttribute('hue_var');
  }
  public set hueVar(value: string) {
    this._hueVar = value;
  }
  public resetHueVar() {
    this._hueVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hueVarInput() {
    return this._hueVar;
  }

  // saturation - computed: false, optional: true, required: false
  private _saturation?: string; 
  public get saturation() {
    return this.getStringAttribute('saturation');
  }
  public set saturation(value: string) {
    this._saturation = value;
  }
  public resetSaturation() {
    this._saturation = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get saturationInput() {
    return this._saturation;
  }

  // saturation_var - computed: false, optional: true, required: false
  private _saturationVar?: string; 
  public get saturationVar() {
    return this.getStringAttribute('saturation_var');
  }
  public set saturationVar(value: string) {
    this._saturationVar = value;
  }
  public resetSaturationVar() {
    this._saturationVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get saturationVarInput() {
    return this._saturationVar;
  }

  // value - computed: false, optional: true, required: false
  private _value?: string; 
  public get value() {
    return this.getStringAttribute('value');
  }
  public set value(value: string) {
    this._value = value;
  }
  public resetValue() {
    this._value = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get valueInput() {
    return this._value;
  }

  // value_var - computed: false, optional: true, required: false
  private _valueVar?: string; 
  public get valueVar() {
    return this.getStringAttribute('value_var');
  }
  public set valueVar(value: string) {
    this._valueVar = value;
  }
  public resetValueVar() {
    this._valueVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get valueVarInput() {
    return this._valueVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanHsvList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanHsv[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanHsvOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanHsvOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfDimensionDefault {
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfDimensionDefaultToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfDimensionDefaultOutputReference | DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfDimensionDefault): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfDimensionDefaultToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfDimensionDefaultOutputReference | DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfDimensionDefault): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
  };
  return attrs;
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfDimensionDefaultOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false, 0);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfDimensionDefault | undefined {
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfDimensionDefault | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
    }
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfDimensionEqual {
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfDimensionEqualToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfDimensionEqualOutputReference | DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfDimensionEqual): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfDimensionEqualToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfDimensionEqualOutputReference | DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfDimensionEqual): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
  };
  return attrs;
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfDimensionEqualOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false, 0);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfDimensionEqual | undefined {
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfDimensionEqual | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
    }
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfDimensionGreaterThan {
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfDimensionGreaterThanToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfDimensionGreaterThanOutputReference | DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfDimensionGreaterThan): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfDimensionGreaterThanToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfDimensionGreaterThanOutputReference | DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfDimensionGreaterThan): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
  };
  return attrs;
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfDimensionGreaterThanOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false, 0);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfDimensionGreaterThan | undefined {
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfDimensionGreaterThan | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
    }
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfDimensionLessThan {
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfDimensionLessThanToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfDimensionLessThanOutputReference | DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfDimensionLessThan): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfDimensionLessThanToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfDimensionLessThanOutputReference | DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfDimensionLessThan): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
  };
  return attrs;
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfDimensionLessThanOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false, 0);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfDimensionLessThan | undefined {
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfDimensionLessThan | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
    }
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfDimension {
  /**
  * The dimension to use to select the transformation, either `height`, `width`, or `both`.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#dimension DataAkamaiImagingPolicyImage#dimension}
  */
  readonly dimension?: string;
  /**
  * The dimension to use to select the transformation, either `height`, `width`, or `both`.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#dimension_var DataAkamaiImagingPolicyImage#dimension_var}
  */
  readonly dimensionVar?: string;
  /**
  * The value to compare against the source image dimension. For example, if the image dimension is less than the value the lessThan transformation is applied.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#value DataAkamaiImagingPolicyImage#value}
  */
  readonly value?: string;
  /**
  * The value to compare against the source image dimension. For example, if the image dimension is less than the value the lessThan transformation is applied.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#value_var DataAkamaiImagingPolicyImage#value_var}
  */
  readonly valueVar?: string;
  /**
  * default block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#default DataAkamaiImagingPolicyImage#default}
  */
  readonly default?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfDimensionDefault;
  /**
  * equal block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#equal DataAkamaiImagingPolicyImage#equal}
  */
  readonly equal?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfDimensionEqual;
  /**
  * greater_than block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#greater_than DataAkamaiImagingPolicyImage#greater_than}
  */
  readonly greaterThan?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfDimensionGreaterThan;
  /**
  * less_than block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#less_than DataAkamaiImagingPolicyImage#less_than}
  */
  readonly lessThan?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfDimensionLessThan;
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfDimensionToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfDimension | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    dimension: cdktf.stringToTerraform(struct!.dimension),
    dimension_var: cdktf.stringToTerraform(struct!.dimensionVar),
    value: cdktf.stringToTerraform(struct!.value),
    value_var: cdktf.stringToTerraform(struct!.valueVar),
    default: dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfDimensionDefaultToTerraform(struct!.default),
    equal: dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfDimensionEqualToTerraform(struct!.equal),
    greater_than: dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfDimensionGreaterThanToTerraform(struct!.greaterThan),
    less_than: dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfDimensionLessThanToTerraform(struct!.lessThan),
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfDimensionToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfDimension | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    dimension: {
      value: cdktf.stringToHclTerraform(struct!.dimension),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    dimension_var: {
      value: cdktf.stringToHclTerraform(struct!.dimensionVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    value: {
      value: cdktf.stringToHclTerraform(struct!.value),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    value_var: {
      value: cdktf.stringToHclTerraform(struct!.valueVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    default: {
      value: dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfDimensionDefaultToHclTerraform(struct!.default),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfDimensionDefaultList",
    },
    equal: {
      value: dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfDimensionEqualToHclTerraform(struct!.equal),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfDimensionEqualList",
    },
    greater_than: {
      value: dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfDimensionGreaterThanToHclTerraform(struct!.greaterThan),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfDimensionGreaterThanList",
    },
    less_than: {
      value: dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfDimensionLessThanToHclTerraform(struct!.lessThan),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfDimensionLessThanList",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfDimensionOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfDimension | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._dimension !== undefined) {
      hasAnyValues = true;
      internalValueResult.dimension = this._dimension;
    }
    if (this._dimensionVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.dimensionVar = this._dimensionVar;
    }
    if (this._value !== undefined) {
      hasAnyValues = true;
      internalValueResult.value = this._value;
    }
    if (this._valueVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.valueVar = this._valueVar;
    }
    if (this._default?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.default = this._default?.internalValue;
    }
    if (this._equal?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.equal = this._equal?.internalValue;
    }
    if (this._greaterThan?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.greaterThan = this._greaterThan?.internalValue;
    }
    if (this._lessThan?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.lessThan = this._lessThan?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfDimension | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._dimension = undefined;
      this._dimensionVar = undefined;
      this._value = undefined;
      this._valueVar = undefined;
      this._default.internalValue = undefined;
      this._equal.internalValue = undefined;
      this._greaterThan.internalValue = undefined;
      this._lessThan.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._dimension = value.dimension;
      this._dimensionVar = value.dimensionVar;
      this._value = value.value;
      this._valueVar = value.valueVar;
      this._default.internalValue = value.default;
      this._equal.internalValue = value.equal;
      this._greaterThan.internalValue = value.greaterThan;
      this._lessThan.internalValue = value.lessThan;
    }
  }

  // dimension - computed: false, optional: true, required: false
  private _dimension?: string; 
  public get dimension() {
    return this.getStringAttribute('dimension');
  }
  public set dimension(value: string) {
    this._dimension = value;
  }
  public resetDimension() {
    this._dimension = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get dimensionInput() {
    return this._dimension;
  }

  // dimension_var - computed: false, optional: true, required: false
  private _dimensionVar?: string; 
  public get dimensionVar() {
    return this.getStringAttribute('dimension_var');
  }
  public set dimensionVar(value: string) {
    this._dimensionVar = value;
  }
  public resetDimensionVar() {
    this._dimensionVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get dimensionVarInput() {
    return this._dimensionVar;
  }

  // value - computed: false, optional: true, required: false
  private _value?: string; 
  public get value() {
    return this.getStringAttribute('value');
  }
  public set value(value: string) {
    this._value = value;
  }
  public resetValue() {
    this._value = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get valueInput() {
    return this._value;
  }

  // value_var - computed: false, optional: true, required: false
  private _valueVar?: string; 
  public get valueVar() {
    return this.getStringAttribute('value_var');
  }
  public set valueVar(value: string) {
    this._valueVar = value;
  }
  public resetValueVar() {
    this._valueVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get valueVarInput() {
    return this._valueVar;
  }

  // default - computed: false, optional: true, required: false
  private _default = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfDimensionDefaultOutputReference(this, "default");
  public get default() {
    return this._default;
  }
  public putDefault(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfDimensionDefault) {
    this._default.internalValue = value;
  }
  public resetDefault() {
    this._default.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get defaultInput() {
    return this._default.internalValue;
  }

  // equal - computed: false, optional: true, required: false
  private _equal = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfDimensionEqualOutputReference(this, "equal");
  public get equal() {
    return this._equal;
  }
  public putEqual(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfDimensionEqual) {
    this._equal.internalValue = value;
  }
  public resetEqual() {
    this._equal.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get equalInput() {
    return this._equal.internalValue;
  }

  // greater_than - computed: false, optional: true, required: false
  private _greaterThan = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfDimensionGreaterThanOutputReference(this, "greater_than");
  public get greaterThan() {
    return this._greaterThan;
  }
  public putGreaterThan(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfDimensionGreaterThan) {
    this._greaterThan.internalValue = value;
  }
  public resetGreaterThan() {
    this._greaterThan.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get greaterThanInput() {
    return this._greaterThan.internalValue;
  }

  // less_than - computed: false, optional: true, required: false
  private _lessThan = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfDimensionLessThanOutputReference(this, "less_than");
  public get lessThan() {
    return this._lessThan;
  }
  public putLessThan(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfDimensionLessThan) {
    this._lessThan.internalValue = value;
  }
  public resetLessThan() {
    this._lessThan.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get lessThanInput() {
    return this._lessThan.internalValue;
  }
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfDimensionList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfDimension[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfDimensionOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfDimensionOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfOrientationDefault {
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfOrientationDefaultToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfOrientationDefaultOutputReference | DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfOrientationDefault): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfOrientationDefaultToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfOrientationDefaultOutputReference | DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfOrientationDefault): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
  };
  return attrs;
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfOrientationDefaultOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false, 0);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfOrientationDefault | undefined {
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfOrientationDefault | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
    }
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfOrientationLandscape {
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfOrientationLandscapeToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfOrientationLandscapeOutputReference | DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfOrientationLandscape): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfOrientationLandscapeToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfOrientationLandscapeOutputReference | DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfOrientationLandscape): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
  };
  return attrs;
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfOrientationLandscapeOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false, 0);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfOrientationLandscape | undefined {
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfOrientationLandscape | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
    }
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfOrientationPortrait {
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfOrientationPortraitToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfOrientationPortraitOutputReference | DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfOrientationPortrait): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfOrientationPortraitToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfOrientationPortraitOutputReference | DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfOrientationPortrait): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
  };
  return attrs;
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfOrientationPortraitOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false, 0);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfOrientationPortrait | undefined {
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfOrientationPortrait | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
    }
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfOrientationSquare {
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfOrientationSquareToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfOrientationSquareOutputReference | DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfOrientationSquare): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfOrientationSquareToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfOrientationSquareOutputReference | DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfOrientationSquare): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
  };
  return attrs;
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfOrientationSquareOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false, 0);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfOrientationSquare | undefined {
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfOrientationSquare | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
    }
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfOrientation {
  /**
  * default block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#default DataAkamaiImagingPolicyImage#default}
  */
  readonly default?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfOrientationDefault;
  /**
  * landscape block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#landscape DataAkamaiImagingPolicyImage#landscape}
  */
  readonly landscape?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfOrientationLandscape;
  /**
  * portrait block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#portrait DataAkamaiImagingPolicyImage#portrait}
  */
  readonly portrait?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfOrientationPortrait;
  /**
  * square block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#square DataAkamaiImagingPolicyImage#square}
  */
  readonly square?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfOrientationSquare;
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfOrientationToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfOrientation | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    default: dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfOrientationDefaultToTerraform(struct!.default),
    landscape: dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfOrientationLandscapeToTerraform(struct!.landscape),
    portrait: dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfOrientationPortraitToTerraform(struct!.portrait),
    square: dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfOrientationSquareToTerraform(struct!.square),
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfOrientationToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfOrientation | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    default: {
      value: dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfOrientationDefaultToHclTerraform(struct!.default),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfOrientationDefaultList",
    },
    landscape: {
      value: dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfOrientationLandscapeToHclTerraform(struct!.landscape),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfOrientationLandscapeList",
    },
    portrait: {
      value: dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfOrientationPortraitToHclTerraform(struct!.portrait),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfOrientationPortraitList",
    },
    square: {
      value: dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfOrientationSquareToHclTerraform(struct!.square),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfOrientationSquareList",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfOrientationOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfOrientation | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._default?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.default = this._default?.internalValue;
    }
    if (this._landscape?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.landscape = this._landscape?.internalValue;
    }
    if (this._portrait?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.portrait = this._portrait?.internalValue;
    }
    if (this._square?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.square = this._square?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfOrientation | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._default.internalValue = undefined;
      this._landscape.internalValue = undefined;
      this._portrait.internalValue = undefined;
      this._square.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._default.internalValue = value.default;
      this._landscape.internalValue = value.landscape;
      this._portrait.internalValue = value.portrait;
      this._square.internalValue = value.square;
    }
  }

  // default - computed: false, optional: true, required: false
  private _default = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfOrientationDefaultOutputReference(this, "default");
  public get default() {
    return this._default;
  }
  public putDefault(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfOrientationDefault) {
    this._default.internalValue = value;
  }
  public resetDefault() {
    this._default.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get defaultInput() {
    return this._default.internalValue;
  }

  // landscape - computed: false, optional: true, required: false
  private _landscape = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfOrientationLandscapeOutputReference(this, "landscape");
  public get landscape() {
    return this._landscape;
  }
  public putLandscape(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfOrientationLandscape) {
    this._landscape.internalValue = value;
  }
  public resetLandscape() {
    this._landscape.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get landscapeInput() {
    return this._landscape.internalValue;
  }

  // portrait - computed: false, optional: true, required: false
  private _portrait = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfOrientationPortraitOutputReference(this, "portrait");
  public get portrait() {
    return this._portrait;
  }
  public putPortrait(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfOrientationPortrait) {
    this._portrait.internalValue = value;
  }
  public resetPortrait() {
    this._portrait.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get portraitInput() {
    return this._portrait.internalValue;
  }

  // square - computed: false, optional: true, required: false
  private _square = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfOrientationSquareOutputReference(this, "square");
  public get square() {
    return this._square;
  }
  public putSquare(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfOrientationSquare) {
    this._square.internalValue = value;
  }
  public resetSquare() {
    this._square.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get squareInput() {
    return this._square.internalValue;
  }
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfOrientationList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfOrientation[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfOrientationOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfOrientationOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanMaxColors {
  /**
  * The value representing the maximum number of colors to use with the source image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#colors DataAkamaiImagingPolicyImage#colors}
  */
  readonly colors?: string;
  /**
  * The value representing the maximum number of colors to use with the source image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#colors_var DataAkamaiImagingPolicyImage#colors_var}
  */
  readonly colorsVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanMaxColorsToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanMaxColors | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    colors: cdktf.stringToTerraform(struct!.colors),
    colors_var: cdktf.stringToTerraform(struct!.colorsVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanMaxColorsToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanMaxColors | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    colors: {
      value: cdktf.stringToHclTerraform(struct!.colors),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    colors_var: {
      value: cdktf.stringToHclTerraform(struct!.colorsVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanMaxColorsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanMaxColors | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._colors !== undefined) {
      hasAnyValues = true;
      internalValueResult.colors = this._colors;
    }
    if (this._colorsVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.colorsVar = this._colorsVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanMaxColors | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._colors = undefined;
      this._colorsVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._colors = value.colors;
      this._colorsVar = value.colorsVar;
    }
  }

  // colors - computed: false, optional: true, required: false
  private _colors?: string; 
  public get colors() {
    return this.getStringAttribute('colors');
  }
  public set colors(value: string) {
    this._colors = value;
  }
  public resetColors() {
    this._colors = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get colorsInput() {
    return this._colors;
  }

  // colors_var - computed: false, optional: true, required: false
  private _colorsVar?: string; 
  public get colorsVar() {
    return this.getStringAttribute('colors_var');
  }
  public set colorsVar(value: string) {
    this._colorsVar = value;
  }
  public resetColorsVar() {
    this._colorsVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get colorsVarInput() {
    return this._colorsVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanMaxColorsList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanMaxColors[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanMaxColorsOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanMaxColorsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanMirror {
  /**
  * Flips the image horizontally.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#horizontal DataAkamaiImagingPolicyImage#horizontal}
  */
  readonly horizontal?: string;
  /**
  * Flips the image horizontally.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#horizontal_var DataAkamaiImagingPolicyImage#horizontal_var}
  */
  readonly horizontalVar?: string;
  /**
  * Flips the image vertically.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#vertical DataAkamaiImagingPolicyImage#vertical}
  */
  readonly vertical?: string;
  /**
  * Flips the image vertically.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#vertical_var DataAkamaiImagingPolicyImage#vertical_var}
  */
  readonly verticalVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanMirrorToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanMirror | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    horizontal: cdktf.stringToTerraform(struct!.horizontal),
    horizontal_var: cdktf.stringToTerraform(struct!.horizontalVar),
    vertical: cdktf.stringToTerraform(struct!.vertical),
    vertical_var: cdktf.stringToTerraform(struct!.verticalVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanMirrorToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanMirror | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    horizontal: {
      value: cdktf.stringToHclTerraform(struct!.horizontal),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    horizontal_var: {
      value: cdktf.stringToHclTerraform(struct!.horizontalVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    vertical: {
      value: cdktf.stringToHclTerraform(struct!.vertical),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    vertical_var: {
      value: cdktf.stringToHclTerraform(struct!.verticalVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanMirrorOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanMirror | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._horizontal !== undefined) {
      hasAnyValues = true;
      internalValueResult.horizontal = this._horizontal;
    }
    if (this._horizontalVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.horizontalVar = this._horizontalVar;
    }
    if (this._vertical !== undefined) {
      hasAnyValues = true;
      internalValueResult.vertical = this._vertical;
    }
    if (this._verticalVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.verticalVar = this._verticalVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanMirror | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._horizontal = undefined;
      this._horizontalVar = undefined;
      this._vertical = undefined;
      this._verticalVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._horizontal = value.horizontal;
      this._horizontalVar = value.horizontalVar;
      this._vertical = value.vertical;
      this._verticalVar = value.verticalVar;
    }
  }

  // horizontal - computed: false, optional: true, required: false
  private _horizontal?: string; 
  public get horizontal() {
    return this.getStringAttribute('horizontal');
  }
  public set horizontal(value: string) {
    this._horizontal = value;
  }
  public resetHorizontal() {
    this._horizontal = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get horizontalInput() {
    return this._horizontal;
  }

  // horizontal_var - computed: false, optional: true, required: false
  private _horizontalVar?: string; 
  public get horizontalVar() {
    return this.getStringAttribute('horizontal_var');
  }
  public set horizontalVar(value: string) {
    this._horizontalVar = value;
  }
  public resetHorizontalVar() {
    this._horizontalVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get horizontalVarInput() {
    return this._horizontalVar;
  }

  // vertical - computed: false, optional: true, required: false
  private _vertical?: string; 
  public get vertical() {
    return this.getStringAttribute('vertical');
  }
  public set vertical(value: string) {
    this._vertical = value;
  }
  public resetVertical() {
    this._vertical = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get verticalInput() {
    return this._vertical;
  }

  // vertical_var - computed: false, optional: true, required: false
  private _verticalVar?: string; 
  public get verticalVar() {
    return this.getStringAttribute('vertical_var');
  }
  public set verticalVar(value: string) {
    this._verticalVar = value;
  }
  public resetVerticalVar() {
    this._verticalVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get verticalVarInput() {
    return this._verticalVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanMirrorList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanMirror[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanMirrorOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanMirrorOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanMonoHue {
  /**
  * Specify a hue by indicating the degree of rotation between 0 and 360 degrees around the color wheel. By default Mono Hue applies a red hue, 0.0 on the color wheel.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hue DataAkamaiImagingPolicyImage#hue}
  */
  readonly hue?: string;
  /**
  * Specify a hue by indicating the degree of rotation between 0 and 360 degrees around the color wheel. By default Mono Hue applies a red hue, 0.0 on the color wheel.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hue_var DataAkamaiImagingPolicyImage#hue_var}
  */
  readonly hueVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanMonoHueToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanMonoHue | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    hue: cdktf.stringToTerraform(struct!.hue),
    hue_var: cdktf.stringToTerraform(struct!.hueVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanMonoHueToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanMonoHue | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    hue: {
      value: cdktf.stringToHclTerraform(struct!.hue),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    hue_var: {
      value: cdktf.stringToHclTerraform(struct!.hueVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanMonoHueOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanMonoHue | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._hue !== undefined) {
      hasAnyValues = true;
      internalValueResult.hue = this._hue;
    }
    if (this._hueVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.hueVar = this._hueVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanMonoHue | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._hue = undefined;
      this._hueVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._hue = value.hue;
      this._hueVar = value.hueVar;
    }
  }

  // hue - computed: false, optional: true, required: false
  private _hue?: string; 
  public get hue() {
    return this.getStringAttribute('hue');
  }
  public set hue(value: string) {
    this._hue = value;
  }
  public resetHue() {
    this._hue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hueInput() {
    return this._hue;
  }

  // hue_var - computed: false, optional: true, required: false
  private _hueVar?: string; 
  public get hueVar() {
    return this.getStringAttribute('hue_var');
  }
  public set hueVar(value: string) {
    this._hueVar = value;
  }
  public resetHueVar() {
    this._hueVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hueVarInput() {
    return this._hueVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanMonoHueList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanMonoHue[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanMonoHueOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanMonoHueOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanOpacity {
  /**
  * Represents alpha values on a scale of `0` to `1`. Values below `1` increase transparency, and `0` is invisible. For images that have some transparency, values above `1` increase the opacity of the transparent portions.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#opacity DataAkamaiImagingPolicyImage#opacity}
  */
  readonly opacity?: string;
  /**
  * Represents alpha values on a scale of `0` to `1`. Values below `1` increase transparency, and `0` is invisible. For images that have some transparency, values above `1` increase the opacity of the transparent portions.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#opacity_var DataAkamaiImagingPolicyImage#opacity_var}
  */
  readonly opacityVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanOpacityToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanOpacity | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    opacity: cdktf.stringToTerraform(struct!.opacity),
    opacity_var: cdktf.stringToTerraform(struct!.opacityVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanOpacityToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanOpacity | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    opacity: {
      value: cdktf.stringToHclTerraform(struct!.opacity),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    opacity_var: {
      value: cdktf.stringToHclTerraform(struct!.opacityVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanOpacityOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanOpacity | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._opacity !== undefined) {
      hasAnyValues = true;
      internalValueResult.opacity = this._opacity;
    }
    if (this._opacityVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.opacityVar = this._opacityVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanOpacity | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._opacity = undefined;
      this._opacityVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._opacity = value.opacity;
      this._opacityVar = value.opacityVar;
    }
  }

  // opacity - computed: false, optional: true, required: false
  private _opacity?: string; 
  public get opacity() {
    return this.getStringAttribute('opacity');
  }
  public set opacity(value: string) {
    this._opacity = value;
  }
  public resetOpacity() {
    this._opacity = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get opacityInput() {
    return this._opacity;
  }

  // opacity_var - computed: false, optional: true, required: false
  private _opacityVar?: string; 
  public get opacityVar() {
    return this.getStringAttribute('opacity_var');
  }
  public set opacityVar(value: string) {
    this._opacityVar = value;
  }
  public resetOpacityVar() {
    this._opacityVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get opacityVarInput() {
    return this._opacityVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanOpacityList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanOpacity[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanOpacityOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanOpacityOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanRemoveColor {
  /**
  * The hexadecimal CSS color value to remove.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#color DataAkamaiImagingPolicyImage#color}
  */
  readonly color?: string;
  /**
  * The hexadecimal CSS color value to remove.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#color_var DataAkamaiImagingPolicyImage#color_var}
  */
  readonly colorVar?: string;
  /**
  * The RemoveColor transformation may create a hard edge around an image. To minimize these hard edges and make the removal of the color more gradual in appearance, use the Feather option. This option allows you to extend the color removal beyond the specified Tolerance. The pixels in this extended tolerance become semi-transparent - creating a softer edge.  The first realtime request for an image using the feather option may result in a slow transformation time. Subsequent requests are not impacted as they are served directly out of cache.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#feather DataAkamaiImagingPolicyImage#feather}
  */
  readonly feather?: string;
  /**
  * The RemoveColor transformation may create a hard edge around an image. To minimize these hard edges and make the removal of the color more gradual in appearance, use the Feather option. This option allows you to extend the color removal beyond the specified Tolerance. The pixels in this extended tolerance become semi-transparent - creating a softer edge.  The first realtime request for an image using the feather option may result in a slow transformation time. Subsequent requests are not impacted as they are served directly out of cache.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#feather_var DataAkamaiImagingPolicyImage#feather_var}
  */
  readonly featherVar?: string;
  /**
  * The Tolerance option defines how close the color needs to be to the selected color before it's changed to fully transparent. Set the Tolerance to 0.0 to remove only the exact color specified.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#tolerance DataAkamaiImagingPolicyImage#tolerance}
  */
  readonly tolerance?: string;
  /**
  * The Tolerance option defines how close the color needs to be to the selected color before it's changed to fully transparent. Set the Tolerance to 0.0 to remove only the exact color specified.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#tolerance_var DataAkamaiImagingPolicyImage#tolerance_var}
  */
  readonly toleranceVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanRemoveColorToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanRemoveColor | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    color: cdktf.stringToTerraform(struct!.color),
    color_var: cdktf.stringToTerraform(struct!.colorVar),
    feather: cdktf.stringToTerraform(struct!.feather),
    feather_var: cdktf.stringToTerraform(struct!.featherVar),
    tolerance: cdktf.stringToTerraform(struct!.tolerance),
    tolerance_var: cdktf.stringToTerraform(struct!.toleranceVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanRemoveColorToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanRemoveColor | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    color: {
      value: cdktf.stringToHclTerraform(struct!.color),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    color_var: {
      value: cdktf.stringToHclTerraform(struct!.colorVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    feather: {
      value: cdktf.stringToHclTerraform(struct!.feather),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    feather_var: {
      value: cdktf.stringToHclTerraform(struct!.featherVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    tolerance: {
      value: cdktf.stringToHclTerraform(struct!.tolerance),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    tolerance_var: {
      value: cdktf.stringToHclTerraform(struct!.toleranceVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanRemoveColorOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanRemoveColor | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._color !== undefined) {
      hasAnyValues = true;
      internalValueResult.color = this._color;
    }
    if (this._colorVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.colorVar = this._colorVar;
    }
    if (this._feather !== undefined) {
      hasAnyValues = true;
      internalValueResult.feather = this._feather;
    }
    if (this._featherVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.featherVar = this._featherVar;
    }
    if (this._tolerance !== undefined) {
      hasAnyValues = true;
      internalValueResult.tolerance = this._tolerance;
    }
    if (this._toleranceVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.toleranceVar = this._toleranceVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanRemoveColor | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._color = undefined;
      this._colorVar = undefined;
      this._feather = undefined;
      this._featherVar = undefined;
      this._tolerance = undefined;
      this._toleranceVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._color = value.color;
      this._colorVar = value.colorVar;
      this._feather = value.feather;
      this._featherVar = value.featherVar;
      this._tolerance = value.tolerance;
      this._toleranceVar = value.toleranceVar;
    }
  }

  // color - computed: false, optional: true, required: false
  private _color?: string; 
  public get color() {
    return this.getStringAttribute('color');
  }
  public set color(value: string) {
    this._color = value;
  }
  public resetColor() {
    this._color = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get colorInput() {
    return this._color;
  }

  // color_var - computed: false, optional: true, required: false
  private _colorVar?: string; 
  public get colorVar() {
    return this.getStringAttribute('color_var');
  }
  public set colorVar(value: string) {
    this._colorVar = value;
  }
  public resetColorVar() {
    this._colorVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get colorVarInput() {
    return this._colorVar;
  }

  // feather - computed: false, optional: true, required: false
  private _feather?: string; 
  public get feather() {
    return this.getStringAttribute('feather');
  }
  public set feather(value: string) {
    this._feather = value;
  }
  public resetFeather() {
    this._feather = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get featherInput() {
    return this._feather;
  }

  // feather_var - computed: false, optional: true, required: false
  private _featherVar?: string; 
  public get featherVar() {
    return this.getStringAttribute('feather_var');
  }
  public set featherVar(value: string) {
    this._featherVar = value;
  }
  public resetFeatherVar() {
    this._featherVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get featherVarInput() {
    return this._featherVar;
  }

  // tolerance - computed: false, optional: true, required: false
  private _tolerance?: string; 
  public get tolerance() {
    return this.getStringAttribute('tolerance');
  }
  public set tolerance(value: string) {
    this._tolerance = value;
  }
  public resetTolerance() {
    this._tolerance = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get toleranceInput() {
    return this._tolerance;
  }

  // tolerance_var - computed: false, optional: true, required: false
  private _toleranceVar?: string; 
  public get toleranceVar() {
    return this.getStringAttribute('tolerance_var');
  }
  public set toleranceVar(value: string) {
    this._toleranceVar = value;
  }
  public resetToleranceVar() {
    this._toleranceVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get toleranceVarInput() {
    return this._toleranceVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanRemoveColorList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanRemoveColor[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanRemoveColorOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanRemoveColorOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanUnsharpMask {
  /**
  * Set how much emphasis the filter applies to details. Higher values increase apparent sharpness of details.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#gain DataAkamaiImagingPolicyImage#gain}
  */
  readonly gain?: string;
  /**
  * Set how much emphasis the filter applies to details. Higher values increase apparent sharpness of details.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#gain_var DataAkamaiImagingPolicyImage#gain_var}
  */
  readonly gainVar?: string;
  /**
  * The standard deviation of the Gaussian distribution used in the in unsharp mask, measured in pixels, `1.0` by default. High values emphasize large details and low values emphasize small details.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#sigma DataAkamaiImagingPolicyImage#sigma}
  */
  readonly sigma?: string;
  /**
  * The standard deviation of the Gaussian distribution used in the in unsharp mask, measured in pixels, `1.0` by default. High values emphasize large details and low values emphasize small details.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#sigma_var DataAkamaiImagingPolicyImage#sigma_var}
  */
  readonly sigmaVar?: string;
  /**
  * Set the minimum change required to include a detail in the filter. Higher values discard more changes.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#threshold DataAkamaiImagingPolicyImage#threshold}
  */
  readonly threshold?: string;
  /**
  * Set the minimum change required to include a detail in the filter. Higher values discard more changes.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#threshold_var DataAkamaiImagingPolicyImage#threshold_var}
  */
  readonly thresholdVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanUnsharpMaskToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanUnsharpMask | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    gain: cdktf.stringToTerraform(struct!.gain),
    gain_var: cdktf.stringToTerraform(struct!.gainVar),
    sigma: cdktf.stringToTerraform(struct!.sigma),
    sigma_var: cdktf.stringToTerraform(struct!.sigmaVar),
    threshold: cdktf.stringToTerraform(struct!.threshold),
    threshold_var: cdktf.stringToTerraform(struct!.thresholdVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanUnsharpMaskToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanUnsharpMask | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    gain: {
      value: cdktf.stringToHclTerraform(struct!.gain),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    gain_var: {
      value: cdktf.stringToHclTerraform(struct!.gainVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    sigma: {
      value: cdktf.stringToHclTerraform(struct!.sigma),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    sigma_var: {
      value: cdktf.stringToHclTerraform(struct!.sigmaVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    threshold: {
      value: cdktf.stringToHclTerraform(struct!.threshold),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    threshold_var: {
      value: cdktf.stringToHclTerraform(struct!.thresholdVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanUnsharpMaskOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanUnsharpMask | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._gain !== undefined) {
      hasAnyValues = true;
      internalValueResult.gain = this._gain;
    }
    if (this._gainVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.gainVar = this._gainVar;
    }
    if (this._sigma !== undefined) {
      hasAnyValues = true;
      internalValueResult.sigma = this._sigma;
    }
    if (this._sigmaVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.sigmaVar = this._sigmaVar;
    }
    if (this._threshold !== undefined) {
      hasAnyValues = true;
      internalValueResult.threshold = this._threshold;
    }
    if (this._thresholdVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.thresholdVar = this._thresholdVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanUnsharpMask | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._gain = undefined;
      this._gainVar = undefined;
      this._sigma = undefined;
      this._sigmaVar = undefined;
      this._threshold = undefined;
      this._thresholdVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._gain = value.gain;
      this._gainVar = value.gainVar;
      this._sigma = value.sigma;
      this._sigmaVar = value.sigmaVar;
      this._threshold = value.threshold;
      this._thresholdVar = value.thresholdVar;
    }
  }

  // gain - computed: false, optional: true, required: false
  private _gain?: string; 
  public get gain() {
    return this.getStringAttribute('gain');
  }
  public set gain(value: string) {
    this._gain = value;
  }
  public resetGain() {
    this._gain = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get gainInput() {
    return this._gain;
  }

  // gain_var - computed: false, optional: true, required: false
  private _gainVar?: string; 
  public get gainVar() {
    return this.getStringAttribute('gain_var');
  }
  public set gainVar(value: string) {
    this._gainVar = value;
  }
  public resetGainVar() {
    this._gainVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get gainVarInput() {
    return this._gainVar;
  }

  // sigma - computed: false, optional: true, required: false
  private _sigma?: string; 
  public get sigma() {
    return this.getStringAttribute('sigma');
  }
  public set sigma(value: string) {
    this._sigma = value;
  }
  public resetSigma() {
    this._sigma = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get sigmaInput() {
    return this._sigma;
  }

  // sigma_var - computed: false, optional: true, required: false
  private _sigmaVar?: string; 
  public get sigmaVar() {
    return this.getStringAttribute('sigma_var');
  }
  public set sigmaVar(value: string) {
    this._sigmaVar = value;
  }
  public resetSigmaVar() {
    this._sigmaVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get sigmaVarInput() {
    return this._sigmaVar;
  }

  // threshold - computed: false, optional: true, required: false
  private _threshold?: string; 
  public get threshold() {
    return this.getStringAttribute('threshold');
  }
  public set threshold(value: string) {
    this._threshold = value;
  }
  public resetThreshold() {
    this._threshold = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get thresholdInput() {
    return this._threshold;
  }

  // threshold_var - computed: false, optional: true, required: false
  private _thresholdVar?: string; 
  public get thresholdVar() {
    return this.getStringAttribute('threshold_var');
  }
  public set thresholdVar(value: string) {
    this._thresholdVar = value;
  }
  public resetThresholdVar() {
    this._thresholdVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get thresholdVarInput() {
    return this._thresholdVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanUnsharpMaskList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanUnsharpMask[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanUnsharpMaskOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanUnsharpMaskOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThan {
  /**
  * background_color block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#background_color DataAkamaiImagingPolicyImage#background_color}
  */
  readonly backgroundColor?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanBackgroundColor[] | cdktf.IResolvable;
  /**
  * blur block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#blur DataAkamaiImagingPolicyImage#blur}
  */
  readonly blur?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanBlur[] | cdktf.IResolvable;
  /**
  * chroma_key block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#chroma_key DataAkamaiImagingPolicyImage#chroma_key}
  */
  readonly chromaKey?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanChromaKey[] | cdktf.IResolvable;
  /**
  * composite block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#composite DataAkamaiImagingPolicyImage#composite}
  */
  readonly composite?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanComposite[] | cdktf.IResolvable;
  /**
  * compound block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#compound DataAkamaiImagingPolicyImage#compound}
  */
  readonly compound?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanCompound[] | cdktf.IResolvable;
  /**
  * contrast block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#contrast DataAkamaiImagingPolicyImage#contrast}
  */
  readonly contrast?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanContrast[] | cdktf.IResolvable;
  /**
  * goop block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#goop DataAkamaiImagingPolicyImage#goop}
  */
  readonly goop?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanGoop[] | cdktf.IResolvable;
  /**
  * grayscale block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#grayscale DataAkamaiImagingPolicyImage#grayscale}
  */
  readonly grayscale?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanGrayscale[] | cdktf.IResolvable;
  /**
  * hsl block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hsl DataAkamaiImagingPolicyImage#hsl}
  */
  readonly hsl?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanHsl[] | cdktf.IResolvable;
  /**
  * hsv block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hsv DataAkamaiImagingPolicyImage#hsv}
  */
  readonly hsv?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanHsv[] | cdktf.IResolvable;
  /**
  * if_dimension block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#if_dimension DataAkamaiImagingPolicyImage#if_dimension}
  */
  readonly ifDimension?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfDimension[] | cdktf.IResolvable;
  /**
  * if_orientation block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#if_orientation DataAkamaiImagingPolicyImage#if_orientation}
  */
  readonly ifOrientation?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfOrientation[] | cdktf.IResolvable;
  /**
  * max_colors block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#max_colors DataAkamaiImagingPolicyImage#max_colors}
  */
  readonly maxColors?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanMaxColors[] | cdktf.IResolvable;
  /**
  * mirror block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#mirror DataAkamaiImagingPolicyImage#mirror}
  */
  readonly mirror?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanMirror[] | cdktf.IResolvable;
  /**
  * mono_hue block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#mono_hue DataAkamaiImagingPolicyImage#mono_hue}
  */
  readonly monoHue?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanMonoHue[] | cdktf.IResolvable;
  /**
  * opacity block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#opacity DataAkamaiImagingPolicyImage#opacity}
  */
  readonly opacity?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanOpacity[] | cdktf.IResolvable;
  /**
  * remove_color block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#remove_color DataAkamaiImagingPolicyImage#remove_color}
  */
  readonly removeColor?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanRemoveColor[] | cdktf.IResolvable;
  /**
  * unsharp_mask block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#unsharp_mask DataAkamaiImagingPolicyImage#unsharp_mask}
  */
  readonly unsharpMask?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanUnsharpMask[] | cdktf.IResolvable;
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanOutputReference | DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThan): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    background_color: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanBackgroundColorToTerraform, true)(struct!.backgroundColor),
    blur: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanBlurToTerraform, true)(struct!.blur),
    chroma_key: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanChromaKeyToTerraform, true)(struct!.chromaKey),
    composite: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanCompositeToTerraform, true)(struct!.composite),
    compound: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanCompoundToTerraform, true)(struct!.compound),
    contrast: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanContrastToTerraform, true)(struct!.contrast),
    goop: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanGoopToTerraform, true)(struct!.goop),
    grayscale: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanGrayscaleToTerraform, true)(struct!.grayscale),
    hsl: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanHslToTerraform, true)(struct!.hsl),
    hsv: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanHsvToTerraform, true)(struct!.hsv),
    if_dimension: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfDimensionToTerraform, true)(struct!.ifDimension),
    if_orientation: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfOrientationToTerraform, true)(struct!.ifOrientation),
    max_colors: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanMaxColorsToTerraform, true)(struct!.maxColors),
    mirror: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanMirrorToTerraform, true)(struct!.mirror),
    mono_hue: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanMonoHueToTerraform, true)(struct!.monoHue),
    opacity: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanOpacityToTerraform, true)(struct!.opacity),
    remove_color: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanRemoveColorToTerraform, true)(struct!.removeColor),
    unsharp_mask: cdktf.listMapper(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanUnsharpMaskToTerraform, true)(struct!.unsharpMask),
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanOutputReference | DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThan): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    background_color: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanBackgroundColorToHclTerraform, true)(struct!.backgroundColor),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanBackgroundColorList",
    },
    blur: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanBlurToHclTerraform, true)(struct!.blur),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanBlurList",
    },
    chroma_key: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanChromaKeyToHclTerraform, true)(struct!.chromaKey),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanChromaKeyList",
    },
    composite: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanCompositeToHclTerraform, true)(struct!.composite),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanCompositeList",
    },
    compound: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanCompoundToHclTerraform, true)(struct!.compound),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanCompoundList",
    },
    contrast: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanContrastToHclTerraform, true)(struct!.contrast),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanContrastList",
    },
    goop: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanGoopToHclTerraform, true)(struct!.goop),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanGoopList",
    },
    grayscale: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanGrayscaleToHclTerraform, true)(struct!.grayscale),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanGrayscaleList",
    },
    hsl: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanHslToHclTerraform, true)(struct!.hsl),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanHslList",
    },
    hsv: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanHsvToHclTerraform, true)(struct!.hsv),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanHsvList",
    },
    if_dimension: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfDimensionToHclTerraform, true)(struct!.ifDimension),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfDimensionList",
    },
    if_orientation: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfOrientationToHclTerraform, true)(struct!.ifOrientation),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfOrientationList",
    },
    max_colors: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanMaxColorsToHclTerraform, true)(struct!.maxColors),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanMaxColorsList",
    },
    mirror: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanMirrorToHclTerraform, true)(struct!.mirror),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanMirrorList",
    },
    mono_hue: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanMonoHueToHclTerraform, true)(struct!.monoHue),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanMonoHueList",
    },
    opacity: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanOpacityToHclTerraform, true)(struct!.opacity),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanOpacityList",
    },
    remove_color: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanRemoveColorToHclTerraform, true)(struct!.removeColor),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanRemoveColorList",
    },
    unsharp_mask: {
      value: cdktf.listMapperHcl(dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanUnsharpMaskToHclTerraform, true)(struct!.unsharpMask),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanUnsharpMaskList",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false, 0);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThan | undefined {
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._backgroundColor?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.backgroundColor = this._backgroundColor?.internalValue;
    }
    if (this._blur?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.blur = this._blur?.internalValue;
    }
    if (this._chromaKey?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.chromaKey = this._chromaKey?.internalValue;
    }
    if (this._composite?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.composite = this._composite?.internalValue;
    }
    if (this._compound?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.compound = this._compound?.internalValue;
    }
    if (this._contrast?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.contrast = this._contrast?.internalValue;
    }
    if (this._goop?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.goop = this._goop?.internalValue;
    }
    if (this._grayscale?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.grayscale = this._grayscale?.internalValue;
    }
    if (this._hsl?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.hsl = this._hsl?.internalValue;
    }
    if (this._hsv?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.hsv = this._hsv?.internalValue;
    }
    if (this._ifDimension?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.ifDimension = this._ifDimension?.internalValue;
    }
    if (this._ifOrientation?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.ifOrientation = this._ifOrientation?.internalValue;
    }
    if (this._maxColors?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.maxColors = this._maxColors?.internalValue;
    }
    if (this._mirror?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.mirror = this._mirror?.internalValue;
    }
    if (this._monoHue?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.monoHue = this._monoHue?.internalValue;
    }
    if (this._opacity?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.opacity = this._opacity?.internalValue;
    }
    if (this._removeColor?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.removeColor = this._removeColor?.internalValue;
    }
    if (this._unsharpMask?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.unsharpMask = this._unsharpMask?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThan | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this._backgroundColor.internalValue = undefined;
      this._blur.internalValue = undefined;
      this._chromaKey.internalValue = undefined;
      this._composite.internalValue = undefined;
      this._compound.internalValue = undefined;
      this._contrast.internalValue = undefined;
      this._goop.internalValue = undefined;
      this._grayscale.internalValue = undefined;
      this._hsl.internalValue = undefined;
      this._hsv.internalValue = undefined;
      this._ifDimension.internalValue = undefined;
      this._ifOrientation.internalValue = undefined;
      this._maxColors.internalValue = undefined;
      this._mirror.internalValue = undefined;
      this._monoHue.internalValue = undefined;
      this._opacity.internalValue = undefined;
      this._removeColor.internalValue = undefined;
      this._unsharpMask.internalValue = undefined;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this._backgroundColor.internalValue = value.backgroundColor;
      this._blur.internalValue = value.blur;
      this._chromaKey.internalValue = value.chromaKey;
      this._composite.internalValue = value.composite;
      this._compound.internalValue = value.compound;
      this._contrast.internalValue = value.contrast;
      this._goop.internalValue = value.goop;
      this._grayscale.internalValue = value.grayscale;
      this._hsl.internalValue = value.hsl;
      this._hsv.internalValue = value.hsv;
      this._ifDimension.internalValue = value.ifDimension;
      this._ifOrientation.internalValue = value.ifOrientation;
      this._maxColors.internalValue = value.maxColors;
      this._mirror.internalValue = value.mirror;
      this._monoHue.internalValue = value.monoHue;
      this._opacity.internalValue = value.opacity;
      this._removeColor.internalValue = value.removeColor;
      this._unsharpMask.internalValue = value.unsharpMask;
    }
  }

  // background_color - computed: false, optional: true, required: false
  private _backgroundColor = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanBackgroundColorList(this, "background_color", false);
  public get backgroundColor() {
    return this._backgroundColor;
  }
  public putBackgroundColor(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanBackgroundColor[] | cdktf.IResolvable) {
    this._backgroundColor.internalValue = value;
  }
  public resetBackgroundColor() {
    this._backgroundColor.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get backgroundColorInput() {
    return this._backgroundColor.internalValue;
  }

  // blur - computed: false, optional: true, required: false
  private _blur = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanBlurList(this, "blur", false);
  public get blur() {
    return this._blur;
  }
  public putBlur(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanBlur[] | cdktf.IResolvable) {
    this._blur.internalValue = value;
  }
  public resetBlur() {
    this._blur.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get blurInput() {
    return this._blur.internalValue;
  }

  // chroma_key - computed: false, optional: true, required: false
  private _chromaKey = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanChromaKeyList(this, "chroma_key", false);
  public get chromaKey() {
    return this._chromaKey;
  }
  public putChromaKey(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanChromaKey[] | cdktf.IResolvable) {
    this._chromaKey.internalValue = value;
  }
  public resetChromaKey() {
    this._chromaKey.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get chromaKeyInput() {
    return this._chromaKey.internalValue;
  }

  // composite - computed: false, optional: true, required: false
  private _composite = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanCompositeList(this, "composite", false);
  public get composite() {
    return this._composite;
  }
  public putComposite(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanComposite[] | cdktf.IResolvable) {
    this._composite.internalValue = value;
  }
  public resetComposite() {
    this._composite.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get compositeInput() {
    return this._composite.internalValue;
  }

  // compound - computed: false, optional: true, required: false
  private _compound = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanCompoundList(this, "compound", false);
  public get compound() {
    return this._compound;
  }
  public putCompound(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanCompound[] | cdktf.IResolvable) {
    this._compound.internalValue = value;
  }
  public resetCompound() {
    this._compound.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get compoundInput() {
    return this._compound.internalValue;
  }

  // contrast - computed: false, optional: true, required: false
  private _contrast = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanContrastList(this, "contrast", false);
  public get contrast() {
    return this._contrast;
  }
  public putContrast(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanContrast[] | cdktf.IResolvable) {
    this._contrast.internalValue = value;
  }
  public resetContrast() {
    this._contrast.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get contrastInput() {
    return this._contrast.internalValue;
  }

  // goop - computed: false, optional: true, required: false
  private _goop = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanGoopList(this, "goop", false);
  public get goop() {
    return this._goop;
  }
  public putGoop(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanGoop[] | cdktf.IResolvable) {
    this._goop.internalValue = value;
  }
  public resetGoop() {
    this._goop.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get goopInput() {
    return this._goop.internalValue;
  }

  // grayscale - computed: false, optional: true, required: false
  private _grayscale = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanGrayscaleList(this, "grayscale", false);
  public get grayscale() {
    return this._grayscale;
  }
  public putGrayscale(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanGrayscale[] | cdktf.IResolvable) {
    this._grayscale.internalValue = value;
  }
  public resetGrayscale() {
    this._grayscale.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get grayscaleInput() {
    return this._grayscale.internalValue;
  }

  // hsl - computed: false, optional: true, required: false
  private _hsl = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanHslList(this, "hsl", false);
  public get hsl() {
    return this._hsl;
  }
  public putHsl(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanHsl[] | cdktf.IResolvable) {
    this._hsl.internalValue = value;
  }
  public resetHsl() {
    this._hsl.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hslInput() {
    return this._hsl.internalValue;
  }

  // hsv - computed: false, optional: true, required: false
  private _hsv = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanHsvList(this, "hsv", false);
  public get hsv() {
    return this._hsv;
  }
  public putHsv(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanHsv[] | cdktf.IResolvable) {
    this._hsv.internalValue = value;
  }
  public resetHsv() {
    this._hsv.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hsvInput() {
    return this._hsv.internalValue;
  }

  // if_dimension - computed: false, optional: true, required: false
  private _ifDimension = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfDimensionList(this, "if_dimension", false);
  public get ifDimension() {
    return this._ifDimension;
  }
  public putIfDimension(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfDimension[] | cdktf.IResolvable) {
    this._ifDimension.internalValue = value;
  }
  public resetIfDimension() {
    this._ifDimension.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get ifDimensionInput() {
    return this._ifDimension.internalValue;
  }

  // if_orientation - computed: false, optional: true, required: false
  private _ifOrientation = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfOrientationList(this, "if_orientation", false);
  public get ifOrientation() {
    return this._ifOrientation;
  }
  public putIfOrientation(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanIfOrientation[] | cdktf.IResolvable) {
    this._ifOrientation.internalValue = value;
  }
  public resetIfOrientation() {
    this._ifOrientation.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get ifOrientationInput() {
    return this._ifOrientation.internalValue;
  }

  // max_colors - computed: false, optional: true, required: false
  private _maxColors = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanMaxColorsList(this, "max_colors", false);
  public get maxColors() {
    return this._maxColors;
  }
  public putMaxColors(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanMaxColors[] | cdktf.IResolvable) {
    this._maxColors.internalValue = value;
  }
  public resetMaxColors() {
    this._maxColors.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get maxColorsInput() {
    return this._maxColors.internalValue;
  }

  // mirror - computed: false, optional: true, required: false
  private _mirror = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanMirrorList(this, "mirror", false);
  public get mirror() {
    return this._mirror;
  }
  public putMirror(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanMirror[] | cdktf.IResolvable) {
    this._mirror.internalValue = value;
  }
  public resetMirror() {
    this._mirror.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get mirrorInput() {
    return this._mirror.internalValue;
  }

  // mono_hue - computed: false, optional: true, required: false
  private _monoHue = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanMonoHueList(this, "mono_hue", false);
  public get monoHue() {
    return this._monoHue;
  }
  public putMonoHue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanMonoHue[] | cdktf.IResolvable) {
    this._monoHue.internalValue = value;
  }
  public resetMonoHue() {
    this._monoHue.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get monoHueInput() {
    return this._monoHue.internalValue;
  }

  // opacity - computed: false, optional: true, required: false
  private _opacity = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanOpacityList(this, "opacity", false);
  public get opacity() {
    return this._opacity;
  }
  public putOpacity(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanOpacity[] | cdktf.IResolvable) {
    this._opacity.internalValue = value;
  }
  public resetOpacity() {
    this._opacity.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get opacityInput() {
    return this._opacity.internalValue;
  }

  // remove_color - computed: false, optional: true, required: false
  private _removeColor = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanRemoveColorList(this, "remove_color", false);
  public get removeColor() {
    return this._removeColor;
  }
  public putRemoveColor(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanRemoveColor[] | cdktf.IResolvable) {
    this._removeColor.internalValue = value;
  }
  public resetRemoveColor() {
    this._removeColor.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get removeColorInput() {
    return this._removeColor.internalValue;
  }

  // unsharp_mask - computed: false, optional: true, required: false
  private _unsharpMask = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanUnsharpMaskList(this, "unsharp_mask", false);
  public get unsharpMask() {
    return this._unsharpMask;
  }
  public putUnsharpMask(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanUnsharpMask[] | cdktf.IResolvable) {
    this._unsharpMask.internalValue = value;
  }
  public resetUnsharpMask() {
    this._unsharpMask.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get unsharpMaskInput() {
    return this._unsharpMask.internalValue;
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimension {
  /**
  * The dimension to use to select the transformation, either `height`, `width`, or `both`.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#dimension DataAkamaiImagingPolicyImage#dimension}
  */
  readonly dimension?: string;
  /**
  * The dimension to use to select the transformation, either `height`, `width`, or `both`.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#dimension_var DataAkamaiImagingPolicyImage#dimension_var}
  */
  readonly dimensionVar?: string;
  /**
  * The value to compare against the source image dimension. For example, if the image dimension is less than the value the lessThan transformation is applied.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#value DataAkamaiImagingPolicyImage#value}
  */
  readonly value?: string;
  /**
  * The value to compare against the source image dimension. For example, if the image dimension is less than the value the lessThan transformation is applied.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#value_var DataAkamaiImagingPolicyImage#value_var}
  */
  readonly valueVar?: string;
  /**
  * default block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#default DataAkamaiImagingPolicyImage#default}
  */
  readonly default?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefault;
  /**
  * equal block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#equal DataAkamaiImagingPolicyImage#equal}
  */
  readonly equal?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqual;
  /**
  * greater_than block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#greater_than DataAkamaiImagingPolicyImage#greater_than}
  */
  readonly greaterThan?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThan;
  /**
  * less_than block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#less_than DataAkamaiImagingPolicyImage#less_than}
  */
  readonly lessThan?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThan;
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimension | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    dimension: cdktf.stringToTerraform(struct!.dimension),
    dimension_var: cdktf.stringToTerraform(struct!.dimensionVar),
    value: cdktf.stringToTerraform(struct!.value),
    value_var: cdktf.stringToTerraform(struct!.valueVar),
    default: dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultToTerraform(struct!.default),
    equal: dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualToTerraform(struct!.equal),
    greater_than: dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanToTerraform(struct!.greaterThan),
    less_than: dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanToTerraform(struct!.lessThan),
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimension | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    dimension: {
      value: cdktf.stringToHclTerraform(struct!.dimension),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    dimension_var: {
      value: cdktf.stringToHclTerraform(struct!.dimensionVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    value: {
      value: cdktf.stringToHclTerraform(struct!.value),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    value_var: {
      value: cdktf.stringToHclTerraform(struct!.valueVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    default: {
      value: dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultToHclTerraform(struct!.default),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultList",
    },
    equal: {
      value: dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualToHclTerraform(struct!.equal),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualList",
    },
    greater_than: {
      value: dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanToHclTerraform(struct!.greaterThan),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanList",
    },
    less_than: {
      value: dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanToHclTerraform(struct!.lessThan),
      isBlock: true,
      type: "list",
      storageClassType: "DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanList",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimension | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._dimension !== undefined) {
      hasAnyValues = true;
      internalValueResult.dimension = this._dimension;
    }
    if (this._dimensionVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.dimensionVar = this._dimensionVar;
    }
    if (this._value !== undefined) {
      hasAnyValues = true;
      internalValueResult.value = this._value;
    }
    if (this._valueVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.valueVar = this._valueVar;
    }
    if (this._default?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.default = this._default?.internalValue;
    }
    if (this._equal?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.equal = this._equal?.internalValue;
    }
    if (this._greaterThan?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.greaterThan = this._greaterThan?.internalValue;
    }
    if (this._lessThan?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.lessThan = this._lessThan?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimension | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._dimension = undefined;
      this._dimensionVar = undefined;
      this._value = undefined;
      this._valueVar = undefined;
      this._default.internalValue = undefined;
      this._equal.internalValue = undefined;
      this._greaterThan.internalValue = undefined;
      this._lessThan.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._dimension = value.dimension;
      this._dimensionVar = value.dimensionVar;
      this._value = value.value;
      this._valueVar = value.valueVar;
      this._default.internalValue = value.default;
      this._equal.internalValue = value.equal;
      this._greaterThan.internalValue = value.greaterThan;
      this._lessThan.internalValue = value.lessThan;
    }
  }

  // dimension - computed: false, optional: true, required: false
  private _dimension?: string; 
  public get dimension() {
    return this.getStringAttribute('dimension');
  }
  public set dimension(value: string) {
    this._dimension = value;
  }
  public resetDimension() {
    this._dimension = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get dimensionInput() {
    return this._dimension;
  }

  // dimension_var - computed: false, optional: true, required: false
  private _dimensionVar?: string; 
  public get dimensionVar() {
    return this.getStringAttribute('dimension_var');
  }
  public set dimensionVar(value: string) {
    this._dimensionVar = value;
  }
  public resetDimensionVar() {
    this._dimensionVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get dimensionVarInput() {
    return this._dimensionVar;
  }

  // value - computed: false, optional: true, required: false
  private _value?: string; 
  public get value() {
    return this.getStringAttribute('value');
  }
  public set value(value: string) {
    this._value = value;
  }
  public resetValue() {
    this._value = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get valueInput() {
    return this._value;
  }

  // value_var - computed: false, optional: true, required: false
  private _valueVar?: string; 
  public get valueVar() {
    return this.getStringAttribute('value_var');
  }
  public set valueVar(value: string) {
    this._valueVar = value;
  }
  public resetValueVar() {
    this._valueVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get valueVarInput() {
    return this._valueVar;
  }

  // default - computed: false, optional: true, required: false
  private _default = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultOutputReference(this, "default");
  public get default() {
    return this._default;
  }
  public putDefault(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefault) {
    this._default.internalValue = value;
  }
  public resetDefault() {
    this._default.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get defaultInput() {
    return this._default.internalValue;
  }

  // equal - computed: false, optional: true, required: false
  private _equal = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqualOutputReference(this, "equal");
  public get equal() {
    return this._equal;
  }
  public putEqual(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionEqual) {
    this._equal.internalValue = value;
  }
  public resetEqual() {
    this._equal.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get equalInput() {
    return this._equal.internalValue;
  }

  // greater_than - computed: false, optional: true, required: false
  private _greaterThan = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThanOutputReference(this, "greater_than");
  public get greaterThan() {
    return this._greaterThan;
  }
  public putGreaterThan(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionGreaterThan) {
    this._greaterThan.internalValue = value;
  }
  public resetGreaterThan() {
    this._greaterThan.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get greaterThanInput() {
    return this._greaterThan.internalValue;
  }

  // less_than - computed: false, optional: true, required: false
  private _lessThan = new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThanOutputReference(this, "less_than");
  public get lessThan() {
    return this._lessThan;
  }
  public putLessThan(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionLessThan) {
    this._lessThan.internalValue = value;
  }
  public resetLessThan() {
    this._lessThan.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get lessThanInput() {
    return this._lessThan.internalValue;
  }
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimension[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultIfDimensionOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultMaxColors {
  /**
  * The value representing the maximum number of colors to use with the source image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#colors DataAkamaiImagingPolicyImage#colors}
  */
  readonly colors?: string;
  /**
  * The value representing the maximum number of colors to use with the source image.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#colors_var DataAkamaiImagingPolicyImage#colors_var}
  */
  readonly colorsVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultMaxColorsToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultMaxColors | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    colors: cdktf.stringToTerraform(struct!.colors),
    colors_var: cdktf.stringToTerraform(struct!.colorsVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultMaxColorsToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultMaxColors | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    colors: {
      value: cdktf.stringToHclTerraform(struct!.colors),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    colors_var: {
      value: cdktf.stringToHclTerraform(struct!.colorsVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultMaxColorsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultMaxColors | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._colors !== undefined) {
      hasAnyValues = true;
      internalValueResult.colors = this._colors;
    }
    if (this._colorsVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.colorsVar = this._colorsVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultMaxColors | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._colors = undefined;
      this._colorsVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._colors = value.colors;
      this._colorsVar = value.colorsVar;
    }
  }

  // colors - computed: false, optional: true, required: false
  private _colors?: string; 
  public get colors() {
    return this.getStringAttribute('colors');
  }
  public set colors(value: string) {
    this._colors = value;
  }
  public resetColors() {
    this._colors = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get colorsInput() {
    return this._colors;
  }

  // colors_var - computed: false, optional: true, required: false
  private _colorsVar?: string; 
  public get colorsVar() {
    return this.getStringAttribute('colors_var');
  }
  public set colorsVar(value: string) {
    this._colorsVar = value;
  }
  public resetColorsVar() {
    this._colorsVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get colorsVarInput() {
    return this._colorsVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultMaxColorsList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultMaxColors[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultMaxColorsOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultMaxColorsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultMirror {
  /**
  * Flips the image horizontally.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#horizontal DataAkamaiImagingPolicyImage#horizontal}
  */
  readonly horizontal?: string;
  /**
  * Flips the image horizontally.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#horizontal_var DataAkamaiImagingPolicyImage#horizontal_var}
  */
  readonly horizontalVar?: string;
  /**
  * Flips the image vertically.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#vertical DataAkamaiImagingPolicyImage#vertical}
  */
  readonly vertical?: string;
  /**
  * Flips the image vertically.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#vertical_var DataAkamaiImagingPolicyImage#vertical_var}
  */
  readonly verticalVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultMirrorToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultMirror | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    horizontal: cdktf.stringToTerraform(struct!.horizontal),
    horizontal_var: cdktf.stringToTerraform(struct!.horizontalVar),
    vertical: cdktf.stringToTerraform(struct!.vertical),
    vertical_var: cdktf.stringToTerraform(struct!.verticalVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultMirrorToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultMirror | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    horizontal: {
      value: cdktf.stringToHclTerraform(struct!.horizontal),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    horizontal_var: {
      value: cdktf.stringToHclTerraform(struct!.horizontalVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    vertical: {
      value: cdktf.stringToHclTerraform(struct!.vertical),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    vertical_var: {
      value: cdktf.stringToHclTerraform(struct!.verticalVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultMirrorOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultMirror | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._horizontal !== undefined) {
      hasAnyValues = true;
      internalValueResult.horizontal = this._horizontal;
    }
    if (this._horizontalVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.horizontalVar = this._horizontalVar;
    }
    if (this._vertical !== undefined) {
      hasAnyValues = true;
      internalValueResult.vertical = this._vertical;
    }
    if (this._verticalVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.verticalVar = this._verticalVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultMirror | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._horizontal = undefined;
      this._horizontalVar = undefined;
      this._vertical = undefined;
      this._verticalVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._horizontal = value.horizontal;
      this._horizontalVar = value.horizontalVar;
      this._vertical = value.vertical;
      this._verticalVar = value.verticalVar;
    }
  }

  // horizontal - computed: false, optional: true, required: false
  private _horizontal?: string; 
  public get horizontal() {
    return this.getStringAttribute('horizontal');
  }
  public set horizontal(value: string) {
    this._horizontal = value;
  }
  public resetHorizontal() {
    this._horizontal = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get horizontalInput() {
    return this._horizontal;
  }

  // horizontal_var - computed: false, optional: true, required: false
  private _horizontalVar?: string; 
  public get horizontalVar() {
    return this.getStringAttribute('horizontal_var');
  }
  public set horizontalVar(value: string) {
    this._horizontalVar = value;
  }
  public resetHorizontalVar() {
    this._horizontalVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get horizontalVarInput() {
    return this._horizontalVar;
  }

  // vertical - computed: false, optional: true, required: false
  private _vertical?: string; 
  public get vertical() {
    return this.getStringAttribute('vertical');
  }
  public set vertical(value: string) {
    this._vertical = value;
  }
  public resetVertical() {
    this._vertical = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get verticalInput() {
    return this._vertical;
  }

  // vertical_var - computed: false, optional: true, required: false
  private _verticalVar?: string; 
  public get verticalVar() {
    return this.getStringAttribute('vertical_var');
  }
  public set verticalVar(value: string) {
    this._verticalVar = value;
  }
  public resetVerticalVar() {
    this._verticalVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get verticalVarInput() {
    return this._verticalVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultMirrorList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultMirror[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultMirrorOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultMirrorOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultMonoHue {
  /**
  * Specify a hue by indicating the degree of rotation between 0 and 360 degrees around the color wheel. By default Mono Hue applies a red hue, 0.0 on the color wheel.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hue DataAkamaiImagingPolicyImage#hue}
  */
  readonly hue?: string;
  /**
  * Specify a hue by indicating the degree of rotation between 0 and 360 degrees around the color wheel. By default Mono Hue applies a red hue, 0.0 on the color wheel.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#hue_var DataAkamaiImagingPolicyImage#hue_var}
  */
  readonly hueVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultMonoHueToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultMonoHue | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    hue: cdktf.stringToTerraform(struct!.hue),
    hue_var: cdktf.stringToTerraform(struct!.hueVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultMonoHueToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultMonoHue | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    hue: {
      value: cdktf.stringToHclTerraform(struct!.hue),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    hue_var: {
      value: cdktf.stringToHclTerraform(struct!.hueVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultMonoHueOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultMonoHue | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._hue !== undefined) {
      hasAnyValues = true;
      internalValueResult.hue = this._hue;
    }
    if (this._hueVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.hueVar = this._hueVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultMonoHue | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._hue = undefined;
      this._hueVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._hue = value.hue;
      this._hueVar = value.hueVar;
    }
  }

  // hue - computed: false, optional: true, required: false
  private _hue?: string; 
  public get hue() {
    return this.getStringAttribute('hue');
  }
  public set hue(value: string) {
    this._hue = value;
  }
  public resetHue() {
    this._hue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hueInput() {
    return this._hue;
  }

  // hue_var - computed: false, optional: true, required: false
  private _hueVar?: string; 
  public get hueVar() {
    return this.getStringAttribute('hue_var');
  }
  public set hueVar(value: string) {
    this._hueVar = value;
  }
  public resetHueVar() {
    this._hueVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hueVarInput() {
    return this._hueVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultMonoHueList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultMonoHue[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultMonoHueOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultMonoHueOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultOpacity {
  /**
  * Represents alpha values on a scale of `0` to `1`. Values below `1` increase transparency, and `0` is invisible. For images that have some transparency, values above `1` increase the opacity of the transparent portions.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#opacity DataAkamaiImagingPolicyImage#opacity}
  */
  readonly opacity?: string;
  /**
  * Represents alpha values on a scale of `0` to `1`. Values below `1` increase transparency, and `0` is invisible. For images that have some transparency, values above `1` increase the opacity of the transparent portions.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/akamai/akamai/9.1.0/docs/data-sources/imaging_policy_image#opacity_var DataAkamaiImagingPolicyImage#opacity_var}
  */
  readonly opacityVar?: string;
}

export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultOpacityToTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultOpacity | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    opacity: cdktf.stringToTerraform(struct!.opacity),
    opacity_var: cdktf.stringToTerraform(struct!.opacityVar),
  }
}


export function dataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultOpacityToHclTerraform(struct?: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultOpacity | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    opacity: {
      value: cdktf.stringToHclTerraform(struct!.opacity),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    opacity_var: {
      value: cdktf.stringToHclTerraform(struct!.opacityVar),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultOpacityOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultOpacity | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._opacity !== undefined) {
      hasAnyValues = true;
      internalValueResult.opacity = this._opacity;
    }
    if (this._opacityVar !== undefined) {
      hasAnyValues = true;
      internalValueResult.opacityVar = this._opacityVar;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultOpacity | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._opacity = undefined;
      this._opacityVar = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._opacity = value.opacity;
      this._opacityVar = value.opacityVar;
    }
  }

  // opacity - computed: false, optional: true, required: false
  private _opacity?: string; 
  public get opacity() {
    return this.getStringAttribute('opacity');
  }
  public set opacity(value: string) {
    this._opacity = value;
  }
  public resetOpacity() {
    this._opacity = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get opacityInput() {
    return this._opacity;
  }

  // opacity_var - computed: false, optional: true, required: false
  private _opacityVar?: string; 
  public get opacityVar() {
    return this.getStringAttribute('opacity_var');
  }
  public set opacityVar(value: string) {
    this._opacityVar = value;
  }
  public resetOpacityVar() {
    this._opacityVar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get opacityVarInput() {
    return this._opacityVar;
  }
}

export class DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultOpacityList extends cdktf.ComplexList {
  public internalValue? : DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultOpacity[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultOpacityOutputReference {
    return new DataAkamaiImagingPolicyImagePolicyPostBreakpointTransformationsIfOrientationDefaultOpacityOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
