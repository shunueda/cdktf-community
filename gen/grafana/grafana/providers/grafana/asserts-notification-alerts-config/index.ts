// https://registry.terraform.io/providers/grafana/grafana/4.12.0/docs/resources/asserts_notification_alerts_config
// generated from terraform resource schema

import { Construct } from 'constructs';
import * as cdktf from 'cdktf';

// Configuration

export interface AssertsNotificationAlertsConfigConfig extends cdktf.TerraformMetaArguments {
  /**
  * Labels to add to alerts generated by this configuration.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/grafana/grafana/4.12.0/docs/resources/asserts_notification_alerts_config#alert_labels AssertsNotificationAlertsConfig#alert_labels}
  */
  readonly alertLabels?: { [key: string]: string };
  /**
  * Duration for which the condition must be true before firing (e.g., '5m', '30s'). Maps to 'for' in Asserts API.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/grafana/grafana/4.12.0/docs/resources/asserts_notification_alerts_config#duration AssertsNotificationAlertsConfig#duration}
  */
  readonly duration?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/grafana/grafana/4.12.0/docs/resources/asserts_notification_alerts_config#id AssertsNotificationAlertsConfig#id}
  *
  * Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2.
  * If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
  */
  readonly id?: string;
  /**
  * Labels to match for this alert configuration.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/grafana/grafana/4.12.0/docs/resources/asserts_notification_alerts_config#match_labels AssertsNotificationAlertsConfig#match_labels}
  */
  readonly matchLabels?: { [key: string]: string };
  /**
  * The name of the alert configuration.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/grafana/grafana/4.12.0/docs/resources/asserts_notification_alerts_config#name AssertsNotificationAlertsConfig#name}
  */
  readonly name: string;
  /**
  * Whether this alert configuration is silenced. Defaults to `false`.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/grafana/grafana/4.12.0/docs/resources/asserts_notification_alerts_config#silenced AssertsNotificationAlertsConfig#silenced}
  */
  readonly silenced?: boolean | cdktf.IResolvable;
}

/**
* Represents a {@link https://registry.terraform.io/providers/grafana/grafana/4.12.0/docs/resources/asserts_notification_alerts_config grafana_asserts_notification_alerts_config}
*/
export class AssertsNotificationAlertsConfig extends cdktf.TerraformResource {

  // =================
  // STATIC PROPERTIES
  // =================
  public static readonly tfResourceType = "grafana_asserts_notification_alerts_config";

  // ==============
  // STATIC Methods
  // ==============
  /**
  * Generates CDKTF code for importing a AssertsNotificationAlertsConfig resource upon running "cdktf plan <stack-name>"
  * @param scope The scope in which to define this construct
  * @param importToId The construct id used in the generated config for the AssertsNotificationAlertsConfig to import
  * @param importFromId The id of the existing AssertsNotificationAlertsConfig that should be imported. Refer to the {@link https://registry.terraform.io/providers/grafana/grafana/4.12.0/docs/resources/asserts_notification_alerts_config#import import section} in the documentation of this resource for the id to use
  * @param provider? Optional instance of the provider where the AssertsNotificationAlertsConfig to import is found
  */
  public static generateConfigForImport(scope: Construct, importToId: string, importFromId: string, provider?: cdktf.TerraformProvider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "grafana_asserts_notification_alerts_config", importId: importFromId, provider });
      }

  // ===========
  // INITIALIZER
  // ===========

  /**
  * Create a new {@link https://registry.terraform.io/providers/grafana/grafana/4.12.0/docs/resources/asserts_notification_alerts_config grafana_asserts_notification_alerts_config} Resource
  *
  * @param scope The scope in which to define this construct
  * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
  * @param options AssertsNotificationAlertsConfigConfig
  */
  public constructor(scope: Construct, id: string, config: AssertsNotificationAlertsConfigConfig) {
    super(scope, id, {
      terraformResourceType: 'grafana_asserts_notification_alerts_config',
      terraformGeneratorMetadata: {
        providerName: 'grafana',
        providerVersion: '4.12.0'
      },
      provider: config.provider,
      dependsOn: config.dependsOn,
      count: config.count,
      lifecycle: config.lifecycle,
      provisioners: config.provisioners,
      connection: config.connection,
      forEach: config.forEach
    });
    this._alertLabels = config.alertLabels;
    this._duration = config.duration;
    this._id = config.id;
    this._matchLabels = config.matchLabels;
    this._name = config.name;
    this._silenced = config.silenced;
  }

  // ==========
  // ATTRIBUTES
  // ==========

  // alert_labels - computed: false, optional: true, required: false
  private _alertLabels?: { [key: string]: string }; 
  public get alertLabels() {
    return this.getStringMapAttribute('alert_labels');
  }
  public set alertLabels(value: { [key: string]: string }) {
    this._alertLabels = value;
  }
  public resetAlertLabels() {
    this._alertLabels = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get alertLabelsInput() {
    return this._alertLabels;
  }

  // duration - computed: false, optional: true, required: false
  private _duration?: string; 
  public get duration() {
    return this.getStringAttribute('duration');
  }
  public set duration(value: string) {
    this._duration = value;
  }
  public resetDuration() {
    this._duration = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get durationInput() {
    return this._duration;
  }

  // id - computed: true, optional: true, required: false
  private _id?: string; 
  public get id() {
    return this.getStringAttribute('id');
  }
  public set id(value: string) {
    this._id = value;
  }
  public resetId() {
    this._id = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get idInput() {
    return this._id;
  }

  // match_labels - computed: false, optional: true, required: false
  private _matchLabels?: { [key: string]: string }; 
  public get matchLabels() {
    return this.getStringMapAttribute('match_labels');
  }
  public set matchLabels(value: { [key: string]: string }) {
    this._matchLabels = value;
  }
  public resetMatchLabels() {
    this._matchLabels = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get matchLabelsInput() {
    return this._matchLabels;
  }

  // name - computed: false, optional: false, required: true
  private _name?: string; 
  public get name() {
    return this.getStringAttribute('name');
  }
  public set name(value: string) {
    this._name = value;
  }
  // Temporarily expose input value. Use with caution.
  public get nameInput() {
    return this._name;
  }

  // silenced - computed: false, optional: true, required: false
  private _silenced?: boolean | cdktf.IResolvable; 
  public get silenced() {
    return this.getBooleanAttribute('silenced');
  }
  public set silenced(value: boolean | cdktf.IResolvable) {
    this._silenced = value;
  }
  public resetSilenced() {
    this._silenced = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get silencedInput() {
    return this._silenced;
  }

  // =========
  // SYNTHESIS
  // =========

  protected synthesizeAttributes(): { [name: string]: any } {
    return {
      alert_labels: cdktf.hashMapper(cdktf.stringToTerraform)(this._alertLabels),
      duration: cdktf.stringToTerraform(this._duration),
      id: cdktf.stringToTerraform(this._id),
      match_labels: cdktf.hashMapper(cdktf.stringToTerraform)(this._matchLabels),
      name: cdktf.stringToTerraform(this._name),
      silenced: cdktf.booleanToTerraform(this._silenced),
    };
  }

  protected synthesizeHclAttributes(): { [name: string]: any } {
    const attrs = {
      alert_labels: {
        value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._alertLabels),
        isBlock: false,
        type: "map",
        storageClassType: "stringMap",
      },
      duration: {
        value: cdktf.stringToHclTerraform(this._duration),
        isBlock: false,
        type: "simple",
        storageClassType: "string",
      },
      id: {
        value: cdktf.stringToHclTerraform(this._id),
        isBlock: false,
        type: "simple",
        storageClassType: "string",
      },
      match_labels: {
        value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._matchLabels),
        isBlock: false,
        type: "map",
        storageClassType: "stringMap",
      },
      name: {
        value: cdktf.stringToHclTerraform(this._name),
        isBlock: false,
        type: "simple",
        storageClassType: "string",
      },
      silenced: {
        value: cdktf.booleanToHclTerraform(this._silenced),
        isBlock: false,
        type: "simple",
        storageClassType: "boolean",
      },
    };

    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined ))
  }
}
