// https://registry.terraform.io/providers/zscaler/zia/4.5.2/docs/resources/atp_malware_settings
// generated from terraform resource schema

import { Construct } from 'constructs';
import * as cdktf from 'cdktf';

// Configuration

export interface AtpMalwareSettingsConfig extends cdktf.TerraformMetaArguments {
  /**
  * A Boolean value indicating whether malicious files that automatically render advertisements and install adware are allowed or blocked
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/zscaler/zia/4.5.2/docs/resources/atp_malware_settings#adware_blocked AtpMalwareSettings#adware_blocked}
  */
  readonly adwareBlocked?: boolean | cdktf.IResolvable;
  /**
  * A Boolean value specifying whether packet capture (PCAP) is enabled or disabled for adware
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/zscaler/zia/4.5.2/docs/resources/atp_malware_settings#adware_capture AtpMalwareSettings#adware_capture}
  */
  readonly adwareCapture?: boolean | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/zscaler/zia/4.5.2/docs/resources/atp_malware_settings#id AtpMalwareSettings#id}
  *
  * Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2.
  * If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
  */
  readonly id?: string;
  /**
  * A Boolean value specifying whether to allow or block malicious programs that can encrypt files and prevent users from accessing their devices, files, or data until a ransom payment is made.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/zscaler/zia/4.5.2/docs/resources/atp_malware_settings#ransomware_blocked AtpMalwareSettings#ransomware_blocked}
  */
  readonly ransomwareBlocked?: boolean | cdktf.IResolvable;
  /**
  * A Boolean value specifying whether packet capture (PCAP) is enabled or disabled for ransomware
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/zscaler/zia/4.5.2/docs/resources/atp_malware_settings#ransomware_capture AtpMalwareSettings#ransomware_capture}
  */
  readonly ransomwareCapture?: boolean | cdktf.IResolvable;
  /**
  * A Boolean value specifying whether to allow or block file download from tools that are common from remote access sites
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/zscaler/zia/4.5.2/docs/resources/atp_malware_settings#remote_access_tool_blocked AtpMalwareSettings#remote_access_tool_blocked}
  */
  readonly remoteAccessToolBlocked?: boolean | cdktf.IResolvable;
  /**
  * A Boolean value specifying whether packet capture (PCAP) is enabled or disabled for remote access tools
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/zscaler/zia/4.5.2/docs/resources/atp_malware_settings#remote_access_tool_capture AtpMalwareSettings#remote_access_tool_capture}
  */
  readonly remoteAccessToolCapture?: boolean | cdktf.IResolvable;
  /**
  * A Boolean value indicating whether malicious files that covertly gather information about a user or an organization are allowed or blocked
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/zscaler/zia/4.5.2/docs/resources/atp_malware_settings#spyware_blocked AtpMalwareSettings#spyware_blocked}
  */
  readonly spywareBlocked?: boolean | cdktf.IResolvable;
  /**
  * A Boolean value specifying whether packet capture (PCAP) is enabled or disabled for spyware
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/zscaler/zia/4.5.2/docs/resources/atp_malware_settings#spyware_capture AtpMalwareSettings#spyware_capture}
  */
  readonly spywareCapture?: boolean | cdktf.IResolvable;
  /**
  * A Boolean value that allows or blocks malicious programs such as Trojan viruses that are presented as beneficial or useful
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/zscaler/zia/4.5.2/docs/resources/atp_malware_settings#trojan_blocked AtpMalwareSettings#trojan_blocked}
  */
  readonly trojanBlocked?: boolean | cdktf.IResolvable;
  /**
  * A Boolean value specifying whether packet capture (PCAP) is enabled or disabled for Trojan viruses
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/zscaler/zia/4.5.2/docs/resources/atp_malware_settings#trojan_capture AtpMalwareSettings#trojan_capture}
  */
  readonly trojanCapture?: boolean | cdktf.IResolvable;
  /**
  * A Boolean value that allows or blocks unwanted files that are downloaded alongside intentional programs downloaded by users
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/zscaler/zia/4.5.2/docs/resources/atp_malware_settings#unwanted_applications_blocked AtpMalwareSettings#unwanted_applications_blocked}
  */
  readonly unwantedApplicationsBlocked?: boolean | cdktf.IResolvable;
  /**
  * A Boolean value specifying whether packet capture (PCAP) is enabled or disabled for unwanted applications
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/zscaler/zia/4.5.2/docs/resources/atp_malware_settings#unwanted_applications_capture AtpMalwareSettings#unwanted_applications_capture}
  */
  readonly unwantedApplicationsCapture?: boolean | cdktf.IResolvable;
  /**
  * A Boolean value that indicates if malicious programs that cause damage to systems and data are allowed or blocked.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/zscaler/zia/4.5.2/docs/resources/atp_malware_settings#virus_blocked AtpMalwareSettings#virus_blocked}
  */
  readonly virusBlocked?: boolean | cdktf.IResolvable;
  /**
  * A Boolean value specifying whether packet capture (PCAP) is enabled or disabled for viruses
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/zscaler/zia/4.5.2/docs/resources/atp_malware_settings#virus_capture AtpMalwareSettings#virus_capture}
  */
  readonly virusCapture?: boolean | cdktf.IResolvable;
  /**
  * A Boolean value indicating whether malicious programs that duplicate themselves to spread malicious code to other devices are allowed or blocked
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/zscaler/zia/4.5.2/docs/resources/atp_malware_settings#worm_blocked AtpMalwareSettings#worm_blocked}
  */
  readonly wormBlocked?: boolean | cdktf.IResolvable;
  /**
  * A Boolean value specifying whether packet capture (PCAP) is enabled or disabled for worms
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/zscaler/zia/4.5.2/docs/resources/atp_malware_settings#worm_capture AtpMalwareSettings#worm_capture}
  */
  readonly wormCapture?: boolean | cdktf.IResolvable;
}

/**
* Represents a {@link https://registry.terraform.io/providers/zscaler/zia/4.5.2/docs/resources/atp_malware_settings zia_atp_malware_settings}
*/
export class AtpMalwareSettings extends cdktf.TerraformResource {

  // =================
  // STATIC PROPERTIES
  // =================
  public static readonly tfResourceType = "zia_atp_malware_settings";

  // ==============
  // STATIC Methods
  // ==============
  /**
  * Generates CDKTF code for importing a AtpMalwareSettings resource upon running "cdktf plan <stack-name>"
  * @param scope The scope in which to define this construct
  * @param importToId The construct id used in the generated config for the AtpMalwareSettings to import
  * @param importFromId The id of the existing AtpMalwareSettings that should be imported. Refer to the {@link https://registry.terraform.io/providers/zscaler/zia/4.5.2/docs/resources/atp_malware_settings#import import section} in the documentation of this resource for the id to use
  * @param provider? Optional instance of the provider where the AtpMalwareSettings to import is found
  */
  public static generateConfigForImport(scope: Construct, importToId: string, importFromId: string, provider?: cdktf.TerraformProvider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "zia_atp_malware_settings", importId: importFromId, provider });
      }

  // ===========
  // INITIALIZER
  // ===========

  /**
  * Create a new {@link https://registry.terraform.io/providers/zscaler/zia/4.5.2/docs/resources/atp_malware_settings zia_atp_malware_settings} Resource
  *
  * @param scope The scope in which to define this construct
  * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
  * @param options AtpMalwareSettingsConfig = {}
  */
  public constructor(scope: Construct, id: string, config: AtpMalwareSettingsConfig = {}) {
    super(scope, id, {
      terraformResourceType: 'zia_atp_malware_settings',
      terraformGeneratorMetadata: {
        providerName: 'zia',
        providerVersion: '4.5.2'
      },
      provider: config.provider,
      dependsOn: config.dependsOn,
      count: config.count,
      lifecycle: config.lifecycle,
      provisioners: config.provisioners,
      connection: config.connection,
      forEach: config.forEach
    });
    this._adwareBlocked = config.adwareBlocked;
    this._adwareCapture = config.adwareCapture;
    this._id = config.id;
    this._ransomwareBlocked = config.ransomwareBlocked;
    this._ransomwareCapture = config.ransomwareCapture;
    this._remoteAccessToolBlocked = config.remoteAccessToolBlocked;
    this._remoteAccessToolCapture = config.remoteAccessToolCapture;
    this._spywareBlocked = config.spywareBlocked;
    this._spywareCapture = config.spywareCapture;
    this._trojanBlocked = config.trojanBlocked;
    this._trojanCapture = config.trojanCapture;
    this._unwantedApplicationsBlocked = config.unwantedApplicationsBlocked;
    this._unwantedApplicationsCapture = config.unwantedApplicationsCapture;
    this._virusBlocked = config.virusBlocked;
    this._virusCapture = config.virusCapture;
    this._wormBlocked = config.wormBlocked;
    this._wormCapture = config.wormCapture;
  }

  // ==========
  // ATTRIBUTES
  // ==========

  // adware_blocked - computed: true, optional: true, required: false
  private _adwareBlocked?: boolean | cdktf.IResolvable; 
  public get adwareBlocked() {
    return this.getBooleanAttribute('adware_blocked');
  }
  public set adwareBlocked(value: boolean | cdktf.IResolvable) {
    this._adwareBlocked = value;
  }
  public resetAdwareBlocked() {
    this._adwareBlocked = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get adwareBlockedInput() {
    return this._adwareBlocked;
  }

  // adware_capture - computed: true, optional: true, required: false
  private _adwareCapture?: boolean | cdktf.IResolvable; 
  public get adwareCapture() {
    return this.getBooleanAttribute('adware_capture');
  }
  public set adwareCapture(value: boolean | cdktf.IResolvable) {
    this._adwareCapture = value;
  }
  public resetAdwareCapture() {
    this._adwareCapture = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get adwareCaptureInput() {
    return this._adwareCapture;
  }

  // id - computed: true, optional: true, required: false
  private _id?: string; 
  public get id() {
    return this.getStringAttribute('id');
  }
  public set id(value: string) {
    this._id = value;
  }
  public resetId() {
    this._id = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get idInput() {
    return this._id;
  }

  // ransomware_blocked - computed: true, optional: true, required: false
  private _ransomwareBlocked?: boolean | cdktf.IResolvable; 
  public get ransomwareBlocked() {
    return this.getBooleanAttribute('ransomware_blocked');
  }
  public set ransomwareBlocked(value: boolean | cdktf.IResolvable) {
    this._ransomwareBlocked = value;
  }
  public resetRansomwareBlocked() {
    this._ransomwareBlocked = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get ransomwareBlockedInput() {
    return this._ransomwareBlocked;
  }

  // ransomware_capture - computed: true, optional: true, required: false
  private _ransomwareCapture?: boolean | cdktf.IResolvable; 
  public get ransomwareCapture() {
    return this.getBooleanAttribute('ransomware_capture');
  }
  public set ransomwareCapture(value: boolean | cdktf.IResolvable) {
    this._ransomwareCapture = value;
  }
  public resetRansomwareCapture() {
    this._ransomwareCapture = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get ransomwareCaptureInput() {
    return this._ransomwareCapture;
  }

  // remote_access_tool_blocked - computed: true, optional: true, required: false
  private _remoteAccessToolBlocked?: boolean | cdktf.IResolvable; 
  public get remoteAccessToolBlocked() {
    return this.getBooleanAttribute('remote_access_tool_blocked');
  }
  public set remoteAccessToolBlocked(value: boolean | cdktf.IResolvable) {
    this._remoteAccessToolBlocked = value;
  }
  public resetRemoteAccessToolBlocked() {
    this._remoteAccessToolBlocked = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get remoteAccessToolBlockedInput() {
    return this._remoteAccessToolBlocked;
  }

  // remote_access_tool_capture - computed: true, optional: true, required: false
  private _remoteAccessToolCapture?: boolean | cdktf.IResolvable; 
  public get remoteAccessToolCapture() {
    return this.getBooleanAttribute('remote_access_tool_capture');
  }
  public set remoteAccessToolCapture(value: boolean | cdktf.IResolvable) {
    this._remoteAccessToolCapture = value;
  }
  public resetRemoteAccessToolCapture() {
    this._remoteAccessToolCapture = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get remoteAccessToolCaptureInput() {
    return this._remoteAccessToolCapture;
  }

  // spyware_blocked - computed: true, optional: true, required: false
  private _spywareBlocked?: boolean | cdktf.IResolvable; 
  public get spywareBlocked() {
    return this.getBooleanAttribute('spyware_blocked');
  }
  public set spywareBlocked(value: boolean | cdktf.IResolvable) {
    this._spywareBlocked = value;
  }
  public resetSpywareBlocked() {
    this._spywareBlocked = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get spywareBlockedInput() {
    return this._spywareBlocked;
  }

  // spyware_capture - computed: true, optional: true, required: false
  private _spywareCapture?: boolean | cdktf.IResolvable; 
  public get spywareCapture() {
    return this.getBooleanAttribute('spyware_capture');
  }
  public set spywareCapture(value: boolean | cdktf.IResolvable) {
    this._spywareCapture = value;
  }
  public resetSpywareCapture() {
    this._spywareCapture = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get spywareCaptureInput() {
    return this._spywareCapture;
  }

  // trojan_blocked - computed: true, optional: true, required: false
  private _trojanBlocked?: boolean | cdktf.IResolvable; 
  public get trojanBlocked() {
    return this.getBooleanAttribute('trojan_blocked');
  }
  public set trojanBlocked(value: boolean | cdktf.IResolvable) {
    this._trojanBlocked = value;
  }
  public resetTrojanBlocked() {
    this._trojanBlocked = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get trojanBlockedInput() {
    return this._trojanBlocked;
  }

  // trojan_capture - computed: true, optional: true, required: false
  private _trojanCapture?: boolean | cdktf.IResolvable; 
  public get trojanCapture() {
    return this.getBooleanAttribute('trojan_capture');
  }
  public set trojanCapture(value: boolean | cdktf.IResolvable) {
    this._trojanCapture = value;
  }
  public resetTrojanCapture() {
    this._trojanCapture = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get trojanCaptureInput() {
    return this._trojanCapture;
  }

  // unwanted_applications_blocked - computed: true, optional: true, required: false
  private _unwantedApplicationsBlocked?: boolean | cdktf.IResolvable; 
  public get unwantedApplicationsBlocked() {
    return this.getBooleanAttribute('unwanted_applications_blocked');
  }
  public set unwantedApplicationsBlocked(value: boolean | cdktf.IResolvable) {
    this._unwantedApplicationsBlocked = value;
  }
  public resetUnwantedApplicationsBlocked() {
    this._unwantedApplicationsBlocked = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get unwantedApplicationsBlockedInput() {
    return this._unwantedApplicationsBlocked;
  }

  // unwanted_applications_capture - computed: true, optional: true, required: false
  private _unwantedApplicationsCapture?: boolean | cdktf.IResolvable; 
  public get unwantedApplicationsCapture() {
    return this.getBooleanAttribute('unwanted_applications_capture');
  }
  public set unwantedApplicationsCapture(value: boolean | cdktf.IResolvable) {
    this._unwantedApplicationsCapture = value;
  }
  public resetUnwantedApplicationsCapture() {
    this._unwantedApplicationsCapture = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get unwantedApplicationsCaptureInput() {
    return this._unwantedApplicationsCapture;
  }

  // virus_blocked - computed: true, optional: true, required: false
  private _virusBlocked?: boolean | cdktf.IResolvable; 
  public get virusBlocked() {
    return this.getBooleanAttribute('virus_blocked');
  }
  public set virusBlocked(value: boolean | cdktf.IResolvable) {
    this._virusBlocked = value;
  }
  public resetVirusBlocked() {
    this._virusBlocked = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get virusBlockedInput() {
    return this._virusBlocked;
  }

  // virus_capture - computed: true, optional: true, required: false
  private _virusCapture?: boolean | cdktf.IResolvable; 
  public get virusCapture() {
    return this.getBooleanAttribute('virus_capture');
  }
  public set virusCapture(value: boolean | cdktf.IResolvable) {
    this._virusCapture = value;
  }
  public resetVirusCapture() {
    this._virusCapture = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get virusCaptureInput() {
    return this._virusCapture;
  }

  // worm_blocked - computed: true, optional: true, required: false
  private _wormBlocked?: boolean | cdktf.IResolvable; 
  public get wormBlocked() {
    return this.getBooleanAttribute('worm_blocked');
  }
  public set wormBlocked(value: boolean | cdktf.IResolvable) {
    this._wormBlocked = value;
  }
  public resetWormBlocked() {
    this._wormBlocked = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get wormBlockedInput() {
    return this._wormBlocked;
  }

  // worm_capture - computed: true, optional: true, required: false
  private _wormCapture?: boolean | cdktf.IResolvable; 
  public get wormCapture() {
    return this.getBooleanAttribute('worm_capture');
  }
  public set wormCapture(value: boolean | cdktf.IResolvable) {
    this._wormCapture = value;
  }
  public resetWormCapture() {
    this._wormCapture = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get wormCaptureInput() {
    return this._wormCapture;
  }

  // =========
  // SYNTHESIS
  // =========

  protected synthesizeAttributes(): { [name: string]: any } {
    return {
      adware_blocked: cdktf.booleanToTerraform(this._adwareBlocked),
      adware_capture: cdktf.booleanToTerraform(this._adwareCapture),
      id: cdktf.stringToTerraform(this._id),
      ransomware_blocked: cdktf.booleanToTerraform(this._ransomwareBlocked),
      ransomware_capture: cdktf.booleanToTerraform(this._ransomwareCapture),
      remote_access_tool_blocked: cdktf.booleanToTerraform(this._remoteAccessToolBlocked),
      remote_access_tool_capture: cdktf.booleanToTerraform(this._remoteAccessToolCapture),
      spyware_blocked: cdktf.booleanToTerraform(this._spywareBlocked),
      spyware_capture: cdktf.booleanToTerraform(this._spywareCapture),
      trojan_blocked: cdktf.booleanToTerraform(this._trojanBlocked),
      trojan_capture: cdktf.booleanToTerraform(this._trojanCapture),
      unwanted_applications_blocked: cdktf.booleanToTerraform(this._unwantedApplicationsBlocked),
      unwanted_applications_capture: cdktf.booleanToTerraform(this._unwantedApplicationsCapture),
      virus_blocked: cdktf.booleanToTerraform(this._virusBlocked),
      virus_capture: cdktf.booleanToTerraform(this._virusCapture),
      worm_blocked: cdktf.booleanToTerraform(this._wormBlocked),
      worm_capture: cdktf.booleanToTerraform(this._wormCapture),
    };
  }

  protected synthesizeHclAttributes(): { [name: string]: any } {
    const attrs = {
      adware_blocked: {
        value: cdktf.booleanToHclTerraform(this._adwareBlocked),
        isBlock: false,
        type: "simple",
        storageClassType: "boolean",
      },
      adware_capture: {
        value: cdktf.booleanToHclTerraform(this._adwareCapture),
        isBlock: false,
        type: "simple",
        storageClassType: "boolean",
      },
      id: {
        value: cdktf.stringToHclTerraform(this._id),
        isBlock: false,
        type: "simple",
        storageClassType: "string",
      },
      ransomware_blocked: {
        value: cdktf.booleanToHclTerraform(this._ransomwareBlocked),
        isBlock: false,
        type: "simple",
        storageClassType: "boolean",
      },
      ransomware_capture: {
        value: cdktf.booleanToHclTerraform(this._ransomwareCapture),
        isBlock: false,
        type: "simple",
        storageClassType: "boolean",
      },
      remote_access_tool_blocked: {
        value: cdktf.booleanToHclTerraform(this._remoteAccessToolBlocked),
        isBlock: false,
        type: "simple",
        storageClassType: "boolean",
      },
      remote_access_tool_capture: {
        value: cdktf.booleanToHclTerraform(this._remoteAccessToolCapture),
        isBlock: false,
        type: "simple",
        storageClassType: "boolean",
      },
      spyware_blocked: {
        value: cdktf.booleanToHclTerraform(this._spywareBlocked),
        isBlock: false,
        type: "simple",
        storageClassType: "boolean",
      },
      spyware_capture: {
        value: cdktf.booleanToHclTerraform(this._spywareCapture),
        isBlock: false,
        type: "simple",
        storageClassType: "boolean",
      },
      trojan_blocked: {
        value: cdktf.booleanToHclTerraform(this._trojanBlocked),
        isBlock: false,
        type: "simple",
        storageClassType: "boolean",
      },
      trojan_capture: {
        value: cdktf.booleanToHclTerraform(this._trojanCapture),
        isBlock: false,
        type: "simple",
        storageClassType: "boolean",
      },
      unwanted_applications_blocked: {
        value: cdktf.booleanToHclTerraform(this._unwantedApplicationsBlocked),
        isBlock: false,
        type: "simple",
        storageClassType: "boolean",
      },
      unwanted_applications_capture: {
        value: cdktf.booleanToHclTerraform(this._unwantedApplicationsCapture),
        isBlock: false,
        type: "simple",
        storageClassType: "boolean",
      },
      virus_blocked: {
        value: cdktf.booleanToHclTerraform(this._virusBlocked),
        isBlock: false,
        type: "simple",
        storageClassType: "boolean",
      },
      virus_capture: {
        value: cdktf.booleanToHclTerraform(this._virusCapture),
        isBlock: false,
        type: "simple",
        storageClassType: "boolean",
      },
      worm_blocked: {
        value: cdktf.booleanToHclTerraform(this._wormBlocked),
        isBlock: false,
        type: "simple",
        storageClassType: "boolean",
      },
      worm_capture: {
        value: cdktf.booleanToHclTerraform(this._wormCapture),
        isBlock: false,
        type: "simple",
        storageClassType: "boolean",
      },
    };

    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined ))
  }
}
