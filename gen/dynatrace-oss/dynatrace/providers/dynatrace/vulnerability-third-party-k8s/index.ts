// https://registry.terraform.io/providers/dynatrace-oss/dynatrace/1.86.0/docs/resources/vulnerability_third_party_k8s
// generated from terraform resource schema

import { Construct } from 'constructs';
import * as cdktf from 'cdktf';

// Configuration

export interface VulnerabilityThirdPartyK8SConfig extends cdktf.TerraformMetaArguments {
  /**
  * This setting is enabled (`true`) or disabled (`false`)
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/dynatrace-oss/dynatrace/1.86.0/docs/resources/vulnerability_third_party_k8s#enabled VulnerabilityThirdPartyK8S#enabled}
  */
  readonly enabled: boolean | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/dynatrace-oss/dynatrace/1.86.0/docs/resources/vulnerability_third_party_k8s#id VulnerabilityThirdPartyK8S#id}
  *
  * Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2.
  * If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
  */
  readonly id?: string;
  /**
  * Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/dynatrace-oss/dynatrace/1.86.0/docs/resources/vulnerability_third_party_k8s#insert_after VulnerabilityThirdPartyK8S#insert_after}
  */
  readonly insertAfter?: string;
  /**
  * Rule name
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/dynatrace-oss/dynatrace/1.86.0/docs/resources/vulnerability_third_party_k8s#rule_name VulnerabilityThirdPartyK8S#rule_name}
  */
  readonly ruleName?: string;
  /**
  * kubernetes_label_conditions block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/dynatrace-oss/dynatrace/1.86.0/docs/resources/vulnerability_third_party_k8s#kubernetes_label_conditions VulnerabilityThirdPartyK8S#kubernetes_label_conditions}
  */
  readonly kubernetesLabelConditions?: VulnerabilityThirdPartyK8SKubernetesLabelConditions;
  /**
  * metadata block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/dynatrace-oss/dynatrace/1.86.0/docs/resources/vulnerability_third_party_k8s#metadata VulnerabilityThirdPartyK8S#metadata}
  */
  readonly metadata: VulnerabilityThirdPartyK8SMetadata;
  /**
  * vulnerability_detection_control block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/dynatrace-oss/dynatrace/1.86.0/docs/resources/vulnerability_third_party_k8s#vulnerability_detection_control VulnerabilityThirdPartyK8S#vulnerability_detection_control}
  */
  readonly vulnerabilityDetectionControl: VulnerabilityThirdPartyK8SVulnerabilityDetectionControl;
}
export interface VulnerabilityThirdPartyK8SKubernetesLabelConditionsKubernetesLabelCondition {
  /**
  * Kubernetes label key
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/dynatrace-oss/dynatrace/1.86.0/docs/resources/vulnerability_third_party_k8s#kubernetes_label_key VulnerabilityThirdPartyK8S#kubernetes_label_key}
  */
  readonly kubernetesLabelKey: string;
  /**
  * Kubernetes label value
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/dynatrace-oss/dynatrace/1.86.0/docs/resources/vulnerability_third_party_k8s#kubernetes_label_value VulnerabilityThirdPartyK8S#kubernetes_label_value}
  */
  readonly kubernetesLabelValue?: string;
  /**
  * Possible Values: `CONTAINS`, `DOES_NOT_CONTAIN`, `DOES_NOT_END_WITH`, `DOES_NOT_EXIST`, `DOES_NOT_START_WITH`, `ENDS_WITH`, `EQUALS`, `EXISTS`, `NOT_EQUALS`, `STARTS_WITH`
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/dynatrace-oss/dynatrace/1.86.0/docs/resources/vulnerability_third_party_k8s#matcher VulnerabilityThirdPartyK8S#matcher}
  */
  readonly matcher: string;
}

export function vulnerabilityThirdPartyK8SKubernetesLabelConditionsKubernetesLabelConditionToTerraform(struct?: VulnerabilityThirdPartyK8SKubernetesLabelConditionsKubernetesLabelCondition | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    kubernetes_label_key: cdktf.stringToTerraform(struct!.kubernetesLabelKey),
    kubernetes_label_value: cdktf.stringToTerraform(struct!.kubernetesLabelValue),
    matcher: cdktf.stringToTerraform(struct!.matcher),
  }
}


export function vulnerabilityThirdPartyK8SKubernetesLabelConditionsKubernetesLabelConditionToHclTerraform(struct?: VulnerabilityThirdPartyK8SKubernetesLabelConditionsKubernetesLabelCondition | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    kubernetes_label_key: {
      value: cdktf.stringToHclTerraform(struct!.kubernetesLabelKey),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    kubernetes_label_value: {
      value: cdktf.stringToHclTerraform(struct!.kubernetesLabelValue),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    matcher: {
      value: cdktf.stringToHclTerraform(struct!.matcher),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class VulnerabilityThirdPartyK8SKubernetesLabelConditionsKubernetesLabelConditionOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): VulnerabilityThirdPartyK8SKubernetesLabelConditionsKubernetesLabelCondition | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._kubernetesLabelKey !== undefined) {
      hasAnyValues = true;
      internalValueResult.kubernetesLabelKey = this._kubernetesLabelKey;
    }
    if (this._kubernetesLabelValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.kubernetesLabelValue = this._kubernetesLabelValue;
    }
    if (this._matcher !== undefined) {
      hasAnyValues = true;
      internalValueResult.matcher = this._matcher;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: VulnerabilityThirdPartyK8SKubernetesLabelConditionsKubernetesLabelCondition | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._kubernetesLabelKey = undefined;
      this._kubernetesLabelValue = undefined;
      this._matcher = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._kubernetesLabelKey = value.kubernetesLabelKey;
      this._kubernetesLabelValue = value.kubernetesLabelValue;
      this._matcher = value.matcher;
    }
  }

  // kubernetes_label_key - computed: false, optional: false, required: true
  private _kubernetesLabelKey?: string; 
  public get kubernetesLabelKey() {
    return this.getStringAttribute('kubernetes_label_key');
  }
  public set kubernetesLabelKey(value: string) {
    this._kubernetesLabelKey = value;
  }
  // Temporarily expose input value. Use with caution.
  public get kubernetesLabelKeyInput() {
    return this._kubernetesLabelKey;
  }

  // kubernetes_label_value - computed: false, optional: true, required: false
  private _kubernetesLabelValue?: string; 
  public get kubernetesLabelValue() {
    return this.getStringAttribute('kubernetes_label_value');
  }
  public set kubernetesLabelValue(value: string) {
    this._kubernetesLabelValue = value;
  }
  public resetKubernetesLabelValue() {
    this._kubernetesLabelValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get kubernetesLabelValueInput() {
    return this._kubernetesLabelValue;
  }

  // matcher - computed: false, optional: false, required: true
  private _matcher?: string; 
  public get matcher() {
    return this.getStringAttribute('matcher');
  }
  public set matcher(value: string) {
    this._matcher = value;
  }
  // Temporarily expose input value. Use with caution.
  public get matcherInput() {
    return this._matcher;
  }
}

export class VulnerabilityThirdPartyK8SKubernetesLabelConditionsKubernetesLabelConditionList extends cdktf.ComplexList {
  public internalValue? : VulnerabilityThirdPartyK8SKubernetesLabelConditionsKubernetesLabelCondition[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): VulnerabilityThirdPartyK8SKubernetesLabelConditionsKubernetesLabelConditionOutputReference {
    return new VulnerabilityThirdPartyK8SKubernetesLabelConditionsKubernetesLabelConditionOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface VulnerabilityThirdPartyK8SKubernetesLabelConditions {
  /**
  * kubernetes_label_condition block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/dynatrace-oss/dynatrace/1.86.0/docs/resources/vulnerability_third_party_k8s#kubernetes_label_condition VulnerabilityThirdPartyK8S#kubernetes_label_condition}
  */
  readonly kubernetesLabelCondition: VulnerabilityThirdPartyK8SKubernetesLabelConditionsKubernetesLabelCondition[] | cdktf.IResolvable;
}

export function vulnerabilityThirdPartyK8SKubernetesLabelConditionsToTerraform(struct?: VulnerabilityThirdPartyK8SKubernetesLabelConditionsOutputReference | VulnerabilityThirdPartyK8SKubernetesLabelConditions): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    kubernetes_label_condition: cdktf.listMapper(vulnerabilityThirdPartyK8SKubernetesLabelConditionsKubernetesLabelConditionToTerraform, true)(struct!.kubernetesLabelCondition),
  }
}


export function vulnerabilityThirdPartyK8SKubernetesLabelConditionsToHclTerraform(struct?: VulnerabilityThirdPartyK8SKubernetesLabelConditionsOutputReference | VulnerabilityThirdPartyK8SKubernetesLabelConditions): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    kubernetes_label_condition: {
      value: cdktf.listMapperHcl(vulnerabilityThirdPartyK8SKubernetesLabelConditionsKubernetesLabelConditionToHclTerraform, true)(struct!.kubernetesLabelCondition),
      isBlock: true,
      type: "list",
      storageClassType: "VulnerabilityThirdPartyK8SKubernetesLabelConditionsKubernetesLabelConditionList",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class VulnerabilityThirdPartyK8SKubernetesLabelConditionsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false, 0);
  }

  public get internalValue(): VulnerabilityThirdPartyK8SKubernetesLabelConditions | undefined {
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._kubernetesLabelCondition?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.kubernetesLabelCondition = this._kubernetesLabelCondition?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: VulnerabilityThirdPartyK8SKubernetesLabelConditions | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this._kubernetesLabelCondition.internalValue = undefined;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this._kubernetesLabelCondition.internalValue = value.kubernetesLabelCondition;
    }
  }

  // kubernetes_label_condition - computed: false, optional: false, required: true
  private _kubernetesLabelCondition = new VulnerabilityThirdPartyK8SKubernetesLabelConditionsKubernetesLabelConditionList(this, "kubernetes_label_condition", false);
  public get kubernetesLabelCondition() {
    return this._kubernetesLabelCondition;
  }
  public putKubernetesLabelCondition(value: VulnerabilityThirdPartyK8SKubernetesLabelConditionsKubernetesLabelCondition[] | cdktf.IResolvable) {
    this._kubernetesLabelCondition.internalValue = value;
  }
  // Temporarily expose input value. Use with caution.
  public get kubernetesLabelConditionInput() {
    return this._kubernetesLabelCondition.internalValue;
  }
}
export interface VulnerabilityThirdPartyK8SMetadata {
  /**
  * no documentation available
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/dynatrace-oss/dynatrace/1.86.0/docs/resources/vulnerability_third_party_k8s#comment VulnerabilityThirdPartyK8S#comment}
  */
  readonly comment: string;
}

export function vulnerabilityThirdPartyK8SMetadataToTerraform(struct?: VulnerabilityThirdPartyK8SMetadataOutputReference | VulnerabilityThirdPartyK8SMetadata): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    comment: cdktf.stringToTerraform(struct!.comment),
  }
}


export function vulnerabilityThirdPartyK8SMetadataToHclTerraform(struct?: VulnerabilityThirdPartyK8SMetadataOutputReference | VulnerabilityThirdPartyK8SMetadata): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    comment: {
      value: cdktf.stringToHclTerraform(struct!.comment),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class VulnerabilityThirdPartyK8SMetadataOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false, 0);
  }

  public get internalValue(): VulnerabilityThirdPartyK8SMetadata | undefined {
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._comment !== undefined) {
      hasAnyValues = true;
      internalValueResult.comment = this._comment;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: VulnerabilityThirdPartyK8SMetadata | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this._comment = undefined;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this._comment = value.comment;
    }
  }

  // comment - computed: false, optional: false, required: true
  private _comment?: string; 
  public get comment() {
    return this.getStringAttribute('comment');
  }
  public set comment(value: string) {
    this._comment = value;
  }
  // Temporarily expose input value. Use with caution.
  public get commentInput() {
    return this._comment;
  }
}
export interface VulnerabilityThirdPartyK8SVulnerabilityDetectionControl {
  /**
  * Possible Values: `MONITORING_OFF`, `MONITORING_ON`
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/dynatrace-oss/dynatrace/1.86.0/docs/resources/vulnerability_third_party_k8s#monitoring_mode VulnerabilityThirdPartyK8S#monitoring_mode}
  */
  readonly monitoringMode: string;
}

export function vulnerabilityThirdPartyK8SVulnerabilityDetectionControlToTerraform(struct?: VulnerabilityThirdPartyK8SVulnerabilityDetectionControlOutputReference | VulnerabilityThirdPartyK8SVulnerabilityDetectionControl): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    monitoring_mode: cdktf.stringToTerraform(struct!.monitoringMode),
  }
}


export function vulnerabilityThirdPartyK8SVulnerabilityDetectionControlToHclTerraform(struct?: VulnerabilityThirdPartyK8SVulnerabilityDetectionControlOutputReference | VulnerabilityThirdPartyK8SVulnerabilityDetectionControl): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    monitoring_mode: {
      value: cdktf.stringToHclTerraform(struct!.monitoringMode),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class VulnerabilityThirdPartyK8SVulnerabilityDetectionControlOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false, 0);
  }

  public get internalValue(): VulnerabilityThirdPartyK8SVulnerabilityDetectionControl | undefined {
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._monitoringMode !== undefined) {
      hasAnyValues = true;
      internalValueResult.monitoringMode = this._monitoringMode;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: VulnerabilityThirdPartyK8SVulnerabilityDetectionControl | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this._monitoringMode = undefined;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this._monitoringMode = value.monitoringMode;
    }
  }

  // monitoring_mode - computed: false, optional: false, required: true
  private _monitoringMode?: string; 
  public get monitoringMode() {
    return this.getStringAttribute('monitoring_mode');
  }
  public set monitoringMode(value: string) {
    this._monitoringMode = value;
  }
  // Temporarily expose input value. Use with caution.
  public get monitoringModeInput() {
    return this._monitoringMode;
  }
}

/**
* Represents a {@link https://registry.terraform.io/providers/dynatrace-oss/dynatrace/1.86.0/docs/resources/vulnerability_third_party_k8s dynatrace_vulnerability_third_party_k8s}
*/
export class VulnerabilityThirdPartyK8S extends cdktf.TerraformResource {

  // =================
  // STATIC PROPERTIES
  // =================
  public static readonly tfResourceType = "dynatrace_vulnerability_third_party_k8s";

  // ==============
  // STATIC Methods
  // ==============
  /**
  * Generates CDKTF code for importing a VulnerabilityThirdPartyK8S resource upon running "cdktf plan <stack-name>"
  * @param scope The scope in which to define this construct
  * @param importToId The construct id used in the generated config for the VulnerabilityThirdPartyK8S to import
  * @param importFromId The id of the existing VulnerabilityThirdPartyK8S that should be imported. Refer to the {@link https://registry.terraform.io/providers/dynatrace-oss/dynatrace/1.86.0/docs/resources/vulnerability_third_party_k8s#import import section} in the documentation of this resource for the id to use
  * @param provider? Optional instance of the provider where the VulnerabilityThirdPartyK8S to import is found
  */
  public static generateConfigForImport(scope: Construct, importToId: string, importFromId: string, provider?: cdktf.TerraformProvider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "dynatrace_vulnerability_third_party_k8s", importId: importFromId, provider });
      }

  // ===========
  // INITIALIZER
  // ===========

  /**
  * Create a new {@link https://registry.terraform.io/providers/dynatrace-oss/dynatrace/1.86.0/docs/resources/vulnerability_third_party_k8s dynatrace_vulnerability_third_party_k8s} Resource
  *
  * @param scope The scope in which to define this construct
  * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
  * @param options VulnerabilityThirdPartyK8SConfig
  */
  public constructor(scope: Construct, id: string, config: VulnerabilityThirdPartyK8SConfig) {
    super(scope, id, {
      terraformResourceType: 'dynatrace_vulnerability_third_party_k8s',
      terraformGeneratorMetadata: {
        providerName: 'dynatrace',
        providerVersion: '1.86.0'
      },
      provider: config.provider,
      dependsOn: config.dependsOn,
      count: config.count,
      lifecycle: config.lifecycle,
      provisioners: config.provisioners,
      connection: config.connection,
      forEach: config.forEach
    });
    this._enabled = config.enabled;
    this._id = config.id;
    this._insertAfter = config.insertAfter;
    this._ruleName = config.ruleName;
    this._kubernetesLabelConditions.internalValue = config.kubernetesLabelConditions;
    this._metadata.internalValue = config.metadata;
    this._vulnerabilityDetectionControl.internalValue = config.vulnerabilityDetectionControl;
  }

  // ==========
  // ATTRIBUTES
  // ==========

  // enabled - computed: false, optional: false, required: true
  private _enabled?: boolean | cdktf.IResolvable; 
  public get enabled() {
    return this.getBooleanAttribute('enabled');
  }
  public set enabled(value: boolean | cdktf.IResolvable) {
    this._enabled = value;
  }
  // Temporarily expose input value. Use with caution.
  public get enabledInput() {
    return this._enabled;
  }

  // id - computed: true, optional: true, required: false
  private _id?: string; 
  public get id() {
    return this.getStringAttribute('id');
  }
  public set id(value: string) {
    this._id = value;
  }
  public resetId() {
    this._id = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get idInput() {
    return this._id;
  }

  // insert_after - computed: true, optional: true, required: false
  private _insertAfter?: string; 
  public get insertAfter() {
    return this.getStringAttribute('insert_after');
  }
  public set insertAfter(value: string) {
    this._insertAfter = value;
  }
  public resetInsertAfter() {
    this._insertAfter = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get insertAfterInput() {
    return this._insertAfter;
  }

  // rule_name - computed: false, optional: true, required: false
  private _ruleName?: string; 
  public get ruleName() {
    return this.getStringAttribute('rule_name');
  }
  public set ruleName(value: string) {
    this._ruleName = value;
  }
  public resetRuleName() {
    this._ruleName = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get ruleNameInput() {
    return this._ruleName;
  }

  // kubernetes_label_conditions - computed: false, optional: true, required: false
  private _kubernetesLabelConditions = new VulnerabilityThirdPartyK8SKubernetesLabelConditionsOutputReference(this, "kubernetes_label_conditions");
  public get kubernetesLabelConditions() {
    return this._kubernetesLabelConditions;
  }
  public putKubernetesLabelConditions(value: VulnerabilityThirdPartyK8SKubernetesLabelConditions) {
    this._kubernetesLabelConditions.internalValue = value;
  }
  public resetKubernetesLabelConditions() {
    this._kubernetesLabelConditions.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get kubernetesLabelConditionsInput() {
    return this._kubernetesLabelConditions.internalValue;
  }

  // metadata - computed: false, optional: false, required: true
  private _metadata = new VulnerabilityThirdPartyK8SMetadataOutputReference(this, "metadata");
  public get metadata() {
    return this._metadata;
  }
  public putMetadata(value: VulnerabilityThirdPartyK8SMetadata) {
    this._metadata.internalValue = value;
  }
  // Temporarily expose input value. Use with caution.
  public get metadataInput() {
    return this._metadata.internalValue;
  }

  // vulnerability_detection_control - computed: false, optional: false, required: true
  private _vulnerabilityDetectionControl = new VulnerabilityThirdPartyK8SVulnerabilityDetectionControlOutputReference(this, "vulnerability_detection_control");
  public get vulnerabilityDetectionControl() {
    return this._vulnerabilityDetectionControl;
  }
  public putVulnerabilityDetectionControl(value: VulnerabilityThirdPartyK8SVulnerabilityDetectionControl) {
    this._vulnerabilityDetectionControl.internalValue = value;
  }
  // Temporarily expose input value. Use with caution.
  public get vulnerabilityDetectionControlInput() {
    return this._vulnerabilityDetectionControl.internalValue;
  }

  // =========
  // SYNTHESIS
  // =========

  protected synthesizeAttributes(): { [name: string]: any } {
    return {
      enabled: cdktf.booleanToTerraform(this._enabled),
      id: cdktf.stringToTerraform(this._id),
      insert_after: cdktf.stringToTerraform(this._insertAfter),
      rule_name: cdktf.stringToTerraform(this._ruleName),
      kubernetes_label_conditions: vulnerabilityThirdPartyK8SKubernetesLabelConditionsToTerraform(this._kubernetesLabelConditions.internalValue),
      metadata: vulnerabilityThirdPartyK8SMetadataToTerraform(this._metadata.internalValue),
      vulnerability_detection_control: vulnerabilityThirdPartyK8SVulnerabilityDetectionControlToTerraform(this._vulnerabilityDetectionControl.internalValue),
    };
  }

  protected synthesizeHclAttributes(): { [name: string]: any } {
    const attrs = {
      enabled: {
        value: cdktf.booleanToHclTerraform(this._enabled),
        isBlock: false,
        type: "simple",
        storageClassType: "boolean",
      },
      id: {
        value: cdktf.stringToHclTerraform(this._id),
        isBlock: false,
        type: "simple",
        storageClassType: "string",
      },
      insert_after: {
        value: cdktf.stringToHclTerraform(this._insertAfter),
        isBlock: false,
        type: "simple",
        storageClassType: "string",
      },
      rule_name: {
        value: cdktf.stringToHclTerraform(this._ruleName),
        isBlock: false,
        type: "simple",
        storageClassType: "string",
      },
      kubernetes_label_conditions: {
        value: vulnerabilityThirdPartyK8SKubernetesLabelConditionsToHclTerraform(this._kubernetesLabelConditions.internalValue),
        isBlock: true,
        type: "list",
        storageClassType: "VulnerabilityThirdPartyK8SKubernetesLabelConditionsList",
      },
      metadata: {
        value: vulnerabilityThirdPartyK8SMetadataToHclTerraform(this._metadata.internalValue),
        isBlock: true,
        type: "list",
        storageClassType: "VulnerabilityThirdPartyK8SMetadataList",
      },
      vulnerability_detection_control: {
        value: vulnerabilityThirdPartyK8SVulnerabilityDetectionControlToHclTerraform(this._vulnerabilityDetectionControl.internalValue),
        isBlock: true,
        type: "list",
        storageClassType: "VulnerabilityThirdPartyK8SVulnerabilityDetectionControlList",
      },
    };

    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined ))
  }
}
