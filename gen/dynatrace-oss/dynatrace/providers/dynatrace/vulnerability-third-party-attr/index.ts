// https://registry.terraform.io/providers/dynatrace-oss/dynatrace/1.86.0/docs/resources/vulnerability_third_party_attr
// generated from terraform resource schema

import { Construct } from 'constructs';
import * as cdktf from 'cdktf';

// Configuration

export interface VulnerabilityThirdPartyAttrConfig extends cdktf.TerraformMetaArguments {
  /**
  * This setting is enabled (`true`) or disabled (`false`)
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/dynatrace-oss/dynatrace/1.86.0/docs/resources/vulnerability_third_party_attr#enabled VulnerabilityThirdPartyAttr#enabled}
  */
  readonly enabled: boolean | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/dynatrace-oss/dynatrace/1.86.0/docs/resources/vulnerability_third_party_attr#id VulnerabilityThirdPartyAttr#id}
  *
  * Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2.
  * If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
  */
  readonly id?: string;
  /**
  * Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/dynatrace-oss/dynatrace/1.86.0/docs/resources/vulnerability_third_party_attr#insert_after VulnerabilityThirdPartyAttr#insert_after}
  */
  readonly insertAfter?: string;
  /**
  * Rule name
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/dynatrace-oss/dynatrace/1.86.0/docs/resources/vulnerability_third_party_attr#rule_name VulnerabilityThirdPartyAttr#rule_name}
  */
  readonly ruleName?: string;
  /**
  * metadata block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/dynatrace-oss/dynatrace/1.86.0/docs/resources/vulnerability_third_party_attr#metadata VulnerabilityThirdPartyAttr#metadata}
  */
  readonly metadata: VulnerabilityThirdPartyAttrMetadata;
  /**
  * resource_attribute_conditions block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/dynatrace-oss/dynatrace/1.86.0/docs/resources/vulnerability_third_party_attr#resource_attribute_conditions VulnerabilityThirdPartyAttr#resource_attribute_conditions}
  */
  readonly resourceAttributeConditions?: VulnerabilityThirdPartyAttrResourceAttributeConditions;
  /**
  * vulnerability_detection_control block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/dynatrace-oss/dynatrace/1.86.0/docs/resources/vulnerability_third_party_attr#vulnerability_detection_control VulnerabilityThirdPartyAttr#vulnerability_detection_control}
  */
  readonly vulnerabilityDetectionControl: VulnerabilityThirdPartyAttrVulnerabilityDetectionControl;
}
export interface VulnerabilityThirdPartyAttrMetadata {
  /**
  * no documentation available
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/dynatrace-oss/dynatrace/1.86.0/docs/resources/vulnerability_third_party_attr#comment VulnerabilityThirdPartyAttr#comment}
  */
  readonly comment: string;
}

export function vulnerabilityThirdPartyAttrMetadataToTerraform(struct?: VulnerabilityThirdPartyAttrMetadataOutputReference | VulnerabilityThirdPartyAttrMetadata): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    comment: cdktf.stringToTerraform(struct!.comment),
  }
}


export function vulnerabilityThirdPartyAttrMetadataToHclTerraform(struct?: VulnerabilityThirdPartyAttrMetadataOutputReference | VulnerabilityThirdPartyAttrMetadata): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    comment: {
      value: cdktf.stringToHclTerraform(struct!.comment),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class VulnerabilityThirdPartyAttrMetadataOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false, 0);
  }

  public get internalValue(): VulnerabilityThirdPartyAttrMetadata | undefined {
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._comment !== undefined) {
      hasAnyValues = true;
      internalValueResult.comment = this._comment;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: VulnerabilityThirdPartyAttrMetadata | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this._comment = undefined;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this._comment = value.comment;
    }
  }

  // comment - computed: false, optional: false, required: true
  private _comment?: string; 
  public get comment() {
    return this.getStringAttribute('comment');
  }
  public set comment(value: string) {
    this._comment = value;
  }
  // Temporarily expose input value. Use with caution.
  public get commentInput() {
    return this._comment;
  }
}
export interface VulnerabilityThirdPartyAttrResourceAttributeConditionsResourceAttributeCondition {
  /**
  * Possible Values: `CONTAINS`, `DOES_NOT_CONTAIN`, `DOES_NOT_END_WITH`, `DOES_NOT_EXIST`, `DOES_NOT_START_WITH`, `ENDS_WITH`, `EQUALS`, `EXISTS`, `NOT_EQUALS`, `STARTS_WITH`
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/dynatrace-oss/dynatrace/1.86.0/docs/resources/vulnerability_third_party_attr#matcher VulnerabilityThirdPartyAttr#matcher}
  */
  readonly matcher: string;
  /**
  * Resource attribute key
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/dynatrace-oss/dynatrace/1.86.0/docs/resources/vulnerability_third_party_attr#resource_attribute_key VulnerabilityThirdPartyAttr#resource_attribute_key}
  */
  readonly resourceAttributeKey: string;
  /**
  * Resource attribute value
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/dynatrace-oss/dynatrace/1.86.0/docs/resources/vulnerability_third_party_attr#resource_attribute_value VulnerabilityThirdPartyAttr#resource_attribute_value}
  */
  readonly resourceAttributeValue?: string;
}

export function vulnerabilityThirdPartyAttrResourceAttributeConditionsResourceAttributeConditionToTerraform(struct?: VulnerabilityThirdPartyAttrResourceAttributeConditionsResourceAttributeCondition | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    matcher: cdktf.stringToTerraform(struct!.matcher),
    resource_attribute_key: cdktf.stringToTerraform(struct!.resourceAttributeKey),
    resource_attribute_value: cdktf.stringToTerraform(struct!.resourceAttributeValue),
  }
}


export function vulnerabilityThirdPartyAttrResourceAttributeConditionsResourceAttributeConditionToHclTerraform(struct?: VulnerabilityThirdPartyAttrResourceAttributeConditionsResourceAttributeCondition | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    matcher: {
      value: cdktf.stringToHclTerraform(struct!.matcher),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    resource_attribute_key: {
      value: cdktf.stringToHclTerraform(struct!.resourceAttributeKey),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    resource_attribute_value: {
      value: cdktf.stringToHclTerraform(struct!.resourceAttributeValue),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class VulnerabilityThirdPartyAttrResourceAttributeConditionsResourceAttributeConditionOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): VulnerabilityThirdPartyAttrResourceAttributeConditionsResourceAttributeCondition | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._matcher !== undefined) {
      hasAnyValues = true;
      internalValueResult.matcher = this._matcher;
    }
    if (this._resourceAttributeKey !== undefined) {
      hasAnyValues = true;
      internalValueResult.resourceAttributeKey = this._resourceAttributeKey;
    }
    if (this._resourceAttributeValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.resourceAttributeValue = this._resourceAttributeValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: VulnerabilityThirdPartyAttrResourceAttributeConditionsResourceAttributeCondition | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._matcher = undefined;
      this._resourceAttributeKey = undefined;
      this._resourceAttributeValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._matcher = value.matcher;
      this._resourceAttributeKey = value.resourceAttributeKey;
      this._resourceAttributeValue = value.resourceAttributeValue;
    }
  }

  // matcher - computed: false, optional: false, required: true
  private _matcher?: string; 
  public get matcher() {
    return this.getStringAttribute('matcher');
  }
  public set matcher(value: string) {
    this._matcher = value;
  }
  // Temporarily expose input value. Use with caution.
  public get matcherInput() {
    return this._matcher;
  }

  // resource_attribute_key - computed: false, optional: false, required: true
  private _resourceAttributeKey?: string; 
  public get resourceAttributeKey() {
    return this.getStringAttribute('resource_attribute_key');
  }
  public set resourceAttributeKey(value: string) {
    this._resourceAttributeKey = value;
  }
  // Temporarily expose input value. Use with caution.
  public get resourceAttributeKeyInput() {
    return this._resourceAttributeKey;
  }

  // resource_attribute_value - computed: false, optional: true, required: false
  private _resourceAttributeValue?: string; 
  public get resourceAttributeValue() {
    return this.getStringAttribute('resource_attribute_value');
  }
  public set resourceAttributeValue(value: string) {
    this._resourceAttributeValue = value;
  }
  public resetResourceAttributeValue() {
    this._resourceAttributeValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get resourceAttributeValueInput() {
    return this._resourceAttributeValue;
  }
}

export class VulnerabilityThirdPartyAttrResourceAttributeConditionsResourceAttributeConditionList extends cdktf.ComplexList {
  public internalValue? : VulnerabilityThirdPartyAttrResourceAttributeConditionsResourceAttributeCondition[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): VulnerabilityThirdPartyAttrResourceAttributeConditionsResourceAttributeConditionOutputReference {
    return new VulnerabilityThirdPartyAttrResourceAttributeConditionsResourceAttributeConditionOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface VulnerabilityThirdPartyAttrResourceAttributeConditions {
  /**
  * resource_attribute_condition block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/dynatrace-oss/dynatrace/1.86.0/docs/resources/vulnerability_third_party_attr#resource_attribute_condition VulnerabilityThirdPartyAttr#resource_attribute_condition}
  */
  readonly resourceAttributeCondition: VulnerabilityThirdPartyAttrResourceAttributeConditionsResourceAttributeCondition[] | cdktf.IResolvable;
}

export function vulnerabilityThirdPartyAttrResourceAttributeConditionsToTerraform(struct?: VulnerabilityThirdPartyAttrResourceAttributeConditionsOutputReference | VulnerabilityThirdPartyAttrResourceAttributeConditions): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    resource_attribute_condition: cdktf.listMapper(vulnerabilityThirdPartyAttrResourceAttributeConditionsResourceAttributeConditionToTerraform, true)(struct!.resourceAttributeCondition),
  }
}


export function vulnerabilityThirdPartyAttrResourceAttributeConditionsToHclTerraform(struct?: VulnerabilityThirdPartyAttrResourceAttributeConditionsOutputReference | VulnerabilityThirdPartyAttrResourceAttributeConditions): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    resource_attribute_condition: {
      value: cdktf.listMapperHcl(vulnerabilityThirdPartyAttrResourceAttributeConditionsResourceAttributeConditionToHclTerraform, true)(struct!.resourceAttributeCondition),
      isBlock: true,
      type: "list",
      storageClassType: "VulnerabilityThirdPartyAttrResourceAttributeConditionsResourceAttributeConditionList",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class VulnerabilityThirdPartyAttrResourceAttributeConditionsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false, 0);
  }

  public get internalValue(): VulnerabilityThirdPartyAttrResourceAttributeConditions | undefined {
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._resourceAttributeCondition?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.resourceAttributeCondition = this._resourceAttributeCondition?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: VulnerabilityThirdPartyAttrResourceAttributeConditions | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this._resourceAttributeCondition.internalValue = undefined;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this._resourceAttributeCondition.internalValue = value.resourceAttributeCondition;
    }
  }

  // resource_attribute_condition - computed: false, optional: false, required: true
  private _resourceAttributeCondition = new VulnerabilityThirdPartyAttrResourceAttributeConditionsResourceAttributeConditionList(this, "resource_attribute_condition", false);
  public get resourceAttributeCondition() {
    return this._resourceAttributeCondition;
  }
  public putResourceAttributeCondition(value: VulnerabilityThirdPartyAttrResourceAttributeConditionsResourceAttributeCondition[] | cdktf.IResolvable) {
    this._resourceAttributeCondition.internalValue = value;
  }
  // Temporarily expose input value. Use with caution.
  public get resourceAttributeConditionInput() {
    return this._resourceAttributeCondition.internalValue;
  }
}
export interface VulnerabilityThirdPartyAttrVulnerabilityDetectionControl {
  /**
  * Possible Values: `MONITORING_OFF`, `MONITORING_ON`
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/dynatrace-oss/dynatrace/1.86.0/docs/resources/vulnerability_third_party_attr#monitoring_mode VulnerabilityThirdPartyAttr#monitoring_mode}
  */
  readonly monitoringMode: string;
}

export function vulnerabilityThirdPartyAttrVulnerabilityDetectionControlToTerraform(struct?: VulnerabilityThirdPartyAttrVulnerabilityDetectionControlOutputReference | VulnerabilityThirdPartyAttrVulnerabilityDetectionControl): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    monitoring_mode: cdktf.stringToTerraform(struct!.monitoringMode),
  }
}


export function vulnerabilityThirdPartyAttrVulnerabilityDetectionControlToHclTerraform(struct?: VulnerabilityThirdPartyAttrVulnerabilityDetectionControlOutputReference | VulnerabilityThirdPartyAttrVulnerabilityDetectionControl): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    monitoring_mode: {
      value: cdktf.stringToHclTerraform(struct!.monitoringMode),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class VulnerabilityThirdPartyAttrVulnerabilityDetectionControlOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false, 0);
  }

  public get internalValue(): VulnerabilityThirdPartyAttrVulnerabilityDetectionControl | undefined {
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._monitoringMode !== undefined) {
      hasAnyValues = true;
      internalValueResult.monitoringMode = this._monitoringMode;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: VulnerabilityThirdPartyAttrVulnerabilityDetectionControl | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this._monitoringMode = undefined;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this._monitoringMode = value.monitoringMode;
    }
  }

  // monitoring_mode - computed: false, optional: false, required: true
  private _monitoringMode?: string; 
  public get monitoringMode() {
    return this.getStringAttribute('monitoring_mode');
  }
  public set monitoringMode(value: string) {
    this._monitoringMode = value;
  }
  // Temporarily expose input value. Use with caution.
  public get monitoringModeInput() {
    return this._monitoringMode;
  }
}

/**
* Represents a {@link https://registry.terraform.io/providers/dynatrace-oss/dynatrace/1.86.0/docs/resources/vulnerability_third_party_attr dynatrace_vulnerability_third_party_attr}
*/
export class VulnerabilityThirdPartyAttr extends cdktf.TerraformResource {

  // =================
  // STATIC PROPERTIES
  // =================
  public static readonly tfResourceType = "dynatrace_vulnerability_third_party_attr";

  // ==============
  // STATIC Methods
  // ==============
  /**
  * Generates CDKTF code for importing a VulnerabilityThirdPartyAttr resource upon running "cdktf plan <stack-name>"
  * @param scope The scope in which to define this construct
  * @param importToId The construct id used in the generated config for the VulnerabilityThirdPartyAttr to import
  * @param importFromId The id of the existing VulnerabilityThirdPartyAttr that should be imported. Refer to the {@link https://registry.terraform.io/providers/dynatrace-oss/dynatrace/1.86.0/docs/resources/vulnerability_third_party_attr#import import section} in the documentation of this resource for the id to use
  * @param provider? Optional instance of the provider where the VulnerabilityThirdPartyAttr to import is found
  */
  public static generateConfigForImport(scope: Construct, importToId: string, importFromId: string, provider?: cdktf.TerraformProvider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "dynatrace_vulnerability_third_party_attr", importId: importFromId, provider });
      }

  // ===========
  // INITIALIZER
  // ===========

  /**
  * Create a new {@link https://registry.terraform.io/providers/dynatrace-oss/dynatrace/1.86.0/docs/resources/vulnerability_third_party_attr dynatrace_vulnerability_third_party_attr} Resource
  *
  * @param scope The scope in which to define this construct
  * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
  * @param options VulnerabilityThirdPartyAttrConfig
  */
  public constructor(scope: Construct, id: string, config: VulnerabilityThirdPartyAttrConfig) {
    super(scope, id, {
      terraformResourceType: 'dynatrace_vulnerability_third_party_attr',
      terraformGeneratorMetadata: {
        providerName: 'dynatrace',
        providerVersion: '1.86.0'
      },
      provider: config.provider,
      dependsOn: config.dependsOn,
      count: config.count,
      lifecycle: config.lifecycle,
      provisioners: config.provisioners,
      connection: config.connection,
      forEach: config.forEach
    });
    this._enabled = config.enabled;
    this._id = config.id;
    this._insertAfter = config.insertAfter;
    this._ruleName = config.ruleName;
    this._metadata.internalValue = config.metadata;
    this._resourceAttributeConditions.internalValue = config.resourceAttributeConditions;
    this._vulnerabilityDetectionControl.internalValue = config.vulnerabilityDetectionControl;
  }

  // ==========
  // ATTRIBUTES
  // ==========

  // enabled - computed: false, optional: false, required: true
  private _enabled?: boolean | cdktf.IResolvable; 
  public get enabled() {
    return this.getBooleanAttribute('enabled');
  }
  public set enabled(value: boolean | cdktf.IResolvable) {
    this._enabled = value;
  }
  // Temporarily expose input value. Use with caution.
  public get enabledInput() {
    return this._enabled;
  }

  // id - computed: true, optional: true, required: false
  private _id?: string; 
  public get id() {
    return this.getStringAttribute('id');
  }
  public set id(value: string) {
    this._id = value;
  }
  public resetId() {
    this._id = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get idInput() {
    return this._id;
  }

  // insert_after - computed: true, optional: true, required: false
  private _insertAfter?: string; 
  public get insertAfter() {
    return this.getStringAttribute('insert_after');
  }
  public set insertAfter(value: string) {
    this._insertAfter = value;
  }
  public resetInsertAfter() {
    this._insertAfter = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get insertAfterInput() {
    return this._insertAfter;
  }

  // rule_name - computed: false, optional: true, required: false
  private _ruleName?: string; 
  public get ruleName() {
    return this.getStringAttribute('rule_name');
  }
  public set ruleName(value: string) {
    this._ruleName = value;
  }
  public resetRuleName() {
    this._ruleName = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get ruleNameInput() {
    return this._ruleName;
  }

  // metadata - computed: false, optional: false, required: true
  private _metadata = new VulnerabilityThirdPartyAttrMetadataOutputReference(this, "metadata");
  public get metadata() {
    return this._metadata;
  }
  public putMetadata(value: VulnerabilityThirdPartyAttrMetadata) {
    this._metadata.internalValue = value;
  }
  // Temporarily expose input value. Use with caution.
  public get metadataInput() {
    return this._metadata.internalValue;
  }

  // resource_attribute_conditions - computed: false, optional: true, required: false
  private _resourceAttributeConditions = new VulnerabilityThirdPartyAttrResourceAttributeConditionsOutputReference(this, "resource_attribute_conditions");
  public get resourceAttributeConditions() {
    return this._resourceAttributeConditions;
  }
  public putResourceAttributeConditions(value: VulnerabilityThirdPartyAttrResourceAttributeConditions) {
    this._resourceAttributeConditions.internalValue = value;
  }
  public resetResourceAttributeConditions() {
    this._resourceAttributeConditions.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get resourceAttributeConditionsInput() {
    return this._resourceAttributeConditions.internalValue;
  }

  // vulnerability_detection_control - computed: false, optional: false, required: true
  private _vulnerabilityDetectionControl = new VulnerabilityThirdPartyAttrVulnerabilityDetectionControlOutputReference(this, "vulnerability_detection_control");
  public get vulnerabilityDetectionControl() {
    return this._vulnerabilityDetectionControl;
  }
  public putVulnerabilityDetectionControl(value: VulnerabilityThirdPartyAttrVulnerabilityDetectionControl) {
    this._vulnerabilityDetectionControl.internalValue = value;
  }
  // Temporarily expose input value. Use with caution.
  public get vulnerabilityDetectionControlInput() {
    return this._vulnerabilityDetectionControl.internalValue;
  }

  // =========
  // SYNTHESIS
  // =========

  protected synthesizeAttributes(): { [name: string]: any } {
    return {
      enabled: cdktf.booleanToTerraform(this._enabled),
      id: cdktf.stringToTerraform(this._id),
      insert_after: cdktf.stringToTerraform(this._insertAfter),
      rule_name: cdktf.stringToTerraform(this._ruleName),
      metadata: vulnerabilityThirdPartyAttrMetadataToTerraform(this._metadata.internalValue),
      resource_attribute_conditions: vulnerabilityThirdPartyAttrResourceAttributeConditionsToTerraform(this._resourceAttributeConditions.internalValue),
      vulnerability_detection_control: vulnerabilityThirdPartyAttrVulnerabilityDetectionControlToTerraform(this._vulnerabilityDetectionControl.internalValue),
    };
  }

  protected synthesizeHclAttributes(): { [name: string]: any } {
    const attrs = {
      enabled: {
        value: cdktf.booleanToHclTerraform(this._enabled),
        isBlock: false,
        type: "simple",
        storageClassType: "boolean",
      },
      id: {
        value: cdktf.stringToHclTerraform(this._id),
        isBlock: false,
        type: "simple",
        storageClassType: "string",
      },
      insert_after: {
        value: cdktf.stringToHclTerraform(this._insertAfter),
        isBlock: false,
        type: "simple",
        storageClassType: "string",
      },
      rule_name: {
        value: cdktf.stringToHclTerraform(this._ruleName),
        isBlock: false,
        type: "simple",
        storageClassType: "string",
      },
      metadata: {
        value: vulnerabilityThirdPartyAttrMetadataToHclTerraform(this._metadata.internalValue),
        isBlock: true,
        type: "list",
        storageClassType: "VulnerabilityThirdPartyAttrMetadataList",
      },
      resource_attribute_conditions: {
        value: vulnerabilityThirdPartyAttrResourceAttributeConditionsToHclTerraform(this._resourceAttributeConditions.internalValue),
        isBlock: true,
        type: "list",
        storageClassType: "VulnerabilityThirdPartyAttrResourceAttributeConditionsList",
      },
      vulnerability_detection_control: {
        value: vulnerabilityThirdPartyAttrVulnerabilityDetectionControlToHclTerraform(this._vulnerabilityDetectionControl.internalValue),
        isBlock: true,
        type: "list",
        storageClassType: "VulnerabilityThirdPartyAttrVulnerabilityDetectionControlList",
      },
    };

    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined ))
  }
}
