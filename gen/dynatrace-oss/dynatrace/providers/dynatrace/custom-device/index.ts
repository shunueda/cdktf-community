// https://registry.terraform.io/providers/dynatrace-oss/dynatrace/1.86.0/docs/resources/custom_device
// generated from terraform resource schema

import { Construct } from 'constructs';
import * as cdktf from 'cdktf';

// Configuration

export interface CustomDeviceConfig extends cdktf.TerraformMetaArguments {
  /**
  * The URL of a configuration web page for the custom device, such as a login page for a firewall or router.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/dynatrace-oss/dynatrace/1.86.0/docs/resources/custom_device#config_url CustomDevice#config_url}
  */
  readonly configUrl?: string;
  /**
  * The unique name of the custom device. This Id can either be provided in the resource or generated by Terraform when the resource is created. If you use the ID of an existing device, the respective parameters will be updated
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/dynatrace-oss/dynatrace/1.86.0/docs/resources/custom_device#custom_device_id CustomDevice#custom_device_id}
  */
  readonly customDeviceId?: string;
  /**
  * The name of the custom device, displayed in the UI.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/dynatrace-oss/dynatrace/1.86.0/docs/resources/custom_device#display_name CustomDevice#display_name}
  */
  readonly displayName: string;
  /**
  * The list of DNS names related to the custom device.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/dynatrace-oss/dynatrace/1.86.0/docs/resources/custom_device#dns_names CustomDevice#dns_names}
  */
  readonly dnsNames?: string[];
  /**
  * The icon to be displayed for your custom component within Smartscape. Provide the full URL of the icon file.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/dynatrace-oss/dynatrace/1.86.0/docs/resources/custom_device#favicon_url CustomDevice#favicon_url}
  */
  readonly faviconUrl?: string;
  /**
  * User defined group of entity. Changing the group requires a new custom device to be created.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/dynatrace-oss/dynatrace/1.86.0/docs/resources/custom_device#group CustomDevice#group}
  */
  readonly group?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/dynatrace-oss/dynatrace/1.86.0/docs/resources/custom_device#id CustomDevice#id}
  *
  * Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2.
  * If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
  */
  readonly id?: string;
  /**
  * The list of IP addresses that belong to the custom device.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/dynatrace-oss/dynatrace/1.86.0/docs/resources/custom_device#ip_addresses CustomDevice#ip_addresses}
  */
  readonly ipAddresses?: string[];
  /**
  * The list of ports the custom devices listens to.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/dynatrace-oss/dynatrace/1.86.0/docs/resources/custom_device#listen_ports CustomDevice#listen_ports}
  */
  readonly listenPorts?: number[];
  /**
  * The list of key-value pair properties that will be shown beneath the infographics of your custom device.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/dynatrace-oss/dynatrace/1.86.0/docs/resources/custom_device#properties CustomDevice#properties}
  */
  readonly properties?: { [key: string]: string };
  /**
  * The list of key-value pair properties that will be shown beneath the infographics of your custom device.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/dynatrace-oss/dynatrace/1.86.0/docs/resources/custom_device#props CustomDevice#props}
  */
  readonly props?: string;
  /**
  * The technology type definition of the custom device.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/dynatrace-oss/dynatrace/1.86.0/docs/resources/custom_device#type CustomDevice#type}
  */
  readonly type?: string;
  /**
  * If `true` the custom device will be handled as if it was created via UI. It will be refreshed automatically and won't age out. This attribute is taken into consideration when creating the custom device. Changing it afterwards won't have an effect.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/dynatrace-oss/dynatrace/1.86.0/docs/resources/custom_device#ui_based CustomDevice#ui_based}
  */
  readonly uiBased?: boolean | cdktf.IResolvable;
}

/**
* Represents a {@link https://registry.terraform.io/providers/dynatrace-oss/dynatrace/1.86.0/docs/resources/custom_device dynatrace_custom_device}
*/
export class CustomDevice extends cdktf.TerraformResource {

  // =================
  // STATIC PROPERTIES
  // =================
  public static readonly tfResourceType = "dynatrace_custom_device";

  // ==============
  // STATIC Methods
  // ==============
  /**
  * Generates CDKTF code for importing a CustomDevice resource upon running "cdktf plan <stack-name>"
  * @param scope The scope in which to define this construct
  * @param importToId The construct id used in the generated config for the CustomDevice to import
  * @param importFromId The id of the existing CustomDevice that should be imported. Refer to the {@link https://registry.terraform.io/providers/dynatrace-oss/dynatrace/1.86.0/docs/resources/custom_device#import import section} in the documentation of this resource for the id to use
  * @param provider? Optional instance of the provider where the CustomDevice to import is found
  */
  public static generateConfigForImport(scope: Construct, importToId: string, importFromId: string, provider?: cdktf.TerraformProvider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "dynatrace_custom_device", importId: importFromId, provider });
      }

  // ===========
  // INITIALIZER
  // ===========

  /**
  * Create a new {@link https://registry.terraform.io/providers/dynatrace-oss/dynatrace/1.86.0/docs/resources/custom_device dynatrace_custom_device} Resource
  *
  * @param scope The scope in which to define this construct
  * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
  * @param options CustomDeviceConfig
  */
  public constructor(scope: Construct, id: string, config: CustomDeviceConfig) {
    super(scope, id, {
      terraformResourceType: 'dynatrace_custom_device',
      terraformGeneratorMetadata: {
        providerName: 'dynatrace',
        providerVersion: '1.86.0'
      },
      provider: config.provider,
      dependsOn: config.dependsOn,
      count: config.count,
      lifecycle: config.lifecycle,
      provisioners: config.provisioners,
      connection: config.connection,
      forEach: config.forEach
    });
    this._configUrl = config.configUrl;
    this._customDeviceId = config.customDeviceId;
    this._displayName = config.displayName;
    this._dnsNames = config.dnsNames;
    this._faviconUrl = config.faviconUrl;
    this._group = config.group;
    this._id = config.id;
    this._ipAddresses = config.ipAddresses;
    this._listenPorts = config.listenPorts;
    this._properties = config.properties;
    this._props = config.props;
    this._type = config.type;
    this._uiBased = config.uiBased;
  }

  // ==========
  // ATTRIBUTES
  // ==========

  // config_url - computed: false, optional: true, required: false
  private _configUrl?: string; 
  public get configUrl() {
    return this.getStringAttribute('config_url');
  }
  public set configUrl(value: string) {
    this._configUrl = value;
  }
  public resetConfigUrl() {
    this._configUrl = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get configUrlInput() {
    return this._configUrl;
  }

  // custom_device_id - computed: true, optional: true, required: false
  private _customDeviceId?: string; 
  public get customDeviceId() {
    return this.getStringAttribute('custom_device_id');
  }
  public set customDeviceId(value: string) {
    this._customDeviceId = value;
  }
  public resetCustomDeviceId() {
    this._customDeviceId = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get customDeviceIdInput() {
    return this._customDeviceId;
  }

  // display_name - computed: false, optional: false, required: true
  private _displayName?: string; 
  public get displayName() {
    return this.getStringAttribute('display_name');
  }
  public set displayName(value: string) {
    this._displayName = value;
  }
  // Temporarily expose input value. Use with caution.
  public get displayNameInput() {
    return this._displayName;
  }

  // dns_names - computed: false, optional: true, required: false
  private _dnsNames?: string[]; 
  public get dnsNames() {
    return cdktf.Fn.tolist(this.getListAttribute('dns_names'));
  }
  public set dnsNames(value: string[]) {
    this._dnsNames = value;
  }
  public resetDnsNames() {
    this._dnsNames = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get dnsNamesInput() {
    return this._dnsNames;
  }

  // entity_id - computed: true, optional: false, required: false
  public get entityId() {
    return this.getStringAttribute('entity_id');
  }

  // favicon_url - computed: false, optional: true, required: false
  private _faviconUrl?: string; 
  public get faviconUrl() {
    return this.getStringAttribute('favicon_url');
  }
  public set faviconUrl(value: string) {
    this._faviconUrl = value;
  }
  public resetFaviconUrl() {
    this._faviconUrl = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get faviconUrlInput() {
    return this._faviconUrl;
  }

  // group - computed: true, optional: true, required: false
  private _group?: string; 
  public get group() {
    return this.getStringAttribute('group');
  }
  public set group(value: string) {
    this._group = value;
  }
  public resetGroup() {
    this._group = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get groupInput() {
    return this._group;
  }

  // id - computed: true, optional: true, required: false
  private _id?: string; 
  public get id() {
    return this.getStringAttribute('id');
  }
  public set id(value: string) {
    this._id = value;
  }
  public resetId() {
    this._id = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get idInput() {
    return this._id;
  }

  // ip_addresses - computed: false, optional: true, required: false
  private _ipAddresses?: string[]; 
  public get ipAddresses() {
    return cdktf.Fn.tolist(this.getListAttribute('ip_addresses'));
  }
  public set ipAddresses(value: string[]) {
    this._ipAddresses = value;
  }
  public resetIpAddresses() {
    this._ipAddresses = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get ipAddressesInput() {
    return this._ipAddresses;
  }

  // listen_ports - computed: false, optional: true, required: false
  private _listenPorts?: number[]; 
  public get listenPorts() {
    return cdktf.Token.asNumberList(cdktf.Fn.tolist(this.getNumberListAttribute('listen_ports')));
  }
  public set listenPorts(value: number[]) {
    this._listenPorts = value;
  }
  public resetListenPorts() {
    this._listenPorts = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get listenPortsInput() {
    return this._listenPorts;
  }

  // properties - computed: false, optional: true, required: false
  private _properties?: { [key: string]: string }; 
  public get properties() {
    return this.getStringMapAttribute('properties');
  }
  public set properties(value: { [key: string]: string }) {
    this._properties = value;
  }
  public resetProperties() {
    this._properties = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get propertiesInput() {
    return this._properties;
  }

  // props - computed: false, optional: true, required: false
  private _props?: string; 
  public get props() {
    return this.getStringAttribute('props');
  }
  public set props(value: string) {
    this._props = value;
  }
  public resetProps() {
    this._props = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get propsInput() {
    return this._props;
  }

  // type - computed: true, optional: true, required: false
  private _type?: string; 
  public get type() {
    return this.getStringAttribute('type');
  }
  public set type(value: string) {
    this._type = value;
  }
  public resetType() {
    this._type = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get typeInput() {
    return this._type;
  }

  // ui_based - computed: false, optional: true, required: false
  private _uiBased?: boolean | cdktf.IResolvable; 
  public get uiBased() {
    return this.getBooleanAttribute('ui_based');
  }
  public set uiBased(value: boolean | cdktf.IResolvable) {
    this._uiBased = value;
  }
  public resetUiBased() {
    this._uiBased = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get uiBasedInput() {
    return this._uiBased;
  }

  // =========
  // SYNTHESIS
  // =========

  protected synthesizeAttributes(): { [name: string]: any } {
    return {
      config_url: cdktf.stringToTerraform(this._configUrl),
      custom_device_id: cdktf.stringToTerraform(this._customDeviceId),
      display_name: cdktf.stringToTerraform(this._displayName),
      dns_names: cdktf.listMapper(cdktf.stringToTerraform, false)(this._dnsNames),
      favicon_url: cdktf.stringToTerraform(this._faviconUrl),
      group: cdktf.stringToTerraform(this._group),
      id: cdktf.stringToTerraform(this._id),
      ip_addresses: cdktf.listMapper(cdktf.stringToTerraform, false)(this._ipAddresses),
      listen_ports: cdktf.listMapper(cdktf.numberToTerraform, false)(this._listenPorts),
      properties: cdktf.hashMapper(cdktf.stringToTerraform)(this._properties),
      props: cdktf.stringToTerraform(this._props),
      type: cdktf.stringToTerraform(this._type),
      ui_based: cdktf.booleanToTerraform(this._uiBased),
    };
  }

  protected synthesizeHclAttributes(): { [name: string]: any } {
    const attrs = {
      config_url: {
        value: cdktf.stringToHclTerraform(this._configUrl),
        isBlock: false,
        type: "simple",
        storageClassType: "string",
      },
      custom_device_id: {
        value: cdktf.stringToHclTerraform(this._customDeviceId),
        isBlock: false,
        type: "simple",
        storageClassType: "string",
      },
      display_name: {
        value: cdktf.stringToHclTerraform(this._displayName),
        isBlock: false,
        type: "simple",
        storageClassType: "string",
      },
      dns_names: {
        value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(this._dnsNames),
        isBlock: false,
        type: "set",
        storageClassType: "stringList",
      },
      favicon_url: {
        value: cdktf.stringToHclTerraform(this._faviconUrl),
        isBlock: false,
        type: "simple",
        storageClassType: "string",
      },
      group: {
        value: cdktf.stringToHclTerraform(this._group),
        isBlock: false,
        type: "simple",
        storageClassType: "string",
      },
      id: {
        value: cdktf.stringToHclTerraform(this._id),
        isBlock: false,
        type: "simple",
        storageClassType: "string",
      },
      ip_addresses: {
        value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(this._ipAddresses),
        isBlock: false,
        type: "set",
        storageClassType: "stringList",
      },
      listen_ports: {
        value: cdktf.listMapperHcl(cdktf.numberToHclTerraform, false)(this._listenPorts),
        isBlock: false,
        type: "set",
        storageClassType: "numberList",
      },
      properties: {
        value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._properties),
        isBlock: false,
        type: "map",
        storageClassType: "stringMap",
      },
      props: {
        value: cdktf.stringToHclTerraform(this._props),
        isBlock: false,
        type: "simple",
        storageClassType: "string",
      },
      type: {
        value: cdktf.stringToHclTerraform(this._type),
        isBlock: false,
        type: "simple",
        storageClassType: "string",
      },
      ui_based: {
        value: cdktf.booleanToHclTerraform(this._uiBased),
        isBlock: false,
        type: "simple",
        storageClassType: "boolean",
      },
    };

    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined ))
  }
}
