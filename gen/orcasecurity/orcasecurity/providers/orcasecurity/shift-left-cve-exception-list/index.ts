// https://registry.terraform.io/providers/orcasecurity/orcasecurity/0.0.23/docs/resources/shift_left_cve_exception_list
// generated from terraform resource schema

import { Construct } from 'constructs';
import * as cdktf from 'cdktf';

// Configuration

export interface ShiftLeftCveExceptionListConfig extends cdktf.TerraformMetaArguments {
  /**
  * Shift Left exception list description.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/orcasecurity/orcasecurity/0.0.23/docs/resources/shift_left_cve_exception_list#description ShiftLeftCveExceptionList#description}
  */
  readonly description?: string;
  /**
  * Whether or not the exception list is disabled.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/orcasecurity/orcasecurity/0.0.23/docs/resources/shift_left_cve_exception_list#disabled ShiftLeftCveExceptionList#disabled}
  */
  readonly disabled: boolean | cdktf.IResolvable;
  /**
  * Shift Left exception list name.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/orcasecurity/orcasecurity/0.0.23/docs/resources/shift_left_cve_exception_list#name ShiftLeftCveExceptionList#name}
  */
  readonly name: string;
  /**
  * [Not yet supported] Projects to which this exception list applies.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/orcasecurity/orcasecurity/0.0.23/docs/resources/shift_left_cve_exception_list#projects ShiftLeftCveExceptionList#projects}
  */
  readonly projects?: ShiftLeftCveExceptionListProjects[] | cdktf.IResolvable;
  /**
  * Vulnerabilities that compose this exception list.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/orcasecurity/orcasecurity/0.0.23/docs/resources/shift_left_cve_exception_list#vulnerabilities ShiftLeftCveExceptionList#vulnerabilities}
  */
  readonly vulnerabilities?: ShiftLeftCveExceptionListVulnerabilities[] | cdktf.IResolvable;
}
export interface ShiftLeftCveExceptionListProjects {
  /**
  * The project's ID.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/orcasecurity/orcasecurity/0.0.23/docs/resources/shift_left_cve_exception_list#id ShiftLeftCveExceptionList#id}
  *
  * Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2.
  * If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
  */
  readonly id: string;
  /**
  * The project's key.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/orcasecurity/orcasecurity/0.0.23/docs/resources/shift_left_cve_exception_list#key ShiftLeftCveExceptionList#key}
  */
  readonly key: string;
  /**
  * The project's name.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/orcasecurity/orcasecurity/0.0.23/docs/resources/shift_left_cve_exception_list#name ShiftLeftCveExceptionList#name}
  */
  readonly name: string;
}

export function shiftLeftCveExceptionListProjectsToTerraform(struct?: ShiftLeftCveExceptionListProjects | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    id: cdktf.stringToTerraform(struct!.id),
    key: cdktf.stringToTerraform(struct!.key),
    name: cdktf.stringToTerraform(struct!.name),
  }
}


export function shiftLeftCveExceptionListProjectsToHclTerraform(struct?: ShiftLeftCveExceptionListProjects | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    id: {
      value: cdktf.stringToHclTerraform(struct!.id),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    key: {
      value: cdktf.stringToHclTerraform(struct!.key),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    name: {
      value: cdktf.stringToHclTerraform(struct!.name),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class ShiftLeftCveExceptionListProjectsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): ShiftLeftCveExceptionListProjects | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._id !== undefined) {
      hasAnyValues = true;
      internalValueResult.id = this._id;
    }
    if (this._key !== undefined) {
      hasAnyValues = true;
      internalValueResult.key = this._key;
    }
    if (this._name !== undefined) {
      hasAnyValues = true;
      internalValueResult.name = this._name;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: ShiftLeftCveExceptionListProjects | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._id = undefined;
      this._key = undefined;
      this._name = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._id = value.id;
      this._key = value.key;
      this._name = value.name;
    }
  }

  // id - computed: false, optional: false, required: true
  private _id?: string; 
  public get id() {
    return this.getStringAttribute('id');
  }
  public set id(value: string) {
    this._id = value;
  }
  // Temporarily expose input value. Use with caution.
  public get idInput() {
    return this._id;
  }

  // key - computed: false, optional: false, required: true
  private _key?: string; 
  public get key() {
    return this.getStringAttribute('key');
  }
  public set key(value: string) {
    this._key = value;
  }
  // Temporarily expose input value. Use with caution.
  public get keyInput() {
    return this._key;
  }

  // name - computed: false, optional: false, required: true
  private _name?: string; 
  public get name() {
    return this.getStringAttribute('name');
  }
  public set name(value: string) {
    this._name = value;
  }
  // Temporarily expose input value. Use with caution.
  public get nameInput() {
    return this._name;
  }
}

export class ShiftLeftCveExceptionListProjectsList extends cdktf.ComplexList {
  public internalValue? : ShiftLeftCveExceptionListProjects[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): ShiftLeftCveExceptionListProjectsOutputReference {
    return new ShiftLeftCveExceptionListProjectsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface ShiftLeftCveExceptionListVulnerabilities {
  /**
  * CVE ID of the vulnerability to except.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/orcasecurity/orcasecurity/0.0.23/docs/resources/shift_left_cve_exception_list#cve_id ShiftLeftCveExceptionList#cve_id}
  */
  readonly cveId: string;
  /**
  * Description (or justification, if that's how you want to use this field) of this exception within the exception list.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/orcasecurity/orcasecurity/0.0.23/docs/resources/shift_left_cve_exception_list#description ShiftLeftCveExceptionList#description}
  */
  readonly description: string;
  /**
  * Whether or not this vulnerability within the exception list is disabled.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/orcasecurity/orcasecurity/0.0.23/docs/resources/shift_left_cve_exception_list#disabled ShiftLeftCveExceptionList#disabled}
  */
  readonly disabled: boolean | cdktf.IResolvable;
  /**
  * Expiration date. Format should be "YYYY/MM/DD". To permanently exclude the vulnerability, do not use this field. To temporarily exclude the vulnerability, specify an Expiration Date. After this date, the vulnerability is no longer excluded.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/orcasecurity/orcasecurity/0.0.23/docs/resources/shift_left_cve_exception_list#expiration ShiftLeftCveExceptionList#expiration}
  */
  readonly expiration?: string;
  /**
  * [NOT YET SUPPORTED] Code repositories (identified by their URLs) to associate with this exception list.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/orcasecurity/orcasecurity/0.0.23/docs/resources/shift_left_cve_exception_list#repositories_urls ShiftLeftCveExceptionList#repositories_urls}
  */
  readonly repositoriesUrls?: string[];
}

export function shiftLeftCveExceptionListVulnerabilitiesToTerraform(struct?: ShiftLeftCveExceptionListVulnerabilities | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    cve_id: cdktf.stringToTerraform(struct!.cveId),
    description: cdktf.stringToTerraform(struct!.description),
    disabled: cdktf.booleanToTerraform(struct!.disabled),
    expiration: cdktf.stringToTerraform(struct!.expiration),
    repositories_urls: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.repositoriesUrls),
  }
}


export function shiftLeftCveExceptionListVulnerabilitiesToHclTerraform(struct?: ShiftLeftCveExceptionListVulnerabilities | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    cve_id: {
      value: cdktf.stringToHclTerraform(struct!.cveId),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    description: {
      value: cdktf.stringToHclTerraform(struct!.description),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    disabled: {
      value: cdktf.booleanToHclTerraform(struct!.disabled),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    expiration: {
      value: cdktf.stringToHclTerraform(struct!.expiration),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    repositories_urls: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.repositoriesUrls),
      isBlock: false,
      type: "list",
      storageClassType: "stringList",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class ShiftLeftCveExceptionListVulnerabilitiesOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): ShiftLeftCveExceptionListVulnerabilities | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._cveId !== undefined) {
      hasAnyValues = true;
      internalValueResult.cveId = this._cveId;
    }
    if (this._description !== undefined) {
      hasAnyValues = true;
      internalValueResult.description = this._description;
    }
    if (this._disabled !== undefined) {
      hasAnyValues = true;
      internalValueResult.disabled = this._disabled;
    }
    if (this._expiration !== undefined) {
      hasAnyValues = true;
      internalValueResult.expiration = this._expiration;
    }
    if (this._repositoriesUrls !== undefined) {
      hasAnyValues = true;
      internalValueResult.repositoriesUrls = this._repositoriesUrls;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: ShiftLeftCveExceptionListVulnerabilities | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._cveId = undefined;
      this._description = undefined;
      this._disabled = undefined;
      this._expiration = undefined;
      this._repositoriesUrls = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._cveId = value.cveId;
      this._description = value.description;
      this._disabled = value.disabled;
      this._expiration = value.expiration;
      this._repositoriesUrls = value.repositoriesUrls;
    }
  }

  // cve_id - computed: false, optional: false, required: true
  private _cveId?: string; 
  public get cveId() {
    return this.getStringAttribute('cve_id');
  }
  public set cveId(value: string) {
    this._cveId = value;
  }
  // Temporarily expose input value. Use with caution.
  public get cveIdInput() {
    return this._cveId;
  }

  // description - computed: false, optional: false, required: true
  private _description?: string; 
  public get description() {
    return this.getStringAttribute('description');
  }
  public set description(value: string) {
    this._description = value;
  }
  // Temporarily expose input value. Use with caution.
  public get descriptionInput() {
    return this._description;
  }

  // disabled - computed: false, optional: false, required: true
  private _disabled?: boolean | cdktf.IResolvable; 
  public get disabled() {
    return this.getBooleanAttribute('disabled');
  }
  public set disabled(value: boolean | cdktf.IResolvable) {
    this._disabled = value;
  }
  // Temporarily expose input value. Use with caution.
  public get disabledInput() {
    return this._disabled;
  }

  // expiration - computed: false, optional: true, required: false
  private _expiration?: string; 
  public get expiration() {
    return this.getStringAttribute('expiration');
  }
  public set expiration(value: string) {
    this._expiration = value;
  }
  public resetExpiration() {
    this._expiration = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get expirationInput() {
    return this._expiration;
  }

  // repositories_urls - computed: false, optional: true, required: false
  private _repositoriesUrls?: string[]; 
  public get repositoriesUrls() {
    return this.getListAttribute('repositories_urls');
  }
  public set repositoriesUrls(value: string[]) {
    this._repositoriesUrls = value;
  }
  public resetRepositoriesUrls() {
    this._repositoriesUrls = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get repositoriesUrlsInput() {
    return this._repositoriesUrls;
  }
}

export class ShiftLeftCveExceptionListVulnerabilitiesList extends cdktf.ComplexList {
  public internalValue? : ShiftLeftCveExceptionListVulnerabilities[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): ShiftLeftCveExceptionListVulnerabilitiesOutputReference {
    return new ShiftLeftCveExceptionListVulnerabilitiesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}

/**
* Represents a {@link https://registry.terraform.io/providers/orcasecurity/orcasecurity/0.0.23/docs/resources/shift_left_cve_exception_list orcasecurity_shift_left_cve_exception_list}
*/
export class ShiftLeftCveExceptionList extends cdktf.TerraformResource {

  // =================
  // STATIC PROPERTIES
  // =================
  public static readonly tfResourceType = "orcasecurity_shift_left_cve_exception_list";

  // ==============
  // STATIC Methods
  // ==============
  /**
  * Generates CDKTF code for importing a ShiftLeftCveExceptionList resource upon running "cdktf plan <stack-name>"
  * @param scope The scope in which to define this construct
  * @param importToId The construct id used in the generated config for the ShiftLeftCveExceptionList to import
  * @param importFromId The id of the existing ShiftLeftCveExceptionList that should be imported. Refer to the {@link https://registry.terraform.io/providers/orcasecurity/orcasecurity/0.0.23/docs/resources/shift_left_cve_exception_list#import import section} in the documentation of this resource for the id to use
  * @param provider? Optional instance of the provider where the ShiftLeftCveExceptionList to import is found
  */
  public static generateConfigForImport(scope: Construct, importToId: string, importFromId: string, provider?: cdktf.TerraformProvider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "orcasecurity_shift_left_cve_exception_list", importId: importFromId, provider });
      }

  // ===========
  // INITIALIZER
  // ===========

  /**
  * Create a new {@link https://registry.terraform.io/providers/orcasecurity/orcasecurity/0.0.23/docs/resources/shift_left_cve_exception_list orcasecurity_shift_left_cve_exception_list} Resource
  *
  * @param scope The scope in which to define this construct
  * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
  * @param options ShiftLeftCveExceptionListConfig
  */
  public constructor(scope: Construct, id: string, config: ShiftLeftCveExceptionListConfig) {
    super(scope, id, {
      terraformResourceType: 'orcasecurity_shift_left_cve_exception_list',
      terraformGeneratorMetadata: {
        providerName: 'orcasecurity',
        providerVersion: '0.0.23'
      },
      provider: config.provider,
      dependsOn: config.dependsOn,
      count: config.count,
      lifecycle: config.lifecycle,
      provisioners: config.provisioners,
      connection: config.connection,
      forEach: config.forEach
    });
    this._description = config.description;
    this._disabled = config.disabled;
    this._name = config.name;
    this._projects.internalValue = config.projects;
    this._vulnerabilities.internalValue = config.vulnerabilities;
  }

  // ==========
  // ATTRIBUTES
  // ==========

  // description - computed: false, optional: true, required: false
  private _description?: string; 
  public get description() {
    return this.getStringAttribute('description');
  }
  public set description(value: string) {
    this._description = value;
  }
  public resetDescription() {
    this._description = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get descriptionInput() {
    return this._description;
  }

  // disabled - computed: false, optional: false, required: true
  private _disabled?: boolean | cdktf.IResolvable; 
  public get disabled() {
    return this.getBooleanAttribute('disabled');
  }
  public set disabled(value: boolean | cdktf.IResolvable) {
    this._disabled = value;
  }
  // Temporarily expose input value. Use with caution.
  public get disabledInput() {
    return this._disabled;
  }

  // id - computed: true, optional: false, required: false
  public get id() {
    return this.getStringAttribute('id');
  }

  // name - computed: false, optional: false, required: true
  private _name?: string; 
  public get name() {
    return this.getStringAttribute('name');
  }
  public set name(value: string) {
    this._name = value;
  }
  // Temporarily expose input value. Use with caution.
  public get nameInput() {
    return this._name;
  }

  // projects - computed: false, optional: true, required: false
  private _projects = new ShiftLeftCveExceptionListProjectsList(this, "projects", false);
  public get projects() {
    return this._projects;
  }
  public putProjects(value: ShiftLeftCveExceptionListProjects[] | cdktf.IResolvable) {
    this._projects.internalValue = value;
  }
  public resetProjects() {
    this._projects.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get projectsInput() {
    return this._projects.internalValue;
  }

  // vulnerabilities - computed: false, optional: true, required: false
  private _vulnerabilities = new ShiftLeftCveExceptionListVulnerabilitiesList(this, "vulnerabilities", false);
  public get vulnerabilities() {
    return this._vulnerabilities;
  }
  public putVulnerabilities(value: ShiftLeftCveExceptionListVulnerabilities[] | cdktf.IResolvable) {
    this._vulnerabilities.internalValue = value;
  }
  public resetVulnerabilities() {
    this._vulnerabilities.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get vulnerabilitiesInput() {
    return this._vulnerabilities.internalValue;
  }

  // =========
  // SYNTHESIS
  // =========

  protected synthesizeAttributes(): { [name: string]: any } {
    return {
      description: cdktf.stringToTerraform(this._description),
      disabled: cdktf.booleanToTerraform(this._disabled),
      name: cdktf.stringToTerraform(this._name),
      projects: cdktf.listMapper(shiftLeftCveExceptionListProjectsToTerraform, false)(this._projects.internalValue),
      vulnerabilities: cdktf.listMapper(shiftLeftCveExceptionListVulnerabilitiesToTerraform, false)(this._vulnerabilities.internalValue),
    };
  }

  protected synthesizeHclAttributes(): { [name: string]: any } {
    const attrs = {
      description: {
        value: cdktf.stringToHclTerraform(this._description),
        isBlock: false,
        type: "simple",
        storageClassType: "string",
      },
      disabled: {
        value: cdktf.booleanToHclTerraform(this._disabled),
        isBlock: false,
        type: "simple",
        storageClassType: "boolean",
      },
      name: {
        value: cdktf.stringToHclTerraform(this._name),
        isBlock: false,
        type: "simple",
        storageClassType: "string",
      },
      projects: {
        value: cdktf.listMapperHcl(shiftLeftCveExceptionListProjectsToHclTerraform, false)(this._projects.internalValue),
        isBlock: true,
        type: "list",
        storageClassType: "ShiftLeftCveExceptionListProjectsList",
      },
      vulnerabilities: {
        value: cdktf.listMapperHcl(shiftLeftCveExceptionListVulnerabilitiesToHclTerraform, false)(this._vulnerabilities.internalValue),
        isBlock: true,
        type: "list",
        storageClassType: "ShiftLeftCveExceptionListVulnerabilitiesList",
      },
    };

    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined ))
  }
}
