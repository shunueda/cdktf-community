// https://registry.terraform.io/providers/checkpointsw/infinity-next/1.2.0/docs/resources/inext_web_user_response
// generated from terraform resource schema

import { Construct } from 'constructs';
import * as cdktf from 'cdktf';

// Configuration

export interface InextWebUserResponseConfig extends cdktf.TerraformMetaArguments {
  /**
  * It is recommended to use a 403 (Forbidden) as a response code
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/checkpointsw/infinity-next/1.2.0/docs/resources/inext_web_user_response#http_response_code InextWebUserResponse#http_response_code}
  */
  readonly httpResponseCode?: number;
  /**
  * The body of the message to be shown to the user
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/checkpointsw/infinity-next/1.2.0/docs/resources/inext_web_user_response#message_body InextWebUserResponse#message_body}
  */
  readonly messageBody?: string;
  /**
  * The title of the web page to be shown to the user sending the malicious traffic
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/checkpointsw/infinity-next/1.2.0/docs/resources/inext_web_user_response#message_title InextWebUserResponse#message_title}
  */
  readonly messageTitle?: string;
  /**
  * The type of the web user response object
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/checkpointsw/infinity-next/1.2.0/docs/resources/inext_web_user_response#mode InextWebUserResponse#mode}
  */
  readonly mode: string;
  /**
  * The name of the resource, also acts as its unique ID
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/checkpointsw/infinity-next/1.2.0/docs/resources/inext_web_user_response#name InextWebUserResponse#name}
  */
  readonly name: string;
  /**
  * The client will be redirected to the provided URL where you can provide any customized web page
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/checkpointsw/infinity-next/1.2.0/docs/resources/inext_web_user_response#redirect_url InextWebUserResponse#redirect_url}
  */
  readonly redirectUrl?: string;
  /**
  * The visibility of the web user response object
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/checkpointsw/infinity-next/1.2.0/docs/resources/inext_web_user_response#visibility InextWebUserResponse#visibility}
  */
  readonly visibility?: string;
  /**
  * When selected the redirect message will include this header with a value that provides an internal reference ID that will match a security log generated by the incident, if log triggers are configured
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/checkpointsw/infinity-next/1.2.0/docs/resources/inext_web_user_response#x_event_id InextWebUserResponse#x_event_id}
  */
  readonly xEventId?: boolean | cdktf.IResolvable;
}

/**
* Represents a {@link https://registry.terraform.io/providers/checkpointsw/infinity-next/1.2.0/docs/resources/inext_web_user_response inext_web_user_response}
*/
export class InextWebUserResponse extends cdktf.TerraformResource {

  // =================
  // STATIC PROPERTIES
  // =================
  public static readonly tfResourceType = "inext_web_user_response";

  // ==============
  // STATIC Methods
  // ==============
  /**
  * Generates CDKTF code for importing a InextWebUserResponse resource upon running "cdktf plan <stack-name>"
  * @param scope The scope in which to define this construct
  * @param importToId The construct id used in the generated config for the InextWebUserResponse to import
  * @param importFromId The id of the existing InextWebUserResponse that should be imported. Refer to the {@link https://registry.terraform.io/providers/checkpointsw/infinity-next/1.2.0/docs/resources/inext_web_user_response#import import section} in the documentation of this resource for the id to use
  * @param provider? Optional instance of the provider where the InextWebUserResponse to import is found
  */
  public static generateConfigForImport(scope: Construct, importToId: string, importFromId: string, provider?: cdktf.TerraformProvider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "inext_web_user_response", importId: importFromId, provider });
      }

  // ===========
  // INITIALIZER
  // ===========

  /**
  * Create a new {@link https://registry.terraform.io/providers/checkpointsw/infinity-next/1.2.0/docs/resources/inext_web_user_response inext_web_user_response} Resource
  *
  * @param scope The scope in which to define this construct
  * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
  * @param options InextWebUserResponseConfig
  */
  public constructor(scope: Construct, id: string, config: InextWebUserResponseConfig) {
    super(scope, id, {
      terraformResourceType: 'inext_web_user_response',
      terraformGeneratorMetadata: {
        providerName: 'infinity-next',
        providerVersion: '1.2.0'
      },
      provider: config.provider,
      dependsOn: config.dependsOn,
      count: config.count,
      lifecycle: config.lifecycle,
      provisioners: config.provisioners,
      connection: config.connection,
      forEach: config.forEach
    });
    this._httpResponseCode = config.httpResponseCode;
    this._messageBody = config.messageBody;
    this._messageTitle = config.messageTitle;
    this._mode = config.mode;
    this._name = config.name;
    this._redirectUrl = config.redirectUrl;
    this._visibility = config.visibility;
    this._xEventId = config.xEventId;
  }

  // ==========
  // ATTRIBUTES
  // ==========

  // http_response_code - computed: false, optional: true, required: false
  private _httpResponseCode?: number; 
  public get httpResponseCode() {
    return this.getNumberAttribute('http_response_code');
  }
  public set httpResponseCode(value: number) {
    this._httpResponseCode = value;
  }
  public resetHttpResponseCode() {
    this._httpResponseCode = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get httpResponseCodeInput() {
    return this._httpResponseCode;
  }

  // id - computed: true, optional: false, required: false
  public get id() {
    return this.getStringAttribute('id');
  }

  // message_body - computed: false, optional: true, required: false
  private _messageBody?: string; 
  public get messageBody() {
    return this.getStringAttribute('message_body');
  }
  public set messageBody(value: string) {
    this._messageBody = value;
  }
  public resetMessageBody() {
    this._messageBody = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get messageBodyInput() {
    return this._messageBody;
  }

  // message_title - computed: false, optional: true, required: false
  private _messageTitle?: string; 
  public get messageTitle() {
    return this.getStringAttribute('message_title');
  }
  public set messageTitle(value: string) {
    this._messageTitle = value;
  }
  public resetMessageTitle() {
    this._messageTitle = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get messageTitleInput() {
    return this._messageTitle;
  }

  // mode - computed: false, optional: false, required: true
  private _mode?: string; 
  public get mode() {
    return this.getStringAttribute('mode');
  }
  public set mode(value: string) {
    this._mode = value;
  }
  // Temporarily expose input value. Use with caution.
  public get modeInput() {
    return this._mode;
  }

  // name - computed: false, optional: false, required: true
  private _name?: string; 
  public get name() {
    return this.getStringAttribute('name');
  }
  public set name(value: string) {
    this._name = value;
  }
  // Temporarily expose input value. Use with caution.
  public get nameInput() {
    return this._name;
  }

  // redirect_url - computed: false, optional: true, required: false
  private _redirectUrl?: string; 
  public get redirectUrl() {
    return this.getStringAttribute('redirect_url');
  }
  public set redirectUrl(value: string) {
    this._redirectUrl = value;
  }
  public resetRedirectUrl() {
    this._redirectUrl = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get redirectUrlInput() {
    return this._redirectUrl;
  }

  // visibility - computed: false, optional: true, required: false
  private _visibility?: string; 
  public get visibility() {
    return this.getStringAttribute('visibility');
  }
  public set visibility(value: string) {
    this._visibility = value;
  }
  public resetVisibility() {
    this._visibility = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get visibilityInput() {
    return this._visibility;
  }

  // x_event_id - computed: false, optional: true, required: false
  private _xEventId?: boolean | cdktf.IResolvable; 
  public get xEventId() {
    return this.getBooleanAttribute('x_event_id');
  }
  public set xEventId(value: boolean | cdktf.IResolvable) {
    this._xEventId = value;
  }
  public resetXEventId() {
    this._xEventId = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get xEventIdInput() {
    return this._xEventId;
  }

  // =========
  // SYNTHESIS
  // =========

  protected synthesizeAttributes(): { [name: string]: any } {
    return {
      http_response_code: cdktf.numberToTerraform(this._httpResponseCode),
      message_body: cdktf.stringToTerraform(this._messageBody),
      message_title: cdktf.stringToTerraform(this._messageTitle),
      mode: cdktf.stringToTerraform(this._mode),
      name: cdktf.stringToTerraform(this._name),
      redirect_url: cdktf.stringToTerraform(this._redirectUrl),
      visibility: cdktf.stringToTerraform(this._visibility),
      x_event_id: cdktf.booleanToTerraform(this._xEventId),
    };
  }

  protected synthesizeHclAttributes(): { [name: string]: any } {
    const attrs = {
      http_response_code: {
        value: cdktf.numberToHclTerraform(this._httpResponseCode),
        isBlock: false,
        type: "simple",
        storageClassType: "number",
      },
      message_body: {
        value: cdktf.stringToHclTerraform(this._messageBody),
        isBlock: false,
        type: "simple",
        storageClassType: "string",
      },
      message_title: {
        value: cdktf.stringToHclTerraform(this._messageTitle),
        isBlock: false,
        type: "simple",
        storageClassType: "string",
      },
      mode: {
        value: cdktf.stringToHclTerraform(this._mode),
        isBlock: false,
        type: "simple",
        storageClassType: "string",
      },
      name: {
        value: cdktf.stringToHclTerraform(this._name),
        isBlock: false,
        type: "simple",
        storageClassType: "string",
      },
      redirect_url: {
        value: cdktf.stringToHclTerraform(this._redirectUrl),
        isBlock: false,
        type: "simple",
        storageClassType: "string",
      },
      visibility: {
        value: cdktf.stringToHclTerraform(this._visibility),
        isBlock: false,
        type: "simple",
        storageClassType: "string",
      },
      x_event_id: {
        value: cdktf.booleanToHclTerraform(this._xEventId),
        isBlock: false,
        type: "simple",
        storageClassType: "boolean",
      },
    };

    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined ))
  }
}
