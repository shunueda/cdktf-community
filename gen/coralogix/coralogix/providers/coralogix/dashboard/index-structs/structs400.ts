import * as cdktf from 'cdktf';
import { DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFiltersMetricsOperator,
dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFiltersMetricsOperatorToTerraform,
dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFiltersMetricsOperatorToHclTerraform,
DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFiltersMetricsOperatorOutputReference,
DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFiltersLogs,
dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFiltersLogsToTerraform,
dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFiltersLogsToHclTerraform,
DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFiltersLogsOutputReference,
DashboardLayoutSectionsRowsWidgetsDefinitionHexagonLegend,
dashboardLayoutSectionsRowsWidgetsDefinitionHexagonLegendToTerraform,
dashboardLayoutSectionsRowsWidgetsDefinitionHexagonLegendToHclTerraform,
DashboardLayoutSectionsRowsWidgetsDefinitionHexagonLegendOutputReference,
DashboardLayoutSectionsRowsWidgetsDefinitionBarChart,
dashboardLayoutSectionsRowsWidgetsDefinitionBarChartToTerraform,
dashboardLayoutSectionsRowsWidgetsDefinitionBarChartToHclTerraform,
DashboardLayoutSectionsRowsWidgetsDefinitionBarChartOutputReference,
DashboardLayoutSectionsRowsWidgetsDefinitionDataTable,
dashboardLayoutSectionsRowsWidgetsDefinitionDataTableToTerraform,
dashboardLayoutSectionsRowsWidgetsDefinitionDataTableToHclTerraform,
DashboardLayoutSectionsRowsWidgetsDefinitionDataTableOutputReference,
DashboardLayoutSectionsRowsWidgetsDefinitionGauge,
dashboardLayoutSectionsRowsWidgetsDefinitionGaugeToTerraform,
dashboardLayoutSectionsRowsWidgetsDefinitionGaugeToHclTerraform,
DashboardLayoutSectionsRowsWidgetsDefinitionGaugeOutputReference } from './structs0'
export interface DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFiltersMetrics {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#label Dashboard#label}
  */
  readonly label?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#metric_name Dashboard#metric_name}
  */
  readonly metricName?: string;
  /**
  * Operator to use for filtering.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#operator Dashboard#operator}
  */
  readonly operator: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFiltersMetricsOperator;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFiltersMetricsToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFiltersMetrics | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    label: cdktf.stringToTerraform(struct!.label),
    metric_name: cdktf.stringToTerraform(struct!.metricName),
    operator: dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFiltersMetricsOperatorToTerraform(struct!.operator),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFiltersMetricsToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFiltersMetrics | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    label: {
      value: cdktf.stringToHclTerraform(struct!.label),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    metric_name: {
      value: cdktf.stringToHclTerraform(struct!.metricName),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    operator: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFiltersMetricsOperatorToHclTerraform(struct!.operator),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFiltersMetricsOperator",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFiltersMetricsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFiltersMetrics | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._label !== undefined) {
      hasAnyValues = true;
      internalValueResult.label = this._label;
    }
    if (this._metricName !== undefined) {
      hasAnyValues = true;
      internalValueResult.metricName = this._metricName;
    }
    if (this._operator?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.operator = this._operator?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFiltersMetrics | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._label = undefined;
      this._metricName = undefined;
      this._operator.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._label = value.label;
      this._metricName = value.metricName;
      this._operator.internalValue = value.operator;
    }
  }

  // label - computed: false, optional: true, required: false
  private _label?: string; 
  public get label() {
    return this.getStringAttribute('label');
  }
  public set label(value: string) {
    this._label = value;
  }
  public resetLabel() {
    this._label = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get labelInput() {
    return this._label;
  }

  // metric_name - computed: false, optional: true, required: false
  private _metricName?: string; 
  public get metricName() {
    return this.getStringAttribute('metric_name');
  }
  public set metricName(value: string) {
    this._metricName = value;
  }
  public resetMetricName() {
    this._metricName = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get metricNameInput() {
    return this._metricName;
  }

  // operator - computed: false, optional: false, required: true
  private _operator = new DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFiltersMetricsOperatorOutputReference(this, "operator");
  public get operator() {
    return this._operator;
  }
  public putOperator(value: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFiltersMetricsOperator) {
    this._operator.internalValue = value;
  }
  // Temporarily expose input value. Use with caution.
  public get operatorInput() {
    return this._operator.internalValue;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFiltersSpansField {
  /**
  * The type of the field. Can be one of ["metadata" "tag" "process_tag"]
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#type Dashboard#type}
  */
  readonly type: string;
  /**
  * The value of the field. When the field type is `metadata`, can be one of ["application_name" "operation_name" "service_name" "subsystem_name" "unspecified"]
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#value Dashboard#value}
  */
  readonly value: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFiltersSpansFieldToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFiltersSpansField | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    type: cdktf.stringToTerraform(struct!.type),
    value: cdktf.stringToTerraform(struct!.value),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFiltersSpansFieldToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFiltersSpansField | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    type: {
      value: cdktf.stringToHclTerraform(struct!.type),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    value: {
      value: cdktf.stringToHclTerraform(struct!.value),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFiltersSpansFieldOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFiltersSpansField | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._type !== undefined) {
      hasAnyValues = true;
      internalValueResult.type = this._type;
    }
    if (this._value !== undefined) {
      hasAnyValues = true;
      internalValueResult.value = this._value;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFiltersSpansField | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._type = undefined;
      this._value = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._type = value.type;
      this._value = value.value;
    }
  }

  // type - computed: false, optional: false, required: true
  private _type?: string; 
  public get type() {
    return this.getStringAttribute('type');
  }
  public set type(value: string) {
    this._type = value;
  }
  // Temporarily expose input value. Use with caution.
  public get typeInput() {
    return this._type;
  }

  // value - computed: false, optional: false, required: true
  private _value?: string; 
  public get value() {
    return this.getStringAttribute('value');
  }
  public set value(value: string) {
    this._value = value;
  }
  // Temporarily expose input value. Use with caution.
  public get valueInput() {
    return this._value;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFiltersSpansOperator {
  /**
  * the values to filter by. When the type is `equals`, this field is optional, the filter will match only the selected values, and all the values if not set. When the type is `not_equals`, this field is required, and the filter will match spans without the selected values.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#selected_values Dashboard#selected_values}
  */
  readonly selectedValues?: string[];
  /**
  * The type of the operator. Can be one of `equals` or `not_equals`.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#type Dashboard#type}
  */
  readonly type: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFiltersSpansOperatorToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFiltersSpansOperator | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    selected_values: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.selectedValues),
    type: cdktf.stringToTerraform(struct!.type),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFiltersSpansOperatorToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFiltersSpansOperator | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    selected_values: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.selectedValues),
      isBlock: false,
      type: "list",
      storageClassType: "stringList",
    },
    type: {
      value: cdktf.stringToHclTerraform(struct!.type),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFiltersSpansOperatorOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFiltersSpansOperator | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._selectedValues !== undefined) {
      hasAnyValues = true;
      internalValueResult.selectedValues = this._selectedValues;
    }
    if (this._type !== undefined) {
      hasAnyValues = true;
      internalValueResult.type = this._type;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFiltersSpansOperator | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._selectedValues = undefined;
      this._type = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._selectedValues = value.selectedValues;
      this._type = value.type;
    }
  }

  // selected_values - computed: false, optional: true, required: false
  private _selectedValues?: string[]; 
  public get selectedValues() {
    return this.getListAttribute('selected_values');
  }
  public set selectedValues(value: string[]) {
    this._selectedValues = value;
  }
  public resetSelectedValues() {
    this._selectedValues = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get selectedValuesInput() {
    return this._selectedValues;
  }

  // type - computed: false, optional: false, required: true
  private _type?: string; 
  public get type() {
    return this.getStringAttribute('type');
  }
  public set type(value: string) {
    this._type = value;
  }
  // Temporarily expose input value. Use with caution.
  public get typeInput() {
    return this._type;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFiltersSpans {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#field Dashboard#field}
  */
  readonly field: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFiltersSpansField;
  /**
  * Operator to use for filtering.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#operator Dashboard#operator}
  */
  readonly operator: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFiltersSpansOperator;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFiltersSpansToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFiltersSpans | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    field: dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFiltersSpansFieldToTerraform(struct!.field),
    operator: dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFiltersSpansOperatorToTerraform(struct!.operator),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFiltersSpansToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFiltersSpans | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    field: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFiltersSpansFieldToHclTerraform(struct!.field),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFiltersSpansField",
    },
    operator: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFiltersSpansOperatorToHclTerraform(struct!.operator),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFiltersSpansOperator",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFiltersSpansOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFiltersSpans | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._field?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.field = this._field?.internalValue;
    }
    if (this._operator?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.operator = this._operator?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFiltersSpans | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._field.internalValue = undefined;
      this._operator.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._field.internalValue = value.field;
      this._operator.internalValue = value.operator;
    }
  }

  // field - computed: false, optional: false, required: true
  private _field = new DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFiltersSpansFieldOutputReference(this, "field");
  public get field() {
    return this._field;
  }
  public putField(value: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFiltersSpansField) {
    this._field.internalValue = value;
  }
  // Temporarily expose input value. Use with caution.
  public get fieldInput() {
    return this._field.internalValue;
  }

  // operator - computed: false, optional: false, required: true
  private _operator = new DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFiltersSpansOperatorOutputReference(this, "operator");
  public get operator() {
    return this._operator;
  }
  public putOperator(value: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFiltersSpansOperator) {
    this._operator.internalValue = value;
  }
  // Temporarily expose input value. Use with caution.
  public get operatorInput() {
    return this._operator.internalValue;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFilters {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#logs Dashboard#logs}
  */
  readonly logs?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFiltersLogs;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#metrics Dashboard#metrics}
  */
  readonly metrics?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFiltersMetrics;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#spans Dashboard#spans}
  */
  readonly spans?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFiltersSpans;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFiltersToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFilters | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    logs: dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFiltersLogsToTerraform(struct!.logs),
    metrics: dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFiltersMetricsToTerraform(struct!.metrics),
    spans: dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFiltersSpansToTerraform(struct!.spans),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFiltersToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFilters | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    logs: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFiltersLogsToHclTerraform(struct!.logs),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFiltersLogs",
    },
    metrics: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFiltersMetricsToHclTerraform(struct!.metrics),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFiltersMetrics",
    },
    spans: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFiltersSpansToHclTerraform(struct!.spans),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFiltersSpans",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFiltersOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFilters | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._logs?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.logs = this._logs?.internalValue;
    }
    if (this._metrics?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.metrics = this._metrics?.internalValue;
    }
    if (this._spans?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.spans = this._spans?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFilters | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._logs.internalValue = undefined;
      this._metrics.internalValue = undefined;
      this._spans.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._logs.internalValue = value.logs;
      this._metrics.internalValue = value.metrics;
      this._spans.internalValue = value.spans;
    }
  }

  // logs - computed: false, optional: true, required: false
  private _logs = new DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFiltersLogsOutputReference(this, "logs");
  public get logs() {
    return this._logs;
  }
  public putLogs(value: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFiltersLogs) {
    this._logs.internalValue = value;
  }
  public resetLogs() {
    this._logs.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get logsInput() {
    return this._logs.internalValue;
  }

  // metrics - computed: false, optional: true, required: false
  private _metrics = new DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFiltersMetricsOutputReference(this, "metrics");
  public get metrics() {
    return this._metrics;
  }
  public putMetrics(value: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFiltersMetrics) {
    this._metrics.internalValue = value;
  }
  public resetMetrics() {
    this._metrics.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get metricsInput() {
    return this._metrics.internalValue;
  }

  // spans - computed: false, optional: true, required: false
  private _spans = new DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFiltersSpansOutputReference(this, "spans");
  public get spans() {
    return this._spans;
  }
  public putSpans(value: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFiltersSpans) {
    this._spans.internalValue = value;
  }
  public resetSpans() {
    this._spans.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get spansInput() {
    return this._spans.internalValue;
  }
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFiltersList extends cdktf.ComplexList {
  public internalValue? : DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFilters[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFiltersOutputReference {
    return new DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFiltersOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeTimeFrameAbsolute {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#end Dashboard#end}
  */
  readonly end: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#start Dashboard#start}
  */
  readonly start: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeTimeFrameAbsoluteToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeTimeFrameAbsolute | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    end: cdktf.stringToTerraform(struct!.end),
    start: cdktf.stringToTerraform(struct!.start),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeTimeFrameAbsoluteToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeTimeFrameAbsolute | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    end: {
      value: cdktf.stringToHclTerraform(struct!.end),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    start: {
      value: cdktf.stringToHclTerraform(struct!.start),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeTimeFrameAbsoluteOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeTimeFrameAbsolute | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._end !== undefined) {
      hasAnyValues = true;
      internalValueResult.end = this._end;
    }
    if (this._start !== undefined) {
      hasAnyValues = true;
      internalValueResult.start = this._start;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeTimeFrameAbsolute | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._end = undefined;
      this._start = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._end = value.end;
      this._start = value.start;
    }
  }

  // end - computed: false, optional: false, required: true
  private _end?: string; 
  public get end() {
    return this.getStringAttribute('end');
  }
  public set end(value: string) {
    this._end = value;
  }
  // Temporarily expose input value. Use with caution.
  public get endInput() {
    return this._end;
  }

  // start - computed: false, optional: false, required: true
  private _start?: string; 
  public get start() {
    return this.getStringAttribute('start');
  }
  public set start(value: string) {
    this._start = value;
  }
  // Temporarily expose input value. Use with caution.
  public get startInput() {
    return this._start;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeTimeFrameRelative {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#duration Dashboard#duration}
  */
  readonly duration: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeTimeFrameRelativeToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeTimeFrameRelative | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    duration: cdktf.stringToTerraform(struct!.duration),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeTimeFrameRelativeToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeTimeFrameRelative | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    duration: {
      value: cdktf.stringToHclTerraform(struct!.duration),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeTimeFrameRelativeOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeTimeFrameRelative | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._duration !== undefined) {
      hasAnyValues = true;
      internalValueResult.duration = this._duration;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeTimeFrameRelative | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._duration = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._duration = value.duration;
    }
  }

  // duration - computed: false, optional: false, required: true
  private _duration?: string; 
  public get duration() {
    return this.getStringAttribute('duration');
  }
  public set duration(value: string) {
    this._duration = value;
  }
  // Temporarily expose input value. Use with caution.
  public get durationInput() {
    return this._duration;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeTimeFrame {
  /**
  * Absolute time frame specifying a fixed start and end time.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#absolute Dashboard#absolute}
  */
  readonly absolute?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeTimeFrameAbsolute;
  /**
  * Relative time frame specifying a duration from the current time.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#relative Dashboard#relative}
  */
  readonly relative?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeTimeFrameRelative;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeTimeFrameToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeTimeFrame | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    absolute: dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeTimeFrameAbsoluteToTerraform(struct!.absolute),
    relative: dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeTimeFrameRelativeToTerraform(struct!.relative),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeTimeFrameToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeTimeFrame | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    absolute: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeTimeFrameAbsoluteToHclTerraform(struct!.absolute),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeTimeFrameAbsolute",
    },
    relative: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeTimeFrameRelativeToHclTerraform(struct!.relative),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeTimeFrameRelative",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeTimeFrameOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeTimeFrame | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._absolute?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.absolute = this._absolute?.internalValue;
    }
    if (this._relative?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.relative = this._relative?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeTimeFrame | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._absolute.internalValue = undefined;
      this._relative.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._absolute.internalValue = value.absolute;
      this._relative.internalValue = value.relative;
    }
  }

  // absolute - computed: false, optional: true, required: false
  private _absolute = new DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeTimeFrameAbsoluteOutputReference(this, "absolute");
  public get absolute() {
    return this._absolute;
  }
  public putAbsolute(value: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeTimeFrameAbsolute) {
    this._absolute.internalValue = value;
  }
  public resetAbsolute() {
    this._absolute.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get absoluteInput() {
    return this._absolute.internalValue;
  }

  // relative - computed: false, optional: true, required: false
  private _relative = new DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeTimeFrameRelativeOutputReference(this, "relative");
  public get relative() {
    return this._relative;
  }
  public putRelative(value: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeTimeFrameRelative) {
    this._relative.internalValue = value;
  }
  public resetRelative() {
    this._relative.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get relativeInput() {
    return this._relative.internalValue;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrime {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#filters Dashboard#filters}
  */
  readonly filters?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFilters[] | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#query Dashboard#query}
  */
  readonly query?: string;
  /**
  * Specifies the time frame. Can be either absolute or relative.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#time_frame Dashboard#time_frame}
  */
  readonly timeFrame?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeTimeFrame;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrime | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    filters: cdktf.listMapper(dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFiltersToTerraform, false)(struct!.filters),
    query: cdktf.stringToTerraform(struct!.query),
    time_frame: dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeTimeFrameToTerraform(struct!.timeFrame),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrime | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    filters: {
      value: cdktf.listMapperHcl(dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFiltersToHclTerraform, false)(struct!.filters),
      isBlock: true,
      type: "list",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFiltersList",
    },
    query: {
      value: cdktf.stringToHclTerraform(struct!.query),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    time_frame: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeTimeFrameToHclTerraform(struct!.timeFrame),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeTimeFrame",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrime | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._filters?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.filters = this._filters?.internalValue;
    }
    if (this._query !== undefined) {
      hasAnyValues = true;
      internalValueResult.query = this._query;
    }
    if (this._timeFrame?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.timeFrame = this._timeFrame?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrime | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._filters.internalValue = undefined;
      this._query = undefined;
      this._timeFrame.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._filters.internalValue = value.filters;
      this._query = value.query;
      this._timeFrame.internalValue = value.timeFrame;
    }
  }

  // filters - computed: false, optional: true, required: false
  private _filters = new DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFiltersList(this, "filters", false);
  public get filters() {
    return this._filters;
  }
  public putFilters(value: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeFilters[] | cdktf.IResolvable) {
    this._filters.internalValue = value;
  }
  public resetFilters() {
    this._filters.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get filtersInput() {
    return this._filters.internalValue;
  }

  // query - computed: false, optional: true, required: false
  private _query?: string; 
  public get query() {
    return this.getStringAttribute('query');
  }
  public set query(value: string) {
    this._query = value;
  }
  public resetQuery() {
    this._query = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get queryInput() {
    return this._query;
  }

  // time_frame - computed: false, optional: true, required: false
  private _timeFrame = new DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeTimeFrameOutputReference(this, "time_frame");
  public get timeFrame() {
    return this._timeFrame;
  }
  public putTimeFrame(value: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeTimeFrame) {
    this._timeFrame.internalValue = value;
  }
  public resetTimeFrame() {
    this._timeFrame.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get timeFrameInput() {
    return this._timeFrame.internalValue;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsAggregationObservationField {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#keypath Dashboard#keypath}
  */
  readonly keypath: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#scope Dashboard#scope}
  */
  readonly scope: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsAggregationObservationFieldToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsAggregationObservationField | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    keypath: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.keypath),
    scope: cdktf.stringToTerraform(struct!.scope),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsAggregationObservationFieldToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsAggregationObservationField | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    keypath: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.keypath),
      isBlock: false,
      type: "list",
      storageClassType: "stringList",
    },
    scope: {
      value: cdktf.stringToHclTerraform(struct!.scope),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsAggregationObservationFieldOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsAggregationObservationField | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._keypath !== undefined) {
      hasAnyValues = true;
      internalValueResult.keypath = this._keypath;
    }
    if (this._scope !== undefined) {
      hasAnyValues = true;
      internalValueResult.scope = this._scope;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsAggregationObservationField | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._keypath = undefined;
      this._scope = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._keypath = value.keypath;
      this._scope = value.scope;
    }
  }

  // keypath - computed: false, optional: false, required: true
  private _keypath?: string[]; 
  public get keypath() {
    return this.getListAttribute('keypath');
  }
  public set keypath(value: string[]) {
    this._keypath = value;
  }
  // Temporarily expose input value. Use with caution.
  public get keypathInput() {
    return this._keypath;
  }

  // scope - computed: false, optional: false, required: true
  private _scope?: string; 
  public get scope() {
    return this.getStringAttribute('scope');
  }
  public set scope(value: string) {
    this._scope = value;
  }
  // Temporarily expose input value. Use with caution.
  public get scopeInput() {
    return this._scope;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsAggregation {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#field Dashboard#field}
  */
  readonly field?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#observation_field Dashboard#observation_field}
  */
  readonly observationField?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsAggregationObservationField;
  /**
  * The percentage of the aggregation to return. required when type is `percentile`.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#percent Dashboard#percent}
  */
  readonly percent?: number;
  /**
  * The type of the aggregation. Can be one of ["count" "count_distinct" "sum" "avg" "min" "max" "percentile"]
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#type Dashboard#type}
  */
  readonly type: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsAggregationToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsAggregation | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    field: cdktf.stringToTerraform(struct!.field),
    observation_field: dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsAggregationObservationFieldToTerraform(struct!.observationField),
    percent: cdktf.numberToTerraform(struct!.percent),
    type: cdktf.stringToTerraform(struct!.type),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsAggregationToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsAggregation | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    field: {
      value: cdktf.stringToHclTerraform(struct!.field),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    observation_field: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsAggregationObservationFieldToHclTerraform(struct!.observationField),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsAggregationObservationField",
    },
    percent: {
      value: cdktf.numberToHclTerraform(struct!.percent),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    type: {
      value: cdktf.stringToHclTerraform(struct!.type),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsAggregationOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsAggregation | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._field !== undefined) {
      hasAnyValues = true;
      internalValueResult.field = this._field;
    }
    if (this._observationField?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.observationField = this._observationField?.internalValue;
    }
    if (this._percent !== undefined) {
      hasAnyValues = true;
      internalValueResult.percent = this._percent;
    }
    if (this._type !== undefined) {
      hasAnyValues = true;
      internalValueResult.type = this._type;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsAggregation | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._field = undefined;
      this._observationField.internalValue = undefined;
      this._percent = undefined;
      this._type = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._field = value.field;
      this._observationField.internalValue = value.observationField;
      this._percent = value.percent;
      this._type = value.type;
    }
  }

  // field - computed: false, optional: true, required: false
  private _field?: string; 
  public get field() {
    return this.getStringAttribute('field');
  }
  public set field(value: string) {
    this._field = value;
  }
  public resetField() {
    this._field = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get fieldInput() {
    return this._field;
  }

  // observation_field - computed: false, optional: true, required: false
  private _observationField = new DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsAggregationObservationFieldOutputReference(this, "observation_field");
  public get observationField() {
    return this._observationField;
  }
  public putObservationField(value: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsAggregationObservationField) {
    this._observationField.internalValue = value;
  }
  public resetObservationField() {
    this._observationField.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get observationFieldInput() {
    return this._observationField.internalValue;
  }

  // percent - computed: false, optional: true, required: false
  private _percent?: number; 
  public get percent() {
    return this.getNumberAttribute('percent');
  }
  public set percent(value: number) {
    this._percent = value;
  }
  public resetPercent() {
    this._percent = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get percentInput() {
    return this._percent;
  }

  // type - computed: false, optional: false, required: true
  private _type?: string; 
  public get type() {
    return this.getStringAttribute('type');
  }
  public set type(value: string) {
    this._type = value;
  }
  // Temporarily expose input value. Use with caution.
  public get typeInput() {
    return this._type;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsFiltersObservationField {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#keypath Dashboard#keypath}
  */
  readonly keypath: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#scope Dashboard#scope}
  */
  readonly scope: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsFiltersObservationFieldToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsFiltersObservationField | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    keypath: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.keypath),
    scope: cdktf.stringToTerraform(struct!.scope),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsFiltersObservationFieldToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsFiltersObservationField | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    keypath: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.keypath),
      isBlock: false,
      type: "list",
      storageClassType: "stringList",
    },
    scope: {
      value: cdktf.stringToHclTerraform(struct!.scope),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsFiltersObservationFieldOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsFiltersObservationField | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._keypath !== undefined) {
      hasAnyValues = true;
      internalValueResult.keypath = this._keypath;
    }
    if (this._scope !== undefined) {
      hasAnyValues = true;
      internalValueResult.scope = this._scope;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsFiltersObservationField | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._keypath = undefined;
      this._scope = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._keypath = value.keypath;
      this._scope = value.scope;
    }
  }

  // keypath - computed: false, optional: false, required: true
  private _keypath?: string[]; 
  public get keypath() {
    return this.getListAttribute('keypath');
  }
  public set keypath(value: string[]) {
    this._keypath = value;
  }
  // Temporarily expose input value. Use with caution.
  public get keypathInput() {
    return this._keypath;
  }

  // scope - computed: false, optional: false, required: true
  private _scope?: string; 
  public get scope() {
    return this.getStringAttribute('scope');
  }
  public set scope(value: string) {
    this._scope = value;
  }
  // Temporarily expose input value. Use with caution.
  public get scopeInput() {
    return this._scope;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsFiltersOperator {
  /**
  * the values to filter by. When the type is `equals`, this field is optional, the filter will match only the selected values, and all the values if not set. When the type is `not_equals`, this field is required, and the filter will match spans without the selected values.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#selected_values Dashboard#selected_values}
  */
  readonly selectedValues?: string[];
  /**
  * The type of the operator. Can be one of `equals` or `not_equals`.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#type Dashboard#type}
  */
  readonly type: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsFiltersOperatorToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsFiltersOperator | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    selected_values: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.selectedValues),
    type: cdktf.stringToTerraform(struct!.type),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsFiltersOperatorToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsFiltersOperator | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    selected_values: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.selectedValues),
      isBlock: false,
      type: "list",
      storageClassType: "stringList",
    },
    type: {
      value: cdktf.stringToHclTerraform(struct!.type),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsFiltersOperatorOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsFiltersOperator | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._selectedValues !== undefined) {
      hasAnyValues = true;
      internalValueResult.selectedValues = this._selectedValues;
    }
    if (this._type !== undefined) {
      hasAnyValues = true;
      internalValueResult.type = this._type;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsFiltersOperator | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._selectedValues = undefined;
      this._type = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._selectedValues = value.selectedValues;
      this._type = value.type;
    }
  }

  // selected_values - computed: false, optional: true, required: false
  private _selectedValues?: string[]; 
  public get selectedValues() {
    return this.getListAttribute('selected_values');
  }
  public set selectedValues(value: string[]) {
    this._selectedValues = value;
  }
  public resetSelectedValues() {
    this._selectedValues = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get selectedValuesInput() {
    return this._selectedValues;
  }

  // type - computed: false, optional: false, required: true
  private _type?: string; 
  public get type() {
    return this.getStringAttribute('type');
  }
  public set type(value: string) {
    this._type = value;
  }
  // Temporarily expose input value. Use with caution.
  public get typeInput() {
    return this._type;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsFilters {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#field Dashboard#field}
  */
  readonly field: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#observation_field Dashboard#observation_field}
  */
  readonly observationField?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsFiltersObservationField;
  /**
  * Operator to use for filtering.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#operator Dashboard#operator}
  */
  readonly operator: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsFiltersOperator;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsFiltersToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsFilters | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    field: cdktf.stringToTerraform(struct!.field),
    observation_field: dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsFiltersObservationFieldToTerraform(struct!.observationField),
    operator: dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsFiltersOperatorToTerraform(struct!.operator),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsFiltersToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsFilters | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    field: {
      value: cdktf.stringToHclTerraform(struct!.field),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    observation_field: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsFiltersObservationFieldToHclTerraform(struct!.observationField),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsFiltersObservationField",
    },
    operator: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsFiltersOperatorToHclTerraform(struct!.operator),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsFiltersOperator",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsFiltersOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsFilters | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._field !== undefined) {
      hasAnyValues = true;
      internalValueResult.field = this._field;
    }
    if (this._observationField?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.observationField = this._observationField?.internalValue;
    }
    if (this._operator?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.operator = this._operator?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsFilters | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._field = undefined;
      this._observationField.internalValue = undefined;
      this._operator.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._field = value.field;
      this._observationField.internalValue = value.observationField;
      this._operator.internalValue = value.operator;
    }
  }

  // field - computed: false, optional: false, required: true
  private _field?: string; 
  public get field() {
    return this.getStringAttribute('field');
  }
  public set field(value: string) {
    this._field = value;
  }
  // Temporarily expose input value. Use with caution.
  public get fieldInput() {
    return this._field;
  }

  // observation_field - computed: false, optional: true, required: false
  private _observationField = new DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsFiltersObservationFieldOutputReference(this, "observation_field");
  public get observationField() {
    return this._observationField;
  }
  public putObservationField(value: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsFiltersObservationField) {
    this._observationField.internalValue = value;
  }
  public resetObservationField() {
    this._observationField.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get observationFieldInput() {
    return this._observationField.internalValue;
  }

  // operator - computed: false, optional: false, required: true
  private _operator = new DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsFiltersOperatorOutputReference(this, "operator");
  public get operator() {
    return this._operator;
  }
  public putOperator(value: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsFiltersOperator) {
    this._operator.internalValue = value;
  }
  // Temporarily expose input value. Use with caution.
  public get operatorInput() {
    return this._operator.internalValue;
  }
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsFiltersList extends cdktf.ComplexList {
  public internalValue? : DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsFilters[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsFiltersOutputReference {
    return new DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsFiltersOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsGroupBy {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#keypath Dashboard#keypath}
  */
  readonly keypath: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#scope Dashboard#scope}
  */
  readonly scope: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsGroupByToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsGroupBy | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    keypath: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.keypath),
    scope: cdktf.stringToTerraform(struct!.scope),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsGroupByToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsGroupBy | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    keypath: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.keypath),
      isBlock: false,
      type: "list",
      storageClassType: "stringList",
    },
    scope: {
      value: cdktf.stringToHclTerraform(struct!.scope),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsGroupByOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsGroupBy | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._keypath !== undefined) {
      hasAnyValues = true;
      internalValueResult.keypath = this._keypath;
    }
    if (this._scope !== undefined) {
      hasAnyValues = true;
      internalValueResult.scope = this._scope;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsGroupBy | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._keypath = undefined;
      this._scope = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._keypath = value.keypath;
      this._scope = value.scope;
    }
  }

  // keypath - computed: false, optional: false, required: true
  private _keypath?: string[]; 
  public get keypath() {
    return this.getListAttribute('keypath');
  }
  public set keypath(value: string[]) {
    this._keypath = value;
  }
  // Temporarily expose input value. Use with caution.
  public get keypathInput() {
    return this._keypath;
  }

  // scope - computed: false, optional: false, required: true
  private _scope?: string; 
  public get scope() {
    return this.getStringAttribute('scope');
  }
  public set scope(value: string) {
    this._scope = value;
  }
  // Temporarily expose input value. Use with caution.
  public get scopeInput() {
    return this._scope;
  }
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsGroupByList extends cdktf.ComplexList {
  public internalValue? : DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsGroupBy[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsGroupByOutputReference {
    return new DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsGroupByOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsTimeFrameAbsolute {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#end Dashboard#end}
  */
  readonly end: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#start Dashboard#start}
  */
  readonly start: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsTimeFrameAbsoluteToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsTimeFrameAbsolute | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    end: cdktf.stringToTerraform(struct!.end),
    start: cdktf.stringToTerraform(struct!.start),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsTimeFrameAbsoluteToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsTimeFrameAbsolute | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    end: {
      value: cdktf.stringToHclTerraform(struct!.end),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    start: {
      value: cdktf.stringToHclTerraform(struct!.start),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsTimeFrameAbsoluteOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsTimeFrameAbsolute | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._end !== undefined) {
      hasAnyValues = true;
      internalValueResult.end = this._end;
    }
    if (this._start !== undefined) {
      hasAnyValues = true;
      internalValueResult.start = this._start;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsTimeFrameAbsolute | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._end = undefined;
      this._start = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._end = value.end;
      this._start = value.start;
    }
  }

  // end - computed: false, optional: false, required: true
  private _end?: string; 
  public get end() {
    return this.getStringAttribute('end');
  }
  public set end(value: string) {
    this._end = value;
  }
  // Temporarily expose input value. Use with caution.
  public get endInput() {
    return this._end;
  }

  // start - computed: false, optional: false, required: true
  private _start?: string; 
  public get start() {
    return this.getStringAttribute('start');
  }
  public set start(value: string) {
    this._start = value;
  }
  // Temporarily expose input value. Use with caution.
  public get startInput() {
    return this._start;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsTimeFrameRelative {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#duration Dashboard#duration}
  */
  readonly duration: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsTimeFrameRelativeToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsTimeFrameRelative | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    duration: cdktf.stringToTerraform(struct!.duration),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsTimeFrameRelativeToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsTimeFrameRelative | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    duration: {
      value: cdktf.stringToHclTerraform(struct!.duration),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsTimeFrameRelativeOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsTimeFrameRelative | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._duration !== undefined) {
      hasAnyValues = true;
      internalValueResult.duration = this._duration;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsTimeFrameRelative | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._duration = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._duration = value.duration;
    }
  }

  // duration - computed: false, optional: false, required: true
  private _duration?: string; 
  public get duration() {
    return this.getStringAttribute('duration');
  }
  public set duration(value: string) {
    this._duration = value;
  }
  // Temporarily expose input value. Use with caution.
  public get durationInput() {
    return this._duration;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsTimeFrame {
  /**
  * Absolute time frame specifying a fixed start and end time.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#absolute Dashboard#absolute}
  */
  readonly absolute?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsTimeFrameAbsolute;
  /**
  * Relative time frame specifying a duration from the current time.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#relative Dashboard#relative}
  */
  readonly relative?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsTimeFrameRelative;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsTimeFrameToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsTimeFrame | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    absolute: dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsTimeFrameAbsoluteToTerraform(struct!.absolute),
    relative: dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsTimeFrameRelativeToTerraform(struct!.relative),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsTimeFrameToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsTimeFrame | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    absolute: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsTimeFrameAbsoluteToHclTerraform(struct!.absolute),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsTimeFrameAbsolute",
    },
    relative: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsTimeFrameRelativeToHclTerraform(struct!.relative),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsTimeFrameRelative",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsTimeFrameOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsTimeFrame | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._absolute?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.absolute = this._absolute?.internalValue;
    }
    if (this._relative?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.relative = this._relative?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsTimeFrame | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._absolute.internalValue = undefined;
      this._relative.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._absolute.internalValue = value.absolute;
      this._relative.internalValue = value.relative;
    }
  }

  // absolute - computed: false, optional: true, required: false
  private _absolute = new DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsTimeFrameAbsoluteOutputReference(this, "absolute");
  public get absolute() {
    return this._absolute;
  }
  public putAbsolute(value: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsTimeFrameAbsolute) {
    this._absolute.internalValue = value;
  }
  public resetAbsolute() {
    this._absolute.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get absoluteInput() {
    return this._absolute.internalValue;
  }

  // relative - computed: false, optional: true, required: false
  private _relative = new DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsTimeFrameRelativeOutputReference(this, "relative");
  public get relative() {
    return this._relative;
  }
  public putRelative(value: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsTimeFrameRelative) {
    this._relative.internalValue = value;
  }
  public resetRelative() {
    this._relative.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get relativeInput() {
    return this._relative.internalValue;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogs {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#aggregation Dashboard#aggregation}
  */
  readonly aggregation: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsAggregation;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#filters Dashboard#filters}
  */
  readonly filters?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsFilters[] | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#group_by Dashboard#group_by}
  */
  readonly groupBy?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsGroupBy[] | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#lucene_query Dashboard#lucene_query}
  */
  readonly luceneQuery?: string;
  /**
  * Specifies the time frame. Can be either absolute or relative.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#time_frame Dashboard#time_frame}
  */
  readonly timeFrame?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsTimeFrame;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogs | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    aggregation: dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsAggregationToTerraform(struct!.aggregation),
    filters: cdktf.listMapper(dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsFiltersToTerraform, false)(struct!.filters),
    group_by: cdktf.listMapper(dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsGroupByToTerraform, false)(struct!.groupBy),
    lucene_query: cdktf.stringToTerraform(struct!.luceneQuery),
    time_frame: dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsTimeFrameToTerraform(struct!.timeFrame),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogs | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    aggregation: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsAggregationToHclTerraform(struct!.aggregation),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsAggregation",
    },
    filters: {
      value: cdktf.listMapperHcl(dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsFiltersToHclTerraform, false)(struct!.filters),
      isBlock: true,
      type: "list",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsFiltersList",
    },
    group_by: {
      value: cdktf.listMapperHcl(dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsGroupByToHclTerraform, false)(struct!.groupBy),
      isBlock: true,
      type: "list",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsGroupByList",
    },
    lucene_query: {
      value: cdktf.stringToHclTerraform(struct!.luceneQuery),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    time_frame: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsTimeFrameToHclTerraform(struct!.timeFrame),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsTimeFrame",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogs | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._aggregation?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.aggregation = this._aggregation?.internalValue;
    }
    if (this._filters?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.filters = this._filters?.internalValue;
    }
    if (this._groupBy?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.groupBy = this._groupBy?.internalValue;
    }
    if (this._luceneQuery !== undefined) {
      hasAnyValues = true;
      internalValueResult.luceneQuery = this._luceneQuery;
    }
    if (this._timeFrame?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.timeFrame = this._timeFrame?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogs | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._aggregation.internalValue = undefined;
      this._filters.internalValue = undefined;
      this._groupBy.internalValue = undefined;
      this._luceneQuery = undefined;
      this._timeFrame.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._aggregation.internalValue = value.aggregation;
      this._filters.internalValue = value.filters;
      this._groupBy.internalValue = value.groupBy;
      this._luceneQuery = value.luceneQuery;
      this._timeFrame.internalValue = value.timeFrame;
    }
  }

  // aggregation - computed: false, optional: false, required: true
  private _aggregation = new DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsAggregationOutputReference(this, "aggregation");
  public get aggregation() {
    return this._aggregation;
  }
  public putAggregation(value: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsAggregation) {
    this._aggregation.internalValue = value;
  }
  // Temporarily expose input value. Use with caution.
  public get aggregationInput() {
    return this._aggregation.internalValue;
  }

  // filters - computed: false, optional: true, required: false
  private _filters = new DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsFiltersList(this, "filters", false);
  public get filters() {
    return this._filters;
  }
  public putFilters(value: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsFilters[] | cdktf.IResolvable) {
    this._filters.internalValue = value;
  }
  public resetFilters() {
    this._filters.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get filtersInput() {
    return this._filters.internalValue;
  }

  // group_by - computed: false, optional: true, required: false
  private _groupBy = new DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsGroupByList(this, "group_by", false);
  public get groupBy() {
    return this._groupBy;
  }
  public putGroupBy(value: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsGroupBy[] | cdktf.IResolvable) {
    this._groupBy.internalValue = value;
  }
  public resetGroupBy() {
    this._groupBy.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get groupByInput() {
    return this._groupBy.internalValue;
  }

  // lucene_query - computed: false, optional: true, required: false
  private _luceneQuery?: string; 
  public get luceneQuery() {
    return this.getStringAttribute('lucene_query');
  }
  public set luceneQuery(value: string) {
    this._luceneQuery = value;
  }
  public resetLuceneQuery() {
    this._luceneQuery = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get luceneQueryInput() {
    return this._luceneQuery;
  }

  // time_frame - computed: false, optional: true, required: false
  private _timeFrame = new DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsTimeFrameOutputReference(this, "time_frame");
  public get timeFrame() {
    return this._timeFrame;
  }
  public putTimeFrame(value: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsTimeFrame) {
    this._timeFrame.internalValue = value;
  }
  public resetTimeFrame() {
    this._timeFrame.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get timeFrameInput() {
    return this._timeFrame.internalValue;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetricsFiltersOperator {
  /**
  * the values to filter by. When the type is `equals`, this field is optional, the filter will match only the selected values, and all the values if not set. When the type is `not_equals`, this field is required, and the filter will match spans without the selected values.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#selected_values Dashboard#selected_values}
  */
  readonly selectedValues?: string[];
  /**
  * The type of the operator. Can be one of `equals` or `not_equals`.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#type Dashboard#type}
  */
  readonly type: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetricsFiltersOperatorToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetricsFiltersOperator | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    selected_values: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.selectedValues),
    type: cdktf.stringToTerraform(struct!.type),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetricsFiltersOperatorToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetricsFiltersOperator | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    selected_values: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.selectedValues),
      isBlock: false,
      type: "list",
      storageClassType: "stringList",
    },
    type: {
      value: cdktf.stringToHclTerraform(struct!.type),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetricsFiltersOperatorOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetricsFiltersOperator | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._selectedValues !== undefined) {
      hasAnyValues = true;
      internalValueResult.selectedValues = this._selectedValues;
    }
    if (this._type !== undefined) {
      hasAnyValues = true;
      internalValueResult.type = this._type;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetricsFiltersOperator | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._selectedValues = undefined;
      this._type = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._selectedValues = value.selectedValues;
      this._type = value.type;
    }
  }

  // selected_values - computed: false, optional: true, required: false
  private _selectedValues?: string[]; 
  public get selectedValues() {
    return this.getListAttribute('selected_values');
  }
  public set selectedValues(value: string[]) {
    this._selectedValues = value;
  }
  public resetSelectedValues() {
    this._selectedValues = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get selectedValuesInput() {
    return this._selectedValues;
  }

  // type - computed: false, optional: false, required: true
  private _type?: string; 
  public get type() {
    return this.getStringAttribute('type');
  }
  public set type(value: string) {
    this._type = value;
  }
  // Temporarily expose input value. Use with caution.
  public get typeInput() {
    return this._type;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetricsFilters {
  /**
  * Label associated with the metric.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#label Dashboard#label}
  */
  readonly label?: string;
  /**
  * Metric name to apply the filter on.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#metric Dashboard#metric}
  */
  readonly metric: string;
  /**
  * Operator to use for filtering.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#operator Dashboard#operator}
  */
  readonly operator: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetricsFiltersOperator;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetricsFiltersToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetricsFilters | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    label: cdktf.stringToTerraform(struct!.label),
    metric: cdktf.stringToTerraform(struct!.metric),
    operator: dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetricsFiltersOperatorToTerraform(struct!.operator),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetricsFiltersToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetricsFilters | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    label: {
      value: cdktf.stringToHclTerraform(struct!.label),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    metric: {
      value: cdktf.stringToHclTerraform(struct!.metric),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    operator: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetricsFiltersOperatorToHclTerraform(struct!.operator),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetricsFiltersOperator",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetricsFiltersOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetricsFilters | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._label !== undefined) {
      hasAnyValues = true;
      internalValueResult.label = this._label;
    }
    if (this._metric !== undefined) {
      hasAnyValues = true;
      internalValueResult.metric = this._metric;
    }
    if (this._operator?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.operator = this._operator?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetricsFilters | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._label = undefined;
      this._metric = undefined;
      this._operator.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._label = value.label;
      this._metric = value.metric;
      this._operator.internalValue = value.operator;
    }
  }

  // label - computed: false, optional: true, required: false
  private _label?: string; 
  public get label() {
    return this.getStringAttribute('label');
  }
  public set label(value: string) {
    this._label = value;
  }
  public resetLabel() {
    this._label = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get labelInput() {
    return this._label;
  }

  // metric - computed: false, optional: false, required: true
  private _metric?: string; 
  public get metric() {
    return this.getStringAttribute('metric');
  }
  public set metric(value: string) {
    this._metric = value;
  }
  // Temporarily expose input value. Use with caution.
  public get metricInput() {
    return this._metric;
  }

  // operator - computed: false, optional: false, required: true
  private _operator = new DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetricsFiltersOperatorOutputReference(this, "operator");
  public get operator() {
    return this._operator;
  }
  public putOperator(value: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetricsFiltersOperator) {
    this._operator.internalValue = value;
  }
  // Temporarily expose input value. Use with caution.
  public get operatorInput() {
    return this._operator.internalValue;
  }
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetricsFiltersList extends cdktf.ComplexList {
  public internalValue? : DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetricsFilters[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetricsFiltersOutputReference {
    return new DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetricsFiltersOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetricsTimeFrameAbsolute {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#end Dashboard#end}
  */
  readonly end: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#start Dashboard#start}
  */
  readonly start: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetricsTimeFrameAbsoluteToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetricsTimeFrameAbsolute | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    end: cdktf.stringToTerraform(struct!.end),
    start: cdktf.stringToTerraform(struct!.start),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetricsTimeFrameAbsoluteToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetricsTimeFrameAbsolute | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    end: {
      value: cdktf.stringToHclTerraform(struct!.end),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    start: {
      value: cdktf.stringToHclTerraform(struct!.start),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetricsTimeFrameAbsoluteOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetricsTimeFrameAbsolute | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._end !== undefined) {
      hasAnyValues = true;
      internalValueResult.end = this._end;
    }
    if (this._start !== undefined) {
      hasAnyValues = true;
      internalValueResult.start = this._start;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetricsTimeFrameAbsolute | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._end = undefined;
      this._start = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._end = value.end;
      this._start = value.start;
    }
  }

  // end - computed: false, optional: false, required: true
  private _end?: string; 
  public get end() {
    return this.getStringAttribute('end');
  }
  public set end(value: string) {
    this._end = value;
  }
  // Temporarily expose input value. Use with caution.
  public get endInput() {
    return this._end;
  }

  // start - computed: false, optional: false, required: true
  private _start?: string; 
  public get start() {
    return this.getStringAttribute('start');
  }
  public set start(value: string) {
    this._start = value;
  }
  // Temporarily expose input value. Use with caution.
  public get startInput() {
    return this._start;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetricsTimeFrameRelative {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#duration Dashboard#duration}
  */
  readonly duration: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetricsTimeFrameRelativeToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetricsTimeFrameRelative | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    duration: cdktf.stringToTerraform(struct!.duration),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetricsTimeFrameRelativeToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetricsTimeFrameRelative | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    duration: {
      value: cdktf.stringToHclTerraform(struct!.duration),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetricsTimeFrameRelativeOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetricsTimeFrameRelative | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._duration !== undefined) {
      hasAnyValues = true;
      internalValueResult.duration = this._duration;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetricsTimeFrameRelative | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._duration = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._duration = value.duration;
    }
  }

  // duration - computed: false, optional: false, required: true
  private _duration?: string; 
  public get duration() {
    return this.getStringAttribute('duration');
  }
  public set duration(value: string) {
    this._duration = value;
  }
  // Temporarily expose input value. Use with caution.
  public get durationInput() {
    return this._duration;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetricsTimeFrame {
  /**
  * Absolute time frame specifying a fixed start and end time.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#absolute Dashboard#absolute}
  */
  readonly absolute?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetricsTimeFrameAbsolute;
  /**
  * Relative time frame specifying a duration from the current time.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#relative Dashboard#relative}
  */
  readonly relative?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetricsTimeFrameRelative;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetricsTimeFrameToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetricsTimeFrame | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    absolute: dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetricsTimeFrameAbsoluteToTerraform(struct!.absolute),
    relative: dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetricsTimeFrameRelativeToTerraform(struct!.relative),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetricsTimeFrameToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetricsTimeFrame | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    absolute: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetricsTimeFrameAbsoluteToHclTerraform(struct!.absolute),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetricsTimeFrameAbsolute",
    },
    relative: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetricsTimeFrameRelativeToHclTerraform(struct!.relative),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetricsTimeFrameRelative",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetricsTimeFrameOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetricsTimeFrame | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._absolute?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.absolute = this._absolute?.internalValue;
    }
    if (this._relative?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.relative = this._relative?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetricsTimeFrame | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._absolute.internalValue = undefined;
      this._relative.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._absolute.internalValue = value.absolute;
      this._relative.internalValue = value.relative;
    }
  }

  // absolute - computed: false, optional: true, required: false
  private _absolute = new DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetricsTimeFrameAbsoluteOutputReference(this, "absolute");
  public get absolute() {
    return this._absolute;
  }
  public putAbsolute(value: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetricsTimeFrameAbsolute) {
    this._absolute.internalValue = value;
  }
  public resetAbsolute() {
    this._absolute.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get absoluteInput() {
    return this._absolute.internalValue;
  }

  // relative - computed: false, optional: true, required: false
  private _relative = new DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetricsTimeFrameRelativeOutputReference(this, "relative");
  public get relative() {
    return this._relative;
  }
  public putRelative(value: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetricsTimeFrameRelative) {
    this._relative.internalValue = value;
  }
  public resetRelative() {
    this._relative.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get relativeInput() {
    return this._relative.internalValue;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetrics {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#aggregation Dashboard#aggregation}
  */
  readonly aggregation?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#filters Dashboard#filters}
  */
  readonly filters?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetricsFilters[] | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#promql_query Dashboard#promql_query}
  */
  readonly promqlQuery: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#promql_query_type Dashboard#promql_query_type}
  */
  readonly promqlQueryType?: string;
  /**
  * Specifies the time frame. Can be either absolute or relative.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#time_frame Dashboard#time_frame}
  */
  readonly timeFrame?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetricsTimeFrame;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetricsToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetrics | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    aggregation: cdktf.stringToTerraform(struct!.aggregation),
    filters: cdktf.listMapper(dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetricsFiltersToTerraform, false)(struct!.filters),
    promql_query: cdktf.stringToTerraform(struct!.promqlQuery),
    promql_query_type: cdktf.stringToTerraform(struct!.promqlQueryType),
    time_frame: dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetricsTimeFrameToTerraform(struct!.timeFrame),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetricsToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetrics | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    aggregation: {
      value: cdktf.stringToHclTerraform(struct!.aggregation),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    filters: {
      value: cdktf.listMapperHcl(dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetricsFiltersToHclTerraform, false)(struct!.filters),
      isBlock: true,
      type: "list",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetricsFiltersList",
    },
    promql_query: {
      value: cdktf.stringToHclTerraform(struct!.promqlQuery),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    promql_query_type: {
      value: cdktf.stringToHclTerraform(struct!.promqlQueryType),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    time_frame: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetricsTimeFrameToHclTerraform(struct!.timeFrame),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetricsTimeFrame",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetricsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetrics | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._aggregation !== undefined) {
      hasAnyValues = true;
      internalValueResult.aggregation = this._aggregation;
    }
    if (this._filters?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.filters = this._filters?.internalValue;
    }
    if (this._promqlQuery !== undefined) {
      hasAnyValues = true;
      internalValueResult.promqlQuery = this._promqlQuery;
    }
    if (this._promqlQueryType !== undefined) {
      hasAnyValues = true;
      internalValueResult.promqlQueryType = this._promqlQueryType;
    }
    if (this._timeFrame?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.timeFrame = this._timeFrame?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetrics | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._aggregation = undefined;
      this._filters.internalValue = undefined;
      this._promqlQuery = undefined;
      this._promqlQueryType = undefined;
      this._timeFrame.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._aggregation = value.aggregation;
      this._filters.internalValue = value.filters;
      this._promqlQuery = value.promqlQuery;
      this._promqlQueryType = value.promqlQueryType;
      this._timeFrame.internalValue = value.timeFrame;
    }
  }

  // aggregation - computed: true, optional: true, required: false
  private _aggregation?: string; 
  public get aggregation() {
    return this.getStringAttribute('aggregation');
  }
  public set aggregation(value: string) {
    this._aggregation = value;
  }
  public resetAggregation() {
    this._aggregation = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get aggregationInput() {
    return this._aggregation;
  }

  // filters - computed: false, optional: true, required: false
  private _filters = new DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetricsFiltersList(this, "filters", false);
  public get filters() {
    return this._filters;
  }
  public putFilters(value: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetricsFilters[] | cdktf.IResolvable) {
    this._filters.internalValue = value;
  }
  public resetFilters() {
    this._filters.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get filtersInput() {
    return this._filters.internalValue;
  }

  // promql_query - computed: false, optional: false, required: true
  private _promqlQuery?: string; 
  public get promqlQuery() {
    return this.getStringAttribute('promql_query');
  }
  public set promqlQuery(value: string) {
    this._promqlQuery = value;
  }
  // Temporarily expose input value. Use with caution.
  public get promqlQueryInput() {
    return this._promqlQuery;
  }

  // promql_query_type - computed: true, optional: true, required: false
  private _promqlQueryType?: string; 
  public get promqlQueryType() {
    return this.getStringAttribute('promql_query_type');
  }
  public set promqlQueryType(value: string) {
    this._promqlQueryType = value;
  }
  public resetPromqlQueryType() {
    this._promqlQueryType = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get promqlQueryTypeInput() {
    return this._promqlQueryType;
  }

  // time_frame - computed: false, optional: true, required: false
  private _timeFrame = new DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetricsTimeFrameOutputReference(this, "time_frame");
  public get timeFrame() {
    return this._timeFrame;
  }
  public putTimeFrame(value: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetricsTimeFrame) {
    this._timeFrame.internalValue = value;
  }
  public resetTimeFrame() {
    this._timeFrame.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get timeFrameInput() {
    return this._timeFrame.internalValue;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansAggregation {
  /**
  * The type of the aggregation. When the aggregation type is `metrics`, can be one of ["avg" "max" "min" "percentile_50" "percentile_95" "percentile_99" "sum" "unspecified"]. When the aggregation type is `dimension`, can be one of ["error_count" "unique_count" "unspecified"].
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#aggregation_type Dashboard#aggregation_type}
  */
  readonly aggregationType: string;
  /**
  * The field to aggregate on. When the aggregation type is `metrics`, can be one of ["duration" "unspecified"]. When the aggregation type is `dimension`, can be one of ["trace_id" "unspecified"].
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#field Dashboard#field}
  */
  readonly field: string;
  /**
  * Can be one of ["metric" "dimension"]
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#type Dashboard#type}
  */
  readonly type: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansAggregationToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansAggregation | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    aggregation_type: cdktf.stringToTerraform(struct!.aggregationType),
    field: cdktf.stringToTerraform(struct!.field),
    type: cdktf.stringToTerraform(struct!.type),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansAggregationToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansAggregation | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    aggregation_type: {
      value: cdktf.stringToHclTerraform(struct!.aggregationType),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    field: {
      value: cdktf.stringToHclTerraform(struct!.field),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    type: {
      value: cdktf.stringToHclTerraform(struct!.type),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansAggregationOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansAggregation | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._aggregationType !== undefined) {
      hasAnyValues = true;
      internalValueResult.aggregationType = this._aggregationType;
    }
    if (this._field !== undefined) {
      hasAnyValues = true;
      internalValueResult.field = this._field;
    }
    if (this._type !== undefined) {
      hasAnyValues = true;
      internalValueResult.type = this._type;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansAggregation | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._aggregationType = undefined;
      this._field = undefined;
      this._type = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._aggregationType = value.aggregationType;
      this._field = value.field;
      this._type = value.type;
    }
  }

  // aggregation_type - computed: false, optional: false, required: true
  private _aggregationType?: string; 
  public get aggregationType() {
    return this.getStringAttribute('aggregation_type');
  }
  public set aggregationType(value: string) {
    this._aggregationType = value;
  }
  // Temporarily expose input value. Use with caution.
  public get aggregationTypeInput() {
    return this._aggregationType;
  }

  // field - computed: false, optional: false, required: true
  private _field?: string; 
  public get field() {
    return this.getStringAttribute('field');
  }
  public set field(value: string) {
    this._field = value;
  }
  // Temporarily expose input value. Use with caution.
  public get fieldInput() {
    return this._field;
  }

  // type - computed: false, optional: false, required: true
  private _type?: string; 
  public get type() {
    return this.getStringAttribute('type');
  }
  public set type(value: string) {
    this._type = value;
  }
  // Temporarily expose input value. Use with caution.
  public get typeInput() {
    return this._type;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansFiltersField {
  /**
  * The type of the field. Can be one of ["metadata" "tag" "process_tag"]
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#type Dashboard#type}
  */
  readonly type: string;
  /**
  * The value of the field. When the field type is `metadata`, can be one of ["application_name" "operation_name" "service_name" "subsystem_name" "unspecified"]
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#value Dashboard#value}
  */
  readonly value: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansFiltersFieldToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansFiltersField | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    type: cdktf.stringToTerraform(struct!.type),
    value: cdktf.stringToTerraform(struct!.value),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansFiltersFieldToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansFiltersField | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    type: {
      value: cdktf.stringToHclTerraform(struct!.type),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    value: {
      value: cdktf.stringToHclTerraform(struct!.value),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansFiltersFieldOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansFiltersField | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._type !== undefined) {
      hasAnyValues = true;
      internalValueResult.type = this._type;
    }
    if (this._value !== undefined) {
      hasAnyValues = true;
      internalValueResult.value = this._value;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansFiltersField | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._type = undefined;
      this._value = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._type = value.type;
      this._value = value.value;
    }
  }

  // type - computed: false, optional: false, required: true
  private _type?: string; 
  public get type() {
    return this.getStringAttribute('type');
  }
  public set type(value: string) {
    this._type = value;
  }
  // Temporarily expose input value. Use with caution.
  public get typeInput() {
    return this._type;
  }

  // value - computed: false, optional: false, required: true
  private _value?: string; 
  public get value() {
    return this.getStringAttribute('value');
  }
  public set value(value: string) {
    this._value = value;
  }
  // Temporarily expose input value. Use with caution.
  public get valueInput() {
    return this._value;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansFiltersOperator {
  /**
  * the values to filter by. When the type is `equals`, this field is optional, the filter will match only the selected values, and all the values if not set. When the type is `not_equals`, this field is required, and the filter will match spans without the selected values.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#selected_values Dashboard#selected_values}
  */
  readonly selectedValues?: string[];
  /**
  * The type of the operator. Can be one of `equals` or `not_equals`.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#type Dashboard#type}
  */
  readonly type: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansFiltersOperatorToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansFiltersOperator | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    selected_values: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.selectedValues),
    type: cdktf.stringToTerraform(struct!.type),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansFiltersOperatorToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansFiltersOperator | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    selected_values: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.selectedValues),
      isBlock: false,
      type: "list",
      storageClassType: "stringList",
    },
    type: {
      value: cdktf.stringToHclTerraform(struct!.type),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansFiltersOperatorOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansFiltersOperator | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._selectedValues !== undefined) {
      hasAnyValues = true;
      internalValueResult.selectedValues = this._selectedValues;
    }
    if (this._type !== undefined) {
      hasAnyValues = true;
      internalValueResult.type = this._type;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansFiltersOperator | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._selectedValues = undefined;
      this._type = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._selectedValues = value.selectedValues;
      this._type = value.type;
    }
  }

  // selected_values - computed: false, optional: true, required: false
  private _selectedValues?: string[]; 
  public get selectedValues() {
    return this.getListAttribute('selected_values');
  }
  public set selectedValues(value: string[]) {
    this._selectedValues = value;
  }
  public resetSelectedValues() {
    this._selectedValues = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get selectedValuesInput() {
    return this._selectedValues;
  }

  // type - computed: false, optional: false, required: true
  private _type?: string; 
  public get type() {
    return this.getStringAttribute('type');
  }
  public set type(value: string) {
    this._type = value;
  }
  // Temporarily expose input value. Use with caution.
  public get typeInput() {
    return this._type;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansFilters {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#field Dashboard#field}
  */
  readonly field: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansFiltersField;
  /**
  * Operator to use for filtering.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#operator Dashboard#operator}
  */
  readonly operator: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansFiltersOperator;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansFiltersToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansFilters | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    field: dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansFiltersFieldToTerraform(struct!.field),
    operator: dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansFiltersOperatorToTerraform(struct!.operator),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansFiltersToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansFilters | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    field: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansFiltersFieldToHclTerraform(struct!.field),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansFiltersField",
    },
    operator: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansFiltersOperatorToHclTerraform(struct!.operator),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansFiltersOperator",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansFiltersOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansFilters | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._field?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.field = this._field?.internalValue;
    }
    if (this._operator?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.operator = this._operator?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansFilters | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._field.internalValue = undefined;
      this._operator.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._field.internalValue = value.field;
      this._operator.internalValue = value.operator;
    }
  }

  // field - computed: false, optional: false, required: true
  private _field = new DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansFiltersFieldOutputReference(this, "field");
  public get field() {
    return this._field;
  }
  public putField(value: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansFiltersField) {
    this._field.internalValue = value;
  }
  // Temporarily expose input value. Use with caution.
  public get fieldInput() {
    return this._field.internalValue;
  }

  // operator - computed: false, optional: false, required: true
  private _operator = new DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansFiltersOperatorOutputReference(this, "operator");
  public get operator() {
    return this._operator;
  }
  public putOperator(value: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansFiltersOperator) {
    this._operator.internalValue = value;
  }
  // Temporarily expose input value. Use with caution.
  public get operatorInput() {
    return this._operator.internalValue;
  }
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansFiltersList extends cdktf.ComplexList {
  public internalValue? : DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansFilters[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansFiltersOutputReference {
    return new DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansFiltersOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansGroupBy {
  /**
  * The type of the field. Can be one of ["metadata" "tag" "process_tag"]
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#type Dashboard#type}
  */
  readonly type: string;
  /**
  * The value of the field. When the field type is `metadata`, can be one of ["application_name" "operation_name" "service_name" "subsystem_name" "unspecified"]
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#value Dashboard#value}
  */
  readonly value: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansGroupByToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansGroupBy | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    type: cdktf.stringToTerraform(struct!.type),
    value: cdktf.stringToTerraform(struct!.value),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansGroupByToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansGroupBy | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    type: {
      value: cdktf.stringToHclTerraform(struct!.type),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    value: {
      value: cdktf.stringToHclTerraform(struct!.value),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansGroupByOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansGroupBy | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._type !== undefined) {
      hasAnyValues = true;
      internalValueResult.type = this._type;
    }
    if (this._value !== undefined) {
      hasAnyValues = true;
      internalValueResult.value = this._value;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansGroupBy | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._type = undefined;
      this._value = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._type = value.type;
      this._value = value.value;
    }
  }

  // type - computed: false, optional: false, required: true
  private _type?: string; 
  public get type() {
    return this.getStringAttribute('type');
  }
  public set type(value: string) {
    this._type = value;
  }
  // Temporarily expose input value. Use with caution.
  public get typeInput() {
    return this._type;
  }

  // value - computed: false, optional: false, required: true
  private _value?: string; 
  public get value() {
    return this.getStringAttribute('value');
  }
  public set value(value: string) {
    this._value = value;
  }
  // Temporarily expose input value. Use with caution.
  public get valueInput() {
    return this._value;
  }
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansGroupByList extends cdktf.ComplexList {
  public internalValue? : DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansGroupBy[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansGroupByOutputReference {
    return new DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansGroupByOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansTimeFrameAbsolute {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#end Dashboard#end}
  */
  readonly end: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#start Dashboard#start}
  */
  readonly start: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansTimeFrameAbsoluteToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansTimeFrameAbsolute | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    end: cdktf.stringToTerraform(struct!.end),
    start: cdktf.stringToTerraform(struct!.start),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansTimeFrameAbsoluteToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansTimeFrameAbsolute | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    end: {
      value: cdktf.stringToHclTerraform(struct!.end),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    start: {
      value: cdktf.stringToHclTerraform(struct!.start),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansTimeFrameAbsoluteOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansTimeFrameAbsolute | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._end !== undefined) {
      hasAnyValues = true;
      internalValueResult.end = this._end;
    }
    if (this._start !== undefined) {
      hasAnyValues = true;
      internalValueResult.start = this._start;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansTimeFrameAbsolute | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._end = undefined;
      this._start = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._end = value.end;
      this._start = value.start;
    }
  }

  // end - computed: false, optional: false, required: true
  private _end?: string; 
  public get end() {
    return this.getStringAttribute('end');
  }
  public set end(value: string) {
    this._end = value;
  }
  // Temporarily expose input value. Use with caution.
  public get endInput() {
    return this._end;
  }

  // start - computed: false, optional: false, required: true
  private _start?: string; 
  public get start() {
    return this.getStringAttribute('start');
  }
  public set start(value: string) {
    this._start = value;
  }
  // Temporarily expose input value. Use with caution.
  public get startInput() {
    return this._start;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansTimeFrameRelative {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#duration Dashboard#duration}
  */
  readonly duration: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansTimeFrameRelativeToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansTimeFrameRelative | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    duration: cdktf.stringToTerraform(struct!.duration),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansTimeFrameRelativeToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansTimeFrameRelative | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    duration: {
      value: cdktf.stringToHclTerraform(struct!.duration),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansTimeFrameRelativeOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansTimeFrameRelative | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._duration !== undefined) {
      hasAnyValues = true;
      internalValueResult.duration = this._duration;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansTimeFrameRelative | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._duration = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._duration = value.duration;
    }
  }

  // duration - computed: false, optional: false, required: true
  private _duration?: string; 
  public get duration() {
    return this.getStringAttribute('duration');
  }
  public set duration(value: string) {
    this._duration = value;
  }
  // Temporarily expose input value. Use with caution.
  public get durationInput() {
    return this._duration;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansTimeFrame {
  /**
  * Absolute time frame specifying a fixed start and end time.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#absolute Dashboard#absolute}
  */
  readonly absolute?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansTimeFrameAbsolute;
  /**
  * Relative time frame specifying a duration from the current time.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#relative Dashboard#relative}
  */
  readonly relative?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansTimeFrameRelative;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansTimeFrameToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansTimeFrame | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    absolute: dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansTimeFrameAbsoluteToTerraform(struct!.absolute),
    relative: dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansTimeFrameRelativeToTerraform(struct!.relative),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansTimeFrameToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansTimeFrame | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    absolute: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansTimeFrameAbsoluteToHclTerraform(struct!.absolute),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansTimeFrameAbsolute",
    },
    relative: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansTimeFrameRelativeToHclTerraform(struct!.relative),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansTimeFrameRelative",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansTimeFrameOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansTimeFrame | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._absolute?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.absolute = this._absolute?.internalValue;
    }
    if (this._relative?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.relative = this._relative?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansTimeFrame | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._absolute.internalValue = undefined;
      this._relative.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._absolute.internalValue = value.absolute;
      this._relative.internalValue = value.relative;
    }
  }

  // absolute - computed: false, optional: true, required: false
  private _absolute = new DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansTimeFrameAbsoluteOutputReference(this, "absolute");
  public get absolute() {
    return this._absolute;
  }
  public putAbsolute(value: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansTimeFrameAbsolute) {
    this._absolute.internalValue = value;
  }
  public resetAbsolute() {
    this._absolute.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get absoluteInput() {
    return this._absolute.internalValue;
  }

  // relative - computed: false, optional: true, required: false
  private _relative = new DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansTimeFrameRelativeOutputReference(this, "relative");
  public get relative() {
    return this._relative;
  }
  public putRelative(value: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansTimeFrameRelative) {
    this._relative.internalValue = value;
  }
  public resetRelative() {
    this._relative.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get relativeInput() {
    return this._relative.internalValue;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpans {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#aggregation Dashboard#aggregation}
  */
  readonly aggregation?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansAggregation;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#filters Dashboard#filters}
  */
  readonly filters?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansFilters[] | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#group_by Dashboard#group_by}
  */
  readonly groupBy?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansGroupBy[] | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#lucene_query Dashboard#lucene_query}
  */
  readonly luceneQuery?: string;
  /**
  * Specifies the time frame. Can be either absolute or relative.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#time_frame Dashboard#time_frame}
  */
  readonly timeFrame?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansTimeFrame;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpans | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    aggregation: dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansAggregationToTerraform(struct!.aggregation),
    filters: cdktf.listMapper(dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansFiltersToTerraform, false)(struct!.filters),
    group_by: cdktf.listMapper(dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansGroupByToTerraform, false)(struct!.groupBy),
    lucene_query: cdktf.stringToTerraform(struct!.luceneQuery),
    time_frame: dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansTimeFrameToTerraform(struct!.timeFrame),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpans | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    aggregation: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansAggregationToHclTerraform(struct!.aggregation),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansAggregation",
    },
    filters: {
      value: cdktf.listMapperHcl(dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansFiltersToHclTerraform, false)(struct!.filters),
      isBlock: true,
      type: "list",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansFiltersList",
    },
    group_by: {
      value: cdktf.listMapperHcl(dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansGroupByToHclTerraform, false)(struct!.groupBy),
      isBlock: true,
      type: "list",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansGroupByList",
    },
    lucene_query: {
      value: cdktf.stringToHclTerraform(struct!.luceneQuery),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    time_frame: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansTimeFrameToHclTerraform(struct!.timeFrame),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansTimeFrame",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpans | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._aggregation?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.aggregation = this._aggregation?.internalValue;
    }
    if (this._filters?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.filters = this._filters?.internalValue;
    }
    if (this._groupBy?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.groupBy = this._groupBy?.internalValue;
    }
    if (this._luceneQuery !== undefined) {
      hasAnyValues = true;
      internalValueResult.luceneQuery = this._luceneQuery;
    }
    if (this._timeFrame?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.timeFrame = this._timeFrame?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpans | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._aggregation.internalValue = undefined;
      this._filters.internalValue = undefined;
      this._groupBy.internalValue = undefined;
      this._luceneQuery = undefined;
      this._timeFrame.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._aggregation.internalValue = value.aggregation;
      this._filters.internalValue = value.filters;
      this._groupBy.internalValue = value.groupBy;
      this._luceneQuery = value.luceneQuery;
      this._timeFrame.internalValue = value.timeFrame;
    }
  }

  // aggregation - computed: false, optional: true, required: false
  private _aggregation = new DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansAggregationOutputReference(this, "aggregation");
  public get aggregation() {
    return this._aggregation;
  }
  public putAggregation(value: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansAggregation) {
    this._aggregation.internalValue = value;
  }
  public resetAggregation() {
    this._aggregation.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get aggregationInput() {
    return this._aggregation.internalValue;
  }

  // filters - computed: false, optional: true, required: false
  private _filters = new DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansFiltersList(this, "filters", false);
  public get filters() {
    return this._filters;
  }
  public putFilters(value: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansFilters[] | cdktf.IResolvable) {
    this._filters.internalValue = value;
  }
  public resetFilters() {
    this._filters.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get filtersInput() {
    return this._filters.internalValue;
  }

  // group_by - computed: false, optional: true, required: false
  private _groupBy = new DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansGroupByList(this, "group_by", false);
  public get groupBy() {
    return this._groupBy;
  }
  public putGroupBy(value: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansGroupBy[] | cdktf.IResolvable) {
    this._groupBy.internalValue = value;
  }
  public resetGroupBy() {
    this._groupBy.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get groupByInput() {
    return this._groupBy.internalValue;
  }

  // lucene_query - computed: false, optional: true, required: false
  private _luceneQuery?: string; 
  public get luceneQuery() {
    return this.getStringAttribute('lucene_query');
  }
  public set luceneQuery(value: string) {
    this._luceneQuery = value;
  }
  public resetLuceneQuery() {
    this._luceneQuery = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get luceneQueryInput() {
    return this._luceneQuery;
  }

  // time_frame - computed: false, optional: true, required: false
  private _timeFrame = new DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansTimeFrameOutputReference(this, "time_frame");
  public get timeFrame() {
    return this._timeFrame;
  }
  public putTimeFrame(value: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansTimeFrame) {
    this._timeFrame.internalValue = value;
  }
  public resetTimeFrame() {
    this._timeFrame.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get timeFrameInput() {
    return this._timeFrame.internalValue;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuery {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#data_prime Dashboard#data_prime}
  */
  readonly dataPrime?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrime;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#logs Dashboard#logs}
  */
  readonly logs?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogs;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#metrics Dashboard#metrics}
  */
  readonly metrics?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetrics;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#spans Dashboard#spans}
  */
  readonly spans?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpans;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuery | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    data_prime: dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeToTerraform(struct!.dataPrime),
    logs: dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsToTerraform(struct!.logs),
    metrics: dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetricsToTerraform(struct!.metrics),
    spans: dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansToTerraform(struct!.spans),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuery | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    data_prime: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeToHclTerraform(struct!.dataPrime),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrime",
    },
    logs: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsToHclTerraform(struct!.logs),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogs",
    },
    metrics: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetricsToHclTerraform(struct!.metrics),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetrics",
    },
    spans: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansToHclTerraform(struct!.spans),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpans",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuery | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._dataPrime?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.dataPrime = this._dataPrime?.internalValue;
    }
    if (this._logs?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.logs = this._logs?.internalValue;
    }
    if (this._metrics?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.metrics = this._metrics?.internalValue;
    }
    if (this._spans?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.spans = this._spans?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuery | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._dataPrime.internalValue = undefined;
      this._logs.internalValue = undefined;
      this._metrics.internalValue = undefined;
      this._spans.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._dataPrime.internalValue = value.dataPrime;
      this._logs.internalValue = value.logs;
      this._metrics.internalValue = value.metrics;
      this._spans.internalValue = value.spans;
    }
  }

  // data_prime - computed: false, optional: true, required: false
  private _dataPrime = new DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrimeOutputReference(this, "data_prime");
  public get dataPrime() {
    return this._dataPrime;
  }
  public putDataPrime(value: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryDataPrime) {
    this._dataPrime.internalValue = value;
  }
  public resetDataPrime() {
    this._dataPrime.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get dataPrimeInput() {
    return this._dataPrime.internalValue;
  }

  // logs - computed: false, optional: true, required: false
  private _logs = new DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogsOutputReference(this, "logs");
  public get logs() {
    return this._logs;
  }
  public putLogs(value: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryLogs) {
    this._logs.internalValue = value;
  }
  public resetLogs() {
    this._logs.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get logsInput() {
    return this._logs.internalValue;
  }

  // metrics - computed: false, optional: true, required: false
  private _metrics = new DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetricsOutputReference(this, "metrics");
  public get metrics() {
    return this._metrics;
  }
  public putMetrics(value: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryMetrics) {
    this._metrics.internalValue = value;
  }
  public resetMetrics() {
    this._metrics.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get metricsInput() {
    return this._metrics.internalValue;
  }

  // spans - computed: false, optional: true, required: false
  private _spans = new DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpansOutputReference(this, "spans");
  public get spans() {
    return this._spans;
  }
  public putSpans(value: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuerySpans) {
    this._spans.internalValue = value;
  }
  public resetSpans() {
    this._spans.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get spansInput() {
    return this._spans.internalValue;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionHexagonThresholds {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#color Dashboard#color}
  */
  readonly color?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#from Dashboard#from}
  */
  readonly from: number;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#label Dashboard#label}
  */
  readonly label?: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionHexagonThresholdsToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonThresholds | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    color: cdktf.stringToTerraform(struct!.color),
    from: cdktf.numberToTerraform(struct!.from),
    label: cdktf.stringToTerraform(struct!.label),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionHexagonThresholdsToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonThresholds | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    color: {
      value: cdktf.stringToHclTerraform(struct!.color),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    from: {
      value: cdktf.numberToHclTerraform(struct!.from),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    label: {
      value: cdktf.stringToHclTerraform(struct!.label),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHexagonThresholdsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionHexagonThresholds | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._color !== undefined) {
      hasAnyValues = true;
      internalValueResult.color = this._color;
    }
    if (this._from !== undefined) {
      hasAnyValues = true;
      internalValueResult.from = this._from;
    }
    if (this._label !== undefined) {
      hasAnyValues = true;
      internalValueResult.label = this._label;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonThresholds | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._color = undefined;
      this._from = undefined;
      this._label = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._color = value.color;
      this._from = value.from;
      this._label = value.label;
    }
  }

  // color - computed: true, optional: true, required: false
  private _color?: string; 
  public get color() {
    return this.getStringAttribute('color');
  }
  public set color(value: string) {
    this._color = value;
  }
  public resetColor() {
    this._color = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get colorInput() {
    return this._color;
  }

  // from - computed: true, optional: false, required: true
  private _from?: number; 
  public get from() {
    return this.getNumberAttribute('from');
  }
  public set from(value: number) {
    this._from = value;
  }
  // Temporarily expose input value. Use with caution.
  public get fromInput() {
    return this._from;
  }

  // label - computed: true, optional: true, required: false
  private _label?: string; 
  public get label() {
    return this.getStringAttribute('label');
  }
  public set label(value: string) {
    this._label = value;
  }
  public resetLabel() {
    this._label = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get labelInput() {
    return this._label;
  }
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHexagonThresholdsList extends cdktf.ComplexList {
  public internalValue? : DashboardLayoutSectionsRowsWidgetsDefinitionHexagonThresholds[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DashboardLayoutSectionsRowsWidgetsDefinitionHexagonThresholdsOutputReference {
    return new DashboardLayoutSectionsRowsWidgetsDefinitionHexagonThresholdsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionHexagon {
  /**
  * A custom unit
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#custom_unit Dashboard#custom_unit}
  */
  readonly customUnit?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#data_mode_type Dashboard#data_mode_type}
  */
  readonly dataModeType?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#decimal Dashboard#decimal}
  */
  readonly decimal?: number;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#legend Dashboard#legend}
  */
  readonly legend?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonLegend;
  /**
  * The legend by. Valid values are: groups, thresholds, unspecified.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#legend_by Dashboard#legend_by}
  */
  readonly legendBy?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#max Dashboard#max}
  */
  readonly max?: number;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#min Dashboard#min}
  */
  readonly min?: number;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#query Dashboard#query}
  */
  readonly query: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuery;
  /**
  * The threshold type. Valid values are: absolute, relative, unspecified.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#threshold_type Dashboard#threshold_type}
  */
  readonly thresholdType?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#thresholds Dashboard#thresholds}
  */
  readonly thresholds?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonThresholds[] | cdktf.IResolvable;
  /**
  * The unit. Valid values are: bytes, bytes_iec, custom, euro, euro_cents, gbytes, gibytes, kbytes, kibytes, mbytes, mibytes, microseconds, milliseconds, nanoseconds, percent01, percent100, seconds, unspecified, usd, usd_cents.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#unit Dashboard#unit}
  */
  readonly unit?: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionHexagonToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagon | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    custom_unit: cdktf.stringToTerraform(struct!.customUnit),
    data_mode_type: cdktf.stringToTerraform(struct!.dataModeType),
    decimal: cdktf.numberToTerraform(struct!.decimal),
    legend: dashboardLayoutSectionsRowsWidgetsDefinitionHexagonLegendToTerraform(struct!.legend),
    legend_by: cdktf.stringToTerraform(struct!.legendBy),
    max: cdktf.numberToTerraform(struct!.max),
    min: cdktf.numberToTerraform(struct!.min),
    query: dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryToTerraform(struct!.query),
    threshold_type: cdktf.stringToTerraform(struct!.thresholdType),
    thresholds: cdktf.listMapper(dashboardLayoutSectionsRowsWidgetsDefinitionHexagonThresholdsToTerraform, false)(struct!.thresholds),
    unit: cdktf.stringToTerraform(struct!.unit),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionHexagonToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagon | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    custom_unit: {
      value: cdktf.stringToHclTerraform(struct!.customUnit),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    data_mode_type: {
      value: cdktf.stringToHclTerraform(struct!.dataModeType),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    decimal: {
      value: cdktf.numberToHclTerraform(struct!.decimal),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    legend: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionHexagonLegendToHclTerraform(struct!.legend),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionHexagonLegend",
    },
    legend_by: {
      value: cdktf.stringToHclTerraform(struct!.legendBy),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    max: {
      value: cdktf.numberToHclTerraform(struct!.max),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    min: {
      value: cdktf.numberToHclTerraform(struct!.min),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    query: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryToHclTerraform(struct!.query),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuery",
    },
    threshold_type: {
      value: cdktf.stringToHclTerraform(struct!.thresholdType),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    thresholds: {
      value: cdktf.listMapperHcl(dashboardLayoutSectionsRowsWidgetsDefinitionHexagonThresholdsToHclTerraform, false)(struct!.thresholds),
      isBlock: true,
      type: "set",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionHexagonThresholdsList",
    },
    unit: {
      value: cdktf.stringToHclTerraform(struct!.unit),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHexagonOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionHexagon | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._customUnit !== undefined) {
      hasAnyValues = true;
      internalValueResult.customUnit = this._customUnit;
    }
    if (this._dataModeType !== undefined) {
      hasAnyValues = true;
      internalValueResult.dataModeType = this._dataModeType;
    }
    if (this._decimal !== undefined) {
      hasAnyValues = true;
      internalValueResult.decimal = this._decimal;
    }
    if (this._legend?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.legend = this._legend?.internalValue;
    }
    if (this._legendBy !== undefined) {
      hasAnyValues = true;
      internalValueResult.legendBy = this._legendBy;
    }
    if (this._max !== undefined) {
      hasAnyValues = true;
      internalValueResult.max = this._max;
    }
    if (this._min !== undefined) {
      hasAnyValues = true;
      internalValueResult.min = this._min;
    }
    if (this._query?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.query = this._query?.internalValue;
    }
    if (this._thresholdType !== undefined) {
      hasAnyValues = true;
      internalValueResult.thresholdType = this._thresholdType;
    }
    if (this._thresholds?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.thresholds = this._thresholds?.internalValue;
    }
    if (this._unit !== undefined) {
      hasAnyValues = true;
      internalValueResult.unit = this._unit;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionHexagon | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._customUnit = undefined;
      this._dataModeType = undefined;
      this._decimal = undefined;
      this._legend.internalValue = undefined;
      this._legendBy = undefined;
      this._max = undefined;
      this._min = undefined;
      this._query.internalValue = undefined;
      this._thresholdType = undefined;
      this._thresholds.internalValue = undefined;
      this._unit = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._customUnit = value.customUnit;
      this._dataModeType = value.dataModeType;
      this._decimal = value.decimal;
      this._legend.internalValue = value.legend;
      this._legendBy = value.legendBy;
      this._max = value.max;
      this._min = value.min;
      this._query.internalValue = value.query;
      this._thresholdType = value.thresholdType;
      this._thresholds.internalValue = value.thresholds;
      this._unit = value.unit;
    }
  }

  // custom_unit - computed: false, optional: true, required: false
  private _customUnit?: string; 
  public get customUnit() {
    return this.getStringAttribute('custom_unit');
  }
  public set customUnit(value: string) {
    this._customUnit = value;
  }
  public resetCustomUnit() {
    this._customUnit = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get customUnitInput() {
    return this._customUnit;
  }

  // data_mode_type - computed: true, optional: true, required: false
  private _dataModeType?: string; 
  public get dataModeType() {
    return this.getStringAttribute('data_mode_type');
  }
  public set dataModeType(value: string) {
    this._dataModeType = value;
  }
  public resetDataModeType() {
    this._dataModeType = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get dataModeTypeInput() {
    return this._dataModeType;
  }

  // decimal - computed: false, optional: true, required: false
  private _decimal?: number; 
  public get decimal() {
    return this.getNumberAttribute('decimal');
  }
  public set decimal(value: number) {
    this._decimal = value;
  }
  public resetDecimal() {
    this._decimal = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get decimalInput() {
    return this._decimal;
  }

  // legend - computed: false, optional: true, required: false
  private _legend = new DashboardLayoutSectionsRowsWidgetsDefinitionHexagonLegendOutputReference(this, "legend");
  public get legend() {
    return this._legend;
  }
  public putLegend(value: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonLegend) {
    this._legend.internalValue = value;
  }
  public resetLegend() {
    this._legend.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get legendInput() {
    return this._legend.internalValue;
  }

  // legend_by - computed: true, optional: true, required: false
  private _legendBy?: string; 
  public get legendBy() {
    return this.getStringAttribute('legend_by');
  }
  public set legendBy(value: string) {
    this._legendBy = value;
  }
  public resetLegendBy() {
    this._legendBy = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get legendByInput() {
    return this._legendBy;
  }

  // max - computed: false, optional: true, required: false
  private _max?: number; 
  public get max() {
    return this.getNumberAttribute('max');
  }
  public set max(value: number) {
    this._max = value;
  }
  public resetMax() {
    this._max = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get maxInput() {
    return this._max;
  }

  // min - computed: false, optional: true, required: false
  private _min?: number; 
  public get min() {
    return this.getNumberAttribute('min');
  }
  public set min(value: number) {
    this._min = value;
  }
  public resetMin() {
    this._min = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get minInput() {
    return this._min;
  }

  // query - computed: false, optional: false, required: true
  private _query = new DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQueryOutputReference(this, "query");
  public get query() {
    return this._query;
  }
  public putQuery(value: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonQuery) {
    this._query.internalValue = value;
  }
  // Temporarily expose input value. Use with caution.
  public get queryInput() {
    return this._query.internalValue;
  }

  // threshold_type - computed: true, optional: true, required: false
  private _thresholdType?: string; 
  public get thresholdType() {
    return this.getStringAttribute('threshold_type');
  }
  public set thresholdType(value: string) {
    this._thresholdType = value;
  }
  public resetThresholdType() {
    this._thresholdType = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get thresholdTypeInput() {
    return this._thresholdType;
  }

  // thresholds - computed: true, optional: true, required: false
  private _thresholds = new DashboardLayoutSectionsRowsWidgetsDefinitionHexagonThresholdsList(this, "thresholds", true);
  public get thresholds() {
    return this._thresholds;
  }
  public putThresholds(value: DashboardLayoutSectionsRowsWidgetsDefinitionHexagonThresholds[] | cdktf.IResolvable) {
    this._thresholds.internalValue = value;
  }
  public resetThresholds() {
    this._thresholds.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get thresholdsInput() {
    return this._thresholds.internalValue;
  }

  // unit - computed: true, optional: true, required: false
  private _unit?: string; 
  public get unit() {
    return this.getStringAttribute('unit');
  }
  public set unit(value: string) {
    this._unit = value;
  }
  public resetUnit() {
    this._unit = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get unitInput() {
    return this._unit;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersLogsObservationField {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#keypath Dashboard#keypath}
  */
  readonly keypath: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#scope Dashboard#scope}
  */
  readonly scope: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersLogsObservationFieldToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersLogsObservationField | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    keypath: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.keypath),
    scope: cdktf.stringToTerraform(struct!.scope),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersLogsObservationFieldToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersLogsObservationField | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    keypath: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.keypath),
      isBlock: false,
      type: "list",
      storageClassType: "stringList",
    },
    scope: {
      value: cdktf.stringToHclTerraform(struct!.scope),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersLogsObservationFieldOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersLogsObservationField | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._keypath !== undefined) {
      hasAnyValues = true;
      internalValueResult.keypath = this._keypath;
    }
    if (this._scope !== undefined) {
      hasAnyValues = true;
      internalValueResult.scope = this._scope;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersLogsObservationField | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._keypath = undefined;
      this._scope = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._keypath = value.keypath;
      this._scope = value.scope;
    }
  }

  // keypath - computed: false, optional: false, required: true
  private _keypath?: string[]; 
  public get keypath() {
    return this.getListAttribute('keypath');
  }
  public set keypath(value: string[]) {
    this._keypath = value;
  }
  // Temporarily expose input value. Use with caution.
  public get keypathInput() {
    return this._keypath;
  }

  // scope - computed: false, optional: false, required: true
  private _scope?: string; 
  public get scope() {
    return this.getStringAttribute('scope');
  }
  public set scope(value: string) {
    this._scope = value;
  }
  // Temporarily expose input value. Use with caution.
  public get scopeInput() {
    return this._scope;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersLogsOperator {
  /**
  * the values to filter by. When the type is `equals`, this field is optional, the filter will match only the selected values, and all the values if not set. When the type is `not_equals`, this field is required, and the filter will match spans without the selected values.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#selected_values Dashboard#selected_values}
  */
  readonly selectedValues?: string[];
  /**
  * The type of the operator. Can be one of `equals` or `not_equals`.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#type Dashboard#type}
  */
  readonly type: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersLogsOperatorToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersLogsOperator | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    selected_values: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.selectedValues),
    type: cdktf.stringToTerraform(struct!.type),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersLogsOperatorToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersLogsOperator | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    selected_values: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.selectedValues),
      isBlock: false,
      type: "list",
      storageClassType: "stringList",
    },
    type: {
      value: cdktf.stringToHclTerraform(struct!.type),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersLogsOperatorOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersLogsOperator | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._selectedValues !== undefined) {
      hasAnyValues = true;
      internalValueResult.selectedValues = this._selectedValues;
    }
    if (this._type !== undefined) {
      hasAnyValues = true;
      internalValueResult.type = this._type;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersLogsOperator | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._selectedValues = undefined;
      this._type = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._selectedValues = value.selectedValues;
      this._type = value.type;
    }
  }

  // selected_values - computed: false, optional: true, required: false
  private _selectedValues?: string[]; 
  public get selectedValues() {
    return this.getListAttribute('selected_values');
  }
  public set selectedValues(value: string[]) {
    this._selectedValues = value;
  }
  public resetSelectedValues() {
    this._selectedValues = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get selectedValuesInput() {
    return this._selectedValues;
  }

  // type - computed: false, optional: false, required: true
  private _type?: string; 
  public get type() {
    return this.getStringAttribute('type');
  }
  public set type(value: string) {
    this._type = value;
  }
  // Temporarily expose input value. Use with caution.
  public get typeInput() {
    return this._type;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersLogs {
  /**
  * Field in the logs to apply the filter on.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#field Dashboard#field}
  */
  readonly field: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#observation_field Dashboard#observation_field}
  */
  readonly observationField?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersLogsObservationField;
  /**
  * Operator to use for filtering.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#operator Dashboard#operator}
  */
  readonly operator: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersLogsOperator;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersLogsToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersLogs | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    field: cdktf.stringToTerraform(struct!.field),
    observation_field: dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersLogsObservationFieldToTerraform(struct!.observationField),
    operator: dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersLogsOperatorToTerraform(struct!.operator),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersLogsToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersLogs | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    field: {
      value: cdktf.stringToHclTerraform(struct!.field),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    observation_field: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersLogsObservationFieldToHclTerraform(struct!.observationField),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersLogsObservationField",
    },
    operator: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersLogsOperatorToHclTerraform(struct!.operator),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersLogsOperator",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersLogsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersLogs | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._field !== undefined) {
      hasAnyValues = true;
      internalValueResult.field = this._field;
    }
    if (this._observationField?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.observationField = this._observationField?.internalValue;
    }
    if (this._operator?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.operator = this._operator?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersLogs | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._field = undefined;
      this._observationField.internalValue = undefined;
      this._operator.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._field = value.field;
      this._observationField.internalValue = value.observationField;
      this._operator.internalValue = value.operator;
    }
  }

  // field - computed: false, optional: false, required: true
  private _field?: string; 
  public get field() {
    return this.getStringAttribute('field');
  }
  public set field(value: string) {
    this._field = value;
  }
  // Temporarily expose input value. Use with caution.
  public get fieldInput() {
    return this._field;
  }

  // observation_field - computed: false, optional: true, required: false
  private _observationField = new DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersLogsObservationFieldOutputReference(this, "observation_field");
  public get observationField() {
    return this._observationField;
  }
  public putObservationField(value: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersLogsObservationField) {
    this._observationField.internalValue = value;
  }
  public resetObservationField() {
    this._observationField.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get observationFieldInput() {
    return this._observationField.internalValue;
  }

  // operator - computed: false, optional: false, required: true
  private _operator = new DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersLogsOperatorOutputReference(this, "operator");
  public get operator() {
    return this._operator;
  }
  public putOperator(value: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersLogsOperator) {
    this._operator.internalValue = value;
  }
  // Temporarily expose input value. Use with caution.
  public get operatorInput() {
    return this._operator.internalValue;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersMetricsOperator {
  /**
  * the values to filter by. When the type is `equals`, this field is optional, the filter will match only the selected values, and all the values if not set. When the type is `not_equals`, this field is required, and the filter will match spans without the selected values.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#selected_values Dashboard#selected_values}
  */
  readonly selectedValues?: string[];
  /**
  * The type of the operator. Can be one of `equals` or `not_equals`.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#type Dashboard#type}
  */
  readonly type: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersMetricsOperatorToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersMetricsOperator | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    selected_values: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.selectedValues),
    type: cdktf.stringToTerraform(struct!.type),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersMetricsOperatorToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersMetricsOperator | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    selected_values: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.selectedValues),
      isBlock: false,
      type: "list",
      storageClassType: "stringList",
    },
    type: {
      value: cdktf.stringToHclTerraform(struct!.type),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersMetricsOperatorOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersMetricsOperator | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._selectedValues !== undefined) {
      hasAnyValues = true;
      internalValueResult.selectedValues = this._selectedValues;
    }
    if (this._type !== undefined) {
      hasAnyValues = true;
      internalValueResult.type = this._type;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersMetricsOperator | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._selectedValues = undefined;
      this._type = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._selectedValues = value.selectedValues;
      this._type = value.type;
    }
  }

  // selected_values - computed: false, optional: true, required: false
  private _selectedValues?: string[]; 
  public get selectedValues() {
    return this.getListAttribute('selected_values');
  }
  public set selectedValues(value: string[]) {
    this._selectedValues = value;
  }
  public resetSelectedValues() {
    this._selectedValues = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get selectedValuesInput() {
    return this._selectedValues;
  }

  // type - computed: false, optional: false, required: true
  private _type?: string; 
  public get type() {
    return this.getStringAttribute('type');
  }
  public set type(value: string) {
    this._type = value;
  }
  // Temporarily expose input value. Use with caution.
  public get typeInput() {
    return this._type;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersMetrics {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#label Dashboard#label}
  */
  readonly label?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#metric_name Dashboard#metric_name}
  */
  readonly metricName?: string;
  /**
  * Operator to use for filtering.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#operator Dashboard#operator}
  */
  readonly operator: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersMetricsOperator;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersMetricsToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersMetrics | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    label: cdktf.stringToTerraform(struct!.label),
    metric_name: cdktf.stringToTerraform(struct!.metricName),
    operator: dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersMetricsOperatorToTerraform(struct!.operator),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersMetricsToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersMetrics | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    label: {
      value: cdktf.stringToHclTerraform(struct!.label),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    metric_name: {
      value: cdktf.stringToHclTerraform(struct!.metricName),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    operator: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersMetricsOperatorToHclTerraform(struct!.operator),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersMetricsOperator",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersMetricsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersMetrics | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._label !== undefined) {
      hasAnyValues = true;
      internalValueResult.label = this._label;
    }
    if (this._metricName !== undefined) {
      hasAnyValues = true;
      internalValueResult.metricName = this._metricName;
    }
    if (this._operator?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.operator = this._operator?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersMetrics | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._label = undefined;
      this._metricName = undefined;
      this._operator.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._label = value.label;
      this._metricName = value.metricName;
      this._operator.internalValue = value.operator;
    }
  }

  // label - computed: false, optional: true, required: false
  private _label?: string; 
  public get label() {
    return this.getStringAttribute('label');
  }
  public set label(value: string) {
    this._label = value;
  }
  public resetLabel() {
    this._label = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get labelInput() {
    return this._label;
  }

  // metric_name - computed: false, optional: true, required: false
  private _metricName?: string; 
  public get metricName() {
    return this.getStringAttribute('metric_name');
  }
  public set metricName(value: string) {
    this._metricName = value;
  }
  public resetMetricName() {
    this._metricName = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get metricNameInput() {
    return this._metricName;
  }

  // operator - computed: false, optional: false, required: true
  private _operator = new DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersMetricsOperatorOutputReference(this, "operator");
  public get operator() {
    return this._operator;
  }
  public putOperator(value: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersMetricsOperator) {
    this._operator.internalValue = value;
  }
  // Temporarily expose input value. Use with caution.
  public get operatorInput() {
    return this._operator.internalValue;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersSpansField {
  /**
  * The type of the field. Can be one of ["metadata" "tag" "process_tag"]
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#type Dashboard#type}
  */
  readonly type: string;
  /**
  * The value of the field. When the field type is `metadata`, can be one of ["application_name" "operation_name" "service_name" "subsystem_name" "unspecified"]
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#value Dashboard#value}
  */
  readonly value: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersSpansFieldToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersSpansField | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    type: cdktf.stringToTerraform(struct!.type),
    value: cdktf.stringToTerraform(struct!.value),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersSpansFieldToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersSpansField | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    type: {
      value: cdktf.stringToHclTerraform(struct!.type),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    value: {
      value: cdktf.stringToHclTerraform(struct!.value),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersSpansFieldOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersSpansField | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._type !== undefined) {
      hasAnyValues = true;
      internalValueResult.type = this._type;
    }
    if (this._value !== undefined) {
      hasAnyValues = true;
      internalValueResult.value = this._value;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersSpansField | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._type = undefined;
      this._value = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._type = value.type;
      this._value = value.value;
    }
  }

  // type - computed: false, optional: false, required: true
  private _type?: string; 
  public get type() {
    return this.getStringAttribute('type');
  }
  public set type(value: string) {
    this._type = value;
  }
  // Temporarily expose input value. Use with caution.
  public get typeInput() {
    return this._type;
  }

  // value - computed: false, optional: false, required: true
  private _value?: string; 
  public get value() {
    return this.getStringAttribute('value');
  }
  public set value(value: string) {
    this._value = value;
  }
  // Temporarily expose input value. Use with caution.
  public get valueInput() {
    return this._value;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersSpansOperator {
  /**
  * the values to filter by. When the type is `equals`, this field is optional, the filter will match only the selected values, and all the values if not set. When the type is `not_equals`, this field is required, and the filter will match spans without the selected values.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#selected_values Dashboard#selected_values}
  */
  readonly selectedValues?: string[];
  /**
  * The type of the operator. Can be one of `equals` or `not_equals`.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#type Dashboard#type}
  */
  readonly type: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersSpansOperatorToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersSpansOperator | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    selected_values: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.selectedValues),
    type: cdktf.stringToTerraform(struct!.type),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersSpansOperatorToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersSpansOperator | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    selected_values: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.selectedValues),
      isBlock: false,
      type: "list",
      storageClassType: "stringList",
    },
    type: {
      value: cdktf.stringToHclTerraform(struct!.type),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersSpansOperatorOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersSpansOperator | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._selectedValues !== undefined) {
      hasAnyValues = true;
      internalValueResult.selectedValues = this._selectedValues;
    }
    if (this._type !== undefined) {
      hasAnyValues = true;
      internalValueResult.type = this._type;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersSpansOperator | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._selectedValues = undefined;
      this._type = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._selectedValues = value.selectedValues;
      this._type = value.type;
    }
  }

  // selected_values - computed: false, optional: true, required: false
  private _selectedValues?: string[]; 
  public get selectedValues() {
    return this.getListAttribute('selected_values');
  }
  public set selectedValues(value: string[]) {
    this._selectedValues = value;
  }
  public resetSelectedValues() {
    this._selectedValues = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get selectedValuesInput() {
    return this._selectedValues;
  }

  // type - computed: false, optional: false, required: true
  private _type?: string; 
  public get type() {
    return this.getStringAttribute('type');
  }
  public set type(value: string) {
    this._type = value;
  }
  // Temporarily expose input value. Use with caution.
  public get typeInput() {
    return this._type;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersSpans {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#field Dashboard#field}
  */
  readonly field: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersSpansField;
  /**
  * Operator to use for filtering.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#operator Dashboard#operator}
  */
  readonly operator: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersSpansOperator;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersSpansToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersSpans | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    field: dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersSpansFieldToTerraform(struct!.field),
    operator: dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersSpansOperatorToTerraform(struct!.operator),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersSpansToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersSpans | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    field: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersSpansFieldToHclTerraform(struct!.field),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersSpansField",
    },
    operator: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersSpansOperatorToHclTerraform(struct!.operator),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersSpansOperator",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersSpansOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersSpans | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._field?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.field = this._field?.internalValue;
    }
    if (this._operator?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.operator = this._operator?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersSpans | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._field.internalValue = undefined;
      this._operator.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._field.internalValue = value.field;
      this._operator.internalValue = value.operator;
    }
  }

  // field - computed: false, optional: false, required: true
  private _field = new DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersSpansFieldOutputReference(this, "field");
  public get field() {
    return this._field;
  }
  public putField(value: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersSpansField) {
    this._field.internalValue = value;
  }
  // Temporarily expose input value. Use with caution.
  public get fieldInput() {
    return this._field.internalValue;
  }

  // operator - computed: false, optional: false, required: true
  private _operator = new DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersSpansOperatorOutputReference(this, "operator");
  public get operator() {
    return this._operator;
  }
  public putOperator(value: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersSpansOperator) {
    this._operator.internalValue = value;
  }
  // Temporarily expose input value. Use with caution.
  public get operatorInput() {
    return this._operator.internalValue;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFilters {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#logs Dashboard#logs}
  */
  readonly logs?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersLogs;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#metrics Dashboard#metrics}
  */
  readonly metrics?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersMetrics;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#spans Dashboard#spans}
  */
  readonly spans?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersSpans;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFilters | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    logs: dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersLogsToTerraform(struct!.logs),
    metrics: dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersMetricsToTerraform(struct!.metrics),
    spans: dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersSpansToTerraform(struct!.spans),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFilters | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    logs: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersLogsToHclTerraform(struct!.logs),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersLogs",
    },
    metrics: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersMetricsToHclTerraform(struct!.metrics),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersMetrics",
    },
    spans: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersSpansToHclTerraform(struct!.spans),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersSpans",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFilters | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._logs?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.logs = this._logs?.internalValue;
    }
    if (this._metrics?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.metrics = this._metrics?.internalValue;
    }
    if (this._spans?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.spans = this._spans?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFilters | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._logs.internalValue = undefined;
      this._metrics.internalValue = undefined;
      this._spans.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._logs.internalValue = value.logs;
      this._metrics.internalValue = value.metrics;
      this._spans.internalValue = value.spans;
    }
  }

  // logs - computed: false, optional: true, required: false
  private _logs = new DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersLogsOutputReference(this, "logs");
  public get logs() {
    return this._logs;
  }
  public putLogs(value: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersLogs) {
    this._logs.internalValue = value;
  }
  public resetLogs() {
    this._logs.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get logsInput() {
    return this._logs.internalValue;
  }

  // metrics - computed: false, optional: true, required: false
  private _metrics = new DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersMetricsOutputReference(this, "metrics");
  public get metrics() {
    return this._metrics;
  }
  public putMetrics(value: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersMetrics) {
    this._metrics.internalValue = value;
  }
  public resetMetrics() {
    this._metrics.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get metricsInput() {
    return this._metrics.internalValue;
  }

  // spans - computed: false, optional: true, required: false
  private _spans = new DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersSpansOutputReference(this, "spans");
  public get spans() {
    return this._spans;
  }
  public putSpans(value: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersSpans) {
    this._spans.internalValue = value;
  }
  public resetSpans() {
    this._spans.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get spansInput() {
    return this._spans.internalValue;
  }
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersList extends cdktf.ComplexList {
  public internalValue? : DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFilters[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersOutputReference {
    return new DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeTimeFrameAbsolute {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#end Dashboard#end}
  */
  readonly end: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#start Dashboard#start}
  */
  readonly start: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeTimeFrameAbsoluteToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeTimeFrameAbsolute | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    end: cdktf.stringToTerraform(struct!.end),
    start: cdktf.stringToTerraform(struct!.start),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeTimeFrameAbsoluteToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeTimeFrameAbsolute | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    end: {
      value: cdktf.stringToHclTerraform(struct!.end),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    start: {
      value: cdktf.stringToHclTerraform(struct!.start),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeTimeFrameAbsoluteOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeTimeFrameAbsolute | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._end !== undefined) {
      hasAnyValues = true;
      internalValueResult.end = this._end;
    }
    if (this._start !== undefined) {
      hasAnyValues = true;
      internalValueResult.start = this._start;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeTimeFrameAbsolute | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._end = undefined;
      this._start = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._end = value.end;
      this._start = value.start;
    }
  }

  // end - computed: false, optional: false, required: true
  private _end?: string; 
  public get end() {
    return this.getStringAttribute('end');
  }
  public set end(value: string) {
    this._end = value;
  }
  // Temporarily expose input value. Use with caution.
  public get endInput() {
    return this._end;
  }

  // start - computed: false, optional: false, required: true
  private _start?: string; 
  public get start() {
    return this.getStringAttribute('start');
  }
  public set start(value: string) {
    this._start = value;
  }
  // Temporarily expose input value. Use with caution.
  public get startInput() {
    return this._start;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeTimeFrameRelative {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#duration Dashboard#duration}
  */
  readonly duration: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeTimeFrameRelativeToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeTimeFrameRelative | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    duration: cdktf.stringToTerraform(struct!.duration),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeTimeFrameRelativeToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeTimeFrameRelative | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    duration: {
      value: cdktf.stringToHclTerraform(struct!.duration),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeTimeFrameRelativeOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeTimeFrameRelative | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._duration !== undefined) {
      hasAnyValues = true;
      internalValueResult.duration = this._duration;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeTimeFrameRelative | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._duration = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._duration = value.duration;
    }
  }

  // duration - computed: false, optional: false, required: true
  private _duration?: string; 
  public get duration() {
    return this.getStringAttribute('duration');
  }
  public set duration(value: string) {
    this._duration = value;
  }
  // Temporarily expose input value. Use with caution.
  public get durationInput() {
    return this._duration;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeTimeFrame {
  /**
  * Absolute time frame specifying a fixed start and end time.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#absolute Dashboard#absolute}
  */
  readonly absolute?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeTimeFrameAbsolute;
  /**
  * Relative time frame specifying a duration from the current time.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#relative Dashboard#relative}
  */
  readonly relative?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeTimeFrameRelative;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeTimeFrameToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeTimeFrame | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    absolute: dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeTimeFrameAbsoluteToTerraform(struct!.absolute),
    relative: dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeTimeFrameRelativeToTerraform(struct!.relative),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeTimeFrameToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeTimeFrame | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    absolute: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeTimeFrameAbsoluteToHclTerraform(struct!.absolute),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeTimeFrameAbsolute",
    },
    relative: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeTimeFrameRelativeToHclTerraform(struct!.relative),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeTimeFrameRelative",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeTimeFrameOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeTimeFrame | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._absolute?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.absolute = this._absolute?.internalValue;
    }
    if (this._relative?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.relative = this._relative?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeTimeFrame | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._absolute.internalValue = undefined;
      this._relative.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._absolute.internalValue = value.absolute;
      this._relative.internalValue = value.relative;
    }
  }

  // absolute - computed: false, optional: true, required: false
  private _absolute = new DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeTimeFrameAbsoluteOutputReference(this, "absolute");
  public get absolute() {
    return this._absolute;
  }
  public putAbsolute(value: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeTimeFrameAbsolute) {
    this._absolute.internalValue = value;
  }
  public resetAbsolute() {
    this._absolute.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get absoluteInput() {
    return this._absolute.internalValue;
  }

  // relative - computed: false, optional: true, required: false
  private _relative = new DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeTimeFrameRelativeOutputReference(this, "relative");
  public get relative() {
    return this._relative;
  }
  public putRelative(value: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeTimeFrameRelative) {
    this._relative.internalValue = value;
  }
  public resetRelative() {
    this._relative.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get relativeInput() {
    return this._relative.internalValue;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrime {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#filters Dashboard#filters}
  */
  readonly filters?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFilters[] | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#group_names Dashboard#group_names}
  */
  readonly groupNames?: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#query Dashboard#query}
  */
  readonly query: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#stacked_group_name Dashboard#stacked_group_name}
  */
  readonly stackedGroupName?: string;
  /**
  * Specifies the time frame. Can be either absolute or relative.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#time_frame Dashboard#time_frame}
  */
  readonly timeFrame?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeTimeFrame;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrime | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    filters: cdktf.listMapper(dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersToTerraform, false)(struct!.filters),
    group_names: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.groupNames),
    query: cdktf.stringToTerraform(struct!.query),
    stacked_group_name: cdktf.stringToTerraform(struct!.stackedGroupName),
    time_frame: dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeTimeFrameToTerraform(struct!.timeFrame),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrime | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    filters: {
      value: cdktf.listMapperHcl(dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersToHclTerraform, false)(struct!.filters),
      isBlock: true,
      type: "list",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersList",
    },
    group_names: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.groupNames),
      isBlock: false,
      type: "list",
      storageClassType: "stringList",
    },
    query: {
      value: cdktf.stringToHclTerraform(struct!.query),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    stacked_group_name: {
      value: cdktf.stringToHclTerraform(struct!.stackedGroupName),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    time_frame: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeTimeFrameToHclTerraform(struct!.timeFrame),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeTimeFrame",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrime | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._filters?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.filters = this._filters?.internalValue;
    }
    if (this._groupNames !== undefined) {
      hasAnyValues = true;
      internalValueResult.groupNames = this._groupNames;
    }
    if (this._query !== undefined) {
      hasAnyValues = true;
      internalValueResult.query = this._query;
    }
    if (this._stackedGroupName !== undefined) {
      hasAnyValues = true;
      internalValueResult.stackedGroupName = this._stackedGroupName;
    }
    if (this._timeFrame?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.timeFrame = this._timeFrame?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrime | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._filters.internalValue = undefined;
      this._groupNames = undefined;
      this._query = undefined;
      this._stackedGroupName = undefined;
      this._timeFrame.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._filters.internalValue = value.filters;
      this._groupNames = value.groupNames;
      this._query = value.query;
      this._stackedGroupName = value.stackedGroupName;
      this._timeFrame.internalValue = value.timeFrame;
    }
  }

  // filters - computed: false, optional: true, required: false
  private _filters = new DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFiltersList(this, "filters", false);
  public get filters() {
    return this._filters;
  }
  public putFilters(value: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeFilters[] | cdktf.IResolvable) {
    this._filters.internalValue = value;
  }
  public resetFilters() {
    this._filters.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get filtersInput() {
    return this._filters.internalValue;
  }

  // group_names - computed: false, optional: true, required: false
  private _groupNames?: string[]; 
  public get groupNames() {
    return this.getListAttribute('group_names');
  }
  public set groupNames(value: string[]) {
    this._groupNames = value;
  }
  public resetGroupNames() {
    this._groupNames = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get groupNamesInput() {
    return this._groupNames;
  }

  // query - computed: false, optional: false, required: true
  private _query?: string; 
  public get query() {
    return this.getStringAttribute('query');
  }
  public set query(value: string) {
    this._query = value;
  }
  // Temporarily expose input value. Use with caution.
  public get queryInput() {
    return this._query;
  }

  // stacked_group_name - computed: false, optional: true, required: false
  private _stackedGroupName?: string; 
  public get stackedGroupName() {
    return this.getStringAttribute('stacked_group_name');
  }
  public set stackedGroupName(value: string) {
    this._stackedGroupName = value;
  }
  public resetStackedGroupName() {
    this._stackedGroupName = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get stackedGroupNameInput() {
    return this._stackedGroupName;
  }

  // time_frame - computed: false, optional: true, required: false
  private _timeFrame = new DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeTimeFrameOutputReference(this, "time_frame");
  public get timeFrame() {
    return this._timeFrame;
  }
  public putTimeFrame(value: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeTimeFrame) {
    this._timeFrame.internalValue = value;
  }
  public resetTimeFrame() {
    this._timeFrame.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get timeFrameInput() {
    return this._timeFrame.internalValue;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsAggregationObservationField {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#keypath Dashboard#keypath}
  */
  readonly keypath: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#scope Dashboard#scope}
  */
  readonly scope: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsAggregationObservationFieldToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsAggregationObservationField | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    keypath: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.keypath),
    scope: cdktf.stringToTerraform(struct!.scope),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsAggregationObservationFieldToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsAggregationObservationField | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    keypath: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.keypath),
      isBlock: false,
      type: "list",
      storageClassType: "stringList",
    },
    scope: {
      value: cdktf.stringToHclTerraform(struct!.scope),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsAggregationObservationFieldOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsAggregationObservationField | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._keypath !== undefined) {
      hasAnyValues = true;
      internalValueResult.keypath = this._keypath;
    }
    if (this._scope !== undefined) {
      hasAnyValues = true;
      internalValueResult.scope = this._scope;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsAggregationObservationField | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._keypath = undefined;
      this._scope = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._keypath = value.keypath;
      this._scope = value.scope;
    }
  }

  // keypath - computed: false, optional: false, required: true
  private _keypath?: string[]; 
  public get keypath() {
    return this.getListAttribute('keypath');
  }
  public set keypath(value: string[]) {
    this._keypath = value;
  }
  // Temporarily expose input value. Use with caution.
  public get keypathInput() {
    return this._keypath;
  }

  // scope - computed: false, optional: false, required: true
  private _scope?: string; 
  public get scope() {
    return this.getStringAttribute('scope');
  }
  public set scope(value: string) {
    this._scope = value;
  }
  // Temporarily expose input value. Use with caution.
  public get scopeInput() {
    return this._scope;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsAggregation {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#field Dashboard#field}
  */
  readonly field?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#observation_field Dashboard#observation_field}
  */
  readonly observationField?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsAggregationObservationField;
  /**
  * The percentage of the aggregation to return. required when type is `percentile`.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#percent Dashboard#percent}
  */
  readonly percent?: number;
  /**
  * The type of the aggregation. Can be one of ["count" "count_distinct" "sum" "avg" "min" "max" "percentile"]
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#type Dashboard#type}
  */
  readonly type: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsAggregationToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsAggregation | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    field: cdktf.stringToTerraform(struct!.field),
    observation_field: dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsAggregationObservationFieldToTerraform(struct!.observationField),
    percent: cdktf.numberToTerraform(struct!.percent),
    type: cdktf.stringToTerraform(struct!.type),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsAggregationToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsAggregation | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    field: {
      value: cdktf.stringToHclTerraform(struct!.field),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    observation_field: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsAggregationObservationFieldToHclTerraform(struct!.observationField),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsAggregationObservationField",
    },
    percent: {
      value: cdktf.numberToHclTerraform(struct!.percent),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    type: {
      value: cdktf.stringToHclTerraform(struct!.type),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsAggregationOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsAggregation | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._field !== undefined) {
      hasAnyValues = true;
      internalValueResult.field = this._field;
    }
    if (this._observationField?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.observationField = this._observationField?.internalValue;
    }
    if (this._percent !== undefined) {
      hasAnyValues = true;
      internalValueResult.percent = this._percent;
    }
    if (this._type !== undefined) {
      hasAnyValues = true;
      internalValueResult.type = this._type;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsAggregation | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._field = undefined;
      this._observationField.internalValue = undefined;
      this._percent = undefined;
      this._type = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._field = value.field;
      this._observationField.internalValue = value.observationField;
      this._percent = value.percent;
      this._type = value.type;
    }
  }

  // field - computed: false, optional: true, required: false
  private _field?: string; 
  public get field() {
    return this.getStringAttribute('field');
  }
  public set field(value: string) {
    this._field = value;
  }
  public resetField() {
    this._field = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get fieldInput() {
    return this._field;
  }

  // observation_field - computed: false, optional: true, required: false
  private _observationField = new DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsAggregationObservationFieldOutputReference(this, "observation_field");
  public get observationField() {
    return this._observationField;
  }
  public putObservationField(value: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsAggregationObservationField) {
    this._observationField.internalValue = value;
  }
  public resetObservationField() {
    this._observationField.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get observationFieldInput() {
    return this._observationField.internalValue;
  }

  // percent - computed: false, optional: true, required: false
  private _percent?: number; 
  public get percent() {
    return this.getNumberAttribute('percent');
  }
  public set percent(value: number) {
    this._percent = value;
  }
  public resetPercent() {
    this._percent = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get percentInput() {
    return this._percent;
  }

  // type - computed: false, optional: false, required: true
  private _type?: string; 
  public get type() {
    return this.getStringAttribute('type');
  }
  public set type(value: string) {
    this._type = value;
  }
  // Temporarily expose input value. Use with caution.
  public get typeInput() {
    return this._type;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsFiltersObservationField {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#keypath Dashboard#keypath}
  */
  readonly keypath: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#scope Dashboard#scope}
  */
  readonly scope: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsFiltersObservationFieldToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsFiltersObservationField | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    keypath: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.keypath),
    scope: cdktf.stringToTerraform(struct!.scope),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsFiltersObservationFieldToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsFiltersObservationField | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    keypath: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.keypath),
      isBlock: false,
      type: "list",
      storageClassType: "stringList",
    },
    scope: {
      value: cdktf.stringToHclTerraform(struct!.scope),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsFiltersObservationFieldOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsFiltersObservationField | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._keypath !== undefined) {
      hasAnyValues = true;
      internalValueResult.keypath = this._keypath;
    }
    if (this._scope !== undefined) {
      hasAnyValues = true;
      internalValueResult.scope = this._scope;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsFiltersObservationField | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._keypath = undefined;
      this._scope = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._keypath = value.keypath;
      this._scope = value.scope;
    }
  }

  // keypath - computed: false, optional: false, required: true
  private _keypath?: string[]; 
  public get keypath() {
    return this.getListAttribute('keypath');
  }
  public set keypath(value: string[]) {
    this._keypath = value;
  }
  // Temporarily expose input value. Use with caution.
  public get keypathInput() {
    return this._keypath;
  }

  // scope - computed: false, optional: false, required: true
  private _scope?: string; 
  public get scope() {
    return this.getStringAttribute('scope');
  }
  public set scope(value: string) {
    this._scope = value;
  }
  // Temporarily expose input value. Use with caution.
  public get scopeInput() {
    return this._scope;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsFiltersOperator {
  /**
  * the values to filter by. When the type is `equals`, this field is optional, the filter will match only the selected values, and all the values if not set. When the type is `not_equals`, this field is required, and the filter will match spans without the selected values.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#selected_values Dashboard#selected_values}
  */
  readonly selectedValues?: string[];
  /**
  * The type of the operator. Can be one of `equals` or `not_equals`.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#type Dashboard#type}
  */
  readonly type: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsFiltersOperatorToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsFiltersOperator | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    selected_values: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.selectedValues),
    type: cdktf.stringToTerraform(struct!.type),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsFiltersOperatorToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsFiltersOperator | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    selected_values: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.selectedValues),
      isBlock: false,
      type: "list",
      storageClassType: "stringList",
    },
    type: {
      value: cdktf.stringToHclTerraform(struct!.type),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsFiltersOperatorOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsFiltersOperator | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._selectedValues !== undefined) {
      hasAnyValues = true;
      internalValueResult.selectedValues = this._selectedValues;
    }
    if (this._type !== undefined) {
      hasAnyValues = true;
      internalValueResult.type = this._type;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsFiltersOperator | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._selectedValues = undefined;
      this._type = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._selectedValues = value.selectedValues;
      this._type = value.type;
    }
  }

  // selected_values - computed: false, optional: true, required: false
  private _selectedValues?: string[]; 
  public get selectedValues() {
    return this.getListAttribute('selected_values');
  }
  public set selectedValues(value: string[]) {
    this._selectedValues = value;
  }
  public resetSelectedValues() {
    this._selectedValues = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get selectedValuesInput() {
    return this._selectedValues;
  }

  // type - computed: false, optional: false, required: true
  private _type?: string; 
  public get type() {
    return this.getStringAttribute('type');
  }
  public set type(value: string) {
    this._type = value;
  }
  // Temporarily expose input value. Use with caution.
  public get typeInput() {
    return this._type;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsFilters {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#field Dashboard#field}
  */
  readonly field: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#observation_field Dashboard#observation_field}
  */
  readonly observationField?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsFiltersObservationField;
  /**
  * Operator to use for filtering.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#operator Dashboard#operator}
  */
  readonly operator: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsFiltersOperator;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsFiltersToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsFilters | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    field: cdktf.stringToTerraform(struct!.field),
    observation_field: dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsFiltersObservationFieldToTerraform(struct!.observationField),
    operator: dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsFiltersOperatorToTerraform(struct!.operator),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsFiltersToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsFilters | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    field: {
      value: cdktf.stringToHclTerraform(struct!.field),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    observation_field: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsFiltersObservationFieldToHclTerraform(struct!.observationField),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsFiltersObservationField",
    },
    operator: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsFiltersOperatorToHclTerraform(struct!.operator),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsFiltersOperator",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsFiltersOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsFilters | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._field !== undefined) {
      hasAnyValues = true;
      internalValueResult.field = this._field;
    }
    if (this._observationField?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.observationField = this._observationField?.internalValue;
    }
    if (this._operator?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.operator = this._operator?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsFilters | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._field = undefined;
      this._observationField.internalValue = undefined;
      this._operator.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._field = value.field;
      this._observationField.internalValue = value.observationField;
      this._operator.internalValue = value.operator;
    }
  }

  // field - computed: false, optional: false, required: true
  private _field?: string; 
  public get field() {
    return this.getStringAttribute('field');
  }
  public set field(value: string) {
    this._field = value;
  }
  // Temporarily expose input value. Use with caution.
  public get fieldInput() {
    return this._field;
  }

  // observation_field - computed: false, optional: true, required: false
  private _observationField = new DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsFiltersObservationFieldOutputReference(this, "observation_field");
  public get observationField() {
    return this._observationField;
  }
  public putObservationField(value: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsFiltersObservationField) {
    this._observationField.internalValue = value;
  }
  public resetObservationField() {
    this._observationField.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get observationFieldInput() {
    return this._observationField.internalValue;
  }

  // operator - computed: false, optional: false, required: true
  private _operator = new DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsFiltersOperatorOutputReference(this, "operator");
  public get operator() {
    return this._operator;
  }
  public putOperator(value: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsFiltersOperator) {
    this._operator.internalValue = value;
  }
  // Temporarily expose input value. Use with caution.
  public get operatorInput() {
    return this._operator.internalValue;
  }
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsFiltersList extends cdktf.ComplexList {
  public internalValue? : DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsFilters[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsFiltersOutputReference {
    return new DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsFiltersOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsGroupNamesFields {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#keypath Dashboard#keypath}
  */
  readonly keypath: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#scope Dashboard#scope}
  */
  readonly scope: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsGroupNamesFieldsToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsGroupNamesFields | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    keypath: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.keypath),
    scope: cdktf.stringToTerraform(struct!.scope),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsGroupNamesFieldsToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsGroupNamesFields | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    keypath: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.keypath),
      isBlock: false,
      type: "list",
      storageClassType: "stringList",
    },
    scope: {
      value: cdktf.stringToHclTerraform(struct!.scope),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsGroupNamesFieldsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsGroupNamesFields | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._keypath !== undefined) {
      hasAnyValues = true;
      internalValueResult.keypath = this._keypath;
    }
    if (this._scope !== undefined) {
      hasAnyValues = true;
      internalValueResult.scope = this._scope;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsGroupNamesFields | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._keypath = undefined;
      this._scope = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._keypath = value.keypath;
      this._scope = value.scope;
    }
  }

  // keypath - computed: false, optional: false, required: true
  private _keypath?: string[]; 
  public get keypath() {
    return this.getListAttribute('keypath');
  }
  public set keypath(value: string[]) {
    this._keypath = value;
  }
  // Temporarily expose input value. Use with caution.
  public get keypathInput() {
    return this._keypath;
  }

  // scope - computed: false, optional: false, required: true
  private _scope?: string; 
  public get scope() {
    return this.getStringAttribute('scope');
  }
  public set scope(value: string) {
    this._scope = value;
  }
  // Temporarily expose input value. Use with caution.
  public get scopeInput() {
    return this._scope;
  }
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsGroupNamesFieldsList extends cdktf.ComplexList {
  public internalValue? : DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsGroupNamesFields[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsGroupNamesFieldsOutputReference {
    return new DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsGroupNamesFieldsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsStackedGroupNameField {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#keypath Dashboard#keypath}
  */
  readonly keypath: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#scope Dashboard#scope}
  */
  readonly scope: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsStackedGroupNameFieldToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsStackedGroupNameField | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    keypath: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.keypath),
    scope: cdktf.stringToTerraform(struct!.scope),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsStackedGroupNameFieldToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsStackedGroupNameField | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    keypath: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.keypath),
      isBlock: false,
      type: "list",
      storageClassType: "stringList",
    },
    scope: {
      value: cdktf.stringToHclTerraform(struct!.scope),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsStackedGroupNameFieldOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsStackedGroupNameField | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._keypath !== undefined) {
      hasAnyValues = true;
      internalValueResult.keypath = this._keypath;
    }
    if (this._scope !== undefined) {
      hasAnyValues = true;
      internalValueResult.scope = this._scope;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsStackedGroupNameField | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._keypath = undefined;
      this._scope = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._keypath = value.keypath;
      this._scope = value.scope;
    }
  }

  // keypath - computed: false, optional: false, required: true
  private _keypath?: string[]; 
  public get keypath() {
    return this.getListAttribute('keypath');
  }
  public set keypath(value: string[]) {
    this._keypath = value;
  }
  // Temporarily expose input value. Use with caution.
  public get keypathInput() {
    return this._keypath;
  }

  // scope - computed: false, optional: false, required: true
  private _scope?: string; 
  public get scope() {
    return this.getStringAttribute('scope');
  }
  public set scope(value: string) {
    this._scope = value;
  }
  // Temporarily expose input value. Use with caution.
  public get scopeInput() {
    return this._scope;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsTimeFrameAbsolute {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#end Dashboard#end}
  */
  readonly end: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#start Dashboard#start}
  */
  readonly start: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsTimeFrameAbsoluteToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsTimeFrameAbsolute | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    end: cdktf.stringToTerraform(struct!.end),
    start: cdktf.stringToTerraform(struct!.start),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsTimeFrameAbsoluteToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsTimeFrameAbsolute | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    end: {
      value: cdktf.stringToHclTerraform(struct!.end),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    start: {
      value: cdktf.stringToHclTerraform(struct!.start),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsTimeFrameAbsoluteOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsTimeFrameAbsolute | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._end !== undefined) {
      hasAnyValues = true;
      internalValueResult.end = this._end;
    }
    if (this._start !== undefined) {
      hasAnyValues = true;
      internalValueResult.start = this._start;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsTimeFrameAbsolute | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._end = undefined;
      this._start = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._end = value.end;
      this._start = value.start;
    }
  }

  // end - computed: false, optional: false, required: true
  private _end?: string; 
  public get end() {
    return this.getStringAttribute('end');
  }
  public set end(value: string) {
    this._end = value;
  }
  // Temporarily expose input value. Use with caution.
  public get endInput() {
    return this._end;
  }

  // start - computed: false, optional: false, required: true
  private _start?: string; 
  public get start() {
    return this.getStringAttribute('start');
  }
  public set start(value: string) {
    this._start = value;
  }
  // Temporarily expose input value. Use with caution.
  public get startInput() {
    return this._start;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsTimeFrameRelative {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#duration Dashboard#duration}
  */
  readonly duration: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsTimeFrameRelativeToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsTimeFrameRelative | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    duration: cdktf.stringToTerraform(struct!.duration),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsTimeFrameRelativeToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsTimeFrameRelative | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    duration: {
      value: cdktf.stringToHclTerraform(struct!.duration),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsTimeFrameRelativeOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsTimeFrameRelative | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._duration !== undefined) {
      hasAnyValues = true;
      internalValueResult.duration = this._duration;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsTimeFrameRelative | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._duration = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._duration = value.duration;
    }
  }

  // duration - computed: false, optional: false, required: true
  private _duration?: string; 
  public get duration() {
    return this.getStringAttribute('duration');
  }
  public set duration(value: string) {
    this._duration = value;
  }
  // Temporarily expose input value. Use with caution.
  public get durationInput() {
    return this._duration;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsTimeFrame {
  /**
  * Absolute time frame specifying a fixed start and end time.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#absolute Dashboard#absolute}
  */
  readonly absolute?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsTimeFrameAbsolute;
  /**
  * Relative time frame specifying a duration from the current time.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#relative Dashboard#relative}
  */
  readonly relative?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsTimeFrameRelative;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsTimeFrameToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsTimeFrame | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    absolute: dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsTimeFrameAbsoluteToTerraform(struct!.absolute),
    relative: dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsTimeFrameRelativeToTerraform(struct!.relative),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsTimeFrameToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsTimeFrame | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    absolute: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsTimeFrameAbsoluteToHclTerraform(struct!.absolute),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsTimeFrameAbsolute",
    },
    relative: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsTimeFrameRelativeToHclTerraform(struct!.relative),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsTimeFrameRelative",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsTimeFrameOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsTimeFrame | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._absolute?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.absolute = this._absolute?.internalValue;
    }
    if (this._relative?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.relative = this._relative?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsTimeFrame | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._absolute.internalValue = undefined;
      this._relative.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._absolute.internalValue = value.absolute;
      this._relative.internalValue = value.relative;
    }
  }

  // absolute - computed: false, optional: true, required: false
  private _absolute = new DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsTimeFrameAbsoluteOutputReference(this, "absolute");
  public get absolute() {
    return this._absolute;
  }
  public putAbsolute(value: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsTimeFrameAbsolute) {
    this._absolute.internalValue = value;
  }
  public resetAbsolute() {
    this._absolute.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get absoluteInput() {
    return this._absolute.internalValue;
  }

  // relative - computed: false, optional: true, required: false
  private _relative = new DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsTimeFrameRelativeOutputReference(this, "relative");
  public get relative() {
    return this._relative;
  }
  public putRelative(value: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsTimeFrameRelative) {
    this._relative.internalValue = value;
  }
  public resetRelative() {
    this._relative.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get relativeInput() {
    return this._relative.internalValue;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogs {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#aggregation Dashboard#aggregation}
  */
  readonly aggregation: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsAggregation;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#filters Dashboard#filters}
  */
  readonly filters?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsFilters[] | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#group_names Dashboard#group_names}
  */
  readonly groupNames?: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#group_names_fields Dashboard#group_names_fields}
  */
  readonly groupNamesFields?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsGroupNamesFields[] | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#lucene_query Dashboard#lucene_query}
  */
  readonly luceneQuery?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#stacked_group_name Dashboard#stacked_group_name}
  */
  readonly stackedGroupName?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#stacked_group_name_field Dashboard#stacked_group_name_field}
  */
  readonly stackedGroupNameField?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsStackedGroupNameField;
  /**
  * Specifies the time frame. Can be either absolute or relative.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#time_frame Dashboard#time_frame}
  */
  readonly timeFrame?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsTimeFrame;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogs | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    aggregation: dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsAggregationToTerraform(struct!.aggregation),
    filters: cdktf.listMapper(dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsFiltersToTerraform, false)(struct!.filters),
    group_names: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.groupNames),
    group_names_fields: cdktf.listMapper(dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsGroupNamesFieldsToTerraform, false)(struct!.groupNamesFields),
    lucene_query: cdktf.stringToTerraform(struct!.luceneQuery),
    stacked_group_name: cdktf.stringToTerraform(struct!.stackedGroupName),
    stacked_group_name_field: dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsStackedGroupNameFieldToTerraform(struct!.stackedGroupNameField),
    time_frame: dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsTimeFrameToTerraform(struct!.timeFrame),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogs | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    aggregation: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsAggregationToHclTerraform(struct!.aggregation),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsAggregation",
    },
    filters: {
      value: cdktf.listMapperHcl(dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsFiltersToHclTerraform, false)(struct!.filters),
      isBlock: true,
      type: "list",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsFiltersList",
    },
    group_names: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.groupNames),
      isBlock: false,
      type: "list",
      storageClassType: "stringList",
    },
    group_names_fields: {
      value: cdktf.listMapperHcl(dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsGroupNamesFieldsToHclTerraform, false)(struct!.groupNamesFields),
      isBlock: true,
      type: "list",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsGroupNamesFieldsList",
    },
    lucene_query: {
      value: cdktf.stringToHclTerraform(struct!.luceneQuery),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    stacked_group_name: {
      value: cdktf.stringToHclTerraform(struct!.stackedGroupName),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    stacked_group_name_field: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsStackedGroupNameFieldToHclTerraform(struct!.stackedGroupNameField),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsStackedGroupNameField",
    },
    time_frame: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsTimeFrameToHclTerraform(struct!.timeFrame),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsTimeFrame",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogs | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._aggregation?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.aggregation = this._aggregation?.internalValue;
    }
    if (this._filters?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.filters = this._filters?.internalValue;
    }
    if (this._groupNames !== undefined) {
      hasAnyValues = true;
      internalValueResult.groupNames = this._groupNames;
    }
    if (this._groupNamesFields?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.groupNamesFields = this._groupNamesFields?.internalValue;
    }
    if (this._luceneQuery !== undefined) {
      hasAnyValues = true;
      internalValueResult.luceneQuery = this._luceneQuery;
    }
    if (this._stackedGroupName !== undefined) {
      hasAnyValues = true;
      internalValueResult.stackedGroupName = this._stackedGroupName;
    }
    if (this._stackedGroupNameField?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.stackedGroupNameField = this._stackedGroupNameField?.internalValue;
    }
    if (this._timeFrame?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.timeFrame = this._timeFrame?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogs | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._aggregation.internalValue = undefined;
      this._filters.internalValue = undefined;
      this._groupNames = undefined;
      this._groupNamesFields.internalValue = undefined;
      this._luceneQuery = undefined;
      this._stackedGroupName = undefined;
      this._stackedGroupNameField.internalValue = undefined;
      this._timeFrame.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._aggregation.internalValue = value.aggregation;
      this._filters.internalValue = value.filters;
      this._groupNames = value.groupNames;
      this._groupNamesFields.internalValue = value.groupNamesFields;
      this._luceneQuery = value.luceneQuery;
      this._stackedGroupName = value.stackedGroupName;
      this._stackedGroupNameField.internalValue = value.stackedGroupNameField;
      this._timeFrame.internalValue = value.timeFrame;
    }
  }

  // aggregation - computed: false, optional: false, required: true
  private _aggregation = new DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsAggregationOutputReference(this, "aggregation");
  public get aggregation() {
    return this._aggregation;
  }
  public putAggregation(value: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsAggregation) {
    this._aggregation.internalValue = value;
  }
  // Temporarily expose input value. Use with caution.
  public get aggregationInput() {
    return this._aggregation.internalValue;
  }

  // filters - computed: false, optional: true, required: false
  private _filters = new DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsFiltersList(this, "filters", false);
  public get filters() {
    return this._filters;
  }
  public putFilters(value: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsFilters[] | cdktf.IResolvable) {
    this._filters.internalValue = value;
  }
  public resetFilters() {
    this._filters.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get filtersInput() {
    return this._filters.internalValue;
  }

  // group_names - computed: false, optional: true, required: false
  private _groupNames?: string[]; 
  public get groupNames() {
    return this.getListAttribute('group_names');
  }
  public set groupNames(value: string[]) {
    this._groupNames = value;
  }
  public resetGroupNames() {
    this._groupNames = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get groupNamesInput() {
    return this._groupNames;
  }

  // group_names_fields - computed: false, optional: true, required: false
  private _groupNamesFields = new DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsGroupNamesFieldsList(this, "group_names_fields", false);
  public get groupNamesFields() {
    return this._groupNamesFields;
  }
  public putGroupNamesFields(value: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsGroupNamesFields[] | cdktf.IResolvable) {
    this._groupNamesFields.internalValue = value;
  }
  public resetGroupNamesFields() {
    this._groupNamesFields.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get groupNamesFieldsInput() {
    return this._groupNamesFields.internalValue;
  }

  // lucene_query - computed: false, optional: true, required: false
  private _luceneQuery?: string; 
  public get luceneQuery() {
    return this.getStringAttribute('lucene_query');
  }
  public set luceneQuery(value: string) {
    this._luceneQuery = value;
  }
  public resetLuceneQuery() {
    this._luceneQuery = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get luceneQueryInput() {
    return this._luceneQuery;
  }

  // stacked_group_name - computed: false, optional: true, required: false
  private _stackedGroupName?: string; 
  public get stackedGroupName() {
    return this.getStringAttribute('stacked_group_name');
  }
  public set stackedGroupName(value: string) {
    this._stackedGroupName = value;
  }
  public resetStackedGroupName() {
    this._stackedGroupName = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get stackedGroupNameInput() {
    return this._stackedGroupName;
  }

  // stacked_group_name_field - computed: false, optional: true, required: false
  private _stackedGroupNameField = new DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsStackedGroupNameFieldOutputReference(this, "stacked_group_name_field");
  public get stackedGroupNameField() {
    return this._stackedGroupNameField;
  }
  public putStackedGroupNameField(value: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsStackedGroupNameField) {
    this._stackedGroupNameField.internalValue = value;
  }
  public resetStackedGroupNameField() {
    this._stackedGroupNameField.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get stackedGroupNameFieldInput() {
    return this._stackedGroupNameField.internalValue;
  }

  // time_frame - computed: false, optional: true, required: false
  private _timeFrame = new DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsTimeFrameOutputReference(this, "time_frame");
  public get timeFrame() {
    return this._timeFrame;
  }
  public putTimeFrame(value: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsTimeFrame) {
    this._timeFrame.internalValue = value;
  }
  public resetTimeFrame() {
    this._timeFrame.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get timeFrameInput() {
    return this._timeFrame.internalValue;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetricsFiltersOperator {
  /**
  * the values to filter by. When the type is `equals`, this field is optional, the filter will match only the selected values, and all the values if not set. When the type is `not_equals`, this field is required, and the filter will match spans without the selected values.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#selected_values Dashboard#selected_values}
  */
  readonly selectedValues?: string[];
  /**
  * The type of the operator. Can be one of `equals` or `not_equals`.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#type Dashboard#type}
  */
  readonly type: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetricsFiltersOperatorToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetricsFiltersOperator | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    selected_values: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.selectedValues),
    type: cdktf.stringToTerraform(struct!.type),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetricsFiltersOperatorToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetricsFiltersOperator | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    selected_values: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.selectedValues),
      isBlock: false,
      type: "list",
      storageClassType: "stringList",
    },
    type: {
      value: cdktf.stringToHclTerraform(struct!.type),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetricsFiltersOperatorOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetricsFiltersOperator | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._selectedValues !== undefined) {
      hasAnyValues = true;
      internalValueResult.selectedValues = this._selectedValues;
    }
    if (this._type !== undefined) {
      hasAnyValues = true;
      internalValueResult.type = this._type;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetricsFiltersOperator | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._selectedValues = undefined;
      this._type = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._selectedValues = value.selectedValues;
      this._type = value.type;
    }
  }

  // selected_values - computed: false, optional: true, required: false
  private _selectedValues?: string[]; 
  public get selectedValues() {
    return this.getListAttribute('selected_values');
  }
  public set selectedValues(value: string[]) {
    this._selectedValues = value;
  }
  public resetSelectedValues() {
    this._selectedValues = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get selectedValuesInput() {
    return this._selectedValues;
  }

  // type - computed: false, optional: false, required: true
  private _type?: string; 
  public get type() {
    return this.getStringAttribute('type');
  }
  public set type(value: string) {
    this._type = value;
  }
  // Temporarily expose input value. Use with caution.
  public get typeInput() {
    return this._type;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetricsFilters {
  /**
  * Label associated with the metric.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#label Dashboard#label}
  */
  readonly label?: string;
  /**
  * Metric name to apply the filter on.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#metric Dashboard#metric}
  */
  readonly metric: string;
  /**
  * Operator to use for filtering.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#operator Dashboard#operator}
  */
  readonly operator: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetricsFiltersOperator;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetricsFiltersToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetricsFilters | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    label: cdktf.stringToTerraform(struct!.label),
    metric: cdktf.stringToTerraform(struct!.metric),
    operator: dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetricsFiltersOperatorToTerraform(struct!.operator),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetricsFiltersToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetricsFilters | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    label: {
      value: cdktf.stringToHclTerraform(struct!.label),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    metric: {
      value: cdktf.stringToHclTerraform(struct!.metric),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    operator: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetricsFiltersOperatorToHclTerraform(struct!.operator),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetricsFiltersOperator",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetricsFiltersOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetricsFilters | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._label !== undefined) {
      hasAnyValues = true;
      internalValueResult.label = this._label;
    }
    if (this._metric !== undefined) {
      hasAnyValues = true;
      internalValueResult.metric = this._metric;
    }
    if (this._operator?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.operator = this._operator?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetricsFilters | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._label = undefined;
      this._metric = undefined;
      this._operator.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._label = value.label;
      this._metric = value.metric;
      this._operator.internalValue = value.operator;
    }
  }

  // label - computed: false, optional: true, required: false
  private _label?: string; 
  public get label() {
    return this.getStringAttribute('label');
  }
  public set label(value: string) {
    this._label = value;
  }
  public resetLabel() {
    this._label = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get labelInput() {
    return this._label;
  }

  // metric - computed: false, optional: false, required: true
  private _metric?: string; 
  public get metric() {
    return this.getStringAttribute('metric');
  }
  public set metric(value: string) {
    this._metric = value;
  }
  // Temporarily expose input value. Use with caution.
  public get metricInput() {
    return this._metric;
  }

  // operator - computed: false, optional: false, required: true
  private _operator = new DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetricsFiltersOperatorOutputReference(this, "operator");
  public get operator() {
    return this._operator;
  }
  public putOperator(value: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetricsFiltersOperator) {
    this._operator.internalValue = value;
  }
  // Temporarily expose input value. Use with caution.
  public get operatorInput() {
    return this._operator.internalValue;
  }
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetricsFiltersList extends cdktf.ComplexList {
  public internalValue? : DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetricsFilters[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetricsFiltersOutputReference {
    return new DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetricsFiltersOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetricsTimeFrameAbsolute {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#end Dashboard#end}
  */
  readonly end: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#start Dashboard#start}
  */
  readonly start: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetricsTimeFrameAbsoluteToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetricsTimeFrameAbsolute | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    end: cdktf.stringToTerraform(struct!.end),
    start: cdktf.stringToTerraform(struct!.start),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetricsTimeFrameAbsoluteToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetricsTimeFrameAbsolute | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    end: {
      value: cdktf.stringToHclTerraform(struct!.end),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    start: {
      value: cdktf.stringToHclTerraform(struct!.start),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetricsTimeFrameAbsoluteOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetricsTimeFrameAbsolute | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._end !== undefined) {
      hasAnyValues = true;
      internalValueResult.end = this._end;
    }
    if (this._start !== undefined) {
      hasAnyValues = true;
      internalValueResult.start = this._start;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetricsTimeFrameAbsolute | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._end = undefined;
      this._start = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._end = value.end;
      this._start = value.start;
    }
  }

  // end - computed: false, optional: false, required: true
  private _end?: string; 
  public get end() {
    return this.getStringAttribute('end');
  }
  public set end(value: string) {
    this._end = value;
  }
  // Temporarily expose input value. Use with caution.
  public get endInput() {
    return this._end;
  }

  // start - computed: false, optional: false, required: true
  private _start?: string; 
  public get start() {
    return this.getStringAttribute('start');
  }
  public set start(value: string) {
    this._start = value;
  }
  // Temporarily expose input value. Use with caution.
  public get startInput() {
    return this._start;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetricsTimeFrameRelative {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#duration Dashboard#duration}
  */
  readonly duration: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetricsTimeFrameRelativeToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetricsTimeFrameRelative | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    duration: cdktf.stringToTerraform(struct!.duration),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetricsTimeFrameRelativeToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetricsTimeFrameRelative | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    duration: {
      value: cdktf.stringToHclTerraform(struct!.duration),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetricsTimeFrameRelativeOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetricsTimeFrameRelative | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._duration !== undefined) {
      hasAnyValues = true;
      internalValueResult.duration = this._duration;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetricsTimeFrameRelative | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._duration = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._duration = value.duration;
    }
  }

  // duration - computed: false, optional: false, required: true
  private _duration?: string; 
  public get duration() {
    return this.getStringAttribute('duration');
  }
  public set duration(value: string) {
    this._duration = value;
  }
  // Temporarily expose input value. Use with caution.
  public get durationInput() {
    return this._duration;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetricsTimeFrame {
  /**
  * Absolute time frame specifying a fixed start and end time.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#absolute Dashboard#absolute}
  */
  readonly absolute?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetricsTimeFrameAbsolute;
  /**
  * Relative time frame specifying a duration from the current time.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#relative Dashboard#relative}
  */
  readonly relative?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetricsTimeFrameRelative;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetricsTimeFrameToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetricsTimeFrame | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    absolute: dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetricsTimeFrameAbsoluteToTerraform(struct!.absolute),
    relative: dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetricsTimeFrameRelativeToTerraform(struct!.relative),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetricsTimeFrameToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetricsTimeFrame | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    absolute: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetricsTimeFrameAbsoluteToHclTerraform(struct!.absolute),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetricsTimeFrameAbsolute",
    },
    relative: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetricsTimeFrameRelativeToHclTerraform(struct!.relative),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetricsTimeFrameRelative",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetricsTimeFrameOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetricsTimeFrame | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._absolute?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.absolute = this._absolute?.internalValue;
    }
    if (this._relative?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.relative = this._relative?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetricsTimeFrame | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._absolute.internalValue = undefined;
      this._relative.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._absolute.internalValue = value.absolute;
      this._relative.internalValue = value.relative;
    }
  }

  // absolute - computed: false, optional: true, required: false
  private _absolute = new DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetricsTimeFrameAbsoluteOutputReference(this, "absolute");
  public get absolute() {
    return this._absolute;
  }
  public putAbsolute(value: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetricsTimeFrameAbsolute) {
    this._absolute.internalValue = value;
  }
  public resetAbsolute() {
    this._absolute.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get absoluteInput() {
    return this._absolute.internalValue;
  }

  // relative - computed: false, optional: true, required: false
  private _relative = new DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetricsTimeFrameRelativeOutputReference(this, "relative");
  public get relative() {
    return this._relative;
  }
  public putRelative(value: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetricsTimeFrameRelative) {
    this._relative.internalValue = value;
  }
  public resetRelative() {
    this._relative.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get relativeInput() {
    return this._relative.internalValue;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetrics {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#filters Dashboard#filters}
  */
  readonly filters?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetricsFilters[] | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#group_names Dashboard#group_names}
  */
  readonly groupNames?: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#promql_query Dashboard#promql_query}
  */
  readonly promqlQuery: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#stacked_group_name Dashboard#stacked_group_name}
  */
  readonly stackedGroupName?: string;
  /**
  * Specifies the time frame. Can be either absolute or relative.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#time_frame Dashboard#time_frame}
  */
  readonly timeFrame?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetricsTimeFrame;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetricsToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetrics | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    filters: cdktf.listMapper(dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetricsFiltersToTerraform, false)(struct!.filters),
    group_names: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.groupNames),
    promql_query: cdktf.stringToTerraform(struct!.promqlQuery),
    stacked_group_name: cdktf.stringToTerraform(struct!.stackedGroupName),
    time_frame: dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetricsTimeFrameToTerraform(struct!.timeFrame),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetricsToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetrics | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    filters: {
      value: cdktf.listMapperHcl(dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetricsFiltersToHclTerraform, false)(struct!.filters),
      isBlock: true,
      type: "list",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetricsFiltersList",
    },
    group_names: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.groupNames),
      isBlock: false,
      type: "list",
      storageClassType: "stringList",
    },
    promql_query: {
      value: cdktf.stringToHclTerraform(struct!.promqlQuery),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    stacked_group_name: {
      value: cdktf.stringToHclTerraform(struct!.stackedGroupName),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    time_frame: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetricsTimeFrameToHclTerraform(struct!.timeFrame),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetricsTimeFrame",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetricsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetrics | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._filters?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.filters = this._filters?.internalValue;
    }
    if (this._groupNames !== undefined) {
      hasAnyValues = true;
      internalValueResult.groupNames = this._groupNames;
    }
    if (this._promqlQuery !== undefined) {
      hasAnyValues = true;
      internalValueResult.promqlQuery = this._promqlQuery;
    }
    if (this._stackedGroupName !== undefined) {
      hasAnyValues = true;
      internalValueResult.stackedGroupName = this._stackedGroupName;
    }
    if (this._timeFrame?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.timeFrame = this._timeFrame?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetrics | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._filters.internalValue = undefined;
      this._groupNames = undefined;
      this._promqlQuery = undefined;
      this._stackedGroupName = undefined;
      this._timeFrame.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._filters.internalValue = value.filters;
      this._groupNames = value.groupNames;
      this._promqlQuery = value.promqlQuery;
      this._stackedGroupName = value.stackedGroupName;
      this._timeFrame.internalValue = value.timeFrame;
    }
  }

  // filters - computed: false, optional: true, required: false
  private _filters = new DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetricsFiltersList(this, "filters", false);
  public get filters() {
    return this._filters;
  }
  public putFilters(value: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetricsFilters[] | cdktf.IResolvable) {
    this._filters.internalValue = value;
  }
  public resetFilters() {
    this._filters.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get filtersInput() {
    return this._filters.internalValue;
  }

  // group_names - computed: false, optional: true, required: false
  private _groupNames?: string[]; 
  public get groupNames() {
    return this.getListAttribute('group_names');
  }
  public set groupNames(value: string[]) {
    this._groupNames = value;
  }
  public resetGroupNames() {
    this._groupNames = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get groupNamesInput() {
    return this._groupNames;
  }

  // promql_query - computed: false, optional: false, required: true
  private _promqlQuery?: string; 
  public get promqlQuery() {
    return this.getStringAttribute('promql_query');
  }
  public set promqlQuery(value: string) {
    this._promqlQuery = value;
  }
  // Temporarily expose input value. Use with caution.
  public get promqlQueryInput() {
    return this._promqlQuery;
  }

  // stacked_group_name - computed: false, optional: true, required: false
  private _stackedGroupName?: string; 
  public get stackedGroupName() {
    return this.getStringAttribute('stacked_group_name');
  }
  public set stackedGroupName(value: string) {
    this._stackedGroupName = value;
  }
  public resetStackedGroupName() {
    this._stackedGroupName = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get stackedGroupNameInput() {
    return this._stackedGroupName;
  }

  // time_frame - computed: false, optional: true, required: false
  private _timeFrame = new DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetricsTimeFrameOutputReference(this, "time_frame");
  public get timeFrame() {
    return this._timeFrame;
  }
  public putTimeFrame(value: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetricsTimeFrame) {
    this._timeFrame.internalValue = value;
  }
  public resetTimeFrame() {
    this._timeFrame.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get timeFrameInput() {
    return this._timeFrame.internalValue;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansAggregation {
  /**
  * The type of the aggregation. When the aggregation type is `metrics`, can be one of ["avg" "max" "min" "percentile_50" "percentile_95" "percentile_99" "sum" "unspecified"]. When the aggregation type is `dimension`, can be one of ["error_count" "unique_count" "unspecified"].
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#aggregation_type Dashboard#aggregation_type}
  */
  readonly aggregationType: string;
  /**
  * The field to aggregate on. When the aggregation type is `metrics`, can be one of ["duration" "unspecified"]. When the aggregation type is `dimension`, can be one of ["trace_id" "unspecified"].
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#field Dashboard#field}
  */
  readonly field: string;
  /**
  * Can be one of ["metric" "dimension"]
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#type Dashboard#type}
  */
  readonly type: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansAggregationToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansAggregation | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    aggregation_type: cdktf.stringToTerraform(struct!.aggregationType),
    field: cdktf.stringToTerraform(struct!.field),
    type: cdktf.stringToTerraform(struct!.type),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansAggregationToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansAggregation | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    aggregation_type: {
      value: cdktf.stringToHclTerraform(struct!.aggregationType),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    field: {
      value: cdktf.stringToHclTerraform(struct!.field),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    type: {
      value: cdktf.stringToHclTerraform(struct!.type),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansAggregationOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansAggregation | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._aggregationType !== undefined) {
      hasAnyValues = true;
      internalValueResult.aggregationType = this._aggregationType;
    }
    if (this._field !== undefined) {
      hasAnyValues = true;
      internalValueResult.field = this._field;
    }
    if (this._type !== undefined) {
      hasAnyValues = true;
      internalValueResult.type = this._type;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansAggregation | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._aggregationType = undefined;
      this._field = undefined;
      this._type = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._aggregationType = value.aggregationType;
      this._field = value.field;
      this._type = value.type;
    }
  }

  // aggregation_type - computed: false, optional: false, required: true
  private _aggregationType?: string; 
  public get aggregationType() {
    return this.getStringAttribute('aggregation_type');
  }
  public set aggregationType(value: string) {
    this._aggregationType = value;
  }
  // Temporarily expose input value. Use with caution.
  public get aggregationTypeInput() {
    return this._aggregationType;
  }

  // field - computed: false, optional: false, required: true
  private _field?: string; 
  public get field() {
    return this.getStringAttribute('field');
  }
  public set field(value: string) {
    this._field = value;
  }
  // Temporarily expose input value. Use with caution.
  public get fieldInput() {
    return this._field;
  }

  // type - computed: false, optional: false, required: true
  private _type?: string; 
  public get type() {
    return this.getStringAttribute('type');
  }
  public set type(value: string) {
    this._type = value;
  }
  // Temporarily expose input value. Use with caution.
  public get typeInput() {
    return this._type;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansFiltersField {
  /**
  * The type of the field. Can be one of ["metadata" "tag" "process_tag"]
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#type Dashboard#type}
  */
  readonly type: string;
  /**
  * The value of the field. When the field type is `metadata`, can be one of ["application_name" "operation_name" "service_name" "subsystem_name" "unspecified"]
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#value Dashboard#value}
  */
  readonly value: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansFiltersFieldToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansFiltersField | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    type: cdktf.stringToTerraform(struct!.type),
    value: cdktf.stringToTerraform(struct!.value),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansFiltersFieldToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansFiltersField | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    type: {
      value: cdktf.stringToHclTerraform(struct!.type),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    value: {
      value: cdktf.stringToHclTerraform(struct!.value),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansFiltersFieldOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansFiltersField | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._type !== undefined) {
      hasAnyValues = true;
      internalValueResult.type = this._type;
    }
    if (this._value !== undefined) {
      hasAnyValues = true;
      internalValueResult.value = this._value;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansFiltersField | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._type = undefined;
      this._value = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._type = value.type;
      this._value = value.value;
    }
  }

  // type - computed: false, optional: false, required: true
  private _type?: string; 
  public get type() {
    return this.getStringAttribute('type');
  }
  public set type(value: string) {
    this._type = value;
  }
  // Temporarily expose input value. Use with caution.
  public get typeInput() {
    return this._type;
  }

  // value - computed: false, optional: false, required: true
  private _value?: string; 
  public get value() {
    return this.getStringAttribute('value');
  }
  public set value(value: string) {
    this._value = value;
  }
  // Temporarily expose input value. Use with caution.
  public get valueInput() {
    return this._value;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansFiltersOperator {
  /**
  * the values to filter by. When the type is `equals`, this field is optional, the filter will match only the selected values, and all the values if not set. When the type is `not_equals`, this field is required, and the filter will match spans without the selected values.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#selected_values Dashboard#selected_values}
  */
  readonly selectedValues?: string[];
  /**
  * The type of the operator. Can be one of `equals` or `not_equals`.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#type Dashboard#type}
  */
  readonly type: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansFiltersOperatorToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansFiltersOperator | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    selected_values: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.selectedValues),
    type: cdktf.stringToTerraform(struct!.type),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansFiltersOperatorToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansFiltersOperator | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    selected_values: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.selectedValues),
      isBlock: false,
      type: "list",
      storageClassType: "stringList",
    },
    type: {
      value: cdktf.stringToHclTerraform(struct!.type),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansFiltersOperatorOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansFiltersOperator | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._selectedValues !== undefined) {
      hasAnyValues = true;
      internalValueResult.selectedValues = this._selectedValues;
    }
    if (this._type !== undefined) {
      hasAnyValues = true;
      internalValueResult.type = this._type;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansFiltersOperator | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._selectedValues = undefined;
      this._type = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._selectedValues = value.selectedValues;
      this._type = value.type;
    }
  }

  // selected_values - computed: false, optional: true, required: false
  private _selectedValues?: string[]; 
  public get selectedValues() {
    return this.getListAttribute('selected_values');
  }
  public set selectedValues(value: string[]) {
    this._selectedValues = value;
  }
  public resetSelectedValues() {
    this._selectedValues = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get selectedValuesInput() {
    return this._selectedValues;
  }

  // type - computed: false, optional: false, required: true
  private _type?: string; 
  public get type() {
    return this.getStringAttribute('type');
  }
  public set type(value: string) {
    this._type = value;
  }
  // Temporarily expose input value. Use with caution.
  public get typeInput() {
    return this._type;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansFilters {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#field Dashboard#field}
  */
  readonly field: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansFiltersField;
  /**
  * Operator to use for filtering.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#operator Dashboard#operator}
  */
  readonly operator: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansFiltersOperator;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansFiltersToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansFilters | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    field: dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansFiltersFieldToTerraform(struct!.field),
    operator: dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansFiltersOperatorToTerraform(struct!.operator),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansFiltersToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansFilters | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    field: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansFiltersFieldToHclTerraform(struct!.field),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansFiltersField",
    },
    operator: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansFiltersOperatorToHclTerraform(struct!.operator),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansFiltersOperator",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansFiltersOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansFilters | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._field?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.field = this._field?.internalValue;
    }
    if (this._operator?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.operator = this._operator?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansFilters | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._field.internalValue = undefined;
      this._operator.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._field.internalValue = value.field;
      this._operator.internalValue = value.operator;
    }
  }

  // field - computed: false, optional: false, required: true
  private _field = new DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansFiltersFieldOutputReference(this, "field");
  public get field() {
    return this._field;
  }
  public putField(value: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansFiltersField) {
    this._field.internalValue = value;
  }
  // Temporarily expose input value. Use with caution.
  public get fieldInput() {
    return this._field.internalValue;
  }

  // operator - computed: false, optional: false, required: true
  private _operator = new DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansFiltersOperatorOutputReference(this, "operator");
  public get operator() {
    return this._operator;
  }
  public putOperator(value: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansFiltersOperator) {
    this._operator.internalValue = value;
  }
  // Temporarily expose input value. Use with caution.
  public get operatorInput() {
    return this._operator.internalValue;
  }
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansFiltersList extends cdktf.ComplexList {
  public internalValue? : DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansFilters[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansFiltersOutputReference {
    return new DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansFiltersOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansGroupNames {
  /**
  * The type of the field. Can be one of ["metadata" "tag" "process_tag"]
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#type Dashboard#type}
  */
  readonly type: string;
  /**
  * The value of the field. When the field type is `metadata`, can be one of ["application_name" "operation_name" "service_name" "subsystem_name" "unspecified"]
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#value Dashboard#value}
  */
  readonly value: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansGroupNamesToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansGroupNames | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    type: cdktf.stringToTerraform(struct!.type),
    value: cdktf.stringToTerraform(struct!.value),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansGroupNamesToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansGroupNames | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    type: {
      value: cdktf.stringToHclTerraform(struct!.type),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    value: {
      value: cdktf.stringToHclTerraform(struct!.value),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansGroupNamesOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansGroupNames | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._type !== undefined) {
      hasAnyValues = true;
      internalValueResult.type = this._type;
    }
    if (this._value !== undefined) {
      hasAnyValues = true;
      internalValueResult.value = this._value;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansGroupNames | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._type = undefined;
      this._value = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._type = value.type;
      this._value = value.value;
    }
  }

  // type - computed: false, optional: false, required: true
  private _type?: string; 
  public get type() {
    return this.getStringAttribute('type');
  }
  public set type(value: string) {
    this._type = value;
  }
  // Temporarily expose input value. Use with caution.
  public get typeInput() {
    return this._type;
  }

  // value - computed: false, optional: false, required: true
  private _value?: string; 
  public get value() {
    return this.getStringAttribute('value');
  }
  public set value(value: string) {
    this._value = value;
  }
  // Temporarily expose input value. Use with caution.
  public get valueInput() {
    return this._value;
  }
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansGroupNamesList extends cdktf.ComplexList {
  public internalValue? : DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansGroupNames[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansGroupNamesOutputReference {
    return new DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansGroupNamesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansStackedGroupName {
  /**
  * The type of the field. Can be one of ["metadata" "tag" "process_tag"]
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#type Dashboard#type}
  */
  readonly type: string;
  /**
  * The value of the field. When the field type is `metadata`, can be one of ["application_name" "operation_name" "service_name" "subsystem_name" "unspecified"]
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#value Dashboard#value}
  */
  readonly value: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansStackedGroupNameToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansStackedGroupName | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    type: cdktf.stringToTerraform(struct!.type),
    value: cdktf.stringToTerraform(struct!.value),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansStackedGroupNameToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansStackedGroupName | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    type: {
      value: cdktf.stringToHclTerraform(struct!.type),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    value: {
      value: cdktf.stringToHclTerraform(struct!.value),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansStackedGroupNameOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansStackedGroupName | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._type !== undefined) {
      hasAnyValues = true;
      internalValueResult.type = this._type;
    }
    if (this._value !== undefined) {
      hasAnyValues = true;
      internalValueResult.value = this._value;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansStackedGroupName | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._type = undefined;
      this._value = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._type = value.type;
      this._value = value.value;
    }
  }

  // type - computed: false, optional: false, required: true
  private _type?: string; 
  public get type() {
    return this.getStringAttribute('type');
  }
  public set type(value: string) {
    this._type = value;
  }
  // Temporarily expose input value. Use with caution.
  public get typeInput() {
    return this._type;
  }

  // value - computed: false, optional: false, required: true
  private _value?: string; 
  public get value() {
    return this.getStringAttribute('value');
  }
  public set value(value: string) {
    this._value = value;
  }
  // Temporarily expose input value. Use with caution.
  public get valueInput() {
    return this._value;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansTimeFrameAbsolute {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#end Dashboard#end}
  */
  readonly end: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#start Dashboard#start}
  */
  readonly start: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansTimeFrameAbsoluteToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansTimeFrameAbsolute | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    end: cdktf.stringToTerraform(struct!.end),
    start: cdktf.stringToTerraform(struct!.start),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansTimeFrameAbsoluteToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansTimeFrameAbsolute | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    end: {
      value: cdktf.stringToHclTerraform(struct!.end),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    start: {
      value: cdktf.stringToHclTerraform(struct!.start),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansTimeFrameAbsoluteOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansTimeFrameAbsolute | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._end !== undefined) {
      hasAnyValues = true;
      internalValueResult.end = this._end;
    }
    if (this._start !== undefined) {
      hasAnyValues = true;
      internalValueResult.start = this._start;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansTimeFrameAbsolute | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._end = undefined;
      this._start = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._end = value.end;
      this._start = value.start;
    }
  }

  // end - computed: false, optional: false, required: true
  private _end?: string; 
  public get end() {
    return this.getStringAttribute('end');
  }
  public set end(value: string) {
    this._end = value;
  }
  // Temporarily expose input value. Use with caution.
  public get endInput() {
    return this._end;
  }

  // start - computed: false, optional: false, required: true
  private _start?: string; 
  public get start() {
    return this.getStringAttribute('start');
  }
  public set start(value: string) {
    this._start = value;
  }
  // Temporarily expose input value. Use with caution.
  public get startInput() {
    return this._start;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansTimeFrameRelative {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#duration Dashboard#duration}
  */
  readonly duration: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansTimeFrameRelativeToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansTimeFrameRelative | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    duration: cdktf.stringToTerraform(struct!.duration),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansTimeFrameRelativeToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansTimeFrameRelative | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    duration: {
      value: cdktf.stringToHclTerraform(struct!.duration),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansTimeFrameRelativeOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansTimeFrameRelative | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._duration !== undefined) {
      hasAnyValues = true;
      internalValueResult.duration = this._duration;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansTimeFrameRelative | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._duration = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._duration = value.duration;
    }
  }

  // duration - computed: false, optional: false, required: true
  private _duration?: string; 
  public get duration() {
    return this.getStringAttribute('duration');
  }
  public set duration(value: string) {
    this._duration = value;
  }
  // Temporarily expose input value. Use with caution.
  public get durationInput() {
    return this._duration;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansTimeFrame {
  /**
  * Absolute time frame specifying a fixed start and end time.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#absolute Dashboard#absolute}
  */
  readonly absolute?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansTimeFrameAbsolute;
  /**
  * Relative time frame specifying a duration from the current time.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#relative Dashboard#relative}
  */
  readonly relative?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansTimeFrameRelative;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansTimeFrameToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansTimeFrame | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    absolute: dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansTimeFrameAbsoluteToTerraform(struct!.absolute),
    relative: dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansTimeFrameRelativeToTerraform(struct!.relative),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansTimeFrameToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansTimeFrame | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    absolute: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansTimeFrameAbsoluteToHclTerraform(struct!.absolute),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansTimeFrameAbsolute",
    },
    relative: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansTimeFrameRelativeToHclTerraform(struct!.relative),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansTimeFrameRelative",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansTimeFrameOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansTimeFrame | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._absolute?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.absolute = this._absolute?.internalValue;
    }
    if (this._relative?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.relative = this._relative?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansTimeFrame | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._absolute.internalValue = undefined;
      this._relative.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._absolute.internalValue = value.absolute;
      this._relative.internalValue = value.relative;
    }
  }

  // absolute - computed: false, optional: true, required: false
  private _absolute = new DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansTimeFrameAbsoluteOutputReference(this, "absolute");
  public get absolute() {
    return this._absolute;
  }
  public putAbsolute(value: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansTimeFrameAbsolute) {
    this._absolute.internalValue = value;
  }
  public resetAbsolute() {
    this._absolute.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get absoluteInput() {
    return this._absolute.internalValue;
  }

  // relative - computed: false, optional: true, required: false
  private _relative = new DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansTimeFrameRelativeOutputReference(this, "relative");
  public get relative() {
    return this._relative;
  }
  public putRelative(value: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansTimeFrameRelative) {
    this._relative.internalValue = value;
  }
  public resetRelative() {
    this._relative.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get relativeInput() {
    return this._relative.internalValue;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpans {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#aggregation Dashboard#aggregation}
  */
  readonly aggregation?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansAggregation;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#filters Dashboard#filters}
  */
  readonly filters?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansFilters[] | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#group_names Dashboard#group_names}
  */
  readonly groupNames?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansGroupNames[] | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#lucene_query Dashboard#lucene_query}
  */
  readonly luceneQuery?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#stacked_group_name Dashboard#stacked_group_name}
  */
  readonly stackedGroupName?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansStackedGroupName;
  /**
  * Specifies the time frame. Can be either absolute or relative.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#time_frame Dashboard#time_frame}
  */
  readonly timeFrame?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansTimeFrame;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpans | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    aggregation: dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansAggregationToTerraform(struct!.aggregation),
    filters: cdktf.listMapper(dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansFiltersToTerraform, false)(struct!.filters),
    group_names: cdktf.listMapper(dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansGroupNamesToTerraform, false)(struct!.groupNames),
    lucene_query: cdktf.stringToTerraform(struct!.luceneQuery),
    stacked_group_name: dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansStackedGroupNameToTerraform(struct!.stackedGroupName),
    time_frame: dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansTimeFrameToTerraform(struct!.timeFrame),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpans | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    aggregation: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansAggregationToHclTerraform(struct!.aggregation),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansAggregation",
    },
    filters: {
      value: cdktf.listMapperHcl(dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansFiltersToHclTerraform, false)(struct!.filters),
      isBlock: true,
      type: "list",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansFiltersList",
    },
    group_names: {
      value: cdktf.listMapperHcl(dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansGroupNamesToHclTerraform, false)(struct!.groupNames),
      isBlock: true,
      type: "list",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansGroupNamesList",
    },
    lucene_query: {
      value: cdktf.stringToHclTerraform(struct!.luceneQuery),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    stacked_group_name: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansStackedGroupNameToHclTerraform(struct!.stackedGroupName),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansStackedGroupName",
    },
    time_frame: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansTimeFrameToHclTerraform(struct!.timeFrame),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansTimeFrame",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpans | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._aggregation?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.aggregation = this._aggregation?.internalValue;
    }
    if (this._filters?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.filters = this._filters?.internalValue;
    }
    if (this._groupNames?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.groupNames = this._groupNames?.internalValue;
    }
    if (this._luceneQuery !== undefined) {
      hasAnyValues = true;
      internalValueResult.luceneQuery = this._luceneQuery;
    }
    if (this._stackedGroupName?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.stackedGroupName = this._stackedGroupName?.internalValue;
    }
    if (this._timeFrame?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.timeFrame = this._timeFrame?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpans | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._aggregation.internalValue = undefined;
      this._filters.internalValue = undefined;
      this._groupNames.internalValue = undefined;
      this._luceneQuery = undefined;
      this._stackedGroupName.internalValue = undefined;
      this._timeFrame.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._aggregation.internalValue = value.aggregation;
      this._filters.internalValue = value.filters;
      this._groupNames.internalValue = value.groupNames;
      this._luceneQuery = value.luceneQuery;
      this._stackedGroupName.internalValue = value.stackedGroupName;
      this._timeFrame.internalValue = value.timeFrame;
    }
  }

  // aggregation - computed: false, optional: true, required: false
  private _aggregation = new DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansAggregationOutputReference(this, "aggregation");
  public get aggregation() {
    return this._aggregation;
  }
  public putAggregation(value: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansAggregation) {
    this._aggregation.internalValue = value;
  }
  public resetAggregation() {
    this._aggregation.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get aggregationInput() {
    return this._aggregation.internalValue;
  }

  // filters - computed: false, optional: true, required: false
  private _filters = new DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansFiltersList(this, "filters", false);
  public get filters() {
    return this._filters;
  }
  public putFilters(value: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansFilters[] | cdktf.IResolvable) {
    this._filters.internalValue = value;
  }
  public resetFilters() {
    this._filters.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get filtersInput() {
    return this._filters.internalValue;
  }

  // group_names - computed: false, optional: true, required: false
  private _groupNames = new DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansGroupNamesList(this, "group_names", false);
  public get groupNames() {
    return this._groupNames;
  }
  public putGroupNames(value: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansGroupNames[] | cdktf.IResolvable) {
    this._groupNames.internalValue = value;
  }
  public resetGroupNames() {
    this._groupNames.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get groupNamesInput() {
    return this._groupNames.internalValue;
  }

  // lucene_query - computed: false, optional: true, required: false
  private _luceneQuery?: string; 
  public get luceneQuery() {
    return this.getStringAttribute('lucene_query');
  }
  public set luceneQuery(value: string) {
    this._luceneQuery = value;
  }
  public resetLuceneQuery() {
    this._luceneQuery = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get luceneQueryInput() {
    return this._luceneQuery;
  }

  // stacked_group_name - computed: false, optional: true, required: false
  private _stackedGroupName = new DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansStackedGroupNameOutputReference(this, "stacked_group_name");
  public get stackedGroupName() {
    return this._stackedGroupName;
  }
  public putStackedGroupName(value: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansStackedGroupName) {
    this._stackedGroupName.internalValue = value;
  }
  public resetStackedGroupName() {
    this._stackedGroupName.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get stackedGroupNameInput() {
    return this._stackedGroupName.internalValue;
  }

  // time_frame - computed: false, optional: true, required: false
  private _timeFrame = new DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansTimeFrameOutputReference(this, "time_frame");
  public get timeFrame() {
    return this._timeFrame;
  }
  public putTimeFrame(value: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansTimeFrame) {
    this._timeFrame.internalValue = value;
  }
  public resetTimeFrame() {
    this._timeFrame.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get timeFrameInput() {
    return this._timeFrame.internalValue;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuery {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#data_prime Dashboard#data_prime}
  */
  readonly dataPrime?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrime;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#logs Dashboard#logs}
  */
  readonly logs?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogs;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#metrics Dashboard#metrics}
  */
  readonly metrics?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetrics;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#spans Dashboard#spans}
  */
  readonly spans?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpans;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuery | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    data_prime: dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeToTerraform(struct!.dataPrime),
    logs: dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsToTerraform(struct!.logs),
    metrics: dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetricsToTerraform(struct!.metrics),
    spans: dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansToTerraform(struct!.spans),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuery | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    data_prime: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeToHclTerraform(struct!.dataPrime),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrime",
    },
    logs: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsToHclTerraform(struct!.logs),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogs",
    },
    metrics: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetricsToHclTerraform(struct!.metrics),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetrics",
    },
    spans: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansToHclTerraform(struct!.spans),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpans",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuery | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._dataPrime?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.dataPrime = this._dataPrime?.internalValue;
    }
    if (this._logs?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.logs = this._logs?.internalValue;
    }
    if (this._metrics?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.metrics = this._metrics?.internalValue;
    }
    if (this._spans?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.spans = this._spans?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuery | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._dataPrime.internalValue = undefined;
      this._logs.internalValue = undefined;
      this._metrics.internalValue = undefined;
      this._spans.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._dataPrime.internalValue = value.dataPrime;
      this._logs.internalValue = value.logs;
      this._metrics.internalValue = value.metrics;
      this._spans.internalValue = value.spans;
    }
  }

  // data_prime - computed: false, optional: true, required: false
  private _dataPrime = new DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrimeOutputReference(this, "data_prime");
  public get dataPrime() {
    return this._dataPrime;
  }
  public putDataPrime(value: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryDataPrime) {
    this._dataPrime.internalValue = value;
  }
  public resetDataPrime() {
    this._dataPrime.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get dataPrimeInput() {
    return this._dataPrime.internalValue;
  }

  // logs - computed: false, optional: true, required: false
  private _logs = new DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogsOutputReference(this, "logs");
  public get logs() {
    return this._logs;
  }
  public putLogs(value: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryLogs) {
    this._logs.internalValue = value;
  }
  public resetLogs() {
    this._logs.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get logsInput() {
    return this._logs.internalValue;
  }

  // metrics - computed: false, optional: true, required: false
  private _metrics = new DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetricsOutputReference(this, "metrics");
  public get metrics() {
    return this._metrics;
  }
  public putMetrics(value: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryMetrics) {
    this._metrics.internalValue = value;
  }
  public resetMetrics() {
    this._metrics.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get metricsInput() {
    return this._metrics.internalValue;
  }

  // spans - computed: false, optional: true, required: false
  private _spans = new DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpansOutputReference(this, "spans");
  public get spans() {
    return this._spans;
  }
  public putSpans(value: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuerySpans) {
    this._spans.internalValue = value;
  }
  public resetSpans() {
    this._spans.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get spansInput() {
    return this._spans.internalValue;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartStackDefinition {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#max_slices_per_bar Dashboard#max_slices_per_bar}
  */
  readonly maxSlicesPerBar?: number;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#stack_name_template Dashboard#stack_name_template}
  */
  readonly stackNameTemplate?: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartStackDefinitionToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartStackDefinition | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    max_slices_per_bar: cdktf.numberToTerraform(struct!.maxSlicesPerBar),
    stack_name_template: cdktf.stringToTerraform(struct!.stackNameTemplate),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartStackDefinitionToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartStackDefinition | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    max_slices_per_bar: {
      value: cdktf.numberToHclTerraform(struct!.maxSlicesPerBar),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    stack_name_template: {
      value: cdktf.stringToHclTerraform(struct!.stackNameTemplate),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartStackDefinitionOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartStackDefinition | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._maxSlicesPerBar !== undefined) {
      hasAnyValues = true;
      internalValueResult.maxSlicesPerBar = this._maxSlicesPerBar;
    }
    if (this._stackNameTemplate !== undefined) {
      hasAnyValues = true;
      internalValueResult.stackNameTemplate = this._stackNameTemplate;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartStackDefinition | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._maxSlicesPerBar = undefined;
      this._stackNameTemplate = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._maxSlicesPerBar = value.maxSlicesPerBar;
      this._stackNameTemplate = value.stackNameTemplate;
    }
  }

  // max_slices_per_bar - computed: false, optional: true, required: false
  private _maxSlicesPerBar?: number; 
  public get maxSlicesPerBar() {
    return this.getNumberAttribute('max_slices_per_bar');
  }
  public set maxSlicesPerBar(value: number) {
    this._maxSlicesPerBar = value;
  }
  public resetMaxSlicesPerBar() {
    this._maxSlicesPerBar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get maxSlicesPerBarInput() {
    return this._maxSlicesPerBar;
  }

  // stack_name_template - computed: false, optional: true, required: false
  private _stackNameTemplate?: string; 
  public get stackNameTemplate() {
    return this.getStringAttribute('stack_name_template');
  }
  public set stackNameTemplate(value: string) {
    this._stackNameTemplate = value;
  }
  public resetStackNameTemplate() {
    this._stackNameTemplate = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get stackNameTemplateInput() {
    return this._stackNameTemplate;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChart {
  /**
  * The color scheme. Can be one of classic, severity, cold, negative, green, red, blue.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#color_scheme Dashboard#color_scheme}
  */
  readonly colorScheme?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#colors_by Dashboard#colors_by}
  */
  readonly colorsBy?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#data_mode_type Dashboard#data_mode_type}
  */
  readonly dataModeType?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#display_on_bar Dashboard#display_on_bar}
  */
  readonly displayOnBar?: boolean | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#group_name_template Dashboard#group_name_template}
  */
  readonly groupNameTemplate?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#max_bars_per_chart Dashboard#max_bars_per_chart}
  */
  readonly maxBarsPerChart?: number;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#query Dashboard#query}
  */
  readonly query?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuery;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#scale_type Dashboard#scale_type}
  */
  readonly scaleType?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#sort_by Dashboard#sort_by}
  */
  readonly sortBy?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#stack_definition Dashboard#stack_definition}
  */
  readonly stackDefinition?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartStackDefinition;
  /**
  * The unit of the chart. Can be one of bytes, bytes_iec, custom, euro, euro_cents, gbytes, gibytes, kbytes, kibytes, mbytes, mibytes, microseconds, milliseconds, nanoseconds, percent01, percent100, seconds, unspecified, usd, usd_cents.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#unit Dashboard#unit}
  */
  readonly unit?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#y_axis_view_by Dashboard#y_axis_view_by}
  */
  readonly yAxisViewBy?: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChart | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    color_scheme: cdktf.stringToTerraform(struct!.colorScheme),
    colors_by: cdktf.stringToTerraform(struct!.colorsBy),
    data_mode_type: cdktf.stringToTerraform(struct!.dataModeType),
    display_on_bar: cdktf.booleanToTerraform(struct!.displayOnBar),
    group_name_template: cdktf.stringToTerraform(struct!.groupNameTemplate),
    max_bars_per_chart: cdktf.numberToTerraform(struct!.maxBarsPerChart),
    query: dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryToTerraform(struct!.query),
    scale_type: cdktf.stringToTerraform(struct!.scaleType),
    sort_by: cdktf.stringToTerraform(struct!.sortBy),
    stack_definition: dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartStackDefinitionToTerraform(struct!.stackDefinition),
    unit: cdktf.stringToTerraform(struct!.unit),
    y_axis_view_by: cdktf.stringToTerraform(struct!.yAxisViewBy),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChart | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    color_scheme: {
      value: cdktf.stringToHclTerraform(struct!.colorScheme),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    colors_by: {
      value: cdktf.stringToHclTerraform(struct!.colorsBy),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    data_mode_type: {
      value: cdktf.stringToHclTerraform(struct!.dataModeType),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    display_on_bar: {
      value: cdktf.booleanToHclTerraform(struct!.displayOnBar),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    group_name_template: {
      value: cdktf.stringToHclTerraform(struct!.groupNameTemplate),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    max_bars_per_chart: {
      value: cdktf.numberToHclTerraform(struct!.maxBarsPerChart),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    query: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryToHclTerraform(struct!.query),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuery",
    },
    scale_type: {
      value: cdktf.stringToHclTerraform(struct!.scaleType),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    sort_by: {
      value: cdktf.stringToHclTerraform(struct!.sortBy),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    stack_definition: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartStackDefinitionToHclTerraform(struct!.stackDefinition),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartStackDefinition",
    },
    unit: {
      value: cdktf.stringToHclTerraform(struct!.unit),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    y_axis_view_by: {
      value: cdktf.stringToHclTerraform(struct!.yAxisViewBy),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChart | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._colorScheme !== undefined) {
      hasAnyValues = true;
      internalValueResult.colorScheme = this._colorScheme;
    }
    if (this._colorsBy !== undefined) {
      hasAnyValues = true;
      internalValueResult.colorsBy = this._colorsBy;
    }
    if (this._dataModeType !== undefined) {
      hasAnyValues = true;
      internalValueResult.dataModeType = this._dataModeType;
    }
    if (this._displayOnBar !== undefined) {
      hasAnyValues = true;
      internalValueResult.displayOnBar = this._displayOnBar;
    }
    if (this._groupNameTemplate !== undefined) {
      hasAnyValues = true;
      internalValueResult.groupNameTemplate = this._groupNameTemplate;
    }
    if (this._maxBarsPerChart !== undefined) {
      hasAnyValues = true;
      internalValueResult.maxBarsPerChart = this._maxBarsPerChart;
    }
    if (this._query?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.query = this._query?.internalValue;
    }
    if (this._scaleType !== undefined) {
      hasAnyValues = true;
      internalValueResult.scaleType = this._scaleType;
    }
    if (this._sortBy !== undefined) {
      hasAnyValues = true;
      internalValueResult.sortBy = this._sortBy;
    }
    if (this._stackDefinition?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.stackDefinition = this._stackDefinition?.internalValue;
    }
    if (this._unit !== undefined) {
      hasAnyValues = true;
      internalValueResult.unit = this._unit;
    }
    if (this._yAxisViewBy !== undefined) {
      hasAnyValues = true;
      internalValueResult.yAxisViewBy = this._yAxisViewBy;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChart | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._colorScheme = undefined;
      this._colorsBy = undefined;
      this._dataModeType = undefined;
      this._displayOnBar = undefined;
      this._groupNameTemplate = undefined;
      this._maxBarsPerChart = undefined;
      this._query.internalValue = undefined;
      this._scaleType = undefined;
      this._sortBy = undefined;
      this._stackDefinition.internalValue = undefined;
      this._unit = undefined;
      this._yAxisViewBy = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._colorScheme = value.colorScheme;
      this._colorsBy = value.colorsBy;
      this._dataModeType = value.dataModeType;
      this._displayOnBar = value.displayOnBar;
      this._groupNameTemplate = value.groupNameTemplate;
      this._maxBarsPerChart = value.maxBarsPerChart;
      this._query.internalValue = value.query;
      this._scaleType = value.scaleType;
      this._sortBy = value.sortBy;
      this._stackDefinition.internalValue = value.stackDefinition;
      this._unit = value.unit;
      this._yAxisViewBy = value.yAxisViewBy;
    }
  }

  // color_scheme - computed: false, optional: true, required: false
  private _colorScheme?: string; 
  public get colorScheme() {
    return this.getStringAttribute('color_scheme');
  }
  public set colorScheme(value: string) {
    this._colorScheme = value;
  }
  public resetColorScheme() {
    this._colorScheme = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get colorSchemeInput() {
    return this._colorScheme;
  }

  // colors_by - computed: false, optional: true, required: false
  private _colorsBy?: string; 
  public get colorsBy() {
    return this.getStringAttribute('colors_by');
  }
  public set colorsBy(value: string) {
    this._colorsBy = value;
  }
  public resetColorsBy() {
    this._colorsBy = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get colorsByInput() {
    return this._colorsBy;
  }

  // data_mode_type - computed: true, optional: true, required: false
  private _dataModeType?: string; 
  public get dataModeType() {
    return this.getStringAttribute('data_mode_type');
  }
  public set dataModeType(value: string) {
    this._dataModeType = value;
  }
  public resetDataModeType() {
    this._dataModeType = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get dataModeTypeInput() {
    return this._dataModeType;
  }

  // display_on_bar - computed: true, optional: true, required: false
  private _displayOnBar?: boolean | cdktf.IResolvable; 
  public get displayOnBar() {
    return this.getBooleanAttribute('display_on_bar');
  }
  public set displayOnBar(value: boolean | cdktf.IResolvable) {
    this._displayOnBar = value;
  }
  public resetDisplayOnBar() {
    this._displayOnBar = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get displayOnBarInput() {
    return this._displayOnBar;
  }

  // group_name_template - computed: false, optional: true, required: false
  private _groupNameTemplate?: string; 
  public get groupNameTemplate() {
    return this.getStringAttribute('group_name_template');
  }
  public set groupNameTemplate(value: string) {
    this._groupNameTemplate = value;
  }
  public resetGroupNameTemplate() {
    this._groupNameTemplate = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get groupNameTemplateInput() {
    return this._groupNameTemplate;
  }

  // max_bars_per_chart - computed: false, optional: true, required: false
  private _maxBarsPerChart?: number; 
  public get maxBarsPerChart() {
    return this.getNumberAttribute('max_bars_per_chart');
  }
  public set maxBarsPerChart(value: number) {
    this._maxBarsPerChart = value;
  }
  public resetMaxBarsPerChart() {
    this._maxBarsPerChart = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get maxBarsPerChartInput() {
    return this._maxBarsPerChart;
  }

  // query - computed: false, optional: true, required: false
  private _query = new DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQueryOutputReference(this, "query");
  public get query() {
    return this._query;
  }
  public putQuery(value: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartQuery) {
    this._query.internalValue = value;
  }
  public resetQuery() {
    this._query.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get queryInput() {
    return this._query.internalValue;
  }

  // scale_type - computed: true, optional: true, required: false
  private _scaleType?: string; 
  public get scaleType() {
    return this.getStringAttribute('scale_type');
  }
  public set scaleType(value: string) {
    this._scaleType = value;
  }
  public resetScaleType() {
    this._scaleType = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get scaleTypeInput() {
    return this._scaleType;
  }

  // sort_by - computed: true, optional: true, required: false
  private _sortBy?: string; 
  public get sortBy() {
    return this.getStringAttribute('sort_by');
  }
  public set sortBy(value: string) {
    this._sortBy = value;
  }
  public resetSortBy() {
    this._sortBy = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get sortByInput() {
    return this._sortBy;
  }

  // stack_definition - computed: false, optional: true, required: false
  private _stackDefinition = new DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartStackDefinitionOutputReference(this, "stack_definition");
  public get stackDefinition() {
    return this._stackDefinition;
  }
  public putStackDefinition(value: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartStackDefinition) {
    this._stackDefinition.internalValue = value;
  }
  public resetStackDefinition() {
    this._stackDefinition.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get stackDefinitionInput() {
    return this._stackDefinition.internalValue;
  }

  // unit - computed: true, optional: true, required: false
  private _unit?: string; 
  public get unit() {
    return this.getStringAttribute('unit');
  }
  public set unit(value: string) {
    this._unit = value;
  }
  public resetUnit() {
    this._unit = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get unitInput() {
    return this._unit;
  }

  // y_axis_view_by - computed: false, optional: true, required: false
  private _yAxisViewBy?: string; 
  public get yAxisViewBy() {
    return this.getStringAttribute('y_axis_view_by');
  }
  public set yAxisViewBy(value: string) {
    this._yAxisViewBy = value;
  }
  public resetYAxisViewBy() {
    this._yAxisViewBy = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get yAxisViewByInput() {
    return this._yAxisViewBy;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionLineChartLegend {
  /**
  * The columns to display in the legend. Valid values are: avg, last, max, min, name, sum, unspecified.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#columns Dashboard#columns}
  */
  readonly columns?: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#group_by_query Dashboard#group_by_query}
  */
  readonly groupByQuery?: boolean | cdktf.IResolvable;
  /**
  * Whether to display the legend. True by default.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#is_visible Dashboard#is_visible}
  */
  readonly isVisible?: boolean | cdktf.IResolvable;
  /**
  * The placement of the legend. Valid values are: auto, bottom, hidden, side, unspecified.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#placement Dashboard#placement}
  */
  readonly placement?: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionLineChartLegendToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartLegend | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    columns: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.columns),
    group_by_query: cdktf.booleanToTerraform(struct!.groupByQuery),
    is_visible: cdktf.booleanToTerraform(struct!.isVisible),
    placement: cdktf.stringToTerraform(struct!.placement),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionLineChartLegendToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartLegend | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    columns: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.columns),
      isBlock: false,
      type: "list",
      storageClassType: "stringList",
    },
    group_by_query: {
      value: cdktf.booleanToHclTerraform(struct!.groupByQuery),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    is_visible: {
      value: cdktf.booleanToHclTerraform(struct!.isVisible),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    placement: {
      value: cdktf.stringToHclTerraform(struct!.placement),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionLineChartLegendOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionLineChartLegend | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._columns !== undefined) {
      hasAnyValues = true;
      internalValueResult.columns = this._columns;
    }
    if (this._groupByQuery !== undefined) {
      hasAnyValues = true;
      internalValueResult.groupByQuery = this._groupByQuery;
    }
    if (this._isVisible !== undefined) {
      hasAnyValues = true;
      internalValueResult.isVisible = this._isVisible;
    }
    if (this._placement !== undefined) {
      hasAnyValues = true;
      internalValueResult.placement = this._placement;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartLegend | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._columns = undefined;
      this._groupByQuery = undefined;
      this._isVisible = undefined;
      this._placement = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._columns = value.columns;
      this._groupByQuery = value.groupByQuery;
      this._isVisible = value.isVisible;
      this._placement = value.placement;
    }
  }

  // columns - computed: false, optional: true, required: false
  private _columns?: string[]; 
  public get columns() {
    return this.getListAttribute('columns');
  }
  public set columns(value: string[]) {
    this._columns = value;
  }
  public resetColumns() {
    this._columns = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get columnsInput() {
    return this._columns;
  }

  // group_by_query - computed: true, optional: true, required: false
  private _groupByQuery?: boolean | cdktf.IResolvable; 
  public get groupByQuery() {
    return this.getBooleanAttribute('group_by_query');
  }
  public set groupByQuery(value: boolean | cdktf.IResolvable) {
    this._groupByQuery = value;
  }
  public resetGroupByQuery() {
    this._groupByQuery = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get groupByQueryInput() {
    return this._groupByQuery;
  }

  // is_visible - computed: true, optional: true, required: false
  private _isVisible?: boolean | cdktf.IResolvable; 
  public get isVisible() {
    return this.getBooleanAttribute('is_visible');
  }
  public set isVisible(value: boolean | cdktf.IResolvable) {
    this._isVisible = value;
  }
  public resetIsVisible() {
    this._isVisible = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get isVisibleInput() {
    return this._isVisible;
  }

  // placement - computed: true, optional: true, required: false
  private _placement?: string; 
  public get placement() {
    return this.getStringAttribute('placement');
  }
  public set placement(value: string) {
    this._placement = value;
  }
  public resetPlacement() {
    this._placement = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get placementInput() {
    return this._placement;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersLogsObservationField {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#keypath Dashboard#keypath}
  */
  readonly keypath: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#scope Dashboard#scope}
  */
  readonly scope: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersLogsObservationFieldToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersLogsObservationField | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    keypath: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.keypath),
    scope: cdktf.stringToTerraform(struct!.scope),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersLogsObservationFieldToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersLogsObservationField | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    keypath: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.keypath),
      isBlock: false,
      type: "list",
      storageClassType: "stringList",
    },
    scope: {
      value: cdktf.stringToHclTerraform(struct!.scope),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersLogsObservationFieldOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersLogsObservationField | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._keypath !== undefined) {
      hasAnyValues = true;
      internalValueResult.keypath = this._keypath;
    }
    if (this._scope !== undefined) {
      hasAnyValues = true;
      internalValueResult.scope = this._scope;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersLogsObservationField | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._keypath = undefined;
      this._scope = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._keypath = value.keypath;
      this._scope = value.scope;
    }
  }

  // keypath - computed: false, optional: false, required: true
  private _keypath?: string[]; 
  public get keypath() {
    return this.getListAttribute('keypath');
  }
  public set keypath(value: string[]) {
    this._keypath = value;
  }
  // Temporarily expose input value. Use with caution.
  public get keypathInput() {
    return this._keypath;
  }

  // scope - computed: false, optional: false, required: true
  private _scope?: string; 
  public get scope() {
    return this.getStringAttribute('scope');
  }
  public set scope(value: string) {
    this._scope = value;
  }
  // Temporarily expose input value. Use with caution.
  public get scopeInput() {
    return this._scope;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersLogsOperator {
  /**
  * the values to filter by. When the type is `equals`, this field is optional, the filter will match only the selected values, and all the values if not set. When the type is `not_equals`, this field is required, and the filter will match spans without the selected values.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#selected_values Dashboard#selected_values}
  */
  readonly selectedValues?: string[];
  /**
  * The type of the operator. Can be one of `equals` or `not_equals`.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#type Dashboard#type}
  */
  readonly type: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersLogsOperatorToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersLogsOperator | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    selected_values: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.selectedValues),
    type: cdktf.stringToTerraform(struct!.type),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersLogsOperatorToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersLogsOperator | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    selected_values: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.selectedValues),
      isBlock: false,
      type: "list",
      storageClassType: "stringList",
    },
    type: {
      value: cdktf.stringToHclTerraform(struct!.type),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersLogsOperatorOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersLogsOperator | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._selectedValues !== undefined) {
      hasAnyValues = true;
      internalValueResult.selectedValues = this._selectedValues;
    }
    if (this._type !== undefined) {
      hasAnyValues = true;
      internalValueResult.type = this._type;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersLogsOperator | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._selectedValues = undefined;
      this._type = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._selectedValues = value.selectedValues;
      this._type = value.type;
    }
  }

  // selected_values - computed: false, optional: true, required: false
  private _selectedValues?: string[]; 
  public get selectedValues() {
    return this.getListAttribute('selected_values');
  }
  public set selectedValues(value: string[]) {
    this._selectedValues = value;
  }
  public resetSelectedValues() {
    this._selectedValues = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get selectedValuesInput() {
    return this._selectedValues;
  }

  // type - computed: false, optional: false, required: true
  private _type?: string; 
  public get type() {
    return this.getStringAttribute('type');
  }
  public set type(value: string) {
    this._type = value;
  }
  // Temporarily expose input value. Use with caution.
  public get typeInput() {
    return this._type;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersLogs {
  /**
  * Field in the logs to apply the filter on.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#field Dashboard#field}
  */
  readonly field: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#observation_field Dashboard#observation_field}
  */
  readonly observationField?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersLogsObservationField;
  /**
  * Operator to use for filtering.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#operator Dashboard#operator}
  */
  readonly operator: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersLogsOperator;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersLogsToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersLogs | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    field: cdktf.stringToTerraform(struct!.field),
    observation_field: dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersLogsObservationFieldToTerraform(struct!.observationField),
    operator: dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersLogsOperatorToTerraform(struct!.operator),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersLogsToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersLogs | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    field: {
      value: cdktf.stringToHclTerraform(struct!.field),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    observation_field: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersLogsObservationFieldToHclTerraform(struct!.observationField),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersLogsObservationField",
    },
    operator: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersLogsOperatorToHclTerraform(struct!.operator),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersLogsOperator",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersLogsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersLogs | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._field !== undefined) {
      hasAnyValues = true;
      internalValueResult.field = this._field;
    }
    if (this._observationField?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.observationField = this._observationField?.internalValue;
    }
    if (this._operator?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.operator = this._operator?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersLogs | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._field = undefined;
      this._observationField.internalValue = undefined;
      this._operator.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._field = value.field;
      this._observationField.internalValue = value.observationField;
      this._operator.internalValue = value.operator;
    }
  }

  // field - computed: false, optional: false, required: true
  private _field?: string; 
  public get field() {
    return this.getStringAttribute('field');
  }
  public set field(value: string) {
    this._field = value;
  }
  // Temporarily expose input value. Use with caution.
  public get fieldInput() {
    return this._field;
  }

  // observation_field - computed: false, optional: true, required: false
  private _observationField = new DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersLogsObservationFieldOutputReference(this, "observation_field");
  public get observationField() {
    return this._observationField;
  }
  public putObservationField(value: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersLogsObservationField) {
    this._observationField.internalValue = value;
  }
  public resetObservationField() {
    this._observationField.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get observationFieldInput() {
    return this._observationField.internalValue;
  }

  // operator - computed: false, optional: false, required: true
  private _operator = new DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersLogsOperatorOutputReference(this, "operator");
  public get operator() {
    return this._operator;
  }
  public putOperator(value: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersLogsOperator) {
    this._operator.internalValue = value;
  }
  // Temporarily expose input value. Use with caution.
  public get operatorInput() {
    return this._operator.internalValue;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersMetricsOperator {
  /**
  * the values to filter by. When the type is `equals`, this field is optional, the filter will match only the selected values, and all the values if not set. When the type is `not_equals`, this field is required, and the filter will match spans without the selected values.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#selected_values Dashboard#selected_values}
  */
  readonly selectedValues?: string[];
  /**
  * The type of the operator. Can be one of `equals` or `not_equals`.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#type Dashboard#type}
  */
  readonly type: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersMetricsOperatorToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersMetricsOperator | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    selected_values: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.selectedValues),
    type: cdktf.stringToTerraform(struct!.type),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersMetricsOperatorToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersMetricsOperator | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    selected_values: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.selectedValues),
      isBlock: false,
      type: "list",
      storageClassType: "stringList",
    },
    type: {
      value: cdktf.stringToHclTerraform(struct!.type),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersMetricsOperatorOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersMetricsOperator | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._selectedValues !== undefined) {
      hasAnyValues = true;
      internalValueResult.selectedValues = this._selectedValues;
    }
    if (this._type !== undefined) {
      hasAnyValues = true;
      internalValueResult.type = this._type;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersMetricsOperator | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._selectedValues = undefined;
      this._type = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._selectedValues = value.selectedValues;
      this._type = value.type;
    }
  }

  // selected_values - computed: false, optional: true, required: false
  private _selectedValues?: string[]; 
  public get selectedValues() {
    return this.getListAttribute('selected_values');
  }
  public set selectedValues(value: string[]) {
    this._selectedValues = value;
  }
  public resetSelectedValues() {
    this._selectedValues = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get selectedValuesInput() {
    return this._selectedValues;
  }

  // type - computed: false, optional: false, required: true
  private _type?: string; 
  public get type() {
    return this.getStringAttribute('type');
  }
  public set type(value: string) {
    this._type = value;
  }
  // Temporarily expose input value. Use with caution.
  public get typeInput() {
    return this._type;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersMetrics {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#label Dashboard#label}
  */
  readonly label?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#metric_name Dashboard#metric_name}
  */
  readonly metricName?: string;
  /**
  * Operator to use for filtering.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#operator Dashboard#operator}
  */
  readonly operator: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersMetricsOperator;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersMetricsToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersMetrics | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    label: cdktf.stringToTerraform(struct!.label),
    metric_name: cdktf.stringToTerraform(struct!.metricName),
    operator: dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersMetricsOperatorToTerraform(struct!.operator),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersMetricsToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersMetrics | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    label: {
      value: cdktf.stringToHclTerraform(struct!.label),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    metric_name: {
      value: cdktf.stringToHclTerraform(struct!.metricName),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    operator: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersMetricsOperatorToHclTerraform(struct!.operator),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersMetricsOperator",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersMetricsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersMetrics | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._label !== undefined) {
      hasAnyValues = true;
      internalValueResult.label = this._label;
    }
    if (this._metricName !== undefined) {
      hasAnyValues = true;
      internalValueResult.metricName = this._metricName;
    }
    if (this._operator?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.operator = this._operator?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersMetrics | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._label = undefined;
      this._metricName = undefined;
      this._operator.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._label = value.label;
      this._metricName = value.metricName;
      this._operator.internalValue = value.operator;
    }
  }

  // label - computed: false, optional: true, required: false
  private _label?: string; 
  public get label() {
    return this.getStringAttribute('label');
  }
  public set label(value: string) {
    this._label = value;
  }
  public resetLabel() {
    this._label = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get labelInput() {
    return this._label;
  }

  // metric_name - computed: false, optional: true, required: false
  private _metricName?: string; 
  public get metricName() {
    return this.getStringAttribute('metric_name');
  }
  public set metricName(value: string) {
    this._metricName = value;
  }
  public resetMetricName() {
    this._metricName = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get metricNameInput() {
    return this._metricName;
  }

  // operator - computed: false, optional: false, required: true
  private _operator = new DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersMetricsOperatorOutputReference(this, "operator");
  public get operator() {
    return this._operator;
  }
  public putOperator(value: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersMetricsOperator) {
    this._operator.internalValue = value;
  }
  // Temporarily expose input value. Use with caution.
  public get operatorInput() {
    return this._operator.internalValue;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersSpansField {
  /**
  * The type of the field. Can be one of ["metadata" "tag" "process_tag"]
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#type Dashboard#type}
  */
  readonly type: string;
  /**
  * The value of the field. When the field type is `metadata`, can be one of ["application_name" "operation_name" "service_name" "subsystem_name" "unspecified"]
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#value Dashboard#value}
  */
  readonly value: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersSpansFieldToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersSpansField | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    type: cdktf.stringToTerraform(struct!.type),
    value: cdktf.stringToTerraform(struct!.value),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersSpansFieldToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersSpansField | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    type: {
      value: cdktf.stringToHclTerraform(struct!.type),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    value: {
      value: cdktf.stringToHclTerraform(struct!.value),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersSpansFieldOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersSpansField | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._type !== undefined) {
      hasAnyValues = true;
      internalValueResult.type = this._type;
    }
    if (this._value !== undefined) {
      hasAnyValues = true;
      internalValueResult.value = this._value;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersSpansField | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._type = undefined;
      this._value = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._type = value.type;
      this._value = value.value;
    }
  }

  // type - computed: false, optional: false, required: true
  private _type?: string; 
  public get type() {
    return this.getStringAttribute('type');
  }
  public set type(value: string) {
    this._type = value;
  }
  // Temporarily expose input value. Use with caution.
  public get typeInput() {
    return this._type;
  }

  // value - computed: false, optional: false, required: true
  private _value?: string; 
  public get value() {
    return this.getStringAttribute('value');
  }
  public set value(value: string) {
    this._value = value;
  }
  // Temporarily expose input value. Use with caution.
  public get valueInput() {
    return this._value;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersSpansOperator {
  /**
  * the values to filter by. When the type is `equals`, this field is optional, the filter will match only the selected values, and all the values if not set. When the type is `not_equals`, this field is required, and the filter will match spans without the selected values.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#selected_values Dashboard#selected_values}
  */
  readonly selectedValues?: string[];
  /**
  * The type of the operator. Can be one of `equals` or `not_equals`.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#type Dashboard#type}
  */
  readonly type: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersSpansOperatorToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersSpansOperator | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    selected_values: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.selectedValues),
    type: cdktf.stringToTerraform(struct!.type),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersSpansOperatorToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersSpansOperator | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    selected_values: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.selectedValues),
      isBlock: false,
      type: "list",
      storageClassType: "stringList",
    },
    type: {
      value: cdktf.stringToHclTerraform(struct!.type),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersSpansOperatorOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersSpansOperator | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._selectedValues !== undefined) {
      hasAnyValues = true;
      internalValueResult.selectedValues = this._selectedValues;
    }
    if (this._type !== undefined) {
      hasAnyValues = true;
      internalValueResult.type = this._type;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersSpansOperator | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._selectedValues = undefined;
      this._type = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._selectedValues = value.selectedValues;
      this._type = value.type;
    }
  }

  // selected_values - computed: false, optional: true, required: false
  private _selectedValues?: string[]; 
  public get selectedValues() {
    return this.getListAttribute('selected_values');
  }
  public set selectedValues(value: string[]) {
    this._selectedValues = value;
  }
  public resetSelectedValues() {
    this._selectedValues = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get selectedValuesInput() {
    return this._selectedValues;
  }

  // type - computed: false, optional: false, required: true
  private _type?: string; 
  public get type() {
    return this.getStringAttribute('type');
  }
  public set type(value: string) {
    this._type = value;
  }
  // Temporarily expose input value. Use with caution.
  public get typeInput() {
    return this._type;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersSpans {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#field Dashboard#field}
  */
  readonly field: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersSpansField;
  /**
  * Operator to use for filtering.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#operator Dashboard#operator}
  */
  readonly operator: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersSpansOperator;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersSpansToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersSpans | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    field: dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersSpansFieldToTerraform(struct!.field),
    operator: dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersSpansOperatorToTerraform(struct!.operator),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersSpansToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersSpans | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    field: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersSpansFieldToHclTerraform(struct!.field),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersSpansField",
    },
    operator: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersSpansOperatorToHclTerraform(struct!.operator),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersSpansOperator",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersSpansOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersSpans | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._field?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.field = this._field?.internalValue;
    }
    if (this._operator?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.operator = this._operator?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersSpans | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._field.internalValue = undefined;
      this._operator.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._field.internalValue = value.field;
      this._operator.internalValue = value.operator;
    }
  }

  // field - computed: false, optional: false, required: true
  private _field = new DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersSpansFieldOutputReference(this, "field");
  public get field() {
    return this._field;
  }
  public putField(value: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersSpansField) {
    this._field.internalValue = value;
  }
  // Temporarily expose input value. Use with caution.
  public get fieldInput() {
    return this._field.internalValue;
  }

  // operator - computed: false, optional: false, required: true
  private _operator = new DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersSpansOperatorOutputReference(this, "operator");
  public get operator() {
    return this._operator;
  }
  public putOperator(value: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersSpansOperator) {
    this._operator.internalValue = value;
  }
  // Temporarily expose input value. Use with caution.
  public get operatorInput() {
    return this._operator.internalValue;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFilters {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#logs Dashboard#logs}
  */
  readonly logs?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersLogs;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#metrics Dashboard#metrics}
  */
  readonly metrics?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersMetrics;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#spans Dashboard#spans}
  */
  readonly spans?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersSpans;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFilters | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    logs: dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersLogsToTerraform(struct!.logs),
    metrics: dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersMetricsToTerraform(struct!.metrics),
    spans: dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersSpansToTerraform(struct!.spans),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFilters | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    logs: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersLogsToHclTerraform(struct!.logs),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersLogs",
    },
    metrics: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersMetricsToHclTerraform(struct!.metrics),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersMetrics",
    },
    spans: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersSpansToHclTerraform(struct!.spans),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersSpans",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFilters | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._logs?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.logs = this._logs?.internalValue;
    }
    if (this._metrics?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.metrics = this._metrics?.internalValue;
    }
    if (this._spans?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.spans = this._spans?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFilters | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._logs.internalValue = undefined;
      this._metrics.internalValue = undefined;
      this._spans.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._logs.internalValue = value.logs;
      this._metrics.internalValue = value.metrics;
      this._spans.internalValue = value.spans;
    }
  }

  // logs - computed: false, optional: true, required: false
  private _logs = new DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersLogsOutputReference(this, "logs");
  public get logs() {
    return this._logs;
  }
  public putLogs(value: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersLogs) {
    this._logs.internalValue = value;
  }
  public resetLogs() {
    this._logs.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get logsInput() {
    return this._logs.internalValue;
  }

  // metrics - computed: false, optional: true, required: false
  private _metrics = new DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersMetricsOutputReference(this, "metrics");
  public get metrics() {
    return this._metrics;
  }
  public putMetrics(value: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersMetrics) {
    this._metrics.internalValue = value;
  }
  public resetMetrics() {
    this._metrics.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get metricsInput() {
    return this._metrics.internalValue;
  }

  // spans - computed: false, optional: true, required: false
  private _spans = new DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersSpansOutputReference(this, "spans");
  public get spans() {
    return this._spans;
  }
  public putSpans(value: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersSpans) {
    this._spans.internalValue = value;
  }
  public resetSpans() {
    this._spans.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get spansInput() {
    return this._spans.internalValue;
  }
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersList extends cdktf.ComplexList {
  public internalValue? : DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFilters[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersOutputReference {
    return new DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeTimeFrameAbsolute {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#end Dashboard#end}
  */
  readonly end: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#start Dashboard#start}
  */
  readonly start: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeTimeFrameAbsoluteToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeTimeFrameAbsolute | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    end: cdktf.stringToTerraform(struct!.end),
    start: cdktf.stringToTerraform(struct!.start),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeTimeFrameAbsoluteToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeTimeFrameAbsolute | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    end: {
      value: cdktf.stringToHclTerraform(struct!.end),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    start: {
      value: cdktf.stringToHclTerraform(struct!.start),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeTimeFrameAbsoluteOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeTimeFrameAbsolute | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._end !== undefined) {
      hasAnyValues = true;
      internalValueResult.end = this._end;
    }
    if (this._start !== undefined) {
      hasAnyValues = true;
      internalValueResult.start = this._start;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeTimeFrameAbsolute | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._end = undefined;
      this._start = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._end = value.end;
      this._start = value.start;
    }
  }

  // end - computed: false, optional: false, required: true
  private _end?: string; 
  public get end() {
    return this.getStringAttribute('end');
  }
  public set end(value: string) {
    this._end = value;
  }
  // Temporarily expose input value. Use with caution.
  public get endInput() {
    return this._end;
  }

  // start - computed: false, optional: false, required: true
  private _start?: string; 
  public get start() {
    return this.getStringAttribute('start');
  }
  public set start(value: string) {
    this._start = value;
  }
  // Temporarily expose input value. Use with caution.
  public get startInput() {
    return this._start;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeTimeFrameRelative {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#duration Dashboard#duration}
  */
  readonly duration: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeTimeFrameRelativeToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeTimeFrameRelative | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    duration: cdktf.stringToTerraform(struct!.duration),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeTimeFrameRelativeToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeTimeFrameRelative | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    duration: {
      value: cdktf.stringToHclTerraform(struct!.duration),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeTimeFrameRelativeOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeTimeFrameRelative | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._duration !== undefined) {
      hasAnyValues = true;
      internalValueResult.duration = this._duration;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeTimeFrameRelative | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._duration = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._duration = value.duration;
    }
  }

  // duration - computed: false, optional: false, required: true
  private _duration?: string; 
  public get duration() {
    return this.getStringAttribute('duration');
  }
  public set duration(value: string) {
    this._duration = value;
  }
  // Temporarily expose input value. Use with caution.
  public get durationInput() {
    return this._duration;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeTimeFrame {
  /**
  * Absolute time frame specifying a fixed start and end time.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#absolute Dashboard#absolute}
  */
  readonly absolute?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeTimeFrameAbsolute;
  /**
  * Relative time frame specifying a duration from the current time.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#relative Dashboard#relative}
  */
  readonly relative?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeTimeFrameRelative;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeTimeFrameToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeTimeFrame | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    absolute: dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeTimeFrameAbsoluteToTerraform(struct!.absolute),
    relative: dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeTimeFrameRelativeToTerraform(struct!.relative),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeTimeFrameToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeTimeFrame | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    absolute: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeTimeFrameAbsoluteToHclTerraform(struct!.absolute),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeTimeFrameAbsolute",
    },
    relative: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeTimeFrameRelativeToHclTerraform(struct!.relative),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeTimeFrameRelative",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeTimeFrameOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeTimeFrame | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._absolute?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.absolute = this._absolute?.internalValue;
    }
    if (this._relative?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.relative = this._relative?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeTimeFrame | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._absolute.internalValue = undefined;
      this._relative.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._absolute.internalValue = value.absolute;
      this._relative.internalValue = value.relative;
    }
  }

  // absolute - computed: false, optional: true, required: false
  private _absolute = new DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeTimeFrameAbsoluteOutputReference(this, "absolute");
  public get absolute() {
    return this._absolute;
  }
  public putAbsolute(value: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeTimeFrameAbsolute) {
    this._absolute.internalValue = value;
  }
  public resetAbsolute() {
    this._absolute.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get absoluteInput() {
    return this._absolute.internalValue;
  }

  // relative - computed: false, optional: true, required: false
  private _relative = new DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeTimeFrameRelativeOutputReference(this, "relative");
  public get relative() {
    return this._relative;
  }
  public putRelative(value: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeTimeFrameRelative) {
    this._relative.internalValue = value;
  }
  public resetRelative() {
    this._relative.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get relativeInput() {
    return this._relative.internalValue;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrime {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#filters Dashboard#filters}
  */
  readonly filters?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFilters[] | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#query Dashboard#query}
  */
  readonly query?: string;
  /**
  * Specifies the time frame. Can be either absolute or relative.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#time_frame Dashboard#time_frame}
  */
  readonly timeFrame?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeTimeFrame;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrime | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    filters: cdktf.listMapper(dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersToTerraform, false)(struct!.filters),
    query: cdktf.stringToTerraform(struct!.query),
    time_frame: dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeTimeFrameToTerraform(struct!.timeFrame),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrime | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    filters: {
      value: cdktf.listMapperHcl(dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersToHclTerraform, false)(struct!.filters),
      isBlock: true,
      type: "list",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersList",
    },
    query: {
      value: cdktf.stringToHclTerraform(struct!.query),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    time_frame: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeTimeFrameToHclTerraform(struct!.timeFrame),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeTimeFrame",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrime | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._filters?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.filters = this._filters?.internalValue;
    }
    if (this._query !== undefined) {
      hasAnyValues = true;
      internalValueResult.query = this._query;
    }
    if (this._timeFrame?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.timeFrame = this._timeFrame?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrime | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._filters.internalValue = undefined;
      this._query = undefined;
      this._timeFrame.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._filters.internalValue = value.filters;
      this._query = value.query;
      this._timeFrame.internalValue = value.timeFrame;
    }
  }

  // filters - computed: false, optional: true, required: false
  private _filters = new DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFiltersList(this, "filters", false);
  public get filters() {
    return this._filters;
  }
  public putFilters(value: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeFilters[] | cdktf.IResolvable) {
    this._filters.internalValue = value;
  }
  public resetFilters() {
    this._filters.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get filtersInput() {
    return this._filters.internalValue;
  }

  // query - computed: false, optional: true, required: false
  private _query?: string; 
  public get query() {
    return this.getStringAttribute('query');
  }
  public set query(value: string) {
    this._query = value;
  }
  public resetQuery() {
    this._query = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get queryInput() {
    return this._query;
  }

  // time_frame - computed: false, optional: true, required: false
  private _timeFrame = new DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeTimeFrameOutputReference(this, "time_frame");
  public get timeFrame() {
    return this._timeFrame;
  }
  public putTimeFrame(value: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeTimeFrame) {
    this._timeFrame.internalValue = value;
  }
  public resetTimeFrame() {
    this._timeFrame.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get timeFrameInput() {
    return this._timeFrame.internalValue;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsAggregationsObservationField {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#keypath Dashboard#keypath}
  */
  readonly keypath: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#scope Dashboard#scope}
  */
  readonly scope: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsAggregationsObservationFieldToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsAggregationsObservationField | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    keypath: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.keypath),
    scope: cdktf.stringToTerraform(struct!.scope),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsAggregationsObservationFieldToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsAggregationsObservationField | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    keypath: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.keypath),
      isBlock: false,
      type: "list",
      storageClassType: "stringList",
    },
    scope: {
      value: cdktf.stringToHclTerraform(struct!.scope),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsAggregationsObservationFieldOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsAggregationsObservationField | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._keypath !== undefined) {
      hasAnyValues = true;
      internalValueResult.keypath = this._keypath;
    }
    if (this._scope !== undefined) {
      hasAnyValues = true;
      internalValueResult.scope = this._scope;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsAggregationsObservationField | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._keypath = undefined;
      this._scope = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._keypath = value.keypath;
      this._scope = value.scope;
    }
  }

  // keypath - computed: false, optional: false, required: true
  private _keypath?: string[]; 
  public get keypath() {
    return this.getListAttribute('keypath');
  }
  public set keypath(value: string[]) {
    this._keypath = value;
  }
  // Temporarily expose input value. Use with caution.
  public get keypathInput() {
    return this._keypath;
  }

  // scope - computed: false, optional: false, required: true
  private _scope?: string; 
  public get scope() {
    return this.getStringAttribute('scope');
  }
  public set scope(value: string) {
    this._scope = value;
  }
  // Temporarily expose input value. Use with caution.
  public get scopeInput() {
    return this._scope;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsAggregations {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#field Dashboard#field}
  */
  readonly field?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#observation_field Dashboard#observation_field}
  */
  readonly observationField?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsAggregationsObservationField;
  /**
  * The percentage of the aggregation to return. required when type is `percentile`.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#percent Dashboard#percent}
  */
  readonly percent?: number;
  /**
  * The type of the aggregation. Can be one of ["count" "count_distinct" "sum" "avg" "min" "max" "percentile"]
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#type Dashboard#type}
  */
  readonly type: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsAggregationsToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsAggregations | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    field: cdktf.stringToTerraform(struct!.field),
    observation_field: dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsAggregationsObservationFieldToTerraform(struct!.observationField),
    percent: cdktf.numberToTerraform(struct!.percent),
    type: cdktf.stringToTerraform(struct!.type),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsAggregationsToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsAggregations | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    field: {
      value: cdktf.stringToHclTerraform(struct!.field),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    observation_field: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsAggregationsObservationFieldToHclTerraform(struct!.observationField),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsAggregationsObservationField",
    },
    percent: {
      value: cdktf.numberToHclTerraform(struct!.percent),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    type: {
      value: cdktf.stringToHclTerraform(struct!.type),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsAggregationsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsAggregations | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._field !== undefined) {
      hasAnyValues = true;
      internalValueResult.field = this._field;
    }
    if (this._observationField?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.observationField = this._observationField?.internalValue;
    }
    if (this._percent !== undefined) {
      hasAnyValues = true;
      internalValueResult.percent = this._percent;
    }
    if (this._type !== undefined) {
      hasAnyValues = true;
      internalValueResult.type = this._type;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsAggregations | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._field = undefined;
      this._observationField.internalValue = undefined;
      this._percent = undefined;
      this._type = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._field = value.field;
      this._observationField.internalValue = value.observationField;
      this._percent = value.percent;
      this._type = value.type;
    }
  }

  // field - computed: false, optional: true, required: false
  private _field?: string; 
  public get field() {
    return this.getStringAttribute('field');
  }
  public set field(value: string) {
    this._field = value;
  }
  public resetField() {
    this._field = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get fieldInput() {
    return this._field;
  }

  // observation_field - computed: false, optional: true, required: false
  private _observationField = new DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsAggregationsObservationFieldOutputReference(this, "observation_field");
  public get observationField() {
    return this._observationField;
  }
  public putObservationField(value: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsAggregationsObservationField) {
    this._observationField.internalValue = value;
  }
  public resetObservationField() {
    this._observationField.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get observationFieldInput() {
    return this._observationField.internalValue;
  }

  // percent - computed: false, optional: true, required: false
  private _percent?: number; 
  public get percent() {
    return this.getNumberAttribute('percent');
  }
  public set percent(value: number) {
    this._percent = value;
  }
  public resetPercent() {
    this._percent = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get percentInput() {
    return this._percent;
  }

  // type - computed: false, optional: false, required: true
  private _type?: string; 
  public get type() {
    return this.getStringAttribute('type');
  }
  public set type(value: string) {
    this._type = value;
  }
  // Temporarily expose input value. Use with caution.
  public get typeInput() {
    return this._type;
  }
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsAggregationsList extends cdktf.ComplexList {
  public internalValue? : DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsAggregations[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsAggregationsOutputReference {
    return new DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsAggregationsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsFiltersObservationField {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#keypath Dashboard#keypath}
  */
  readonly keypath: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#scope Dashboard#scope}
  */
  readonly scope: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsFiltersObservationFieldToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsFiltersObservationField | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    keypath: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.keypath),
    scope: cdktf.stringToTerraform(struct!.scope),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsFiltersObservationFieldToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsFiltersObservationField | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    keypath: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.keypath),
      isBlock: false,
      type: "list",
      storageClassType: "stringList",
    },
    scope: {
      value: cdktf.stringToHclTerraform(struct!.scope),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsFiltersObservationFieldOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsFiltersObservationField | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._keypath !== undefined) {
      hasAnyValues = true;
      internalValueResult.keypath = this._keypath;
    }
    if (this._scope !== undefined) {
      hasAnyValues = true;
      internalValueResult.scope = this._scope;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsFiltersObservationField | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._keypath = undefined;
      this._scope = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._keypath = value.keypath;
      this._scope = value.scope;
    }
  }

  // keypath - computed: false, optional: false, required: true
  private _keypath?: string[]; 
  public get keypath() {
    return this.getListAttribute('keypath');
  }
  public set keypath(value: string[]) {
    this._keypath = value;
  }
  // Temporarily expose input value. Use with caution.
  public get keypathInput() {
    return this._keypath;
  }

  // scope - computed: false, optional: false, required: true
  private _scope?: string; 
  public get scope() {
    return this.getStringAttribute('scope');
  }
  public set scope(value: string) {
    this._scope = value;
  }
  // Temporarily expose input value. Use with caution.
  public get scopeInput() {
    return this._scope;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsFiltersOperator {
  /**
  * the values to filter by. When the type is `equals`, this field is optional, the filter will match only the selected values, and all the values if not set. When the type is `not_equals`, this field is required, and the filter will match spans without the selected values.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#selected_values Dashboard#selected_values}
  */
  readonly selectedValues?: string[];
  /**
  * The type of the operator. Can be one of `equals` or `not_equals`.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#type Dashboard#type}
  */
  readonly type: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsFiltersOperatorToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsFiltersOperator | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    selected_values: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.selectedValues),
    type: cdktf.stringToTerraform(struct!.type),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsFiltersOperatorToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsFiltersOperator | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    selected_values: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.selectedValues),
      isBlock: false,
      type: "list",
      storageClassType: "stringList",
    },
    type: {
      value: cdktf.stringToHclTerraform(struct!.type),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsFiltersOperatorOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsFiltersOperator | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._selectedValues !== undefined) {
      hasAnyValues = true;
      internalValueResult.selectedValues = this._selectedValues;
    }
    if (this._type !== undefined) {
      hasAnyValues = true;
      internalValueResult.type = this._type;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsFiltersOperator | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._selectedValues = undefined;
      this._type = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._selectedValues = value.selectedValues;
      this._type = value.type;
    }
  }

  // selected_values - computed: false, optional: true, required: false
  private _selectedValues?: string[]; 
  public get selectedValues() {
    return this.getListAttribute('selected_values');
  }
  public set selectedValues(value: string[]) {
    this._selectedValues = value;
  }
  public resetSelectedValues() {
    this._selectedValues = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get selectedValuesInput() {
    return this._selectedValues;
  }

  // type - computed: false, optional: false, required: true
  private _type?: string; 
  public get type() {
    return this.getStringAttribute('type');
  }
  public set type(value: string) {
    this._type = value;
  }
  // Temporarily expose input value. Use with caution.
  public get typeInput() {
    return this._type;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsFilters {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#field Dashboard#field}
  */
  readonly field: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#observation_field Dashboard#observation_field}
  */
  readonly observationField?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsFiltersObservationField;
  /**
  * Operator to use for filtering.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#operator Dashboard#operator}
  */
  readonly operator: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsFiltersOperator;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsFiltersToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsFilters | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    field: cdktf.stringToTerraform(struct!.field),
    observation_field: dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsFiltersObservationFieldToTerraform(struct!.observationField),
    operator: dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsFiltersOperatorToTerraform(struct!.operator),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsFiltersToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsFilters | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    field: {
      value: cdktf.stringToHclTerraform(struct!.field),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    observation_field: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsFiltersObservationFieldToHclTerraform(struct!.observationField),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsFiltersObservationField",
    },
    operator: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsFiltersOperatorToHclTerraform(struct!.operator),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsFiltersOperator",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsFiltersOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsFilters | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._field !== undefined) {
      hasAnyValues = true;
      internalValueResult.field = this._field;
    }
    if (this._observationField?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.observationField = this._observationField?.internalValue;
    }
    if (this._operator?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.operator = this._operator?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsFilters | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._field = undefined;
      this._observationField.internalValue = undefined;
      this._operator.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._field = value.field;
      this._observationField.internalValue = value.observationField;
      this._operator.internalValue = value.operator;
    }
  }

  // field - computed: false, optional: false, required: true
  private _field?: string; 
  public get field() {
    return this.getStringAttribute('field');
  }
  public set field(value: string) {
    this._field = value;
  }
  // Temporarily expose input value. Use with caution.
  public get fieldInput() {
    return this._field;
  }

  // observation_field - computed: false, optional: true, required: false
  private _observationField = new DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsFiltersObservationFieldOutputReference(this, "observation_field");
  public get observationField() {
    return this._observationField;
  }
  public putObservationField(value: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsFiltersObservationField) {
    this._observationField.internalValue = value;
  }
  public resetObservationField() {
    this._observationField.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get observationFieldInput() {
    return this._observationField.internalValue;
  }

  // operator - computed: false, optional: false, required: true
  private _operator = new DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsFiltersOperatorOutputReference(this, "operator");
  public get operator() {
    return this._operator;
  }
  public putOperator(value: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsFiltersOperator) {
    this._operator.internalValue = value;
  }
  // Temporarily expose input value. Use with caution.
  public get operatorInput() {
    return this._operator.internalValue;
  }
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsFiltersList extends cdktf.ComplexList {
  public internalValue? : DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsFilters[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsFiltersOutputReference {
    return new DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsFiltersOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsTimeFrameAbsolute {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#end Dashboard#end}
  */
  readonly end: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#start Dashboard#start}
  */
  readonly start: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsTimeFrameAbsoluteToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsTimeFrameAbsolute | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    end: cdktf.stringToTerraform(struct!.end),
    start: cdktf.stringToTerraform(struct!.start),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsTimeFrameAbsoluteToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsTimeFrameAbsolute | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    end: {
      value: cdktf.stringToHclTerraform(struct!.end),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    start: {
      value: cdktf.stringToHclTerraform(struct!.start),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsTimeFrameAbsoluteOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsTimeFrameAbsolute | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._end !== undefined) {
      hasAnyValues = true;
      internalValueResult.end = this._end;
    }
    if (this._start !== undefined) {
      hasAnyValues = true;
      internalValueResult.start = this._start;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsTimeFrameAbsolute | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._end = undefined;
      this._start = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._end = value.end;
      this._start = value.start;
    }
  }

  // end - computed: false, optional: false, required: true
  private _end?: string; 
  public get end() {
    return this.getStringAttribute('end');
  }
  public set end(value: string) {
    this._end = value;
  }
  // Temporarily expose input value. Use with caution.
  public get endInput() {
    return this._end;
  }

  // start - computed: false, optional: false, required: true
  private _start?: string; 
  public get start() {
    return this.getStringAttribute('start');
  }
  public set start(value: string) {
    this._start = value;
  }
  // Temporarily expose input value. Use with caution.
  public get startInput() {
    return this._start;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsTimeFrameRelative {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#duration Dashboard#duration}
  */
  readonly duration: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsTimeFrameRelativeToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsTimeFrameRelative | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    duration: cdktf.stringToTerraform(struct!.duration),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsTimeFrameRelativeToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsTimeFrameRelative | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    duration: {
      value: cdktf.stringToHclTerraform(struct!.duration),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsTimeFrameRelativeOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsTimeFrameRelative | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._duration !== undefined) {
      hasAnyValues = true;
      internalValueResult.duration = this._duration;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsTimeFrameRelative | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._duration = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._duration = value.duration;
    }
  }

  // duration - computed: false, optional: false, required: true
  private _duration?: string; 
  public get duration() {
    return this.getStringAttribute('duration');
  }
  public set duration(value: string) {
    this._duration = value;
  }
  // Temporarily expose input value. Use with caution.
  public get durationInput() {
    return this._duration;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsTimeFrame {
  /**
  * Absolute time frame specifying a fixed start and end time.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#absolute Dashboard#absolute}
  */
  readonly absolute?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsTimeFrameAbsolute;
  /**
  * Relative time frame specifying a duration from the current time.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#relative Dashboard#relative}
  */
  readonly relative?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsTimeFrameRelative;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsTimeFrameToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsTimeFrame | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    absolute: dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsTimeFrameAbsoluteToTerraform(struct!.absolute),
    relative: dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsTimeFrameRelativeToTerraform(struct!.relative),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsTimeFrameToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsTimeFrame | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    absolute: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsTimeFrameAbsoluteToHclTerraform(struct!.absolute),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsTimeFrameAbsolute",
    },
    relative: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsTimeFrameRelativeToHclTerraform(struct!.relative),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsTimeFrameRelative",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsTimeFrameOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsTimeFrame | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._absolute?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.absolute = this._absolute?.internalValue;
    }
    if (this._relative?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.relative = this._relative?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsTimeFrame | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._absolute.internalValue = undefined;
      this._relative.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._absolute.internalValue = value.absolute;
      this._relative.internalValue = value.relative;
    }
  }

  // absolute - computed: false, optional: true, required: false
  private _absolute = new DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsTimeFrameAbsoluteOutputReference(this, "absolute");
  public get absolute() {
    return this._absolute;
  }
  public putAbsolute(value: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsTimeFrameAbsolute) {
    this._absolute.internalValue = value;
  }
  public resetAbsolute() {
    this._absolute.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get absoluteInput() {
    return this._absolute.internalValue;
  }

  // relative - computed: false, optional: true, required: false
  private _relative = new DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsTimeFrameRelativeOutputReference(this, "relative");
  public get relative() {
    return this._relative;
  }
  public putRelative(value: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsTimeFrameRelative) {
    this._relative.internalValue = value;
  }
  public resetRelative() {
    this._relative.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get relativeInput() {
    return this._relative.internalValue;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogs {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#aggregations Dashboard#aggregations}
  */
  readonly aggregations: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsAggregations[] | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#filters Dashboard#filters}
  */
  readonly filters?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsFilters[] | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#group_by Dashboard#group_by}
  */
  readonly groupBy?: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#lucene_query Dashboard#lucene_query}
  */
  readonly luceneQuery?: string;
  /**
  * Specifies the time frame. Can be either absolute or relative.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#time_frame Dashboard#time_frame}
  */
  readonly timeFrame?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsTimeFrame;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogs | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    aggregations: cdktf.listMapper(dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsAggregationsToTerraform, false)(struct!.aggregations),
    filters: cdktf.listMapper(dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsFiltersToTerraform, false)(struct!.filters),
    group_by: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.groupBy),
    lucene_query: cdktf.stringToTerraform(struct!.luceneQuery),
    time_frame: dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsTimeFrameToTerraform(struct!.timeFrame),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogs | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    aggregations: {
      value: cdktf.listMapperHcl(dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsAggregationsToHclTerraform, false)(struct!.aggregations),
      isBlock: true,
      type: "list",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsAggregationsList",
    },
    filters: {
      value: cdktf.listMapperHcl(dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsFiltersToHclTerraform, false)(struct!.filters),
      isBlock: true,
      type: "list",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsFiltersList",
    },
    group_by: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.groupBy),
      isBlock: false,
      type: "list",
      storageClassType: "stringList",
    },
    lucene_query: {
      value: cdktf.stringToHclTerraform(struct!.luceneQuery),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    time_frame: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsTimeFrameToHclTerraform(struct!.timeFrame),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsTimeFrame",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogs | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._aggregations?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.aggregations = this._aggregations?.internalValue;
    }
    if (this._filters?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.filters = this._filters?.internalValue;
    }
    if (this._groupBy !== undefined) {
      hasAnyValues = true;
      internalValueResult.groupBy = this._groupBy;
    }
    if (this._luceneQuery !== undefined) {
      hasAnyValues = true;
      internalValueResult.luceneQuery = this._luceneQuery;
    }
    if (this._timeFrame?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.timeFrame = this._timeFrame?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogs | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._aggregations.internalValue = undefined;
      this._filters.internalValue = undefined;
      this._groupBy = undefined;
      this._luceneQuery = undefined;
      this._timeFrame.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._aggregations.internalValue = value.aggregations;
      this._filters.internalValue = value.filters;
      this._groupBy = value.groupBy;
      this._luceneQuery = value.luceneQuery;
      this._timeFrame.internalValue = value.timeFrame;
    }
  }

  // aggregations - computed: false, optional: false, required: true
  private _aggregations = new DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsAggregationsList(this, "aggregations", false);
  public get aggregations() {
    return this._aggregations;
  }
  public putAggregations(value: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsAggregations[] | cdktf.IResolvable) {
    this._aggregations.internalValue = value;
  }
  // Temporarily expose input value. Use with caution.
  public get aggregationsInput() {
    return this._aggregations.internalValue;
  }

  // filters - computed: false, optional: true, required: false
  private _filters = new DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsFiltersList(this, "filters", false);
  public get filters() {
    return this._filters;
  }
  public putFilters(value: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsFilters[] | cdktf.IResolvable) {
    this._filters.internalValue = value;
  }
  public resetFilters() {
    this._filters.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get filtersInput() {
    return this._filters.internalValue;
  }

  // group_by - computed: false, optional: true, required: false
  private _groupBy?: string[]; 
  public get groupBy() {
    return this.getListAttribute('group_by');
  }
  public set groupBy(value: string[]) {
    this._groupBy = value;
  }
  public resetGroupBy() {
    this._groupBy = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get groupByInput() {
    return this._groupBy;
  }

  // lucene_query - computed: false, optional: true, required: false
  private _luceneQuery?: string; 
  public get luceneQuery() {
    return this.getStringAttribute('lucene_query');
  }
  public set luceneQuery(value: string) {
    this._luceneQuery = value;
  }
  public resetLuceneQuery() {
    this._luceneQuery = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get luceneQueryInput() {
    return this._luceneQuery;
  }

  // time_frame - computed: false, optional: true, required: false
  private _timeFrame = new DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsTimeFrameOutputReference(this, "time_frame");
  public get timeFrame() {
    return this._timeFrame;
  }
  public putTimeFrame(value: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsTimeFrame) {
    this._timeFrame.internalValue = value;
  }
  public resetTimeFrame() {
    this._timeFrame.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get timeFrameInput() {
    return this._timeFrame.internalValue;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetricsFiltersOperator {
  /**
  * the values to filter by. When the type is `equals`, this field is optional, the filter will match only the selected values, and all the values if not set. When the type is `not_equals`, this field is required, and the filter will match spans without the selected values.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#selected_values Dashboard#selected_values}
  */
  readonly selectedValues?: string[];
  /**
  * The type of the operator. Can be one of `equals` or `not_equals`.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#type Dashboard#type}
  */
  readonly type: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetricsFiltersOperatorToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetricsFiltersOperator | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    selected_values: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.selectedValues),
    type: cdktf.stringToTerraform(struct!.type),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetricsFiltersOperatorToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetricsFiltersOperator | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    selected_values: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.selectedValues),
      isBlock: false,
      type: "list",
      storageClassType: "stringList",
    },
    type: {
      value: cdktf.stringToHclTerraform(struct!.type),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetricsFiltersOperatorOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetricsFiltersOperator | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._selectedValues !== undefined) {
      hasAnyValues = true;
      internalValueResult.selectedValues = this._selectedValues;
    }
    if (this._type !== undefined) {
      hasAnyValues = true;
      internalValueResult.type = this._type;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetricsFiltersOperator | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._selectedValues = undefined;
      this._type = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._selectedValues = value.selectedValues;
      this._type = value.type;
    }
  }

  // selected_values - computed: false, optional: true, required: false
  private _selectedValues?: string[]; 
  public get selectedValues() {
    return this.getListAttribute('selected_values');
  }
  public set selectedValues(value: string[]) {
    this._selectedValues = value;
  }
  public resetSelectedValues() {
    this._selectedValues = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get selectedValuesInput() {
    return this._selectedValues;
  }

  // type - computed: false, optional: false, required: true
  private _type?: string; 
  public get type() {
    return this.getStringAttribute('type');
  }
  public set type(value: string) {
    this._type = value;
  }
  // Temporarily expose input value. Use with caution.
  public get typeInput() {
    return this._type;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetricsFilters {
  /**
  * Label associated with the metric.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#label Dashboard#label}
  */
  readonly label?: string;
  /**
  * Metric name to apply the filter on.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#metric Dashboard#metric}
  */
  readonly metric: string;
  /**
  * Operator to use for filtering.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#operator Dashboard#operator}
  */
  readonly operator: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetricsFiltersOperator;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetricsFiltersToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetricsFilters | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    label: cdktf.stringToTerraform(struct!.label),
    metric: cdktf.stringToTerraform(struct!.metric),
    operator: dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetricsFiltersOperatorToTerraform(struct!.operator),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetricsFiltersToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetricsFilters | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    label: {
      value: cdktf.stringToHclTerraform(struct!.label),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    metric: {
      value: cdktf.stringToHclTerraform(struct!.metric),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    operator: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetricsFiltersOperatorToHclTerraform(struct!.operator),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetricsFiltersOperator",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetricsFiltersOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetricsFilters | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._label !== undefined) {
      hasAnyValues = true;
      internalValueResult.label = this._label;
    }
    if (this._metric !== undefined) {
      hasAnyValues = true;
      internalValueResult.metric = this._metric;
    }
    if (this._operator?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.operator = this._operator?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetricsFilters | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._label = undefined;
      this._metric = undefined;
      this._operator.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._label = value.label;
      this._metric = value.metric;
      this._operator.internalValue = value.operator;
    }
  }

  // label - computed: false, optional: true, required: false
  private _label?: string; 
  public get label() {
    return this.getStringAttribute('label');
  }
  public set label(value: string) {
    this._label = value;
  }
  public resetLabel() {
    this._label = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get labelInput() {
    return this._label;
  }

  // metric - computed: false, optional: false, required: true
  private _metric?: string; 
  public get metric() {
    return this.getStringAttribute('metric');
  }
  public set metric(value: string) {
    this._metric = value;
  }
  // Temporarily expose input value. Use with caution.
  public get metricInput() {
    return this._metric;
  }

  // operator - computed: false, optional: false, required: true
  private _operator = new DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetricsFiltersOperatorOutputReference(this, "operator");
  public get operator() {
    return this._operator;
  }
  public putOperator(value: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetricsFiltersOperator) {
    this._operator.internalValue = value;
  }
  // Temporarily expose input value. Use with caution.
  public get operatorInput() {
    return this._operator.internalValue;
  }
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetricsFiltersList extends cdktf.ComplexList {
  public internalValue? : DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetricsFilters[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetricsFiltersOutputReference {
    return new DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetricsFiltersOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetricsTimeFrameAbsolute {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#end Dashboard#end}
  */
  readonly end: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#start Dashboard#start}
  */
  readonly start: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetricsTimeFrameAbsoluteToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetricsTimeFrameAbsolute | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    end: cdktf.stringToTerraform(struct!.end),
    start: cdktf.stringToTerraform(struct!.start),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetricsTimeFrameAbsoluteToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetricsTimeFrameAbsolute | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    end: {
      value: cdktf.stringToHclTerraform(struct!.end),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    start: {
      value: cdktf.stringToHclTerraform(struct!.start),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetricsTimeFrameAbsoluteOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetricsTimeFrameAbsolute | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._end !== undefined) {
      hasAnyValues = true;
      internalValueResult.end = this._end;
    }
    if (this._start !== undefined) {
      hasAnyValues = true;
      internalValueResult.start = this._start;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetricsTimeFrameAbsolute | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._end = undefined;
      this._start = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._end = value.end;
      this._start = value.start;
    }
  }

  // end - computed: false, optional: false, required: true
  private _end?: string; 
  public get end() {
    return this.getStringAttribute('end');
  }
  public set end(value: string) {
    this._end = value;
  }
  // Temporarily expose input value. Use with caution.
  public get endInput() {
    return this._end;
  }

  // start - computed: false, optional: false, required: true
  private _start?: string; 
  public get start() {
    return this.getStringAttribute('start');
  }
  public set start(value: string) {
    this._start = value;
  }
  // Temporarily expose input value. Use with caution.
  public get startInput() {
    return this._start;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetricsTimeFrameRelative {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#duration Dashboard#duration}
  */
  readonly duration: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetricsTimeFrameRelativeToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetricsTimeFrameRelative | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    duration: cdktf.stringToTerraform(struct!.duration),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetricsTimeFrameRelativeToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetricsTimeFrameRelative | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    duration: {
      value: cdktf.stringToHclTerraform(struct!.duration),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetricsTimeFrameRelativeOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetricsTimeFrameRelative | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._duration !== undefined) {
      hasAnyValues = true;
      internalValueResult.duration = this._duration;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetricsTimeFrameRelative | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._duration = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._duration = value.duration;
    }
  }

  // duration - computed: false, optional: false, required: true
  private _duration?: string; 
  public get duration() {
    return this.getStringAttribute('duration');
  }
  public set duration(value: string) {
    this._duration = value;
  }
  // Temporarily expose input value. Use with caution.
  public get durationInput() {
    return this._duration;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetricsTimeFrame {
  /**
  * Absolute time frame specifying a fixed start and end time.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#absolute Dashboard#absolute}
  */
  readonly absolute?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetricsTimeFrameAbsolute;
  /**
  * Relative time frame specifying a duration from the current time.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#relative Dashboard#relative}
  */
  readonly relative?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetricsTimeFrameRelative;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetricsTimeFrameToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetricsTimeFrame | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    absolute: dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetricsTimeFrameAbsoluteToTerraform(struct!.absolute),
    relative: dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetricsTimeFrameRelativeToTerraform(struct!.relative),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetricsTimeFrameToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetricsTimeFrame | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    absolute: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetricsTimeFrameAbsoluteToHclTerraform(struct!.absolute),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetricsTimeFrameAbsolute",
    },
    relative: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetricsTimeFrameRelativeToHclTerraform(struct!.relative),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetricsTimeFrameRelative",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetricsTimeFrameOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetricsTimeFrame | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._absolute?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.absolute = this._absolute?.internalValue;
    }
    if (this._relative?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.relative = this._relative?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetricsTimeFrame | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._absolute.internalValue = undefined;
      this._relative.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._absolute.internalValue = value.absolute;
      this._relative.internalValue = value.relative;
    }
  }

  // absolute - computed: false, optional: true, required: false
  private _absolute = new DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetricsTimeFrameAbsoluteOutputReference(this, "absolute");
  public get absolute() {
    return this._absolute;
  }
  public putAbsolute(value: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetricsTimeFrameAbsolute) {
    this._absolute.internalValue = value;
  }
  public resetAbsolute() {
    this._absolute.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get absoluteInput() {
    return this._absolute.internalValue;
  }

  // relative - computed: false, optional: true, required: false
  private _relative = new DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetricsTimeFrameRelativeOutputReference(this, "relative");
  public get relative() {
    return this._relative;
  }
  public putRelative(value: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetricsTimeFrameRelative) {
    this._relative.internalValue = value;
  }
  public resetRelative() {
    this._relative.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get relativeInput() {
    return this._relative.internalValue;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetrics {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#filters Dashboard#filters}
  */
  readonly filters?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetricsFilters[] | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#promql_query Dashboard#promql_query}
  */
  readonly promqlQuery: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#promql_query_type Dashboard#promql_query_type}
  */
  readonly promqlQueryType?: string;
  /**
  * Specifies the time frame. Can be either absolute or relative.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#time_frame Dashboard#time_frame}
  */
  readonly timeFrame?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetricsTimeFrame;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetricsToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetrics | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    filters: cdktf.listMapper(dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetricsFiltersToTerraform, false)(struct!.filters),
    promql_query: cdktf.stringToTerraform(struct!.promqlQuery),
    promql_query_type: cdktf.stringToTerraform(struct!.promqlQueryType),
    time_frame: dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetricsTimeFrameToTerraform(struct!.timeFrame),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetricsToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetrics | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    filters: {
      value: cdktf.listMapperHcl(dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetricsFiltersToHclTerraform, false)(struct!.filters),
      isBlock: true,
      type: "list",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetricsFiltersList",
    },
    promql_query: {
      value: cdktf.stringToHclTerraform(struct!.promqlQuery),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    promql_query_type: {
      value: cdktf.stringToHclTerraform(struct!.promqlQueryType),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    time_frame: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetricsTimeFrameToHclTerraform(struct!.timeFrame),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetricsTimeFrame",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetricsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetrics | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._filters?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.filters = this._filters?.internalValue;
    }
    if (this._promqlQuery !== undefined) {
      hasAnyValues = true;
      internalValueResult.promqlQuery = this._promqlQuery;
    }
    if (this._promqlQueryType !== undefined) {
      hasAnyValues = true;
      internalValueResult.promqlQueryType = this._promqlQueryType;
    }
    if (this._timeFrame?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.timeFrame = this._timeFrame?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetrics | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._filters.internalValue = undefined;
      this._promqlQuery = undefined;
      this._promqlQueryType = undefined;
      this._timeFrame.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._filters.internalValue = value.filters;
      this._promqlQuery = value.promqlQuery;
      this._promqlQueryType = value.promqlQueryType;
      this._timeFrame.internalValue = value.timeFrame;
    }
  }

  // filters - computed: false, optional: true, required: false
  private _filters = new DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetricsFiltersList(this, "filters", false);
  public get filters() {
    return this._filters;
  }
  public putFilters(value: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetricsFilters[] | cdktf.IResolvable) {
    this._filters.internalValue = value;
  }
  public resetFilters() {
    this._filters.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get filtersInput() {
    return this._filters.internalValue;
  }

  // promql_query - computed: false, optional: false, required: true
  private _promqlQuery?: string; 
  public get promqlQuery() {
    return this.getStringAttribute('promql_query');
  }
  public set promqlQuery(value: string) {
    this._promqlQuery = value;
  }
  // Temporarily expose input value. Use with caution.
  public get promqlQueryInput() {
    return this._promqlQuery;
  }

  // promql_query_type - computed: true, optional: true, required: false
  private _promqlQueryType?: string; 
  public get promqlQueryType() {
    return this.getStringAttribute('promql_query_type');
  }
  public set promqlQueryType(value: string) {
    this._promqlQueryType = value;
  }
  public resetPromqlQueryType() {
    this._promqlQueryType = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get promqlQueryTypeInput() {
    return this._promqlQueryType;
  }

  // time_frame - computed: false, optional: true, required: false
  private _timeFrame = new DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetricsTimeFrameOutputReference(this, "time_frame");
  public get timeFrame() {
    return this._timeFrame;
  }
  public putTimeFrame(value: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetricsTimeFrame) {
    this._timeFrame.internalValue = value;
  }
  public resetTimeFrame() {
    this._timeFrame.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get timeFrameInput() {
    return this._timeFrame.internalValue;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansAggregations {
  /**
  * The type of the aggregation. When the aggregation type is `metrics`, can be one of ["avg" "max" "min" "percentile_50" "percentile_95" "percentile_99" "sum" "unspecified"]. When the aggregation type is `dimension`, can be one of ["error_count" "unique_count" "unspecified"].
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#aggregation_type Dashboard#aggregation_type}
  */
  readonly aggregationType: string;
  /**
  * The field to aggregate on. When the aggregation type is `metrics`, can be one of ["duration" "unspecified"]. When the aggregation type is `dimension`, can be one of ["trace_id" "unspecified"].
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#field Dashboard#field}
  */
  readonly field: string;
  /**
  * Can be one of ["metric" "dimension"]
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#type Dashboard#type}
  */
  readonly type: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansAggregationsToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansAggregations | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    aggregation_type: cdktf.stringToTerraform(struct!.aggregationType),
    field: cdktf.stringToTerraform(struct!.field),
    type: cdktf.stringToTerraform(struct!.type),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansAggregationsToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansAggregations | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    aggregation_type: {
      value: cdktf.stringToHclTerraform(struct!.aggregationType),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    field: {
      value: cdktf.stringToHclTerraform(struct!.field),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    type: {
      value: cdktf.stringToHclTerraform(struct!.type),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansAggregationsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansAggregations | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._aggregationType !== undefined) {
      hasAnyValues = true;
      internalValueResult.aggregationType = this._aggregationType;
    }
    if (this._field !== undefined) {
      hasAnyValues = true;
      internalValueResult.field = this._field;
    }
    if (this._type !== undefined) {
      hasAnyValues = true;
      internalValueResult.type = this._type;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansAggregations | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._aggregationType = undefined;
      this._field = undefined;
      this._type = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._aggregationType = value.aggregationType;
      this._field = value.field;
      this._type = value.type;
    }
  }

  // aggregation_type - computed: false, optional: false, required: true
  private _aggregationType?: string; 
  public get aggregationType() {
    return this.getStringAttribute('aggregation_type');
  }
  public set aggregationType(value: string) {
    this._aggregationType = value;
  }
  // Temporarily expose input value. Use with caution.
  public get aggregationTypeInput() {
    return this._aggregationType;
  }

  // field - computed: false, optional: false, required: true
  private _field?: string; 
  public get field() {
    return this.getStringAttribute('field');
  }
  public set field(value: string) {
    this._field = value;
  }
  // Temporarily expose input value. Use with caution.
  public get fieldInput() {
    return this._field;
  }

  // type - computed: false, optional: false, required: true
  private _type?: string; 
  public get type() {
    return this.getStringAttribute('type');
  }
  public set type(value: string) {
    this._type = value;
  }
  // Temporarily expose input value. Use with caution.
  public get typeInput() {
    return this._type;
  }
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansAggregationsList extends cdktf.ComplexList {
  public internalValue? : DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansAggregations[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansAggregationsOutputReference {
    return new DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansAggregationsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansFiltersField {
  /**
  * The type of the field. Can be one of ["metadata" "tag" "process_tag"]
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#type Dashboard#type}
  */
  readonly type: string;
  /**
  * The value of the field. When the field type is `metadata`, can be one of ["application_name" "operation_name" "service_name" "subsystem_name" "unspecified"]
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#value Dashboard#value}
  */
  readonly value: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansFiltersFieldToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansFiltersField | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    type: cdktf.stringToTerraform(struct!.type),
    value: cdktf.stringToTerraform(struct!.value),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansFiltersFieldToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansFiltersField | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    type: {
      value: cdktf.stringToHclTerraform(struct!.type),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    value: {
      value: cdktf.stringToHclTerraform(struct!.value),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansFiltersFieldOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansFiltersField | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._type !== undefined) {
      hasAnyValues = true;
      internalValueResult.type = this._type;
    }
    if (this._value !== undefined) {
      hasAnyValues = true;
      internalValueResult.value = this._value;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansFiltersField | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._type = undefined;
      this._value = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._type = value.type;
      this._value = value.value;
    }
  }

  // type - computed: false, optional: false, required: true
  private _type?: string; 
  public get type() {
    return this.getStringAttribute('type');
  }
  public set type(value: string) {
    this._type = value;
  }
  // Temporarily expose input value. Use with caution.
  public get typeInput() {
    return this._type;
  }

  // value - computed: false, optional: false, required: true
  private _value?: string; 
  public get value() {
    return this.getStringAttribute('value');
  }
  public set value(value: string) {
    this._value = value;
  }
  // Temporarily expose input value. Use with caution.
  public get valueInput() {
    return this._value;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansFiltersOperator {
  /**
  * the values to filter by. When the type is `equals`, this field is optional, the filter will match only the selected values, and all the values if not set. When the type is `not_equals`, this field is required, and the filter will match spans without the selected values.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#selected_values Dashboard#selected_values}
  */
  readonly selectedValues?: string[];
  /**
  * The type of the operator. Can be one of `equals` or `not_equals`.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#type Dashboard#type}
  */
  readonly type: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansFiltersOperatorToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansFiltersOperator | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    selected_values: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.selectedValues),
    type: cdktf.stringToTerraform(struct!.type),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansFiltersOperatorToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansFiltersOperator | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    selected_values: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.selectedValues),
      isBlock: false,
      type: "list",
      storageClassType: "stringList",
    },
    type: {
      value: cdktf.stringToHclTerraform(struct!.type),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansFiltersOperatorOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansFiltersOperator | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._selectedValues !== undefined) {
      hasAnyValues = true;
      internalValueResult.selectedValues = this._selectedValues;
    }
    if (this._type !== undefined) {
      hasAnyValues = true;
      internalValueResult.type = this._type;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansFiltersOperator | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._selectedValues = undefined;
      this._type = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._selectedValues = value.selectedValues;
      this._type = value.type;
    }
  }

  // selected_values - computed: false, optional: true, required: false
  private _selectedValues?: string[]; 
  public get selectedValues() {
    return this.getListAttribute('selected_values');
  }
  public set selectedValues(value: string[]) {
    this._selectedValues = value;
  }
  public resetSelectedValues() {
    this._selectedValues = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get selectedValuesInput() {
    return this._selectedValues;
  }

  // type - computed: false, optional: false, required: true
  private _type?: string; 
  public get type() {
    return this.getStringAttribute('type');
  }
  public set type(value: string) {
    this._type = value;
  }
  // Temporarily expose input value. Use with caution.
  public get typeInput() {
    return this._type;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansFilters {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#field Dashboard#field}
  */
  readonly field: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansFiltersField;
  /**
  * Operator to use for filtering.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#operator Dashboard#operator}
  */
  readonly operator: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansFiltersOperator;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansFiltersToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansFilters | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    field: dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansFiltersFieldToTerraform(struct!.field),
    operator: dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansFiltersOperatorToTerraform(struct!.operator),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansFiltersToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansFilters | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    field: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansFiltersFieldToHclTerraform(struct!.field),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansFiltersField",
    },
    operator: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansFiltersOperatorToHclTerraform(struct!.operator),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansFiltersOperator",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansFiltersOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansFilters | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._field?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.field = this._field?.internalValue;
    }
    if (this._operator?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.operator = this._operator?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansFilters | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._field.internalValue = undefined;
      this._operator.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._field.internalValue = value.field;
      this._operator.internalValue = value.operator;
    }
  }

  // field - computed: false, optional: false, required: true
  private _field = new DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansFiltersFieldOutputReference(this, "field");
  public get field() {
    return this._field;
  }
  public putField(value: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansFiltersField) {
    this._field.internalValue = value;
  }
  // Temporarily expose input value. Use with caution.
  public get fieldInput() {
    return this._field.internalValue;
  }

  // operator - computed: false, optional: false, required: true
  private _operator = new DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansFiltersOperatorOutputReference(this, "operator");
  public get operator() {
    return this._operator;
  }
  public putOperator(value: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansFiltersOperator) {
    this._operator.internalValue = value;
  }
  // Temporarily expose input value. Use with caution.
  public get operatorInput() {
    return this._operator.internalValue;
  }
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansFiltersList extends cdktf.ComplexList {
  public internalValue? : DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansFilters[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansFiltersOutputReference {
    return new DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansFiltersOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansGroupBy {
  /**
  * The type of the field. Can be one of ["metadata" "tag" "process_tag"]
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#type Dashboard#type}
  */
  readonly type: string;
  /**
  * The value of the field. When the field type is `metadata`, can be one of ["application_name" "operation_name" "service_name" "subsystem_name" "unspecified"]
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#value Dashboard#value}
  */
  readonly value: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansGroupByToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansGroupBy | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    type: cdktf.stringToTerraform(struct!.type),
    value: cdktf.stringToTerraform(struct!.value),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansGroupByToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansGroupBy | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    type: {
      value: cdktf.stringToHclTerraform(struct!.type),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    value: {
      value: cdktf.stringToHclTerraform(struct!.value),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansGroupByOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansGroupBy | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._type !== undefined) {
      hasAnyValues = true;
      internalValueResult.type = this._type;
    }
    if (this._value !== undefined) {
      hasAnyValues = true;
      internalValueResult.value = this._value;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansGroupBy | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._type = undefined;
      this._value = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._type = value.type;
      this._value = value.value;
    }
  }

  // type - computed: false, optional: false, required: true
  private _type?: string; 
  public get type() {
    return this.getStringAttribute('type');
  }
  public set type(value: string) {
    this._type = value;
  }
  // Temporarily expose input value. Use with caution.
  public get typeInput() {
    return this._type;
  }

  // value - computed: false, optional: false, required: true
  private _value?: string; 
  public get value() {
    return this.getStringAttribute('value');
  }
  public set value(value: string) {
    this._value = value;
  }
  // Temporarily expose input value. Use with caution.
  public get valueInput() {
    return this._value;
  }
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansGroupByList extends cdktf.ComplexList {
  public internalValue? : DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansGroupBy[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansGroupByOutputReference {
    return new DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansGroupByOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansTimeFrameAbsolute {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#end Dashboard#end}
  */
  readonly end: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#start Dashboard#start}
  */
  readonly start: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansTimeFrameAbsoluteToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansTimeFrameAbsolute | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    end: cdktf.stringToTerraform(struct!.end),
    start: cdktf.stringToTerraform(struct!.start),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansTimeFrameAbsoluteToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansTimeFrameAbsolute | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    end: {
      value: cdktf.stringToHclTerraform(struct!.end),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    start: {
      value: cdktf.stringToHclTerraform(struct!.start),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansTimeFrameAbsoluteOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansTimeFrameAbsolute | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._end !== undefined) {
      hasAnyValues = true;
      internalValueResult.end = this._end;
    }
    if (this._start !== undefined) {
      hasAnyValues = true;
      internalValueResult.start = this._start;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansTimeFrameAbsolute | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._end = undefined;
      this._start = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._end = value.end;
      this._start = value.start;
    }
  }

  // end - computed: false, optional: false, required: true
  private _end?: string; 
  public get end() {
    return this.getStringAttribute('end');
  }
  public set end(value: string) {
    this._end = value;
  }
  // Temporarily expose input value. Use with caution.
  public get endInput() {
    return this._end;
  }

  // start - computed: false, optional: false, required: true
  private _start?: string; 
  public get start() {
    return this.getStringAttribute('start');
  }
  public set start(value: string) {
    this._start = value;
  }
  // Temporarily expose input value. Use with caution.
  public get startInput() {
    return this._start;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansTimeFrameRelative {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#duration Dashboard#duration}
  */
  readonly duration: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansTimeFrameRelativeToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansTimeFrameRelative | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    duration: cdktf.stringToTerraform(struct!.duration),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansTimeFrameRelativeToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansTimeFrameRelative | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    duration: {
      value: cdktf.stringToHclTerraform(struct!.duration),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansTimeFrameRelativeOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansTimeFrameRelative | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._duration !== undefined) {
      hasAnyValues = true;
      internalValueResult.duration = this._duration;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansTimeFrameRelative | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._duration = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._duration = value.duration;
    }
  }

  // duration - computed: false, optional: false, required: true
  private _duration?: string; 
  public get duration() {
    return this.getStringAttribute('duration');
  }
  public set duration(value: string) {
    this._duration = value;
  }
  // Temporarily expose input value. Use with caution.
  public get durationInput() {
    return this._duration;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansTimeFrame {
  /**
  * Absolute time frame specifying a fixed start and end time.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#absolute Dashboard#absolute}
  */
  readonly absolute?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansTimeFrameAbsolute;
  /**
  * Relative time frame specifying a duration from the current time.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#relative Dashboard#relative}
  */
  readonly relative?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansTimeFrameRelative;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansTimeFrameToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansTimeFrame | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    absolute: dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansTimeFrameAbsoluteToTerraform(struct!.absolute),
    relative: dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansTimeFrameRelativeToTerraform(struct!.relative),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansTimeFrameToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansTimeFrame | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    absolute: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansTimeFrameAbsoluteToHclTerraform(struct!.absolute),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansTimeFrameAbsolute",
    },
    relative: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansTimeFrameRelativeToHclTerraform(struct!.relative),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansTimeFrameRelative",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansTimeFrameOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansTimeFrame | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._absolute?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.absolute = this._absolute?.internalValue;
    }
    if (this._relative?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.relative = this._relative?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansTimeFrame | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._absolute.internalValue = undefined;
      this._relative.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._absolute.internalValue = value.absolute;
      this._relative.internalValue = value.relative;
    }
  }

  // absolute - computed: false, optional: true, required: false
  private _absolute = new DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansTimeFrameAbsoluteOutputReference(this, "absolute");
  public get absolute() {
    return this._absolute;
  }
  public putAbsolute(value: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansTimeFrameAbsolute) {
    this._absolute.internalValue = value;
  }
  public resetAbsolute() {
    this._absolute.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get absoluteInput() {
    return this._absolute.internalValue;
  }

  // relative - computed: false, optional: true, required: false
  private _relative = new DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansTimeFrameRelativeOutputReference(this, "relative");
  public get relative() {
    return this._relative;
  }
  public putRelative(value: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansTimeFrameRelative) {
    this._relative.internalValue = value;
  }
  public resetRelative() {
    this._relative.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get relativeInput() {
    return this._relative.internalValue;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpans {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#aggregations Dashboard#aggregations}
  */
  readonly aggregations?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansAggregations[] | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#filters Dashboard#filters}
  */
  readonly filters?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansFilters[] | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#group_by Dashboard#group_by}
  */
  readonly groupBy?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansGroupBy[] | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#lucene_query Dashboard#lucene_query}
  */
  readonly luceneQuery?: string;
  /**
  * Specifies the time frame. Can be either absolute or relative.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#time_frame Dashboard#time_frame}
  */
  readonly timeFrame?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansTimeFrame;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpans | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    aggregations: cdktf.listMapper(dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansAggregationsToTerraform, false)(struct!.aggregations),
    filters: cdktf.listMapper(dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansFiltersToTerraform, false)(struct!.filters),
    group_by: cdktf.listMapper(dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansGroupByToTerraform, false)(struct!.groupBy),
    lucene_query: cdktf.stringToTerraform(struct!.luceneQuery),
    time_frame: dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansTimeFrameToTerraform(struct!.timeFrame),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpans | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    aggregations: {
      value: cdktf.listMapperHcl(dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansAggregationsToHclTerraform, false)(struct!.aggregations),
      isBlock: true,
      type: "list",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansAggregationsList",
    },
    filters: {
      value: cdktf.listMapperHcl(dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansFiltersToHclTerraform, false)(struct!.filters),
      isBlock: true,
      type: "list",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansFiltersList",
    },
    group_by: {
      value: cdktf.listMapperHcl(dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansGroupByToHclTerraform, false)(struct!.groupBy),
      isBlock: true,
      type: "list",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansGroupByList",
    },
    lucene_query: {
      value: cdktf.stringToHclTerraform(struct!.luceneQuery),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    time_frame: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansTimeFrameToHclTerraform(struct!.timeFrame),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansTimeFrame",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpans | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._aggregations?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.aggregations = this._aggregations?.internalValue;
    }
    if (this._filters?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.filters = this._filters?.internalValue;
    }
    if (this._groupBy?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.groupBy = this._groupBy?.internalValue;
    }
    if (this._luceneQuery !== undefined) {
      hasAnyValues = true;
      internalValueResult.luceneQuery = this._luceneQuery;
    }
    if (this._timeFrame?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.timeFrame = this._timeFrame?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpans | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._aggregations.internalValue = undefined;
      this._filters.internalValue = undefined;
      this._groupBy.internalValue = undefined;
      this._luceneQuery = undefined;
      this._timeFrame.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._aggregations.internalValue = value.aggregations;
      this._filters.internalValue = value.filters;
      this._groupBy.internalValue = value.groupBy;
      this._luceneQuery = value.luceneQuery;
      this._timeFrame.internalValue = value.timeFrame;
    }
  }

  // aggregations - computed: false, optional: true, required: false
  private _aggregations = new DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansAggregationsList(this, "aggregations", false);
  public get aggregations() {
    return this._aggregations;
  }
  public putAggregations(value: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansAggregations[] | cdktf.IResolvable) {
    this._aggregations.internalValue = value;
  }
  public resetAggregations() {
    this._aggregations.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get aggregationsInput() {
    return this._aggregations.internalValue;
  }

  // filters - computed: false, optional: true, required: false
  private _filters = new DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansFiltersList(this, "filters", false);
  public get filters() {
    return this._filters;
  }
  public putFilters(value: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansFilters[] | cdktf.IResolvable) {
    this._filters.internalValue = value;
  }
  public resetFilters() {
    this._filters.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get filtersInput() {
    return this._filters.internalValue;
  }

  // group_by - computed: false, optional: true, required: false
  private _groupBy = new DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansGroupByList(this, "group_by", false);
  public get groupBy() {
    return this._groupBy;
  }
  public putGroupBy(value: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansGroupBy[] | cdktf.IResolvable) {
    this._groupBy.internalValue = value;
  }
  public resetGroupBy() {
    this._groupBy.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get groupByInput() {
    return this._groupBy.internalValue;
  }

  // lucene_query - computed: false, optional: true, required: false
  private _luceneQuery?: string; 
  public get luceneQuery() {
    return this.getStringAttribute('lucene_query');
  }
  public set luceneQuery(value: string) {
    this._luceneQuery = value;
  }
  public resetLuceneQuery() {
    this._luceneQuery = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get luceneQueryInput() {
    return this._luceneQuery;
  }

  // time_frame - computed: false, optional: true, required: false
  private _timeFrame = new DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansTimeFrameOutputReference(this, "time_frame");
  public get timeFrame() {
    return this._timeFrame;
  }
  public putTimeFrame(value: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansTimeFrame) {
    this._timeFrame.internalValue = value;
  }
  public resetTimeFrame() {
    this._timeFrame.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get timeFrameInput() {
    return this._timeFrame.internalValue;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuery {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#data_prime Dashboard#data_prime}
  */
  readonly dataPrime?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrime;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#logs Dashboard#logs}
  */
  readonly logs?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogs;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#metrics Dashboard#metrics}
  */
  readonly metrics?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetrics;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#spans Dashboard#spans}
  */
  readonly spans?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpans;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuery | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    data_prime: dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeToTerraform(struct!.dataPrime),
    logs: dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsToTerraform(struct!.logs),
    metrics: dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetricsToTerraform(struct!.metrics),
    spans: dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansToTerraform(struct!.spans),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuery | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    data_prime: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeToHclTerraform(struct!.dataPrime),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrime",
    },
    logs: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsToHclTerraform(struct!.logs),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogs",
    },
    metrics: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetricsToHclTerraform(struct!.metrics),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetrics",
    },
    spans: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansToHclTerraform(struct!.spans),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpans",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuery | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._dataPrime?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.dataPrime = this._dataPrime?.internalValue;
    }
    if (this._logs?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.logs = this._logs?.internalValue;
    }
    if (this._metrics?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.metrics = this._metrics?.internalValue;
    }
    if (this._spans?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.spans = this._spans?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuery | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._dataPrime.internalValue = undefined;
      this._logs.internalValue = undefined;
      this._metrics.internalValue = undefined;
      this._spans.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._dataPrime.internalValue = value.dataPrime;
      this._logs.internalValue = value.logs;
      this._metrics.internalValue = value.metrics;
      this._spans.internalValue = value.spans;
    }
  }

  // data_prime - computed: false, optional: true, required: false
  private _dataPrime = new DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrimeOutputReference(this, "data_prime");
  public get dataPrime() {
    return this._dataPrime;
  }
  public putDataPrime(value: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryDataPrime) {
    this._dataPrime.internalValue = value;
  }
  public resetDataPrime() {
    this._dataPrime.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get dataPrimeInput() {
    return this._dataPrime.internalValue;
  }

  // logs - computed: false, optional: true, required: false
  private _logs = new DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogsOutputReference(this, "logs");
  public get logs() {
    return this._logs;
  }
  public putLogs(value: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryLogs) {
    this._logs.internalValue = value;
  }
  public resetLogs() {
    this._logs.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get logsInput() {
    return this._logs.internalValue;
  }

  // metrics - computed: false, optional: true, required: false
  private _metrics = new DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetricsOutputReference(this, "metrics");
  public get metrics() {
    return this._metrics;
  }
  public putMetrics(value: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryMetrics) {
    this._metrics.internalValue = value;
  }
  public resetMetrics() {
    this._metrics.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get metricsInput() {
    return this._metrics.internalValue;
  }

  // spans - computed: false, optional: true, required: false
  private _spans = new DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpansOutputReference(this, "spans");
  public get spans() {
    return this._spans;
  }
  public putSpans(value: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuerySpans) {
    this._spans.internalValue = value;
  }
  public resetSpans() {
    this._spans.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get spansInput() {
    return this._spans.internalValue;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsResolution {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#buckets_presented Dashboard#buckets_presented}
  */
  readonly bucketsPresented?: number;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#interval Dashboard#interval}
  */
  readonly interval?: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsResolutionToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsResolution | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    buckets_presented: cdktf.numberToTerraform(struct!.bucketsPresented),
    interval: cdktf.stringToTerraform(struct!.interval),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsResolutionToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsResolution | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    buckets_presented: {
      value: cdktf.numberToHclTerraform(struct!.bucketsPresented),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    interval: {
      value: cdktf.stringToHclTerraform(struct!.interval),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsResolutionOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsResolution | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._bucketsPresented !== undefined) {
      hasAnyValues = true;
      internalValueResult.bucketsPresented = this._bucketsPresented;
    }
    if (this._interval !== undefined) {
      hasAnyValues = true;
      internalValueResult.interval = this._interval;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsResolution | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._bucketsPresented = undefined;
      this._interval = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._bucketsPresented = value.bucketsPresented;
      this._interval = value.interval;
    }
  }

  // buckets_presented - computed: false, optional: true, required: false
  private _bucketsPresented?: number; 
  public get bucketsPresented() {
    return this.getNumberAttribute('buckets_presented');
  }
  public set bucketsPresented(value: number) {
    this._bucketsPresented = value;
  }
  public resetBucketsPresented() {
    this._bucketsPresented = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get bucketsPresentedInput() {
    return this._bucketsPresented;
  }

  // interval - computed: false, optional: true, required: false
  private _interval?: string; 
  public get interval() {
    return this.getStringAttribute('interval');
  }
  public set interval(value: string) {
    this._interval = value;
  }
  public resetInterval() {
    this._interval = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get intervalInput() {
    return this._interval;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitions {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#color_scheme Dashboard#color_scheme}
  */
  readonly colorScheme?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#data_mode_type Dashboard#data_mode_type}
  */
  readonly dataModeType?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#is_visible Dashboard#is_visible}
  */
  readonly isVisible?: boolean | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#name Dashboard#name}
  */
  readonly name?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#query Dashboard#query}
  */
  readonly query: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuery;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#resolution Dashboard#resolution}
  */
  readonly resolution?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsResolution;
  /**
  * The scale type. Valid values are: linear, logarithmic, unspecified.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#scale_type Dashboard#scale_type}
  */
  readonly scaleType?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#series_count_limit Dashboard#series_count_limit}
  */
  readonly seriesCountLimit?: number;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#series_name_template Dashboard#series_name_template}
  */
  readonly seriesNameTemplate?: string;
  /**
  * The unit. Valid values are: bytes, bytes_iec, custom, euro, euro_cents, gbytes, gibytes, kbytes, kibytes, mbytes, mibytes, microseconds, milliseconds, nanoseconds, percent01, percent100, seconds, unspecified, usd, usd_cents.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#unit Dashboard#unit}
  */
  readonly unit?: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitions | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    color_scheme: cdktf.stringToTerraform(struct!.colorScheme),
    data_mode_type: cdktf.stringToTerraform(struct!.dataModeType),
    is_visible: cdktf.booleanToTerraform(struct!.isVisible),
    name: cdktf.stringToTerraform(struct!.name),
    query: dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryToTerraform(struct!.query),
    resolution: dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsResolutionToTerraform(struct!.resolution),
    scale_type: cdktf.stringToTerraform(struct!.scaleType),
    series_count_limit: cdktf.numberToTerraform(struct!.seriesCountLimit),
    series_name_template: cdktf.stringToTerraform(struct!.seriesNameTemplate),
    unit: cdktf.stringToTerraform(struct!.unit),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitions | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    color_scheme: {
      value: cdktf.stringToHclTerraform(struct!.colorScheme),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    data_mode_type: {
      value: cdktf.stringToHclTerraform(struct!.dataModeType),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    is_visible: {
      value: cdktf.booleanToHclTerraform(struct!.isVisible),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    name: {
      value: cdktf.stringToHclTerraform(struct!.name),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    query: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryToHclTerraform(struct!.query),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuery",
    },
    resolution: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsResolutionToHclTerraform(struct!.resolution),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsResolution",
    },
    scale_type: {
      value: cdktf.stringToHclTerraform(struct!.scaleType),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    series_count_limit: {
      value: cdktf.numberToHclTerraform(struct!.seriesCountLimit),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    series_name_template: {
      value: cdktf.stringToHclTerraform(struct!.seriesNameTemplate),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    unit: {
      value: cdktf.stringToHclTerraform(struct!.unit),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitions | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._colorScheme !== undefined) {
      hasAnyValues = true;
      internalValueResult.colorScheme = this._colorScheme;
    }
    if (this._dataModeType !== undefined) {
      hasAnyValues = true;
      internalValueResult.dataModeType = this._dataModeType;
    }
    if (this._isVisible !== undefined) {
      hasAnyValues = true;
      internalValueResult.isVisible = this._isVisible;
    }
    if (this._name !== undefined) {
      hasAnyValues = true;
      internalValueResult.name = this._name;
    }
    if (this._query?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.query = this._query?.internalValue;
    }
    if (this._resolution?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.resolution = this._resolution?.internalValue;
    }
    if (this._scaleType !== undefined) {
      hasAnyValues = true;
      internalValueResult.scaleType = this._scaleType;
    }
    if (this._seriesCountLimit !== undefined) {
      hasAnyValues = true;
      internalValueResult.seriesCountLimit = this._seriesCountLimit;
    }
    if (this._seriesNameTemplate !== undefined) {
      hasAnyValues = true;
      internalValueResult.seriesNameTemplate = this._seriesNameTemplate;
    }
    if (this._unit !== undefined) {
      hasAnyValues = true;
      internalValueResult.unit = this._unit;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitions | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._colorScheme = undefined;
      this._dataModeType = undefined;
      this._isVisible = undefined;
      this._name = undefined;
      this._query.internalValue = undefined;
      this._resolution.internalValue = undefined;
      this._scaleType = undefined;
      this._seriesCountLimit = undefined;
      this._seriesNameTemplate = undefined;
      this._unit = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._colorScheme = value.colorScheme;
      this._dataModeType = value.dataModeType;
      this._isVisible = value.isVisible;
      this._name = value.name;
      this._query.internalValue = value.query;
      this._resolution.internalValue = value.resolution;
      this._scaleType = value.scaleType;
      this._seriesCountLimit = value.seriesCountLimit;
      this._seriesNameTemplate = value.seriesNameTemplate;
      this._unit = value.unit;
    }
  }

  // color_scheme - computed: false, optional: true, required: false
  private _colorScheme?: string; 
  public get colorScheme() {
    return this.getStringAttribute('color_scheme');
  }
  public set colorScheme(value: string) {
    this._colorScheme = value;
  }
  public resetColorScheme() {
    this._colorScheme = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get colorSchemeInput() {
    return this._colorScheme;
  }

  // data_mode_type - computed: true, optional: true, required: false
  private _dataModeType?: string; 
  public get dataModeType() {
    return this.getStringAttribute('data_mode_type');
  }
  public set dataModeType(value: string) {
    this._dataModeType = value;
  }
  public resetDataModeType() {
    this._dataModeType = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get dataModeTypeInput() {
    return this._dataModeType;
  }

  // id - computed: true, optional: false, required: false
  public get id() {
    return this.getStringAttribute('id');
  }

  // is_visible - computed: true, optional: true, required: false
  private _isVisible?: boolean | cdktf.IResolvable; 
  public get isVisible() {
    return this.getBooleanAttribute('is_visible');
  }
  public set isVisible(value: boolean | cdktf.IResolvable) {
    this._isVisible = value;
  }
  public resetIsVisible() {
    this._isVisible = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get isVisibleInput() {
    return this._isVisible;
  }

  // name - computed: false, optional: true, required: false
  private _name?: string; 
  public get name() {
    return this.getStringAttribute('name');
  }
  public set name(value: string) {
    this._name = value;
  }
  public resetName() {
    this._name = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get nameInput() {
    return this._name;
  }

  // query - computed: false, optional: false, required: true
  private _query = new DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQueryOutputReference(this, "query");
  public get query() {
    return this._query;
  }
  public putQuery(value: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsQuery) {
    this._query.internalValue = value;
  }
  // Temporarily expose input value. Use with caution.
  public get queryInput() {
    return this._query.internalValue;
  }

  // resolution - computed: false, optional: true, required: false
  private _resolution = new DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsResolutionOutputReference(this, "resolution");
  public get resolution() {
    return this._resolution;
  }
  public putResolution(value: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsResolution) {
    this._resolution.internalValue = value;
  }
  public resetResolution() {
    this._resolution.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get resolutionInput() {
    return this._resolution.internalValue;
  }

  // scale_type - computed: true, optional: true, required: false
  private _scaleType?: string; 
  public get scaleType() {
    return this.getStringAttribute('scale_type');
  }
  public set scaleType(value: string) {
    this._scaleType = value;
  }
  public resetScaleType() {
    this._scaleType = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get scaleTypeInput() {
    return this._scaleType;
  }

  // series_count_limit - computed: false, optional: true, required: false
  private _seriesCountLimit?: number; 
  public get seriesCountLimit() {
    return this.getNumberAttribute('series_count_limit');
  }
  public set seriesCountLimit(value: number) {
    this._seriesCountLimit = value;
  }
  public resetSeriesCountLimit() {
    this._seriesCountLimit = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get seriesCountLimitInput() {
    return this._seriesCountLimit;
  }

  // series_name_template - computed: false, optional: true, required: false
  private _seriesNameTemplate?: string; 
  public get seriesNameTemplate() {
    return this.getStringAttribute('series_name_template');
  }
  public set seriesNameTemplate(value: string) {
    this._seriesNameTemplate = value;
  }
  public resetSeriesNameTemplate() {
    this._seriesNameTemplate = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get seriesNameTemplateInput() {
    return this._seriesNameTemplate;
  }

  // unit - computed: true, optional: true, required: false
  private _unit?: string; 
  public get unit() {
    return this.getStringAttribute('unit');
  }
  public set unit(value: string) {
    this._unit = value;
  }
  public resetUnit() {
    this._unit = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get unitInput() {
    return this._unit;
  }
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsList extends cdktf.ComplexList {
  public internalValue? : DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitions[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsOutputReference {
    return new DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionLineChartTooltip {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#show_labels Dashboard#show_labels}
  */
  readonly showLabels?: boolean | cdktf.IResolvable;
  /**
  * The tooltip type. Valid values are: all, single, unspecified.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#type Dashboard#type}
  */
  readonly type?: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionLineChartTooltipToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartTooltip | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    show_labels: cdktf.booleanToTerraform(struct!.showLabels),
    type: cdktf.stringToTerraform(struct!.type),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionLineChartTooltipToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartTooltip | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    show_labels: {
      value: cdktf.booleanToHclTerraform(struct!.showLabels),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    type: {
      value: cdktf.stringToHclTerraform(struct!.type),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionLineChartTooltipOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionLineChartTooltip | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._showLabels !== undefined) {
      hasAnyValues = true;
      internalValueResult.showLabels = this._showLabels;
    }
    if (this._type !== undefined) {
      hasAnyValues = true;
      internalValueResult.type = this._type;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartTooltip | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._showLabels = undefined;
      this._type = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._showLabels = value.showLabels;
      this._type = value.type;
    }
  }

  // show_labels - computed: true, optional: true, required: false
  private _showLabels?: boolean | cdktf.IResolvable; 
  public get showLabels() {
    return this.getBooleanAttribute('show_labels');
  }
  public set showLabels(value: boolean | cdktf.IResolvable) {
    this._showLabels = value;
  }
  public resetShowLabels() {
    this._showLabels = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get showLabelsInput() {
    return this._showLabels;
  }

  // type - computed: false, optional: true, required: false
  private _type?: string; 
  public get type() {
    return this.getStringAttribute('type');
  }
  public set type(value: string) {
    this._type = value;
  }
  public resetType() {
    this._type = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get typeInput() {
    return this._type;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionLineChart {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#legend Dashboard#legend}
  */
  readonly legend?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartLegend;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#query_definitions Dashboard#query_definitions}
  */
  readonly queryDefinitions: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitions[] | cdktf.IResolvable;
  /**
  * Option to show lines as stacked. Possible values: absolute, relative
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#stacked_line Dashboard#stacked_line}
  */
  readonly stackedLine?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#tooltip Dashboard#tooltip}
  */
  readonly tooltip?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartTooltip;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionLineChartToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChart | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    legend: dashboardLayoutSectionsRowsWidgetsDefinitionLineChartLegendToTerraform(struct!.legend),
    query_definitions: cdktf.listMapper(dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsToTerraform, false)(struct!.queryDefinitions),
    stacked_line: cdktf.stringToTerraform(struct!.stackedLine),
    tooltip: dashboardLayoutSectionsRowsWidgetsDefinitionLineChartTooltipToTerraform(struct!.tooltip),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionLineChartToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChart | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    legend: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionLineChartLegendToHclTerraform(struct!.legend),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionLineChartLegend",
    },
    query_definitions: {
      value: cdktf.listMapperHcl(dashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsToHclTerraform, false)(struct!.queryDefinitions),
      isBlock: true,
      type: "list",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsList",
    },
    stacked_line: {
      value: cdktf.stringToHclTerraform(struct!.stackedLine),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    tooltip: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionLineChartTooltipToHclTerraform(struct!.tooltip),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionLineChartTooltip",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionLineChartOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionLineChart | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._legend?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.legend = this._legend?.internalValue;
    }
    if (this._queryDefinitions?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.queryDefinitions = this._queryDefinitions?.internalValue;
    }
    if (this._stackedLine !== undefined) {
      hasAnyValues = true;
      internalValueResult.stackedLine = this._stackedLine;
    }
    if (this._tooltip?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.tooltip = this._tooltip?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionLineChart | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._legend.internalValue = undefined;
      this._queryDefinitions.internalValue = undefined;
      this._stackedLine = undefined;
      this._tooltip.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._legend.internalValue = value.legend;
      this._queryDefinitions.internalValue = value.queryDefinitions;
      this._stackedLine = value.stackedLine;
      this._tooltip.internalValue = value.tooltip;
    }
  }

  // legend - computed: false, optional: true, required: false
  private _legend = new DashboardLayoutSectionsRowsWidgetsDefinitionLineChartLegendOutputReference(this, "legend");
  public get legend() {
    return this._legend;
  }
  public putLegend(value: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartLegend) {
    this._legend.internalValue = value;
  }
  public resetLegend() {
    this._legend.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get legendInput() {
    return this._legend.internalValue;
  }

  // query_definitions - computed: false, optional: false, required: true
  private _queryDefinitions = new DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitionsList(this, "query_definitions", false);
  public get queryDefinitions() {
    return this._queryDefinitions;
  }
  public putQueryDefinitions(value: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartQueryDefinitions[] | cdktf.IResolvable) {
    this._queryDefinitions.internalValue = value;
  }
  // Temporarily expose input value. Use with caution.
  public get queryDefinitionsInput() {
    return this._queryDefinitions.internalValue;
  }

  // stacked_line - computed: true, optional: true, required: false
  private _stackedLine?: string; 
  public get stackedLine() {
    return this.getStringAttribute('stacked_line');
  }
  public set stackedLine(value: string) {
    this._stackedLine = value;
  }
  public resetStackedLine() {
    this._stackedLine = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get stackedLineInput() {
    return this._stackedLine;
  }

  // tooltip - computed: false, optional: true, required: false
  private _tooltip = new DashboardLayoutSectionsRowsWidgetsDefinitionLineChartTooltipOutputReference(this, "tooltip");
  public get tooltip() {
    return this._tooltip;
  }
  public putTooltip(value: DashboardLayoutSectionsRowsWidgetsDefinitionLineChartTooltip) {
    this._tooltip.internalValue = value;
  }
  public resetTooltip() {
    this._tooltip.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get tooltipInput() {
    return this._tooltip.internalValue;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionMarkdown {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#markdown_text Dashboard#markdown_text}
  */
  readonly markdownText?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#tooltip_text Dashboard#tooltip_text}
  */
  readonly tooltipText?: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionMarkdownToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionMarkdown | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    markdown_text: cdktf.stringToTerraform(struct!.markdownText),
    tooltip_text: cdktf.stringToTerraform(struct!.tooltipText),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionMarkdownToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionMarkdown | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    markdown_text: {
      value: cdktf.stringToHclTerraform(struct!.markdownText),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    tooltip_text: {
      value: cdktf.stringToHclTerraform(struct!.tooltipText),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionMarkdownOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionMarkdown | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._markdownText !== undefined) {
      hasAnyValues = true;
      internalValueResult.markdownText = this._markdownText;
    }
    if (this._tooltipText !== undefined) {
      hasAnyValues = true;
      internalValueResult.tooltipText = this._tooltipText;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionMarkdown | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._markdownText = undefined;
      this._tooltipText = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._markdownText = value.markdownText;
      this._tooltipText = value.tooltipText;
    }
  }

  // markdown_text - computed: false, optional: true, required: false
  private _markdownText?: string; 
  public get markdownText() {
    return this.getStringAttribute('markdown_text');
  }
  public set markdownText(value: string) {
    this._markdownText = value;
  }
  public resetMarkdownText() {
    this._markdownText = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get markdownTextInput() {
    return this._markdownText;
  }

  // tooltip_text - computed: false, optional: true, required: false
  private _tooltipText?: string; 
  public get tooltipText() {
    return this.getStringAttribute('tooltip_text');
  }
  public set tooltipText(value: string) {
    this._tooltipText = value;
  }
  public resetTooltipText() {
    this._tooltipText = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get tooltipTextInput() {
    return this._tooltipText;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionPieChartLabelDefinition {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#is_visible Dashboard#is_visible}
  */
  readonly isVisible?: boolean | cdktf.IResolvable;
  /**
  * The source of the label. Valid values are: inner, stack, unspecified
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#label_source Dashboard#label_source}
  */
  readonly labelSource?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#show_name Dashboard#show_name}
  */
  readonly showName?: boolean | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#show_percentage Dashboard#show_percentage}
  */
  readonly showPercentage?: boolean | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#show_value Dashboard#show_value}
  */
  readonly showValue?: boolean | cdktf.IResolvable;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartLabelDefinitionToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartLabelDefinition | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    is_visible: cdktf.booleanToTerraform(struct!.isVisible),
    label_source: cdktf.stringToTerraform(struct!.labelSource),
    show_name: cdktf.booleanToTerraform(struct!.showName),
    show_percentage: cdktf.booleanToTerraform(struct!.showPercentage),
    show_value: cdktf.booleanToTerraform(struct!.showValue),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartLabelDefinitionToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartLabelDefinition | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    is_visible: {
      value: cdktf.booleanToHclTerraform(struct!.isVisible),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    label_source: {
      value: cdktf.stringToHclTerraform(struct!.labelSource),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    show_name: {
      value: cdktf.booleanToHclTerraform(struct!.showName),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    show_percentage: {
      value: cdktf.booleanToHclTerraform(struct!.showPercentage),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    show_value: {
      value: cdktf.booleanToHclTerraform(struct!.showValue),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionPieChartLabelDefinitionOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionPieChartLabelDefinition | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._isVisible !== undefined) {
      hasAnyValues = true;
      internalValueResult.isVisible = this._isVisible;
    }
    if (this._labelSource !== undefined) {
      hasAnyValues = true;
      internalValueResult.labelSource = this._labelSource;
    }
    if (this._showName !== undefined) {
      hasAnyValues = true;
      internalValueResult.showName = this._showName;
    }
    if (this._showPercentage !== undefined) {
      hasAnyValues = true;
      internalValueResult.showPercentage = this._showPercentage;
    }
    if (this._showValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.showValue = this._showValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartLabelDefinition | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._isVisible = undefined;
      this._labelSource = undefined;
      this._showName = undefined;
      this._showPercentage = undefined;
      this._showValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._isVisible = value.isVisible;
      this._labelSource = value.labelSource;
      this._showName = value.showName;
      this._showPercentage = value.showPercentage;
      this._showValue = value.showValue;
    }
  }

  // is_visible - computed: true, optional: true, required: false
  private _isVisible?: boolean | cdktf.IResolvable; 
  public get isVisible() {
    return this.getBooleanAttribute('is_visible');
  }
  public set isVisible(value: boolean | cdktf.IResolvable) {
    this._isVisible = value;
  }
  public resetIsVisible() {
    this._isVisible = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get isVisibleInput() {
    return this._isVisible;
  }

  // label_source - computed: true, optional: true, required: false
  private _labelSource?: string; 
  public get labelSource() {
    return this.getStringAttribute('label_source');
  }
  public set labelSource(value: string) {
    this._labelSource = value;
  }
  public resetLabelSource() {
    this._labelSource = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get labelSourceInput() {
    return this._labelSource;
  }

  // show_name - computed: true, optional: true, required: false
  private _showName?: boolean | cdktf.IResolvable; 
  public get showName() {
    return this.getBooleanAttribute('show_name');
  }
  public set showName(value: boolean | cdktf.IResolvable) {
    this._showName = value;
  }
  public resetShowName() {
    this._showName = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get showNameInput() {
    return this._showName;
  }

  // show_percentage - computed: true, optional: true, required: false
  private _showPercentage?: boolean | cdktf.IResolvable; 
  public get showPercentage() {
    return this.getBooleanAttribute('show_percentage');
  }
  public set showPercentage(value: boolean | cdktf.IResolvable) {
    this._showPercentage = value;
  }
  public resetShowPercentage() {
    this._showPercentage = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get showPercentageInput() {
    return this._showPercentage;
  }

  // show_value - computed: true, optional: true, required: false
  private _showValue?: boolean | cdktf.IResolvable; 
  public get showValue() {
    return this.getBooleanAttribute('show_value');
  }
  public set showValue(value: boolean | cdktf.IResolvable) {
    this._showValue = value;
  }
  public resetShowValue() {
    this._showValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get showValueInput() {
    return this._showValue;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersLogsObservationField {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#keypath Dashboard#keypath}
  */
  readonly keypath: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#scope Dashboard#scope}
  */
  readonly scope: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersLogsObservationFieldToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersLogsObservationField | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    keypath: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.keypath),
    scope: cdktf.stringToTerraform(struct!.scope),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersLogsObservationFieldToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersLogsObservationField | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    keypath: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.keypath),
      isBlock: false,
      type: "list",
      storageClassType: "stringList",
    },
    scope: {
      value: cdktf.stringToHclTerraform(struct!.scope),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersLogsObservationFieldOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersLogsObservationField | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._keypath !== undefined) {
      hasAnyValues = true;
      internalValueResult.keypath = this._keypath;
    }
    if (this._scope !== undefined) {
      hasAnyValues = true;
      internalValueResult.scope = this._scope;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersLogsObservationField | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._keypath = undefined;
      this._scope = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._keypath = value.keypath;
      this._scope = value.scope;
    }
  }

  // keypath - computed: false, optional: false, required: true
  private _keypath?: string[]; 
  public get keypath() {
    return this.getListAttribute('keypath');
  }
  public set keypath(value: string[]) {
    this._keypath = value;
  }
  // Temporarily expose input value. Use with caution.
  public get keypathInput() {
    return this._keypath;
  }

  // scope - computed: false, optional: false, required: true
  private _scope?: string; 
  public get scope() {
    return this.getStringAttribute('scope');
  }
  public set scope(value: string) {
    this._scope = value;
  }
  // Temporarily expose input value. Use with caution.
  public get scopeInput() {
    return this._scope;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersLogsOperator {
  /**
  * the values to filter by. When the type is `equals`, this field is optional, the filter will match only the selected values, and all the values if not set. When the type is `not_equals`, this field is required, and the filter will match spans without the selected values.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#selected_values Dashboard#selected_values}
  */
  readonly selectedValues?: string[];
  /**
  * The type of the operator. Can be one of `equals` or `not_equals`.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#type Dashboard#type}
  */
  readonly type: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersLogsOperatorToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersLogsOperator | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    selected_values: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.selectedValues),
    type: cdktf.stringToTerraform(struct!.type),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersLogsOperatorToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersLogsOperator | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    selected_values: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.selectedValues),
      isBlock: false,
      type: "list",
      storageClassType: "stringList",
    },
    type: {
      value: cdktf.stringToHclTerraform(struct!.type),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersLogsOperatorOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersLogsOperator | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._selectedValues !== undefined) {
      hasAnyValues = true;
      internalValueResult.selectedValues = this._selectedValues;
    }
    if (this._type !== undefined) {
      hasAnyValues = true;
      internalValueResult.type = this._type;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersLogsOperator | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._selectedValues = undefined;
      this._type = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._selectedValues = value.selectedValues;
      this._type = value.type;
    }
  }

  // selected_values - computed: false, optional: true, required: false
  private _selectedValues?: string[]; 
  public get selectedValues() {
    return this.getListAttribute('selected_values');
  }
  public set selectedValues(value: string[]) {
    this._selectedValues = value;
  }
  public resetSelectedValues() {
    this._selectedValues = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get selectedValuesInput() {
    return this._selectedValues;
  }

  // type - computed: false, optional: false, required: true
  private _type?: string; 
  public get type() {
    return this.getStringAttribute('type');
  }
  public set type(value: string) {
    this._type = value;
  }
  // Temporarily expose input value. Use with caution.
  public get typeInput() {
    return this._type;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersLogs {
  /**
  * Field in the logs to apply the filter on.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#field Dashboard#field}
  */
  readonly field: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#observation_field Dashboard#observation_field}
  */
  readonly observationField?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersLogsObservationField;
  /**
  * Operator to use for filtering.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#operator Dashboard#operator}
  */
  readonly operator: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersLogsOperator;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersLogsToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersLogs | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    field: cdktf.stringToTerraform(struct!.field),
    observation_field: dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersLogsObservationFieldToTerraform(struct!.observationField),
    operator: dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersLogsOperatorToTerraform(struct!.operator),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersLogsToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersLogs | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    field: {
      value: cdktf.stringToHclTerraform(struct!.field),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    observation_field: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersLogsObservationFieldToHclTerraform(struct!.observationField),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersLogsObservationField",
    },
    operator: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersLogsOperatorToHclTerraform(struct!.operator),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersLogsOperator",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersLogsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersLogs | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._field !== undefined) {
      hasAnyValues = true;
      internalValueResult.field = this._field;
    }
    if (this._observationField?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.observationField = this._observationField?.internalValue;
    }
    if (this._operator?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.operator = this._operator?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersLogs | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._field = undefined;
      this._observationField.internalValue = undefined;
      this._operator.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._field = value.field;
      this._observationField.internalValue = value.observationField;
      this._operator.internalValue = value.operator;
    }
  }

  // field - computed: false, optional: false, required: true
  private _field?: string; 
  public get field() {
    return this.getStringAttribute('field');
  }
  public set field(value: string) {
    this._field = value;
  }
  // Temporarily expose input value. Use with caution.
  public get fieldInput() {
    return this._field;
  }

  // observation_field - computed: false, optional: true, required: false
  private _observationField = new DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersLogsObservationFieldOutputReference(this, "observation_field");
  public get observationField() {
    return this._observationField;
  }
  public putObservationField(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersLogsObservationField) {
    this._observationField.internalValue = value;
  }
  public resetObservationField() {
    this._observationField.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get observationFieldInput() {
    return this._observationField.internalValue;
  }

  // operator - computed: false, optional: false, required: true
  private _operator = new DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersLogsOperatorOutputReference(this, "operator");
  public get operator() {
    return this._operator;
  }
  public putOperator(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersLogsOperator) {
    this._operator.internalValue = value;
  }
  // Temporarily expose input value. Use with caution.
  public get operatorInput() {
    return this._operator.internalValue;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersMetricsOperator {
  /**
  * the values to filter by. When the type is `equals`, this field is optional, the filter will match only the selected values, and all the values if not set. When the type is `not_equals`, this field is required, and the filter will match spans without the selected values.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#selected_values Dashboard#selected_values}
  */
  readonly selectedValues?: string[];
  /**
  * The type of the operator. Can be one of `equals` or `not_equals`.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#type Dashboard#type}
  */
  readonly type: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersMetricsOperatorToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersMetricsOperator | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    selected_values: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.selectedValues),
    type: cdktf.stringToTerraform(struct!.type),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersMetricsOperatorToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersMetricsOperator | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    selected_values: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.selectedValues),
      isBlock: false,
      type: "list",
      storageClassType: "stringList",
    },
    type: {
      value: cdktf.stringToHclTerraform(struct!.type),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersMetricsOperatorOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersMetricsOperator | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._selectedValues !== undefined) {
      hasAnyValues = true;
      internalValueResult.selectedValues = this._selectedValues;
    }
    if (this._type !== undefined) {
      hasAnyValues = true;
      internalValueResult.type = this._type;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersMetricsOperator | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._selectedValues = undefined;
      this._type = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._selectedValues = value.selectedValues;
      this._type = value.type;
    }
  }

  // selected_values - computed: false, optional: true, required: false
  private _selectedValues?: string[]; 
  public get selectedValues() {
    return this.getListAttribute('selected_values');
  }
  public set selectedValues(value: string[]) {
    this._selectedValues = value;
  }
  public resetSelectedValues() {
    this._selectedValues = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get selectedValuesInput() {
    return this._selectedValues;
  }

  // type - computed: false, optional: false, required: true
  private _type?: string; 
  public get type() {
    return this.getStringAttribute('type');
  }
  public set type(value: string) {
    this._type = value;
  }
  // Temporarily expose input value. Use with caution.
  public get typeInput() {
    return this._type;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersMetrics {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#label Dashboard#label}
  */
  readonly label?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#metric_name Dashboard#metric_name}
  */
  readonly metricName?: string;
  /**
  * Operator to use for filtering.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#operator Dashboard#operator}
  */
  readonly operator: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersMetricsOperator;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersMetricsToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersMetrics | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    label: cdktf.stringToTerraform(struct!.label),
    metric_name: cdktf.stringToTerraform(struct!.metricName),
    operator: dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersMetricsOperatorToTerraform(struct!.operator),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersMetricsToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersMetrics | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    label: {
      value: cdktf.stringToHclTerraform(struct!.label),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    metric_name: {
      value: cdktf.stringToHclTerraform(struct!.metricName),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    operator: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersMetricsOperatorToHclTerraform(struct!.operator),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersMetricsOperator",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersMetricsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersMetrics | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._label !== undefined) {
      hasAnyValues = true;
      internalValueResult.label = this._label;
    }
    if (this._metricName !== undefined) {
      hasAnyValues = true;
      internalValueResult.metricName = this._metricName;
    }
    if (this._operator?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.operator = this._operator?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersMetrics | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._label = undefined;
      this._metricName = undefined;
      this._operator.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._label = value.label;
      this._metricName = value.metricName;
      this._operator.internalValue = value.operator;
    }
  }

  // label - computed: false, optional: true, required: false
  private _label?: string; 
  public get label() {
    return this.getStringAttribute('label');
  }
  public set label(value: string) {
    this._label = value;
  }
  public resetLabel() {
    this._label = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get labelInput() {
    return this._label;
  }

  // metric_name - computed: false, optional: true, required: false
  private _metricName?: string; 
  public get metricName() {
    return this.getStringAttribute('metric_name');
  }
  public set metricName(value: string) {
    this._metricName = value;
  }
  public resetMetricName() {
    this._metricName = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get metricNameInput() {
    return this._metricName;
  }

  // operator - computed: false, optional: false, required: true
  private _operator = new DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersMetricsOperatorOutputReference(this, "operator");
  public get operator() {
    return this._operator;
  }
  public putOperator(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersMetricsOperator) {
    this._operator.internalValue = value;
  }
  // Temporarily expose input value. Use with caution.
  public get operatorInput() {
    return this._operator.internalValue;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersSpansField {
  /**
  * The type of the field. Can be one of ["metadata" "tag" "process_tag"]
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#type Dashboard#type}
  */
  readonly type: string;
  /**
  * The value of the field. When the field type is `metadata`, can be one of ["application_name" "operation_name" "service_name" "subsystem_name" "unspecified"]
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#value Dashboard#value}
  */
  readonly value: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersSpansFieldToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersSpansField | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    type: cdktf.stringToTerraform(struct!.type),
    value: cdktf.stringToTerraform(struct!.value),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersSpansFieldToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersSpansField | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    type: {
      value: cdktf.stringToHclTerraform(struct!.type),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    value: {
      value: cdktf.stringToHclTerraform(struct!.value),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersSpansFieldOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersSpansField | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._type !== undefined) {
      hasAnyValues = true;
      internalValueResult.type = this._type;
    }
    if (this._value !== undefined) {
      hasAnyValues = true;
      internalValueResult.value = this._value;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersSpansField | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._type = undefined;
      this._value = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._type = value.type;
      this._value = value.value;
    }
  }

  // type - computed: false, optional: false, required: true
  private _type?: string; 
  public get type() {
    return this.getStringAttribute('type');
  }
  public set type(value: string) {
    this._type = value;
  }
  // Temporarily expose input value. Use with caution.
  public get typeInput() {
    return this._type;
  }

  // value - computed: false, optional: false, required: true
  private _value?: string; 
  public get value() {
    return this.getStringAttribute('value');
  }
  public set value(value: string) {
    this._value = value;
  }
  // Temporarily expose input value. Use with caution.
  public get valueInput() {
    return this._value;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersSpansOperator {
  /**
  * the values to filter by. When the type is `equals`, this field is optional, the filter will match only the selected values, and all the values if not set. When the type is `not_equals`, this field is required, and the filter will match spans without the selected values.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#selected_values Dashboard#selected_values}
  */
  readonly selectedValues?: string[];
  /**
  * The type of the operator. Can be one of `equals` or `not_equals`.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#type Dashboard#type}
  */
  readonly type: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersSpansOperatorToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersSpansOperator | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    selected_values: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.selectedValues),
    type: cdktf.stringToTerraform(struct!.type),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersSpansOperatorToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersSpansOperator | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    selected_values: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.selectedValues),
      isBlock: false,
      type: "list",
      storageClassType: "stringList",
    },
    type: {
      value: cdktf.stringToHclTerraform(struct!.type),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersSpansOperatorOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersSpansOperator | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._selectedValues !== undefined) {
      hasAnyValues = true;
      internalValueResult.selectedValues = this._selectedValues;
    }
    if (this._type !== undefined) {
      hasAnyValues = true;
      internalValueResult.type = this._type;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersSpansOperator | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._selectedValues = undefined;
      this._type = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._selectedValues = value.selectedValues;
      this._type = value.type;
    }
  }

  // selected_values - computed: false, optional: true, required: false
  private _selectedValues?: string[]; 
  public get selectedValues() {
    return this.getListAttribute('selected_values');
  }
  public set selectedValues(value: string[]) {
    this._selectedValues = value;
  }
  public resetSelectedValues() {
    this._selectedValues = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get selectedValuesInput() {
    return this._selectedValues;
  }

  // type - computed: false, optional: false, required: true
  private _type?: string; 
  public get type() {
    return this.getStringAttribute('type');
  }
  public set type(value: string) {
    this._type = value;
  }
  // Temporarily expose input value. Use with caution.
  public get typeInput() {
    return this._type;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersSpans {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#field Dashboard#field}
  */
  readonly field: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersSpansField;
  /**
  * Operator to use for filtering.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#operator Dashboard#operator}
  */
  readonly operator: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersSpansOperator;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersSpansToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersSpans | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    field: dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersSpansFieldToTerraform(struct!.field),
    operator: dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersSpansOperatorToTerraform(struct!.operator),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersSpansToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersSpans | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    field: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersSpansFieldToHclTerraform(struct!.field),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersSpansField",
    },
    operator: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersSpansOperatorToHclTerraform(struct!.operator),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersSpansOperator",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersSpansOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersSpans | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._field?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.field = this._field?.internalValue;
    }
    if (this._operator?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.operator = this._operator?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersSpans | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._field.internalValue = undefined;
      this._operator.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._field.internalValue = value.field;
      this._operator.internalValue = value.operator;
    }
  }

  // field - computed: false, optional: false, required: true
  private _field = new DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersSpansFieldOutputReference(this, "field");
  public get field() {
    return this._field;
  }
  public putField(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersSpansField) {
    this._field.internalValue = value;
  }
  // Temporarily expose input value. Use with caution.
  public get fieldInput() {
    return this._field.internalValue;
  }

  // operator - computed: false, optional: false, required: true
  private _operator = new DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersSpansOperatorOutputReference(this, "operator");
  public get operator() {
    return this._operator;
  }
  public putOperator(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersSpansOperator) {
    this._operator.internalValue = value;
  }
  // Temporarily expose input value. Use with caution.
  public get operatorInput() {
    return this._operator.internalValue;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFilters {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#logs Dashboard#logs}
  */
  readonly logs?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersLogs;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#metrics Dashboard#metrics}
  */
  readonly metrics?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersMetrics;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#spans Dashboard#spans}
  */
  readonly spans?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersSpans;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFilters | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    logs: dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersLogsToTerraform(struct!.logs),
    metrics: dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersMetricsToTerraform(struct!.metrics),
    spans: dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersSpansToTerraform(struct!.spans),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFilters | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    logs: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersLogsToHclTerraform(struct!.logs),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersLogs",
    },
    metrics: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersMetricsToHclTerraform(struct!.metrics),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersMetrics",
    },
    spans: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersSpansToHclTerraform(struct!.spans),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersSpans",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFilters | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._logs?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.logs = this._logs?.internalValue;
    }
    if (this._metrics?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.metrics = this._metrics?.internalValue;
    }
    if (this._spans?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.spans = this._spans?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFilters | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._logs.internalValue = undefined;
      this._metrics.internalValue = undefined;
      this._spans.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._logs.internalValue = value.logs;
      this._metrics.internalValue = value.metrics;
      this._spans.internalValue = value.spans;
    }
  }

  // logs - computed: false, optional: true, required: false
  private _logs = new DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersLogsOutputReference(this, "logs");
  public get logs() {
    return this._logs;
  }
  public putLogs(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersLogs) {
    this._logs.internalValue = value;
  }
  public resetLogs() {
    this._logs.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get logsInput() {
    return this._logs.internalValue;
  }

  // metrics - computed: false, optional: true, required: false
  private _metrics = new DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersMetricsOutputReference(this, "metrics");
  public get metrics() {
    return this._metrics;
  }
  public putMetrics(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersMetrics) {
    this._metrics.internalValue = value;
  }
  public resetMetrics() {
    this._metrics.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get metricsInput() {
    return this._metrics.internalValue;
  }

  // spans - computed: false, optional: true, required: false
  private _spans = new DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersSpansOutputReference(this, "spans");
  public get spans() {
    return this._spans;
  }
  public putSpans(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersSpans) {
    this._spans.internalValue = value;
  }
  public resetSpans() {
    this._spans.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get spansInput() {
    return this._spans.internalValue;
  }
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersList extends cdktf.ComplexList {
  public internalValue? : DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFilters[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersOutputReference {
    return new DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeTimeFrameAbsolute {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#end Dashboard#end}
  */
  readonly end: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#start Dashboard#start}
  */
  readonly start: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeTimeFrameAbsoluteToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeTimeFrameAbsolute | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    end: cdktf.stringToTerraform(struct!.end),
    start: cdktf.stringToTerraform(struct!.start),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeTimeFrameAbsoluteToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeTimeFrameAbsolute | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    end: {
      value: cdktf.stringToHclTerraform(struct!.end),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    start: {
      value: cdktf.stringToHclTerraform(struct!.start),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeTimeFrameAbsoluteOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeTimeFrameAbsolute | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._end !== undefined) {
      hasAnyValues = true;
      internalValueResult.end = this._end;
    }
    if (this._start !== undefined) {
      hasAnyValues = true;
      internalValueResult.start = this._start;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeTimeFrameAbsolute | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._end = undefined;
      this._start = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._end = value.end;
      this._start = value.start;
    }
  }

  // end - computed: false, optional: false, required: true
  private _end?: string; 
  public get end() {
    return this.getStringAttribute('end');
  }
  public set end(value: string) {
    this._end = value;
  }
  // Temporarily expose input value. Use with caution.
  public get endInput() {
    return this._end;
  }

  // start - computed: false, optional: false, required: true
  private _start?: string; 
  public get start() {
    return this.getStringAttribute('start');
  }
  public set start(value: string) {
    this._start = value;
  }
  // Temporarily expose input value. Use with caution.
  public get startInput() {
    return this._start;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeTimeFrameRelative {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#duration Dashboard#duration}
  */
  readonly duration: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeTimeFrameRelativeToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeTimeFrameRelative | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    duration: cdktf.stringToTerraform(struct!.duration),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeTimeFrameRelativeToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeTimeFrameRelative | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    duration: {
      value: cdktf.stringToHclTerraform(struct!.duration),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeTimeFrameRelativeOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeTimeFrameRelative | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._duration !== undefined) {
      hasAnyValues = true;
      internalValueResult.duration = this._duration;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeTimeFrameRelative | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._duration = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._duration = value.duration;
    }
  }

  // duration - computed: false, optional: false, required: true
  private _duration?: string; 
  public get duration() {
    return this.getStringAttribute('duration');
  }
  public set duration(value: string) {
    this._duration = value;
  }
  // Temporarily expose input value. Use with caution.
  public get durationInput() {
    return this._duration;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeTimeFrame {
  /**
  * Absolute time frame specifying a fixed start and end time.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#absolute Dashboard#absolute}
  */
  readonly absolute?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeTimeFrameAbsolute;
  /**
  * Relative time frame specifying a duration from the current time.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#relative Dashboard#relative}
  */
  readonly relative?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeTimeFrameRelative;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeTimeFrameToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeTimeFrame | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    absolute: dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeTimeFrameAbsoluteToTerraform(struct!.absolute),
    relative: dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeTimeFrameRelativeToTerraform(struct!.relative),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeTimeFrameToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeTimeFrame | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    absolute: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeTimeFrameAbsoluteToHclTerraform(struct!.absolute),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeTimeFrameAbsolute",
    },
    relative: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeTimeFrameRelativeToHclTerraform(struct!.relative),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeTimeFrameRelative",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeTimeFrameOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeTimeFrame | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._absolute?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.absolute = this._absolute?.internalValue;
    }
    if (this._relative?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.relative = this._relative?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeTimeFrame | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._absolute.internalValue = undefined;
      this._relative.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._absolute.internalValue = value.absolute;
      this._relative.internalValue = value.relative;
    }
  }

  // absolute - computed: false, optional: true, required: false
  private _absolute = new DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeTimeFrameAbsoluteOutputReference(this, "absolute");
  public get absolute() {
    return this._absolute;
  }
  public putAbsolute(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeTimeFrameAbsolute) {
    this._absolute.internalValue = value;
  }
  public resetAbsolute() {
    this._absolute.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get absoluteInput() {
    return this._absolute.internalValue;
  }

  // relative - computed: false, optional: true, required: false
  private _relative = new DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeTimeFrameRelativeOutputReference(this, "relative");
  public get relative() {
    return this._relative;
  }
  public putRelative(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeTimeFrameRelative) {
    this._relative.internalValue = value;
  }
  public resetRelative() {
    this._relative.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get relativeInput() {
    return this._relative.internalValue;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrime {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#filters Dashboard#filters}
  */
  readonly filters?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFilters[] | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#group_names Dashboard#group_names}
  */
  readonly groupNames?: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#query Dashboard#query}
  */
  readonly query: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#stacked_group_name Dashboard#stacked_group_name}
  */
  readonly stackedGroupName?: string;
  /**
  * Specifies the time frame. Can be either absolute or relative.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#time_frame Dashboard#time_frame}
  */
  readonly timeFrame?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeTimeFrame;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrime | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    filters: cdktf.listMapper(dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersToTerraform, false)(struct!.filters),
    group_names: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.groupNames),
    query: cdktf.stringToTerraform(struct!.query),
    stacked_group_name: cdktf.stringToTerraform(struct!.stackedGroupName),
    time_frame: dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeTimeFrameToTerraform(struct!.timeFrame),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrime | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    filters: {
      value: cdktf.listMapperHcl(dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersToHclTerraform, false)(struct!.filters),
      isBlock: true,
      type: "list",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersList",
    },
    group_names: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.groupNames),
      isBlock: false,
      type: "list",
      storageClassType: "stringList",
    },
    query: {
      value: cdktf.stringToHclTerraform(struct!.query),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    stacked_group_name: {
      value: cdktf.stringToHclTerraform(struct!.stackedGroupName),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    time_frame: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeTimeFrameToHclTerraform(struct!.timeFrame),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeTimeFrame",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrime | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._filters?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.filters = this._filters?.internalValue;
    }
    if (this._groupNames !== undefined) {
      hasAnyValues = true;
      internalValueResult.groupNames = this._groupNames;
    }
    if (this._query !== undefined) {
      hasAnyValues = true;
      internalValueResult.query = this._query;
    }
    if (this._stackedGroupName !== undefined) {
      hasAnyValues = true;
      internalValueResult.stackedGroupName = this._stackedGroupName;
    }
    if (this._timeFrame?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.timeFrame = this._timeFrame?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrime | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._filters.internalValue = undefined;
      this._groupNames = undefined;
      this._query = undefined;
      this._stackedGroupName = undefined;
      this._timeFrame.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._filters.internalValue = value.filters;
      this._groupNames = value.groupNames;
      this._query = value.query;
      this._stackedGroupName = value.stackedGroupName;
      this._timeFrame.internalValue = value.timeFrame;
    }
  }

  // filters - computed: false, optional: true, required: false
  private _filters = new DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFiltersList(this, "filters", false);
  public get filters() {
    return this._filters;
  }
  public putFilters(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeFilters[] | cdktf.IResolvable) {
    this._filters.internalValue = value;
  }
  public resetFilters() {
    this._filters.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get filtersInput() {
    return this._filters.internalValue;
  }

  // group_names - computed: false, optional: true, required: false
  private _groupNames?: string[]; 
  public get groupNames() {
    return this.getListAttribute('group_names');
  }
  public set groupNames(value: string[]) {
    this._groupNames = value;
  }
  public resetGroupNames() {
    this._groupNames = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get groupNamesInput() {
    return this._groupNames;
  }

  // query - computed: false, optional: false, required: true
  private _query?: string; 
  public get query() {
    return this.getStringAttribute('query');
  }
  public set query(value: string) {
    this._query = value;
  }
  // Temporarily expose input value. Use with caution.
  public get queryInput() {
    return this._query;
  }

  // stacked_group_name - computed: false, optional: true, required: false
  private _stackedGroupName?: string; 
  public get stackedGroupName() {
    return this.getStringAttribute('stacked_group_name');
  }
  public set stackedGroupName(value: string) {
    this._stackedGroupName = value;
  }
  public resetStackedGroupName() {
    this._stackedGroupName = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get stackedGroupNameInput() {
    return this._stackedGroupName;
  }

  // time_frame - computed: false, optional: true, required: false
  private _timeFrame = new DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeTimeFrameOutputReference(this, "time_frame");
  public get timeFrame() {
    return this._timeFrame;
  }
  public putTimeFrame(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeTimeFrame) {
    this._timeFrame.internalValue = value;
  }
  public resetTimeFrame() {
    this._timeFrame.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get timeFrameInput() {
    return this._timeFrame.internalValue;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsAggregationObservationField {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#keypath Dashboard#keypath}
  */
  readonly keypath: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#scope Dashboard#scope}
  */
  readonly scope: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsAggregationObservationFieldToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsAggregationObservationField | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    keypath: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.keypath),
    scope: cdktf.stringToTerraform(struct!.scope),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsAggregationObservationFieldToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsAggregationObservationField | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    keypath: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.keypath),
      isBlock: false,
      type: "list",
      storageClassType: "stringList",
    },
    scope: {
      value: cdktf.stringToHclTerraform(struct!.scope),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsAggregationObservationFieldOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsAggregationObservationField | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._keypath !== undefined) {
      hasAnyValues = true;
      internalValueResult.keypath = this._keypath;
    }
    if (this._scope !== undefined) {
      hasAnyValues = true;
      internalValueResult.scope = this._scope;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsAggregationObservationField | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._keypath = undefined;
      this._scope = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._keypath = value.keypath;
      this._scope = value.scope;
    }
  }

  // keypath - computed: false, optional: false, required: true
  private _keypath?: string[]; 
  public get keypath() {
    return this.getListAttribute('keypath');
  }
  public set keypath(value: string[]) {
    this._keypath = value;
  }
  // Temporarily expose input value. Use with caution.
  public get keypathInput() {
    return this._keypath;
  }

  // scope - computed: false, optional: false, required: true
  private _scope?: string; 
  public get scope() {
    return this.getStringAttribute('scope');
  }
  public set scope(value: string) {
    this._scope = value;
  }
  // Temporarily expose input value. Use with caution.
  public get scopeInput() {
    return this._scope;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsAggregation {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#field Dashboard#field}
  */
  readonly field?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#observation_field Dashboard#observation_field}
  */
  readonly observationField?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsAggregationObservationField;
  /**
  * The percentage of the aggregation to return. required when type is `percentile`.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#percent Dashboard#percent}
  */
  readonly percent?: number;
  /**
  * The type of the aggregation. Can be one of ["count" "count_distinct" "sum" "avg" "min" "max" "percentile"]
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#type Dashboard#type}
  */
  readonly type: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsAggregationToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsAggregation | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    field: cdktf.stringToTerraform(struct!.field),
    observation_field: dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsAggregationObservationFieldToTerraform(struct!.observationField),
    percent: cdktf.numberToTerraform(struct!.percent),
    type: cdktf.stringToTerraform(struct!.type),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsAggregationToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsAggregation | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    field: {
      value: cdktf.stringToHclTerraform(struct!.field),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    observation_field: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsAggregationObservationFieldToHclTerraform(struct!.observationField),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsAggregationObservationField",
    },
    percent: {
      value: cdktf.numberToHclTerraform(struct!.percent),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    type: {
      value: cdktf.stringToHclTerraform(struct!.type),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsAggregationOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsAggregation | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._field !== undefined) {
      hasAnyValues = true;
      internalValueResult.field = this._field;
    }
    if (this._observationField?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.observationField = this._observationField?.internalValue;
    }
    if (this._percent !== undefined) {
      hasAnyValues = true;
      internalValueResult.percent = this._percent;
    }
    if (this._type !== undefined) {
      hasAnyValues = true;
      internalValueResult.type = this._type;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsAggregation | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._field = undefined;
      this._observationField.internalValue = undefined;
      this._percent = undefined;
      this._type = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._field = value.field;
      this._observationField.internalValue = value.observationField;
      this._percent = value.percent;
      this._type = value.type;
    }
  }

  // field - computed: false, optional: true, required: false
  private _field?: string; 
  public get field() {
    return this.getStringAttribute('field');
  }
  public set field(value: string) {
    this._field = value;
  }
  public resetField() {
    this._field = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get fieldInput() {
    return this._field;
  }

  // observation_field - computed: false, optional: true, required: false
  private _observationField = new DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsAggregationObservationFieldOutputReference(this, "observation_field");
  public get observationField() {
    return this._observationField;
  }
  public putObservationField(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsAggregationObservationField) {
    this._observationField.internalValue = value;
  }
  public resetObservationField() {
    this._observationField.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get observationFieldInput() {
    return this._observationField.internalValue;
  }

  // percent - computed: false, optional: true, required: false
  private _percent?: number; 
  public get percent() {
    return this.getNumberAttribute('percent');
  }
  public set percent(value: number) {
    this._percent = value;
  }
  public resetPercent() {
    this._percent = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get percentInput() {
    return this._percent;
  }

  // type - computed: false, optional: false, required: true
  private _type?: string; 
  public get type() {
    return this.getStringAttribute('type');
  }
  public set type(value: string) {
    this._type = value;
  }
  // Temporarily expose input value. Use with caution.
  public get typeInput() {
    return this._type;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsFiltersObservationField {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#keypath Dashboard#keypath}
  */
  readonly keypath: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#scope Dashboard#scope}
  */
  readonly scope: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsFiltersObservationFieldToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsFiltersObservationField | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    keypath: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.keypath),
    scope: cdktf.stringToTerraform(struct!.scope),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsFiltersObservationFieldToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsFiltersObservationField | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    keypath: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.keypath),
      isBlock: false,
      type: "list",
      storageClassType: "stringList",
    },
    scope: {
      value: cdktf.stringToHclTerraform(struct!.scope),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsFiltersObservationFieldOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsFiltersObservationField | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._keypath !== undefined) {
      hasAnyValues = true;
      internalValueResult.keypath = this._keypath;
    }
    if (this._scope !== undefined) {
      hasAnyValues = true;
      internalValueResult.scope = this._scope;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsFiltersObservationField | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._keypath = undefined;
      this._scope = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._keypath = value.keypath;
      this._scope = value.scope;
    }
  }

  // keypath - computed: false, optional: false, required: true
  private _keypath?: string[]; 
  public get keypath() {
    return this.getListAttribute('keypath');
  }
  public set keypath(value: string[]) {
    this._keypath = value;
  }
  // Temporarily expose input value. Use with caution.
  public get keypathInput() {
    return this._keypath;
  }

  // scope - computed: false, optional: false, required: true
  private _scope?: string; 
  public get scope() {
    return this.getStringAttribute('scope');
  }
  public set scope(value: string) {
    this._scope = value;
  }
  // Temporarily expose input value. Use with caution.
  public get scopeInput() {
    return this._scope;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsFiltersOperator {
  /**
  * the values to filter by. When the type is `equals`, this field is optional, the filter will match only the selected values, and all the values if not set. When the type is `not_equals`, this field is required, and the filter will match spans without the selected values.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#selected_values Dashboard#selected_values}
  */
  readonly selectedValues?: string[];
  /**
  * The type of the operator. Can be one of `equals` or `not_equals`.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#type Dashboard#type}
  */
  readonly type: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsFiltersOperatorToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsFiltersOperator | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    selected_values: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.selectedValues),
    type: cdktf.stringToTerraform(struct!.type),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsFiltersOperatorToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsFiltersOperator | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    selected_values: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.selectedValues),
      isBlock: false,
      type: "list",
      storageClassType: "stringList",
    },
    type: {
      value: cdktf.stringToHclTerraform(struct!.type),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsFiltersOperatorOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsFiltersOperator | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._selectedValues !== undefined) {
      hasAnyValues = true;
      internalValueResult.selectedValues = this._selectedValues;
    }
    if (this._type !== undefined) {
      hasAnyValues = true;
      internalValueResult.type = this._type;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsFiltersOperator | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._selectedValues = undefined;
      this._type = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._selectedValues = value.selectedValues;
      this._type = value.type;
    }
  }

  // selected_values - computed: false, optional: true, required: false
  private _selectedValues?: string[]; 
  public get selectedValues() {
    return this.getListAttribute('selected_values');
  }
  public set selectedValues(value: string[]) {
    this._selectedValues = value;
  }
  public resetSelectedValues() {
    this._selectedValues = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get selectedValuesInput() {
    return this._selectedValues;
  }

  // type - computed: false, optional: false, required: true
  private _type?: string; 
  public get type() {
    return this.getStringAttribute('type');
  }
  public set type(value: string) {
    this._type = value;
  }
  // Temporarily expose input value. Use with caution.
  public get typeInput() {
    return this._type;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsFilters {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#field Dashboard#field}
  */
  readonly field: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#observation_field Dashboard#observation_field}
  */
  readonly observationField?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsFiltersObservationField;
  /**
  * Operator to use for filtering.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#operator Dashboard#operator}
  */
  readonly operator: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsFiltersOperator;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsFiltersToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsFilters | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    field: cdktf.stringToTerraform(struct!.field),
    observation_field: dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsFiltersObservationFieldToTerraform(struct!.observationField),
    operator: dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsFiltersOperatorToTerraform(struct!.operator),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsFiltersToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsFilters | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    field: {
      value: cdktf.stringToHclTerraform(struct!.field),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    observation_field: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsFiltersObservationFieldToHclTerraform(struct!.observationField),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsFiltersObservationField",
    },
    operator: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsFiltersOperatorToHclTerraform(struct!.operator),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsFiltersOperator",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsFiltersOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsFilters | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._field !== undefined) {
      hasAnyValues = true;
      internalValueResult.field = this._field;
    }
    if (this._observationField?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.observationField = this._observationField?.internalValue;
    }
    if (this._operator?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.operator = this._operator?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsFilters | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._field = undefined;
      this._observationField.internalValue = undefined;
      this._operator.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._field = value.field;
      this._observationField.internalValue = value.observationField;
      this._operator.internalValue = value.operator;
    }
  }

  // field - computed: false, optional: false, required: true
  private _field?: string; 
  public get field() {
    return this.getStringAttribute('field');
  }
  public set field(value: string) {
    this._field = value;
  }
  // Temporarily expose input value. Use with caution.
  public get fieldInput() {
    return this._field;
  }

  // observation_field - computed: false, optional: true, required: false
  private _observationField = new DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsFiltersObservationFieldOutputReference(this, "observation_field");
  public get observationField() {
    return this._observationField;
  }
  public putObservationField(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsFiltersObservationField) {
    this._observationField.internalValue = value;
  }
  public resetObservationField() {
    this._observationField.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get observationFieldInput() {
    return this._observationField.internalValue;
  }

  // operator - computed: false, optional: false, required: true
  private _operator = new DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsFiltersOperatorOutputReference(this, "operator");
  public get operator() {
    return this._operator;
  }
  public putOperator(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsFiltersOperator) {
    this._operator.internalValue = value;
  }
  // Temporarily expose input value. Use with caution.
  public get operatorInput() {
    return this._operator.internalValue;
  }
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsFiltersList extends cdktf.ComplexList {
  public internalValue? : DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsFilters[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsFiltersOutputReference {
    return new DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsFiltersOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsGroupNamesFields {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#keypath Dashboard#keypath}
  */
  readonly keypath: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#scope Dashboard#scope}
  */
  readonly scope: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsGroupNamesFieldsToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsGroupNamesFields | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    keypath: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.keypath),
    scope: cdktf.stringToTerraform(struct!.scope),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsGroupNamesFieldsToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsGroupNamesFields | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    keypath: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.keypath),
      isBlock: false,
      type: "list",
      storageClassType: "stringList",
    },
    scope: {
      value: cdktf.stringToHclTerraform(struct!.scope),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsGroupNamesFieldsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsGroupNamesFields | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._keypath !== undefined) {
      hasAnyValues = true;
      internalValueResult.keypath = this._keypath;
    }
    if (this._scope !== undefined) {
      hasAnyValues = true;
      internalValueResult.scope = this._scope;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsGroupNamesFields | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._keypath = undefined;
      this._scope = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._keypath = value.keypath;
      this._scope = value.scope;
    }
  }

  // keypath - computed: false, optional: false, required: true
  private _keypath?: string[]; 
  public get keypath() {
    return this.getListAttribute('keypath');
  }
  public set keypath(value: string[]) {
    this._keypath = value;
  }
  // Temporarily expose input value. Use with caution.
  public get keypathInput() {
    return this._keypath;
  }

  // scope - computed: false, optional: false, required: true
  private _scope?: string; 
  public get scope() {
    return this.getStringAttribute('scope');
  }
  public set scope(value: string) {
    this._scope = value;
  }
  // Temporarily expose input value. Use with caution.
  public get scopeInput() {
    return this._scope;
  }
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsGroupNamesFieldsList extends cdktf.ComplexList {
  public internalValue? : DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsGroupNamesFields[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsGroupNamesFieldsOutputReference {
    return new DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsGroupNamesFieldsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsStackedGroupNameField {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#keypath Dashboard#keypath}
  */
  readonly keypath: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#scope Dashboard#scope}
  */
  readonly scope: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsStackedGroupNameFieldToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsStackedGroupNameField | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    keypath: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.keypath),
    scope: cdktf.stringToTerraform(struct!.scope),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsStackedGroupNameFieldToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsStackedGroupNameField | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    keypath: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.keypath),
      isBlock: false,
      type: "list",
      storageClassType: "stringList",
    },
    scope: {
      value: cdktf.stringToHclTerraform(struct!.scope),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsStackedGroupNameFieldOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsStackedGroupNameField | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._keypath !== undefined) {
      hasAnyValues = true;
      internalValueResult.keypath = this._keypath;
    }
    if (this._scope !== undefined) {
      hasAnyValues = true;
      internalValueResult.scope = this._scope;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsStackedGroupNameField | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._keypath = undefined;
      this._scope = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._keypath = value.keypath;
      this._scope = value.scope;
    }
  }

  // keypath - computed: false, optional: false, required: true
  private _keypath?: string[]; 
  public get keypath() {
    return this.getListAttribute('keypath');
  }
  public set keypath(value: string[]) {
    this._keypath = value;
  }
  // Temporarily expose input value. Use with caution.
  public get keypathInput() {
    return this._keypath;
  }

  // scope - computed: false, optional: false, required: true
  private _scope?: string; 
  public get scope() {
    return this.getStringAttribute('scope');
  }
  public set scope(value: string) {
    this._scope = value;
  }
  // Temporarily expose input value. Use with caution.
  public get scopeInput() {
    return this._scope;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsTimeFrameAbsolute {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#end Dashboard#end}
  */
  readonly end: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#start Dashboard#start}
  */
  readonly start: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsTimeFrameAbsoluteToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsTimeFrameAbsolute | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    end: cdktf.stringToTerraform(struct!.end),
    start: cdktf.stringToTerraform(struct!.start),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsTimeFrameAbsoluteToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsTimeFrameAbsolute | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    end: {
      value: cdktf.stringToHclTerraform(struct!.end),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    start: {
      value: cdktf.stringToHclTerraform(struct!.start),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsTimeFrameAbsoluteOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsTimeFrameAbsolute | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._end !== undefined) {
      hasAnyValues = true;
      internalValueResult.end = this._end;
    }
    if (this._start !== undefined) {
      hasAnyValues = true;
      internalValueResult.start = this._start;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsTimeFrameAbsolute | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._end = undefined;
      this._start = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._end = value.end;
      this._start = value.start;
    }
  }

  // end - computed: false, optional: false, required: true
  private _end?: string; 
  public get end() {
    return this.getStringAttribute('end');
  }
  public set end(value: string) {
    this._end = value;
  }
  // Temporarily expose input value. Use with caution.
  public get endInput() {
    return this._end;
  }

  // start - computed: false, optional: false, required: true
  private _start?: string; 
  public get start() {
    return this.getStringAttribute('start');
  }
  public set start(value: string) {
    this._start = value;
  }
  // Temporarily expose input value. Use with caution.
  public get startInput() {
    return this._start;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsTimeFrameRelative {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#duration Dashboard#duration}
  */
  readonly duration: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsTimeFrameRelativeToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsTimeFrameRelative | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    duration: cdktf.stringToTerraform(struct!.duration),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsTimeFrameRelativeToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsTimeFrameRelative | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    duration: {
      value: cdktf.stringToHclTerraform(struct!.duration),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsTimeFrameRelativeOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsTimeFrameRelative | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._duration !== undefined) {
      hasAnyValues = true;
      internalValueResult.duration = this._duration;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsTimeFrameRelative | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._duration = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._duration = value.duration;
    }
  }

  // duration - computed: false, optional: false, required: true
  private _duration?: string; 
  public get duration() {
    return this.getStringAttribute('duration');
  }
  public set duration(value: string) {
    this._duration = value;
  }
  // Temporarily expose input value. Use with caution.
  public get durationInput() {
    return this._duration;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsTimeFrame {
  /**
  * Absolute time frame specifying a fixed start and end time.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#absolute Dashboard#absolute}
  */
  readonly absolute?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsTimeFrameAbsolute;
  /**
  * Relative time frame specifying a duration from the current time.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#relative Dashboard#relative}
  */
  readonly relative?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsTimeFrameRelative;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsTimeFrameToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsTimeFrame | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    absolute: dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsTimeFrameAbsoluteToTerraform(struct!.absolute),
    relative: dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsTimeFrameRelativeToTerraform(struct!.relative),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsTimeFrameToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsTimeFrame | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    absolute: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsTimeFrameAbsoluteToHclTerraform(struct!.absolute),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsTimeFrameAbsolute",
    },
    relative: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsTimeFrameRelativeToHclTerraform(struct!.relative),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsTimeFrameRelative",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsTimeFrameOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsTimeFrame | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._absolute?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.absolute = this._absolute?.internalValue;
    }
    if (this._relative?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.relative = this._relative?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsTimeFrame | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._absolute.internalValue = undefined;
      this._relative.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._absolute.internalValue = value.absolute;
      this._relative.internalValue = value.relative;
    }
  }

  // absolute - computed: false, optional: true, required: false
  private _absolute = new DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsTimeFrameAbsoluteOutputReference(this, "absolute");
  public get absolute() {
    return this._absolute;
  }
  public putAbsolute(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsTimeFrameAbsolute) {
    this._absolute.internalValue = value;
  }
  public resetAbsolute() {
    this._absolute.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get absoluteInput() {
    return this._absolute.internalValue;
  }

  // relative - computed: false, optional: true, required: false
  private _relative = new DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsTimeFrameRelativeOutputReference(this, "relative");
  public get relative() {
    return this._relative;
  }
  public putRelative(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsTimeFrameRelative) {
    this._relative.internalValue = value;
  }
  public resetRelative() {
    this._relative.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get relativeInput() {
    return this._relative.internalValue;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogs {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#aggregation Dashboard#aggregation}
  */
  readonly aggregation: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsAggregation;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#filters Dashboard#filters}
  */
  readonly filters?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsFilters[] | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#group_names Dashboard#group_names}
  */
  readonly groupNames?: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#group_names_fields Dashboard#group_names_fields}
  */
  readonly groupNamesFields?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsGroupNamesFields[] | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#lucene_query Dashboard#lucene_query}
  */
  readonly luceneQuery?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#stacked_group_name Dashboard#stacked_group_name}
  */
  readonly stackedGroupName?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#stacked_group_name_field Dashboard#stacked_group_name_field}
  */
  readonly stackedGroupNameField?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsStackedGroupNameField;
  /**
  * Specifies the time frame. Can be either absolute or relative.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#time_frame Dashboard#time_frame}
  */
  readonly timeFrame?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsTimeFrame;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogs | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    aggregation: dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsAggregationToTerraform(struct!.aggregation),
    filters: cdktf.listMapper(dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsFiltersToTerraform, false)(struct!.filters),
    group_names: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.groupNames),
    group_names_fields: cdktf.listMapper(dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsGroupNamesFieldsToTerraform, false)(struct!.groupNamesFields),
    lucene_query: cdktf.stringToTerraform(struct!.luceneQuery),
    stacked_group_name: cdktf.stringToTerraform(struct!.stackedGroupName),
    stacked_group_name_field: dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsStackedGroupNameFieldToTerraform(struct!.stackedGroupNameField),
    time_frame: dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsTimeFrameToTerraform(struct!.timeFrame),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogs | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    aggregation: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsAggregationToHclTerraform(struct!.aggregation),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsAggregation",
    },
    filters: {
      value: cdktf.listMapperHcl(dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsFiltersToHclTerraform, false)(struct!.filters),
      isBlock: true,
      type: "list",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsFiltersList",
    },
    group_names: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.groupNames),
      isBlock: false,
      type: "list",
      storageClassType: "stringList",
    },
    group_names_fields: {
      value: cdktf.listMapperHcl(dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsGroupNamesFieldsToHclTerraform, false)(struct!.groupNamesFields),
      isBlock: true,
      type: "list",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsGroupNamesFieldsList",
    },
    lucene_query: {
      value: cdktf.stringToHclTerraform(struct!.luceneQuery),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    stacked_group_name: {
      value: cdktf.stringToHclTerraform(struct!.stackedGroupName),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    stacked_group_name_field: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsStackedGroupNameFieldToHclTerraform(struct!.stackedGroupNameField),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsStackedGroupNameField",
    },
    time_frame: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsTimeFrameToHclTerraform(struct!.timeFrame),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsTimeFrame",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogs | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._aggregation?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.aggregation = this._aggregation?.internalValue;
    }
    if (this._filters?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.filters = this._filters?.internalValue;
    }
    if (this._groupNames !== undefined) {
      hasAnyValues = true;
      internalValueResult.groupNames = this._groupNames;
    }
    if (this._groupNamesFields?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.groupNamesFields = this._groupNamesFields?.internalValue;
    }
    if (this._luceneQuery !== undefined) {
      hasAnyValues = true;
      internalValueResult.luceneQuery = this._luceneQuery;
    }
    if (this._stackedGroupName !== undefined) {
      hasAnyValues = true;
      internalValueResult.stackedGroupName = this._stackedGroupName;
    }
    if (this._stackedGroupNameField?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.stackedGroupNameField = this._stackedGroupNameField?.internalValue;
    }
    if (this._timeFrame?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.timeFrame = this._timeFrame?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogs | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._aggregation.internalValue = undefined;
      this._filters.internalValue = undefined;
      this._groupNames = undefined;
      this._groupNamesFields.internalValue = undefined;
      this._luceneQuery = undefined;
      this._stackedGroupName = undefined;
      this._stackedGroupNameField.internalValue = undefined;
      this._timeFrame.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._aggregation.internalValue = value.aggregation;
      this._filters.internalValue = value.filters;
      this._groupNames = value.groupNames;
      this._groupNamesFields.internalValue = value.groupNamesFields;
      this._luceneQuery = value.luceneQuery;
      this._stackedGroupName = value.stackedGroupName;
      this._stackedGroupNameField.internalValue = value.stackedGroupNameField;
      this._timeFrame.internalValue = value.timeFrame;
    }
  }

  // aggregation - computed: false, optional: false, required: true
  private _aggregation = new DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsAggregationOutputReference(this, "aggregation");
  public get aggregation() {
    return this._aggregation;
  }
  public putAggregation(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsAggregation) {
    this._aggregation.internalValue = value;
  }
  // Temporarily expose input value. Use with caution.
  public get aggregationInput() {
    return this._aggregation.internalValue;
  }

  // filters - computed: false, optional: true, required: false
  private _filters = new DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsFiltersList(this, "filters", false);
  public get filters() {
    return this._filters;
  }
  public putFilters(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsFilters[] | cdktf.IResolvable) {
    this._filters.internalValue = value;
  }
  public resetFilters() {
    this._filters.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get filtersInput() {
    return this._filters.internalValue;
  }

  // group_names - computed: false, optional: true, required: false
  private _groupNames?: string[]; 
  public get groupNames() {
    return this.getListAttribute('group_names');
  }
  public set groupNames(value: string[]) {
    this._groupNames = value;
  }
  public resetGroupNames() {
    this._groupNames = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get groupNamesInput() {
    return this._groupNames;
  }

  // group_names_fields - computed: false, optional: true, required: false
  private _groupNamesFields = new DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsGroupNamesFieldsList(this, "group_names_fields", false);
  public get groupNamesFields() {
    return this._groupNamesFields;
  }
  public putGroupNamesFields(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsGroupNamesFields[] | cdktf.IResolvable) {
    this._groupNamesFields.internalValue = value;
  }
  public resetGroupNamesFields() {
    this._groupNamesFields.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get groupNamesFieldsInput() {
    return this._groupNamesFields.internalValue;
  }

  // lucene_query - computed: false, optional: true, required: false
  private _luceneQuery?: string; 
  public get luceneQuery() {
    return this.getStringAttribute('lucene_query');
  }
  public set luceneQuery(value: string) {
    this._luceneQuery = value;
  }
  public resetLuceneQuery() {
    this._luceneQuery = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get luceneQueryInput() {
    return this._luceneQuery;
  }

  // stacked_group_name - computed: false, optional: true, required: false
  private _stackedGroupName?: string; 
  public get stackedGroupName() {
    return this.getStringAttribute('stacked_group_name');
  }
  public set stackedGroupName(value: string) {
    this._stackedGroupName = value;
  }
  public resetStackedGroupName() {
    this._stackedGroupName = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get stackedGroupNameInput() {
    return this._stackedGroupName;
  }

  // stacked_group_name_field - computed: false, optional: true, required: false
  private _stackedGroupNameField = new DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsStackedGroupNameFieldOutputReference(this, "stacked_group_name_field");
  public get stackedGroupNameField() {
    return this._stackedGroupNameField;
  }
  public putStackedGroupNameField(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsStackedGroupNameField) {
    this._stackedGroupNameField.internalValue = value;
  }
  public resetStackedGroupNameField() {
    this._stackedGroupNameField.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get stackedGroupNameFieldInput() {
    return this._stackedGroupNameField.internalValue;
  }

  // time_frame - computed: false, optional: true, required: false
  private _timeFrame = new DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsTimeFrameOutputReference(this, "time_frame");
  public get timeFrame() {
    return this._timeFrame;
  }
  public putTimeFrame(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsTimeFrame) {
    this._timeFrame.internalValue = value;
  }
  public resetTimeFrame() {
    this._timeFrame.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get timeFrameInput() {
    return this._timeFrame.internalValue;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetricsFiltersOperator {
  /**
  * the values to filter by. When the type is `equals`, this field is optional, the filter will match only the selected values, and all the values if not set. When the type is `not_equals`, this field is required, and the filter will match spans without the selected values.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#selected_values Dashboard#selected_values}
  */
  readonly selectedValues?: string[];
  /**
  * The type of the operator. Can be one of `equals` or `not_equals`.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#type Dashboard#type}
  */
  readonly type: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetricsFiltersOperatorToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetricsFiltersOperator | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    selected_values: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.selectedValues),
    type: cdktf.stringToTerraform(struct!.type),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetricsFiltersOperatorToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetricsFiltersOperator | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    selected_values: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.selectedValues),
      isBlock: false,
      type: "list",
      storageClassType: "stringList",
    },
    type: {
      value: cdktf.stringToHclTerraform(struct!.type),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetricsFiltersOperatorOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetricsFiltersOperator | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._selectedValues !== undefined) {
      hasAnyValues = true;
      internalValueResult.selectedValues = this._selectedValues;
    }
    if (this._type !== undefined) {
      hasAnyValues = true;
      internalValueResult.type = this._type;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetricsFiltersOperator | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._selectedValues = undefined;
      this._type = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._selectedValues = value.selectedValues;
      this._type = value.type;
    }
  }

  // selected_values - computed: false, optional: true, required: false
  private _selectedValues?: string[]; 
  public get selectedValues() {
    return this.getListAttribute('selected_values');
  }
  public set selectedValues(value: string[]) {
    this._selectedValues = value;
  }
  public resetSelectedValues() {
    this._selectedValues = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get selectedValuesInput() {
    return this._selectedValues;
  }

  // type - computed: false, optional: false, required: true
  private _type?: string; 
  public get type() {
    return this.getStringAttribute('type');
  }
  public set type(value: string) {
    this._type = value;
  }
  // Temporarily expose input value. Use with caution.
  public get typeInput() {
    return this._type;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetricsFilters {
  /**
  * Label associated with the metric.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#label Dashboard#label}
  */
  readonly label?: string;
  /**
  * Metric name to apply the filter on.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#metric Dashboard#metric}
  */
  readonly metric: string;
  /**
  * Operator to use for filtering.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#operator Dashboard#operator}
  */
  readonly operator: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetricsFiltersOperator;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetricsFiltersToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetricsFilters | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    label: cdktf.stringToTerraform(struct!.label),
    metric: cdktf.stringToTerraform(struct!.metric),
    operator: dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetricsFiltersOperatorToTerraform(struct!.operator),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetricsFiltersToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetricsFilters | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    label: {
      value: cdktf.stringToHclTerraform(struct!.label),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    metric: {
      value: cdktf.stringToHclTerraform(struct!.metric),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    operator: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetricsFiltersOperatorToHclTerraform(struct!.operator),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetricsFiltersOperator",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetricsFiltersOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetricsFilters | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._label !== undefined) {
      hasAnyValues = true;
      internalValueResult.label = this._label;
    }
    if (this._metric !== undefined) {
      hasAnyValues = true;
      internalValueResult.metric = this._metric;
    }
    if (this._operator?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.operator = this._operator?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetricsFilters | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._label = undefined;
      this._metric = undefined;
      this._operator.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._label = value.label;
      this._metric = value.metric;
      this._operator.internalValue = value.operator;
    }
  }

  // label - computed: false, optional: true, required: false
  private _label?: string; 
  public get label() {
    return this.getStringAttribute('label');
  }
  public set label(value: string) {
    this._label = value;
  }
  public resetLabel() {
    this._label = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get labelInput() {
    return this._label;
  }

  // metric - computed: false, optional: false, required: true
  private _metric?: string; 
  public get metric() {
    return this.getStringAttribute('metric');
  }
  public set metric(value: string) {
    this._metric = value;
  }
  // Temporarily expose input value. Use with caution.
  public get metricInput() {
    return this._metric;
  }

  // operator - computed: false, optional: false, required: true
  private _operator = new DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetricsFiltersOperatorOutputReference(this, "operator");
  public get operator() {
    return this._operator;
  }
  public putOperator(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetricsFiltersOperator) {
    this._operator.internalValue = value;
  }
  // Temporarily expose input value. Use with caution.
  public get operatorInput() {
    return this._operator.internalValue;
  }
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetricsFiltersList extends cdktf.ComplexList {
  public internalValue? : DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetricsFilters[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetricsFiltersOutputReference {
    return new DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetricsFiltersOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetricsTimeFrameAbsolute {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#end Dashboard#end}
  */
  readonly end: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#start Dashboard#start}
  */
  readonly start: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetricsTimeFrameAbsoluteToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetricsTimeFrameAbsolute | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    end: cdktf.stringToTerraform(struct!.end),
    start: cdktf.stringToTerraform(struct!.start),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetricsTimeFrameAbsoluteToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetricsTimeFrameAbsolute | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    end: {
      value: cdktf.stringToHclTerraform(struct!.end),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    start: {
      value: cdktf.stringToHclTerraform(struct!.start),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetricsTimeFrameAbsoluteOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetricsTimeFrameAbsolute | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._end !== undefined) {
      hasAnyValues = true;
      internalValueResult.end = this._end;
    }
    if (this._start !== undefined) {
      hasAnyValues = true;
      internalValueResult.start = this._start;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetricsTimeFrameAbsolute | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._end = undefined;
      this._start = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._end = value.end;
      this._start = value.start;
    }
  }

  // end - computed: false, optional: false, required: true
  private _end?: string; 
  public get end() {
    return this.getStringAttribute('end');
  }
  public set end(value: string) {
    this._end = value;
  }
  // Temporarily expose input value. Use with caution.
  public get endInput() {
    return this._end;
  }

  // start - computed: false, optional: false, required: true
  private _start?: string; 
  public get start() {
    return this.getStringAttribute('start');
  }
  public set start(value: string) {
    this._start = value;
  }
  // Temporarily expose input value. Use with caution.
  public get startInput() {
    return this._start;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetricsTimeFrameRelative {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#duration Dashboard#duration}
  */
  readonly duration: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetricsTimeFrameRelativeToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetricsTimeFrameRelative | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    duration: cdktf.stringToTerraform(struct!.duration),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetricsTimeFrameRelativeToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetricsTimeFrameRelative | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    duration: {
      value: cdktf.stringToHclTerraform(struct!.duration),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetricsTimeFrameRelativeOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetricsTimeFrameRelative | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._duration !== undefined) {
      hasAnyValues = true;
      internalValueResult.duration = this._duration;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetricsTimeFrameRelative | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._duration = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._duration = value.duration;
    }
  }

  // duration - computed: false, optional: false, required: true
  private _duration?: string; 
  public get duration() {
    return this.getStringAttribute('duration');
  }
  public set duration(value: string) {
    this._duration = value;
  }
  // Temporarily expose input value. Use with caution.
  public get durationInput() {
    return this._duration;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetricsTimeFrame {
  /**
  * Absolute time frame specifying a fixed start and end time.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#absolute Dashboard#absolute}
  */
  readonly absolute?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetricsTimeFrameAbsolute;
  /**
  * Relative time frame specifying a duration from the current time.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#relative Dashboard#relative}
  */
  readonly relative?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetricsTimeFrameRelative;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetricsTimeFrameToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetricsTimeFrame | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    absolute: dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetricsTimeFrameAbsoluteToTerraform(struct!.absolute),
    relative: dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetricsTimeFrameRelativeToTerraform(struct!.relative),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetricsTimeFrameToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetricsTimeFrame | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    absolute: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetricsTimeFrameAbsoluteToHclTerraform(struct!.absolute),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetricsTimeFrameAbsolute",
    },
    relative: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetricsTimeFrameRelativeToHclTerraform(struct!.relative),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetricsTimeFrameRelative",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetricsTimeFrameOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetricsTimeFrame | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._absolute?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.absolute = this._absolute?.internalValue;
    }
    if (this._relative?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.relative = this._relative?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetricsTimeFrame | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._absolute.internalValue = undefined;
      this._relative.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._absolute.internalValue = value.absolute;
      this._relative.internalValue = value.relative;
    }
  }

  // absolute - computed: false, optional: true, required: false
  private _absolute = new DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetricsTimeFrameAbsoluteOutputReference(this, "absolute");
  public get absolute() {
    return this._absolute;
  }
  public putAbsolute(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetricsTimeFrameAbsolute) {
    this._absolute.internalValue = value;
  }
  public resetAbsolute() {
    this._absolute.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get absoluteInput() {
    return this._absolute.internalValue;
  }

  // relative - computed: false, optional: true, required: false
  private _relative = new DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetricsTimeFrameRelativeOutputReference(this, "relative");
  public get relative() {
    return this._relative;
  }
  public putRelative(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetricsTimeFrameRelative) {
    this._relative.internalValue = value;
  }
  public resetRelative() {
    this._relative.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get relativeInput() {
    return this._relative.internalValue;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetrics {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#filters Dashboard#filters}
  */
  readonly filters?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetricsFilters[] | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#group_names Dashboard#group_names}
  */
  readonly groupNames?: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#promql_query Dashboard#promql_query}
  */
  readonly promqlQuery: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#stacked_group_name Dashboard#stacked_group_name}
  */
  readonly stackedGroupName?: string;
  /**
  * Specifies the time frame. Can be either absolute or relative.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#time_frame Dashboard#time_frame}
  */
  readonly timeFrame?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetricsTimeFrame;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetricsToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetrics | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    filters: cdktf.listMapper(dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetricsFiltersToTerraform, false)(struct!.filters),
    group_names: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.groupNames),
    promql_query: cdktf.stringToTerraform(struct!.promqlQuery),
    stacked_group_name: cdktf.stringToTerraform(struct!.stackedGroupName),
    time_frame: dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetricsTimeFrameToTerraform(struct!.timeFrame),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetricsToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetrics | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    filters: {
      value: cdktf.listMapperHcl(dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetricsFiltersToHclTerraform, false)(struct!.filters),
      isBlock: true,
      type: "list",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetricsFiltersList",
    },
    group_names: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.groupNames),
      isBlock: false,
      type: "list",
      storageClassType: "stringList",
    },
    promql_query: {
      value: cdktf.stringToHclTerraform(struct!.promqlQuery),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    stacked_group_name: {
      value: cdktf.stringToHclTerraform(struct!.stackedGroupName),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    time_frame: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetricsTimeFrameToHclTerraform(struct!.timeFrame),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetricsTimeFrame",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetricsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetrics | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._filters?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.filters = this._filters?.internalValue;
    }
    if (this._groupNames !== undefined) {
      hasAnyValues = true;
      internalValueResult.groupNames = this._groupNames;
    }
    if (this._promqlQuery !== undefined) {
      hasAnyValues = true;
      internalValueResult.promqlQuery = this._promqlQuery;
    }
    if (this._stackedGroupName !== undefined) {
      hasAnyValues = true;
      internalValueResult.stackedGroupName = this._stackedGroupName;
    }
    if (this._timeFrame?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.timeFrame = this._timeFrame?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetrics | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._filters.internalValue = undefined;
      this._groupNames = undefined;
      this._promqlQuery = undefined;
      this._stackedGroupName = undefined;
      this._timeFrame.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._filters.internalValue = value.filters;
      this._groupNames = value.groupNames;
      this._promqlQuery = value.promqlQuery;
      this._stackedGroupName = value.stackedGroupName;
      this._timeFrame.internalValue = value.timeFrame;
    }
  }

  // filters - computed: false, optional: true, required: false
  private _filters = new DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetricsFiltersList(this, "filters", false);
  public get filters() {
    return this._filters;
  }
  public putFilters(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetricsFilters[] | cdktf.IResolvable) {
    this._filters.internalValue = value;
  }
  public resetFilters() {
    this._filters.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get filtersInput() {
    return this._filters.internalValue;
  }

  // group_names - computed: false, optional: true, required: false
  private _groupNames?: string[]; 
  public get groupNames() {
    return this.getListAttribute('group_names');
  }
  public set groupNames(value: string[]) {
    this._groupNames = value;
  }
  public resetGroupNames() {
    this._groupNames = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get groupNamesInput() {
    return this._groupNames;
  }

  // promql_query - computed: false, optional: false, required: true
  private _promqlQuery?: string; 
  public get promqlQuery() {
    return this.getStringAttribute('promql_query');
  }
  public set promqlQuery(value: string) {
    this._promqlQuery = value;
  }
  // Temporarily expose input value. Use with caution.
  public get promqlQueryInput() {
    return this._promqlQuery;
  }

  // stacked_group_name - computed: false, optional: true, required: false
  private _stackedGroupName?: string; 
  public get stackedGroupName() {
    return this.getStringAttribute('stacked_group_name');
  }
  public set stackedGroupName(value: string) {
    this._stackedGroupName = value;
  }
  public resetStackedGroupName() {
    this._stackedGroupName = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get stackedGroupNameInput() {
    return this._stackedGroupName;
  }

  // time_frame - computed: false, optional: true, required: false
  private _timeFrame = new DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetricsTimeFrameOutputReference(this, "time_frame");
  public get timeFrame() {
    return this._timeFrame;
  }
  public putTimeFrame(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetricsTimeFrame) {
    this._timeFrame.internalValue = value;
  }
  public resetTimeFrame() {
    this._timeFrame.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get timeFrameInput() {
    return this._timeFrame.internalValue;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansAggregation {
  /**
  * The type of the aggregation. When the aggregation type is `metrics`, can be one of ["avg" "max" "min" "percentile_50" "percentile_95" "percentile_99" "sum" "unspecified"]. When the aggregation type is `dimension`, can be one of ["error_count" "unique_count" "unspecified"].
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#aggregation_type Dashboard#aggregation_type}
  */
  readonly aggregationType: string;
  /**
  * The field to aggregate on. When the aggregation type is `metrics`, can be one of ["duration" "unspecified"]. When the aggregation type is `dimension`, can be one of ["trace_id" "unspecified"].
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#field Dashboard#field}
  */
  readonly field: string;
  /**
  * Can be one of ["metric" "dimension"]
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#type Dashboard#type}
  */
  readonly type: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansAggregationToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansAggregation | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    aggregation_type: cdktf.stringToTerraform(struct!.aggregationType),
    field: cdktf.stringToTerraform(struct!.field),
    type: cdktf.stringToTerraform(struct!.type),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansAggregationToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansAggregation | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    aggregation_type: {
      value: cdktf.stringToHclTerraform(struct!.aggregationType),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    field: {
      value: cdktf.stringToHclTerraform(struct!.field),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    type: {
      value: cdktf.stringToHclTerraform(struct!.type),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansAggregationOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansAggregation | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._aggregationType !== undefined) {
      hasAnyValues = true;
      internalValueResult.aggregationType = this._aggregationType;
    }
    if (this._field !== undefined) {
      hasAnyValues = true;
      internalValueResult.field = this._field;
    }
    if (this._type !== undefined) {
      hasAnyValues = true;
      internalValueResult.type = this._type;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansAggregation | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._aggregationType = undefined;
      this._field = undefined;
      this._type = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._aggregationType = value.aggregationType;
      this._field = value.field;
      this._type = value.type;
    }
  }

  // aggregation_type - computed: false, optional: false, required: true
  private _aggregationType?: string; 
  public get aggregationType() {
    return this.getStringAttribute('aggregation_type');
  }
  public set aggregationType(value: string) {
    this._aggregationType = value;
  }
  // Temporarily expose input value. Use with caution.
  public get aggregationTypeInput() {
    return this._aggregationType;
  }

  // field - computed: false, optional: false, required: true
  private _field?: string; 
  public get field() {
    return this.getStringAttribute('field');
  }
  public set field(value: string) {
    this._field = value;
  }
  // Temporarily expose input value. Use with caution.
  public get fieldInput() {
    return this._field;
  }

  // type - computed: false, optional: false, required: true
  private _type?: string; 
  public get type() {
    return this.getStringAttribute('type');
  }
  public set type(value: string) {
    this._type = value;
  }
  // Temporarily expose input value. Use with caution.
  public get typeInput() {
    return this._type;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansFiltersField {
  /**
  * The type of the field. Can be one of ["metadata" "tag" "process_tag"]
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#type Dashboard#type}
  */
  readonly type: string;
  /**
  * The value of the field. When the field type is `metadata`, can be one of ["application_name" "operation_name" "service_name" "subsystem_name" "unspecified"]
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#value Dashboard#value}
  */
  readonly value: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansFiltersFieldToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansFiltersField | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    type: cdktf.stringToTerraform(struct!.type),
    value: cdktf.stringToTerraform(struct!.value),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansFiltersFieldToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansFiltersField | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    type: {
      value: cdktf.stringToHclTerraform(struct!.type),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    value: {
      value: cdktf.stringToHclTerraform(struct!.value),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansFiltersFieldOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansFiltersField | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._type !== undefined) {
      hasAnyValues = true;
      internalValueResult.type = this._type;
    }
    if (this._value !== undefined) {
      hasAnyValues = true;
      internalValueResult.value = this._value;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansFiltersField | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._type = undefined;
      this._value = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._type = value.type;
      this._value = value.value;
    }
  }

  // type - computed: false, optional: false, required: true
  private _type?: string; 
  public get type() {
    return this.getStringAttribute('type');
  }
  public set type(value: string) {
    this._type = value;
  }
  // Temporarily expose input value. Use with caution.
  public get typeInput() {
    return this._type;
  }

  // value - computed: false, optional: false, required: true
  private _value?: string; 
  public get value() {
    return this.getStringAttribute('value');
  }
  public set value(value: string) {
    this._value = value;
  }
  // Temporarily expose input value. Use with caution.
  public get valueInput() {
    return this._value;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansFiltersOperator {
  /**
  * the values to filter by. When the type is `equals`, this field is optional, the filter will match only the selected values, and all the values if not set. When the type is `not_equals`, this field is required, and the filter will match spans without the selected values.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#selected_values Dashboard#selected_values}
  */
  readonly selectedValues?: string[];
  /**
  * The type of the operator. Can be one of `equals` or `not_equals`.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#type Dashboard#type}
  */
  readonly type: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansFiltersOperatorToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansFiltersOperator | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    selected_values: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.selectedValues),
    type: cdktf.stringToTerraform(struct!.type),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansFiltersOperatorToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansFiltersOperator | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    selected_values: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.selectedValues),
      isBlock: false,
      type: "list",
      storageClassType: "stringList",
    },
    type: {
      value: cdktf.stringToHclTerraform(struct!.type),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansFiltersOperatorOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansFiltersOperator | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._selectedValues !== undefined) {
      hasAnyValues = true;
      internalValueResult.selectedValues = this._selectedValues;
    }
    if (this._type !== undefined) {
      hasAnyValues = true;
      internalValueResult.type = this._type;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansFiltersOperator | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._selectedValues = undefined;
      this._type = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._selectedValues = value.selectedValues;
      this._type = value.type;
    }
  }

  // selected_values - computed: false, optional: true, required: false
  private _selectedValues?: string[]; 
  public get selectedValues() {
    return this.getListAttribute('selected_values');
  }
  public set selectedValues(value: string[]) {
    this._selectedValues = value;
  }
  public resetSelectedValues() {
    this._selectedValues = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get selectedValuesInput() {
    return this._selectedValues;
  }

  // type - computed: false, optional: false, required: true
  private _type?: string; 
  public get type() {
    return this.getStringAttribute('type');
  }
  public set type(value: string) {
    this._type = value;
  }
  // Temporarily expose input value. Use with caution.
  public get typeInput() {
    return this._type;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansFilters {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#field Dashboard#field}
  */
  readonly field: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansFiltersField;
  /**
  * Operator to use for filtering.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#operator Dashboard#operator}
  */
  readonly operator: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansFiltersOperator;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansFiltersToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansFilters | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    field: dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansFiltersFieldToTerraform(struct!.field),
    operator: dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansFiltersOperatorToTerraform(struct!.operator),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansFiltersToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansFilters | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    field: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansFiltersFieldToHclTerraform(struct!.field),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansFiltersField",
    },
    operator: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansFiltersOperatorToHclTerraform(struct!.operator),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansFiltersOperator",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansFiltersOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansFilters | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._field?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.field = this._field?.internalValue;
    }
    if (this._operator?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.operator = this._operator?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansFilters | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._field.internalValue = undefined;
      this._operator.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._field.internalValue = value.field;
      this._operator.internalValue = value.operator;
    }
  }

  // field - computed: false, optional: false, required: true
  private _field = new DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansFiltersFieldOutputReference(this, "field");
  public get field() {
    return this._field;
  }
  public putField(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansFiltersField) {
    this._field.internalValue = value;
  }
  // Temporarily expose input value. Use with caution.
  public get fieldInput() {
    return this._field.internalValue;
  }

  // operator - computed: false, optional: false, required: true
  private _operator = new DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansFiltersOperatorOutputReference(this, "operator");
  public get operator() {
    return this._operator;
  }
  public putOperator(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansFiltersOperator) {
    this._operator.internalValue = value;
  }
  // Temporarily expose input value. Use with caution.
  public get operatorInput() {
    return this._operator.internalValue;
  }
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansFiltersList extends cdktf.ComplexList {
  public internalValue? : DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansFilters[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansFiltersOutputReference {
    return new DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansFiltersOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansGroupNames {
  /**
  * The type of the field. Can be one of ["metadata" "tag" "process_tag"]
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#type Dashboard#type}
  */
  readonly type: string;
  /**
  * The value of the field. When the field type is `metadata`, can be one of ["application_name" "operation_name" "service_name" "subsystem_name" "unspecified"]
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#value Dashboard#value}
  */
  readonly value: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansGroupNamesToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansGroupNames | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    type: cdktf.stringToTerraform(struct!.type),
    value: cdktf.stringToTerraform(struct!.value),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansGroupNamesToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansGroupNames | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    type: {
      value: cdktf.stringToHclTerraform(struct!.type),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    value: {
      value: cdktf.stringToHclTerraform(struct!.value),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansGroupNamesOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansGroupNames | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._type !== undefined) {
      hasAnyValues = true;
      internalValueResult.type = this._type;
    }
    if (this._value !== undefined) {
      hasAnyValues = true;
      internalValueResult.value = this._value;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansGroupNames | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._type = undefined;
      this._value = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._type = value.type;
      this._value = value.value;
    }
  }

  // type - computed: false, optional: false, required: true
  private _type?: string; 
  public get type() {
    return this.getStringAttribute('type');
  }
  public set type(value: string) {
    this._type = value;
  }
  // Temporarily expose input value. Use with caution.
  public get typeInput() {
    return this._type;
  }

  // value - computed: false, optional: false, required: true
  private _value?: string; 
  public get value() {
    return this.getStringAttribute('value');
  }
  public set value(value: string) {
    this._value = value;
  }
  // Temporarily expose input value. Use with caution.
  public get valueInput() {
    return this._value;
  }
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansGroupNamesList extends cdktf.ComplexList {
  public internalValue? : DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansGroupNames[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansGroupNamesOutputReference {
    return new DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansGroupNamesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansStackedGroupName {
  /**
  * The type of the field. Can be one of ["metadata" "tag" "process_tag"]
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#type Dashboard#type}
  */
  readonly type: string;
  /**
  * The value of the field. When the field type is `metadata`, can be one of ["application_name" "operation_name" "service_name" "subsystem_name" "unspecified"]
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#value Dashboard#value}
  */
  readonly value: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansStackedGroupNameToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansStackedGroupName | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    type: cdktf.stringToTerraform(struct!.type),
    value: cdktf.stringToTerraform(struct!.value),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansStackedGroupNameToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansStackedGroupName | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    type: {
      value: cdktf.stringToHclTerraform(struct!.type),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    value: {
      value: cdktf.stringToHclTerraform(struct!.value),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansStackedGroupNameOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansStackedGroupName | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._type !== undefined) {
      hasAnyValues = true;
      internalValueResult.type = this._type;
    }
    if (this._value !== undefined) {
      hasAnyValues = true;
      internalValueResult.value = this._value;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansStackedGroupName | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._type = undefined;
      this._value = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._type = value.type;
      this._value = value.value;
    }
  }

  // type - computed: false, optional: false, required: true
  private _type?: string; 
  public get type() {
    return this.getStringAttribute('type');
  }
  public set type(value: string) {
    this._type = value;
  }
  // Temporarily expose input value. Use with caution.
  public get typeInput() {
    return this._type;
  }

  // value - computed: false, optional: false, required: true
  private _value?: string; 
  public get value() {
    return this.getStringAttribute('value');
  }
  public set value(value: string) {
    this._value = value;
  }
  // Temporarily expose input value. Use with caution.
  public get valueInput() {
    return this._value;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansTimeFrameAbsolute {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#end Dashboard#end}
  */
  readonly end: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#start Dashboard#start}
  */
  readonly start: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansTimeFrameAbsoluteToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansTimeFrameAbsolute | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    end: cdktf.stringToTerraform(struct!.end),
    start: cdktf.stringToTerraform(struct!.start),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansTimeFrameAbsoluteToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansTimeFrameAbsolute | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    end: {
      value: cdktf.stringToHclTerraform(struct!.end),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    start: {
      value: cdktf.stringToHclTerraform(struct!.start),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansTimeFrameAbsoluteOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansTimeFrameAbsolute | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._end !== undefined) {
      hasAnyValues = true;
      internalValueResult.end = this._end;
    }
    if (this._start !== undefined) {
      hasAnyValues = true;
      internalValueResult.start = this._start;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansTimeFrameAbsolute | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._end = undefined;
      this._start = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._end = value.end;
      this._start = value.start;
    }
  }

  // end - computed: false, optional: false, required: true
  private _end?: string; 
  public get end() {
    return this.getStringAttribute('end');
  }
  public set end(value: string) {
    this._end = value;
  }
  // Temporarily expose input value. Use with caution.
  public get endInput() {
    return this._end;
  }

  // start - computed: false, optional: false, required: true
  private _start?: string; 
  public get start() {
    return this.getStringAttribute('start');
  }
  public set start(value: string) {
    this._start = value;
  }
  // Temporarily expose input value. Use with caution.
  public get startInput() {
    return this._start;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansTimeFrameRelative {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#duration Dashboard#duration}
  */
  readonly duration: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansTimeFrameRelativeToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansTimeFrameRelative | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    duration: cdktf.stringToTerraform(struct!.duration),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansTimeFrameRelativeToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansTimeFrameRelative | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    duration: {
      value: cdktf.stringToHclTerraform(struct!.duration),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansTimeFrameRelativeOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansTimeFrameRelative | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._duration !== undefined) {
      hasAnyValues = true;
      internalValueResult.duration = this._duration;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansTimeFrameRelative | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._duration = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._duration = value.duration;
    }
  }

  // duration - computed: false, optional: false, required: true
  private _duration?: string; 
  public get duration() {
    return this.getStringAttribute('duration');
  }
  public set duration(value: string) {
    this._duration = value;
  }
  // Temporarily expose input value. Use with caution.
  public get durationInput() {
    return this._duration;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansTimeFrame {
  /**
  * Absolute time frame specifying a fixed start and end time.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#absolute Dashboard#absolute}
  */
  readonly absolute?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansTimeFrameAbsolute;
  /**
  * Relative time frame specifying a duration from the current time.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#relative Dashboard#relative}
  */
  readonly relative?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansTimeFrameRelative;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansTimeFrameToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansTimeFrame | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    absolute: dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansTimeFrameAbsoluteToTerraform(struct!.absolute),
    relative: dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansTimeFrameRelativeToTerraform(struct!.relative),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansTimeFrameToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansTimeFrame | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    absolute: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansTimeFrameAbsoluteToHclTerraform(struct!.absolute),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansTimeFrameAbsolute",
    },
    relative: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansTimeFrameRelativeToHclTerraform(struct!.relative),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansTimeFrameRelative",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansTimeFrameOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansTimeFrame | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._absolute?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.absolute = this._absolute?.internalValue;
    }
    if (this._relative?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.relative = this._relative?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansTimeFrame | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._absolute.internalValue = undefined;
      this._relative.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._absolute.internalValue = value.absolute;
      this._relative.internalValue = value.relative;
    }
  }

  // absolute - computed: false, optional: true, required: false
  private _absolute = new DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansTimeFrameAbsoluteOutputReference(this, "absolute");
  public get absolute() {
    return this._absolute;
  }
  public putAbsolute(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansTimeFrameAbsolute) {
    this._absolute.internalValue = value;
  }
  public resetAbsolute() {
    this._absolute.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get absoluteInput() {
    return this._absolute.internalValue;
  }

  // relative - computed: false, optional: true, required: false
  private _relative = new DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansTimeFrameRelativeOutputReference(this, "relative");
  public get relative() {
    return this._relative;
  }
  public putRelative(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansTimeFrameRelative) {
    this._relative.internalValue = value;
  }
  public resetRelative() {
    this._relative.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get relativeInput() {
    return this._relative.internalValue;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpans {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#aggregation Dashboard#aggregation}
  */
  readonly aggregation?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansAggregation;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#filters Dashboard#filters}
  */
  readonly filters?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansFilters[] | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#group_names Dashboard#group_names}
  */
  readonly groupNames?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansGroupNames[] | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#lucene_query Dashboard#lucene_query}
  */
  readonly luceneQuery?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#stacked_group_name Dashboard#stacked_group_name}
  */
  readonly stackedGroupName?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansStackedGroupName;
  /**
  * Specifies the time frame. Can be either absolute or relative.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#time_frame Dashboard#time_frame}
  */
  readonly timeFrame?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansTimeFrame;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpans | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    aggregation: dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansAggregationToTerraform(struct!.aggregation),
    filters: cdktf.listMapper(dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansFiltersToTerraform, false)(struct!.filters),
    group_names: cdktf.listMapper(dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansGroupNamesToTerraform, false)(struct!.groupNames),
    lucene_query: cdktf.stringToTerraform(struct!.luceneQuery),
    stacked_group_name: dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansStackedGroupNameToTerraform(struct!.stackedGroupName),
    time_frame: dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansTimeFrameToTerraform(struct!.timeFrame),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpans | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    aggregation: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansAggregationToHclTerraform(struct!.aggregation),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansAggregation",
    },
    filters: {
      value: cdktf.listMapperHcl(dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansFiltersToHclTerraform, false)(struct!.filters),
      isBlock: true,
      type: "list",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansFiltersList",
    },
    group_names: {
      value: cdktf.listMapperHcl(dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansGroupNamesToHclTerraform, false)(struct!.groupNames),
      isBlock: true,
      type: "list",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansGroupNamesList",
    },
    lucene_query: {
      value: cdktf.stringToHclTerraform(struct!.luceneQuery),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    stacked_group_name: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansStackedGroupNameToHclTerraform(struct!.stackedGroupName),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansStackedGroupName",
    },
    time_frame: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansTimeFrameToHclTerraform(struct!.timeFrame),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansTimeFrame",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpans | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._aggregation?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.aggregation = this._aggregation?.internalValue;
    }
    if (this._filters?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.filters = this._filters?.internalValue;
    }
    if (this._groupNames?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.groupNames = this._groupNames?.internalValue;
    }
    if (this._luceneQuery !== undefined) {
      hasAnyValues = true;
      internalValueResult.luceneQuery = this._luceneQuery;
    }
    if (this._stackedGroupName?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.stackedGroupName = this._stackedGroupName?.internalValue;
    }
    if (this._timeFrame?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.timeFrame = this._timeFrame?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpans | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._aggregation.internalValue = undefined;
      this._filters.internalValue = undefined;
      this._groupNames.internalValue = undefined;
      this._luceneQuery = undefined;
      this._stackedGroupName.internalValue = undefined;
      this._timeFrame.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._aggregation.internalValue = value.aggregation;
      this._filters.internalValue = value.filters;
      this._groupNames.internalValue = value.groupNames;
      this._luceneQuery = value.luceneQuery;
      this._stackedGroupName.internalValue = value.stackedGroupName;
      this._timeFrame.internalValue = value.timeFrame;
    }
  }

  // aggregation - computed: false, optional: true, required: false
  private _aggregation = new DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansAggregationOutputReference(this, "aggregation");
  public get aggregation() {
    return this._aggregation;
  }
  public putAggregation(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansAggregation) {
    this._aggregation.internalValue = value;
  }
  public resetAggregation() {
    this._aggregation.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get aggregationInput() {
    return this._aggregation.internalValue;
  }

  // filters - computed: false, optional: true, required: false
  private _filters = new DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansFiltersList(this, "filters", false);
  public get filters() {
    return this._filters;
  }
  public putFilters(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansFilters[] | cdktf.IResolvable) {
    this._filters.internalValue = value;
  }
  public resetFilters() {
    this._filters.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get filtersInput() {
    return this._filters.internalValue;
  }

  // group_names - computed: false, optional: true, required: false
  private _groupNames = new DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansGroupNamesList(this, "group_names", false);
  public get groupNames() {
    return this._groupNames;
  }
  public putGroupNames(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansGroupNames[] | cdktf.IResolvable) {
    this._groupNames.internalValue = value;
  }
  public resetGroupNames() {
    this._groupNames.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get groupNamesInput() {
    return this._groupNames.internalValue;
  }

  // lucene_query - computed: false, optional: true, required: false
  private _luceneQuery?: string; 
  public get luceneQuery() {
    return this.getStringAttribute('lucene_query');
  }
  public set luceneQuery(value: string) {
    this._luceneQuery = value;
  }
  public resetLuceneQuery() {
    this._luceneQuery = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get luceneQueryInput() {
    return this._luceneQuery;
  }

  // stacked_group_name - computed: false, optional: true, required: false
  private _stackedGroupName = new DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansStackedGroupNameOutputReference(this, "stacked_group_name");
  public get stackedGroupName() {
    return this._stackedGroupName;
  }
  public putStackedGroupName(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansStackedGroupName) {
    this._stackedGroupName.internalValue = value;
  }
  public resetStackedGroupName() {
    this._stackedGroupName.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get stackedGroupNameInput() {
    return this._stackedGroupName.internalValue;
  }

  // time_frame - computed: false, optional: true, required: false
  private _timeFrame = new DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansTimeFrameOutputReference(this, "time_frame");
  public get timeFrame() {
    return this._timeFrame;
  }
  public putTimeFrame(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansTimeFrame) {
    this._timeFrame.internalValue = value;
  }
  public resetTimeFrame() {
    this._timeFrame.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get timeFrameInput() {
    return this._timeFrame.internalValue;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuery {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#data_prime Dashboard#data_prime}
  */
  readonly dataPrime?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrime;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#logs Dashboard#logs}
  */
  readonly logs?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogs;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#metrics Dashboard#metrics}
  */
  readonly metrics?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetrics;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#spans Dashboard#spans}
  */
  readonly spans?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpans;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuery | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    data_prime: dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeToTerraform(struct!.dataPrime),
    logs: dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsToTerraform(struct!.logs),
    metrics: dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetricsToTerraform(struct!.metrics),
    spans: dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansToTerraform(struct!.spans),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuery | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    data_prime: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeToHclTerraform(struct!.dataPrime),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrime",
    },
    logs: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsToHclTerraform(struct!.logs),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogs",
    },
    metrics: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetricsToHclTerraform(struct!.metrics),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetrics",
    },
    spans: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansToHclTerraform(struct!.spans),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpans",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuery | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._dataPrime?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.dataPrime = this._dataPrime?.internalValue;
    }
    if (this._logs?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.logs = this._logs?.internalValue;
    }
    if (this._metrics?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.metrics = this._metrics?.internalValue;
    }
    if (this._spans?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.spans = this._spans?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuery | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._dataPrime.internalValue = undefined;
      this._logs.internalValue = undefined;
      this._metrics.internalValue = undefined;
      this._spans.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._dataPrime.internalValue = value.dataPrime;
      this._logs.internalValue = value.logs;
      this._metrics.internalValue = value.metrics;
      this._spans.internalValue = value.spans;
    }
  }

  // data_prime - computed: false, optional: true, required: false
  private _dataPrime = new DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrimeOutputReference(this, "data_prime");
  public get dataPrime() {
    return this._dataPrime;
  }
  public putDataPrime(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryDataPrime) {
    this._dataPrime.internalValue = value;
  }
  public resetDataPrime() {
    this._dataPrime.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get dataPrimeInput() {
    return this._dataPrime.internalValue;
  }

  // logs - computed: false, optional: true, required: false
  private _logs = new DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogsOutputReference(this, "logs");
  public get logs() {
    return this._logs;
  }
  public putLogs(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryLogs) {
    this._logs.internalValue = value;
  }
  public resetLogs() {
    this._logs.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get logsInput() {
    return this._logs.internalValue;
  }

  // metrics - computed: false, optional: true, required: false
  private _metrics = new DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetricsOutputReference(this, "metrics");
  public get metrics() {
    return this._metrics;
  }
  public putMetrics(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryMetrics) {
    this._metrics.internalValue = value;
  }
  public resetMetrics() {
    this._metrics.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get metricsInput() {
    return this._metrics.internalValue;
  }

  // spans - computed: false, optional: true, required: false
  private _spans = new DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpansOutputReference(this, "spans");
  public get spans() {
    return this._spans;
  }
  public putSpans(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuerySpans) {
    this._spans.internalValue = value;
  }
  public resetSpans() {
    this._spans.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get spansInput() {
    return this._spans.internalValue;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionPieChartStackDefinition {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#max_slices_per_stack Dashboard#max_slices_per_stack}
  */
  readonly maxSlicesPerStack?: number;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#stack_name_template Dashboard#stack_name_template}
  */
  readonly stackNameTemplate?: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartStackDefinitionToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartStackDefinition | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    max_slices_per_stack: cdktf.numberToTerraform(struct!.maxSlicesPerStack),
    stack_name_template: cdktf.stringToTerraform(struct!.stackNameTemplate),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartStackDefinitionToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartStackDefinition | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    max_slices_per_stack: {
      value: cdktf.numberToHclTerraform(struct!.maxSlicesPerStack),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    stack_name_template: {
      value: cdktf.stringToHclTerraform(struct!.stackNameTemplate),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionPieChartStackDefinitionOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionPieChartStackDefinition | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._maxSlicesPerStack !== undefined) {
      hasAnyValues = true;
      internalValueResult.maxSlicesPerStack = this._maxSlicesPerStack;
    }
    if (this._stackNameTemplate !== undefined) {
      hasAnyValues = true;
      internalValueResult.stackNameTemplate = this._stackNameTemplate;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartStackDefinition | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._maxSlicesPerStack = undefined;
      this._stackNameTemplate = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._maxSlicesPerStack = value.maxSlicesPerStack;
      this._stackNameTemplate = value.stackNameTemplate;
    }
  }

  // max_slices_per_stack - computed: false, optional: true, required: false
  private _maxSlicesPerStack?: number; 
  public get maxSlicesPerStack() {
    return this.getNumberAttribute('max_slices_per_stack');
  }
  public set maxSlicesPerStack(value: number) {
    this._maxSlicesPerStack = value;
  }
  public resetMaxSlicesPerStack() {
    this._maxSlicesPerStack = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get maxSlicesPerStackInput() {
    return this._maxSlicesPerStack;
  }

  // stack_name_template - computed: false, optional: true, required: false
  private _stackNameTemplate?: string; 
  public get stackNameTemplate() {
    return this.getStringAttribute('stack_name_template');
  }
  public set stackNameTemplate(value: string) {
    this._stackNameTemplate = value;
  }
  public resetStackNameTemplate() {
    this._stackNameTemplate = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get stackNameTemplateInput() {
    return this._stackNameTemplate;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinitionPieChart {
  /**
  * The color scheme. Can be one of classic, severity, cold, negative, green, red, blue.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#color_scheme Dashboard#color_scheme}
  */
  readonly colorScheme?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#data_mode_type Dashboard#data_mode_type}
  */
  readonly dataModeType?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#group_name_template Dashboard#group_name_template}
  */
  readonly groupNameTemplate?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#label_definition Dashboard#label_definition}
  */
  readonly labelDefinition: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartLabelDefinition;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#max_slices_per_chart Dashboard#max_slices_per_chart}
  */
  readonly maxSlicesPerChart?: number;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#min_slice_percentage Dashboard#min_slice_percentage}
  */
  readonly minSlicePercentage?: number;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#query Dashboard#query}
  */
  readonly query: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuery;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#show_legend Dashboard#show_legend}
  */
  readonly showLegend?: boolean | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#stack_definition Dashboard#stack_definition}
  */
  readonly stackDefinition?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartStackDefinition;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#unit Dashboard#unit}
  */
  readonly unit?: string;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChart | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    color_scheme: cdktf.stringToTerraform(struct!.colorScheme),
    data_mode_type: cdktf.stringToTerraform(struct!.dataModeType),
    group_name_template: cdktf.stringToTerraform(struct!.groupNameTemplate),
    label_definition: dashboardLayoutSectionsRowsWidgetsDefinitionPieChartLabelDefinitionToTerraform(struct!.labelDefinition),
    max_slices_per_chart: cdktf.numberToTerraform(struct!.maxSlicesPerChart),
    min_slice_percentage: cdktf.numberToTerraform(struct!.minSlicePercentage),
    query: dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryToTerraform(struct!.query),
    show_legend: cdktf.booleanToTerraform(struct!.showLegend),
    stack_definition: dashboardLayoutSectionsRowsWidgetsDefinitionPieChartStackDefinitionToTerraform(struct!.stackDefinition),
    unit: cdktf.stringToTerraform(struct!.unit),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionPieChartToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChart | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    color_scheme: {
      value: cdktf.stringToHclTerraform(struct!.colorScheme),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    data_mode_type: {
      value: cdktf.stringToHclTerraform(struct!.dataModeType),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    group_name_template: {
      value: cdktf.stringToHclTerraform(struct!.groupNameTemplate),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    label_definition: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionPieChartLabelDefinitionToHclTerraform(struct!.labelDefinition),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionPieChartLabelDefinition",
    },
    max_slices_per_chart: {
      value: cdktf.numberToHclTerraform(struct!.maxSlicesPerChart),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    min_slice_percentage: {
      value: cdktf.numberToHclTerraform(struct!.minSlicePercentage),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    query: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryToHclTerraform(struct!.query),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuery",
    },
    show_legend: {
      value: cdktf.booleanToHclTerraform(struct!.showLegend),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    stack_definition: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionPieChartStackDefinitionToHclTerraform(struct!.stackDefinition),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionPieChartStackDefinition",
    },
    unit: {
      value: cdktf.stringToHclTerraform(struct!.unit),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionPieChartOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinitionPieChart | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._colorScheme !== undefined) {
      hasAnyValues = true;
      internalValueResult.colorScheme = this._colorScheme;
    }
    if (this._dataModeType !== undefined) {
      hasAnyValues = true;
      internalValueResult.dataModeType = this._dataModeType;
    }
    if (this._groupNameTemplate !== undefined) {
      hasAnyValues = true;
      internalValueResult.groupNameTemplate = this._groupNameTemplate;
    }
    if (this._labelDefinition?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.labelDefinition = this._labelDefinition?.internalValue;
    }
    if (this._maxSlicesPerChart !== undefined) {
      hasAnyValues = true;
      internalValueResult.maxSlicesPerChart = this._maxSlicesPerChart;
    }
    if (this._minSlicePercentage !== undefined) {
      hasAnyValues = true;
      internalValueResult.minSlicePercentage = this._minSlicePercentage;
    }
    if (this._query?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.query = this._query?.internalValue;
    }
    if (this._showLegend !== undefined) {
      hasAnyValues = true;
      internalValueResult.showLegend = this._showLegend;
    }
    if (this._stackDefinition?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.stackDefinition = this._stackDefinition?.internalValue;
    }
    if (this._unit !== undefined) {
      hasAnyValues = true;
      internalValueResult.unit = this._unit;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChart | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._colorScheme = undefined;
      this._dataModeType = undefined;
      this._groupNameTemplate = undefined;
      this._labelDefinition.internalValue = undefined;
      this._maxSlicesPerChart = undefined;
      this._minSlicePercentage = undefined;
      this._query.internalValue = undefined;
      this._showLegend = undefined;
      this._stackDefinition.internalValue = undefined;
      this._unit = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._colorScheme = value.colorScheme;
      this._dataModeType = value.dataModeType;
      this._groupNameTemplate = value.groupNameTemplate;
      this._labelDefinition.internalValue = value.labelDefinition;
      this._maxSlicesPerChart = value.maxSlicesPerChart;
      this._minSlicePercentage = value.minSlicePercentage;
      this._query.internalValue = value.query;
      this._showLegend = value.showLegend;
      this._stackDefinition.internalValue = value.stackDefinition;
      this._unit = value.unit;
    }
  }

  // color_scheme - computed: false, optional: true, required: false
  private _colorScheme?: string; 
  public get colorScheme() {
    return this.getStringAttribute('color_scheme');
  }
  public set colorScheme(value: string) {
    this._colorScheme = value;
  }
  public resetColorScheme() {
    this._colorScheme = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get colorSchemeInput() {
    return this._colorScheme;
  }

  // data_mode_type - computed: true, optional: true, required: false
  private _dataModeType?: string; 
  public get dataModeType() {
    return this.getStringAttribute('data_mode_type');
  }
  public set dataModeType(value: string) {
    this._dataModeType = value;
  }
  public resetDataModeType() {
    this._dataModeType = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get dataModeTypeInput() {
    return this._dataModeType;
  }

  // group_name_template - computed: false, optional: true, required: false
  private _groupNameTemplate?: string; 
  public get groupNameTemplate() {
    return this.getStringAttribute('group_name_template');
  }
  public set groupNameTemplate(value: string) {
    this._groupNameTemplate = value;
  }
  public resetGroupNameTemplate() {
    this._groupNameTemplate = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get groupNameTemplateInput() {
    return this._groupNameTemplate;
  }

  // label_definition - computed: false, optional: false, required: true
  private _labelDefinition = new DashboardLayoutSectionsRowsWidgetsDefinitionPieChartLabelDefinitionOutputReference(this, "label_definition");
  public get labelDefinition() {
    return this._labelDefinition;
  }
  public putLabelDefinition(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartLabelDefinition) {
    this._labelDefinition.internalValue = value;
  }
  // Temporarily expose input value. Use with caution.
  public get labelDefinitionInput() {
    return this._labelDefinition.internalValue;
  }

  // max_slices_per_chart - computed: false, optional: true, required: false
  private _maxSlicesPerChart?: number; 
  public get maxSlicesPerChart() {
    return this.getNumberAttribute('max_slices_per_chart');
  }
  public set maxSlicesPerChart(value: number) {
    this._maxSlicesPerChart = value;
  }
  public resetMaxSlicesPerChart() {
    this._maxSlicesPerChart = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get maxSlicesPerChartInput() {
    return this._maxSlicesPerChart;
  }

  // min_slice_percentage - computed: false, optional: true, required: false
  private _minSlicePercentage?: number; 
  public get minSlicePercentage() {
    return this.getNumberAttribute('min_slice_percentage');
  }
  public set minSlicePercentage(value: number) {
    this._minSlicePercentage = value;
  }
  public resetMinSlicePercentage() {
    this._minSlicePercentage = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get minSlicePercentageInput() {
    return this._minSlicePercentage;
  }

  // query - computed: false, optional: false, required: true
  private _query = new DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQueryOutputReference(this, "query");
  public get query() {
    return this._query;
  }
  public putQuery(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartQuery) {
    this._query.internalValue = value;
  }
  // Temporarily expose input value. Use with caution.
  public get queryInput() {
    return this._query.internalValue;
  }

  // show_legend - computed: true, optional: true, required: false
  private _showLegend?: boolean | cdktf.IResolvable; 
  public get showLegend() {
    return this.getBooleanAttribute('show_legend');
  }
  public set showLegend(value: boolean | cdktf.IResolvable) {
    this._showLegend = value;
  }
  public resetShowLegend() {
    this._showLegend = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get showLegendInput() {
    return this._showLegend;
  }

  // stack_definition - computed: false, optional: true, required: false
  private _stackDefinition = new DashboardLayoutSectionsRowsWidgetsDefinitionPieChartStackDefinitionOutputReference(this, "stack_definition");
  public get stackDefinition() {
    return this._stackDefinition;
  }
  public putStackDefinition(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChartStackDefinition) {
    this._stackDefinition.internalValue = value;
  }
  public resetStackDefinition() {
    this._stackDefinition.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get stackDefinitionInput() {
    return this._stackDefinition.internalValue;
  }

  // unit - computed: true, optional: true, required: false
  private _unit?: string; 
  public get unit() {
    return this.getStringAttribute('unit');
  }
  public set unit(value: string) {
    this._unit = value;
  }
  public resetUnit() {
    this._unit = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get unitInput() {
    return this._unit;
  }
}
export interface DashboardLayoutSectionsRowsWidgetsDefinition {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#bar_chart Dashboard#bar_chart}
  */
  readonly barChart?: DashboardLayoutSectionsRowsWidgetsDefinitionBarChart;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#data_table Dashboard#data_table}
  */
  readonly dataTable?: DashboardLayoutSectionsRowsWidgetsDefinitionDataTable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#gauge Dashboard#gauge}
  */
  readonly gauge?: DashboardLayoutSectionsRowsWidgetsDefinitionGauge;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#hexagon Dashboard#hexagon}
  */
  readonly hexagon?: DashboardLayoutSectionsRowsWidgetsDefinitionHexagon;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#horizontal_bar_chart Dashboard#horizontal_bar_chart}
  */
  readonly horizontalBarChart?: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChart;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#line_chart Dashboard#line_chart}
  */
  readonly lineChart?: DashboardLayoutSectionsRowsWidgetsDefinitionLineChart;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#markdown Dashboard#markdown}
  */
  readonly markdown?: DashboardLayoutSectionsRowsWidgetsDefinitionMarkdown;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#pie_chart Dashboard#pie_chart}
  */
  readonly pieChart?: DashboardLayoutSectionsRowsWidgetsDefinitionPieChart;
}

export function dashboardLayoutSectionsRowsWidgetsDefinitionToTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinition | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    bar_chart: dashboardLayoutSectionsRowsWidgetsDefinitionBarChartToTerraform(struct!.barChart),
    data_table: dashboardLayoutSectionsRowsWidgetsDefinitionDataTableToTerraform(struct!.dataTable),
    gauge: dashboardLayoutSectionsRowsWidgetsDefinitionGaugeToTerraform(struct!.gauge),
    hexagon: dashboardLayoutSectionsRowsWidgetsDefinitionHexagonToTerraform(struct!.hexagon),
    horizontal_bar_chart: dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartToTerraform(struct!.horizontalBarChart),
    line_chart: dashboardLayoutSectionsRowsWidgetsDefinitionLineChartToTerraform(struct!.lineChart),
    markdown: dashboardLayoutSectionsRowsWidgetsDefinitionMarkdownToTerraform(struct!.markdown),
    pie_chart: dashboardLayoutSectionsRowsWidgetsDefinitionPieChartToTerraform(struct!.pieChart),
  }
}


export function dashboardLayoutSectionsRowsWidgetsDefinitionToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgetsDefinition | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    bar_chart: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionBarChartToHclTerraform(struct!.barChart),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionBarChart",
    },
    data_table: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionDataTableToHclTerraform(struct!.dataTable),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionDataTable",
    },
    gauge: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionGaugeToHclTerraform(struct!.gauge),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionGauge",
    },
    hexagon: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionHexagonToHclTerraform(struct!.hexagon),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionHexagon",
    },
    horizontal_bar_chart: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartToHclTerraform(struct!.horizontalBarChart),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChart",
    },
    line_chart: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionLineChartToHclTerraform(struct!.lineChart),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionLineChart",
    },
    markdown: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionMarkdownToHclTerraform(struct!.markdown),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionMarkdown",
    },
    pie_chart: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionPieChartToHclTerraform(struct!.pieChart),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinitionPieChart",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsDefinitionOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgetsDefinition | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._barChart?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.barChart = this._barChart?.internalValue;
    }
    if (this._dataTable?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.dataTable = this._dataTable?.internalValue;
    }
    if (this._gauge?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.gauge = this._gauge?.internalValue;
    }
    if (this._hexagon?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.hexagon = this._hexagon?.internalValue;
    }
    if (this._horizontalBarChart?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.horizontalBarChart = this._horizontalBarChart?.internalValue;
    }
    if (this._lineChart?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.lineChart = this._lineChart?.internalValue;
    }
    if (this._markdown?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.markdown = this._markdown?.internalValue;
    }
    if (this._pieChart?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.pieChart = this._pieChart?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgetsDefinition | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._barChart.internalValue = undefined;
      this._dataTable.internalValue = undefined;
      this._gauge.internalValue = undefined;
      this._hexagon.internalValue = undefined;
      this._horizontalBarChart.internalValue = undefined;
      this._lineChart.internalValue = undefined;
      this._markdown.internalValue = undefined;
      this._pieChart.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._barChart.internalValue = value.barChart;
      this._dataTable.internalValue = value.dataTable;
      this._gauge.internalValue = value.gauge;
      this._hexagon.internalValue = value.hexagon;
      this._horizontalBarChart.internalValue = value.horizontalBarChart;
      this._lineChart.internalValue = value.lineChart;
      this._markdown.internalValue = value.markdown;
      this._pieChart.internalValue = value.pieChart;
    }
  }

  // bar_chart - computed: false, optional: true, required: false
  private _barChart = new DashboardLayoutSectionsRowsWidgetsDefinitionBarChartOutputReference(this, "bar_chart");
  public get barChart() {
    return this._barChart;
  }
  public putBarChart(value: DashboardLayoutSectionsRowsWidgetsDefinitionBarChart) {
    this._barChart.internalValue = value;
  }
  public resetBarChart() {
    this._barChart.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get barChartInput() {
    return this._barChart.internalValue;
  }

  // data_table - computed: false, optional: true, required: false
  private _dataTable = new DashboardLayoutSectionsRowsWidgetsDefinitionDataTableOutputReference(this, "data_table");
  public get dataTable() {
    return this._dataTable;
  }
  public putDataTable(value: DashboardLayoutSectionsRowsWidgetsDefinitionDataTable) {
    this._dataTable.internalValue = value;
  }
  public resetDataTable() {
    this._dataTable.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get dataTableInput() {
    return this._dataTable.internalValue;
  }

  // gauge - computed: false, optional: true, required: false
  private _gauge = new DashboardLayoutSectionsRowsWidgetsDefinitionGaugeOutputReference(this, "gauge");
  public get gauge() {
    return this._gauge;
  }
  public putGauge(value: DashboardLayoutSectionsRowsWidgetsDefinitionGauge) {
    this._gauge.internalValue = value;
  }
  public resetGauge() {
    this._gauge.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get gaugeInput() {
    return this._gauge.internalValue;
  }

  // hexagon - computed: false, optional: true, required: false
  private _hexagon = new DashboardLayoutSectionsRowsWidgetsDefinitionHexagonOutputReference(this, "hexagon");
  public get hexagon() {
    return this._hexagon;
  }
  public putHexagon(value: DashboardLayoutSectionsRowsWidgetsDefinitionHexagon) {
    this._hexagon.internalValue = value;
  }
  public resetHexagon() {
    this._hexagon.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hexagonInput() {
    return this._hexagon.internalValue;
  }

  // horizontal_bar_chart - computed: false, optional: true, required: false
  private _horizontalBarChart = new DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChartOutputReference(this, "horizontal_bar_chart");
  public get horizontalBarChart() {
    return this._horizontalBarChart;
  }
  public putHorizontalBarChart(value: DashboardLayoutSectionsRowsWidgetsDefinitionHorizontalBarChart) {
    this._horizontalBarChart.internalValue = value;
  }
  public resetHorizontalBarChart() {
    this._horizontalBarChart.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get horizontalBarChartInput() {
    return this._horizontalBarChart.internalValue;
  }

  // line_chart - computed: false, optional: true, required: false
  private _lineChart = new DashboardLayoutSectionsRowsWidgetsDefinitionLineChartOutputReference(this, "line_chart");
  public get lineChart() {
    return this._lineChart;
  }
  public putLineChart(value: DashboardLayoutSectionsRowsWidgetsDefinitionLineChart) {
    this._lineChart.internalValue = value;
  }
  public resetLineChart() {
    this._lineChart.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get lineChartInput() {
    return this._lineChart.internalValue;
  }

  // markdown - computed: false, optional: true, required: false
  private _markdown = new DashboardLayoutSectionsRowsWidgetsDefinitionMarkdownOutputReference(this, "markdown");
  public get markdown() {
    return this._markdown;
  }
  public putMarkdown(value: DashboardLayoutSectionsRowsWidgetsDefinitionMarkdown) {
    this._markdown.internalValue = value;
  }
  public resetMarkdown() {
    this._markdown.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get markdownInput() {
    return this._markdown.internalValue;
  }

  // pie_chart - computed: false, optional: true, required: false
  private _pieChart = new DashboardLayoutSectionsRowsWidgetsDefinitionPieChartOutputReference(this, "pie_chart");
  public get pieChart() {
    return this._pieChart;
  }
  public putPieChart(value: DashboardLayoutSectionsRowsWidgetsDefinitionPieChart) {
    this._pieChart.internalValue = value;
  }
  public resetPieChart() {
    this._pieChart.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get pieChartInput() {
    return this._pieChart.internalValue;
  }
}
export interface DashboardLayoutSectionsRowsWidgets {
  /**
  * The widget definition. Can contain one of [data_table gauge hexagon line_chart pie_chart bar_chart horizontal_bar_chart markdown]
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#definition Dashboard#definition}
  */
  readonly definition: DashboardLayoutSectionsRowsWidgetsDefinition;
  /**
  * Widget description.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#description Dashboard#description}
  */
  readonly description?: string;
  /**
  * Widget title. Required for all widgets except markdown.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#title Dashboard#title}
  */
  readonly title?: string;
  /**
  * The width of the chart.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#width Dashboard#width}
  */
  readonly width?: number;
}

export function dashboardLayoutSectionsRowsWidgetsToTerraform(struct?: DashboardLayoutSectionsRowsWidgets | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    definition: dashboardLayoutSectionsRowsWidgetsDefinitionToTerraform(struct!.definition),
    description: cdktf.stringToTerraform(struct!.description),
    title: cdktf.stringToTerraform(struct!.title),
    width: cdktf.numberToTerraform(struct!.width),
  }
}


export function dashboardLayoutSectionsRowsWidgetsToHclTerraform(struct?: DashboardLayoutSectionsRowsWidgets | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    definition: {
      value: dashboardLayoutSectionsRowsWidgetsDefinitionToHclTerraform(struct!.definition),
      isBlock: true,
      type: "struct",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsDefinition",
    },
    description: {
      value: cdktf.stringToHclTerraform(struct!.description),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    title: {
      value: cdktf.stringToHclTerraform(struct!.title),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    width: {
      value: cdktf.numberToHclTerraform(struct!.width),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsWidgetsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DashboardLayoutSectionsRowsWidgets | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._definition?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.definition = this._definition?.internalValue;
    }
    if (this._description !== undefined) {
      hasAnyValues = true;
      internalValueResult.description = this._description;
    }
    if (this._title !== undefined) {
      hasAnyValues = true;
      internalValueResult.title = this._title;
    }
    if (this._width !== undefined) {
      hasAnyValues = true;
      internalValueResult.width = this._width;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRowsWidgets | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._definition.internalValue = undefined;
      this._description = undefined;
      this._title = undefined;
      this._width = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._definition.internalValue = value.definition;
      this._description = value.description;
      this._title = value.title;
      this._width = value.width;
    }
  }

  // definition - computed: false, optional: false, required: true
  private _definition = new DashboardLayoutSectionsRowsWidgetsDefinitionOutputReference(this, "definition");
  public get definition() {
    return this._definition;
  }
  public putDefinition(value: DashboardLayoutSectionsRowsWidgetsDefinition) {
    this._definition.internalValue = value;
  }
  // Temporarily expose input value. Use with caution.
  public get definitionInput() {
    return this._definition.internalValue;
  }

  // description - computed: false, optional: true, required: false
  private _description?: string; 
  public get description() {
    return this.getStringAttribute('description');
  }
  public set description(value: string) {
    this._description = value;
  }
  public resetDescription() {
    this._description = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get descriptionInput() {
    return this._description;
  }

  // id - computed: true, optional: false, required: false
  public get id() {
    return this.getStringAttribute('id');
  }

  // title - computed: false, optional: true, required: false
  private _title?: string; 
  public get title() {
    return this.getStringAttribute('title');
  }
  public set title(value: string) {
    this._title = value;
  }
  public resetTitle() {
    this._title = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get titleInput() {
    return this._title;
  }

  // width - computed: true, optional: true, required: false
  private _width?: number; 
  public get width() {
    return this.getNumberAttribute('width');
  }
  public set width(value: number) {
    this._width = value;
  }
  public resetWidth() {
    this._width = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get widthInput() {
    return this._width;
  }
}

export class DashboardLayoutSectionsRowsWidgetsList extends cdktf.ComplexList {
  public internalValue? : DashboardLayoutSectionsRowsWidgets[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DashboardLayoutSectionsRowsWidgetsOutputReference {
    return new DashboardLayoutSectionsRowsWidgetsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DashboardLayoutSectionsRows {
  /**
  * The height of the row.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#height Dashboard#height}
  */
  readonly height: number;
  /**
  * The list of widgets to display in the dashboard.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/coralogix/coralogix/2.2.3/docs/resources/dashboard#widgets Dashboard#widgets}
  */
  readonly widgets?: DashboardLayoutSectionsRowsWidgets[] | cdktf.IResolvable;
}

export function dashboardLayoutSectionsRowsToTerraform(struct?: DashboardLayoutSectionsRows | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    height: cdktf.numberToTerraform(struct!.height),
    widgets: cdktf.listMapper(dashboardLayoutSectionsRowsWidgetsToTerraform, false)(struct!.widgets),
  }
}


export function dashboardLayoutSectionsRowsToHclTerraform(struct?: DashboardLayoutSectionsRows | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    height: {
      value: cdktf.numberToHclTerraform(struct!.height),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    widgets: {
      value: cdktf.listMapperHcl(dashboardLayoutSectionsRowsWidgetsToHclTerraform, false)(struct!.widgets),
      isBlock: true,
      type: "list",
      storageClassType: "DashboardLayoutSectionsRowsWidgetsList",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DashboardLayoutSectionsRowsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DashboardLayoutSectionsRows | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._height !== undefined) {
      hasAnyValues = true;
      internalValueResult.height = this._height;
    }
    if (this._widgets?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.widgets = this._widgets?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DashboardLayoutSectionsRows | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._height = undefined;
      this._widgets.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._height = value.height;
      this._widgets.internalValue = value.widgets;
    }
  }

  // height - computed: false, optional: false, required: true
  private _height?: number; 
  public get height() {
    return this.getNumberAttribute('height');
  }
  public set height(value: number) {
    this._height = value;
  }
  // Temporarily expose input value. Use with caution.
  public get heightInput() {
    return this._height;
  }

  // id - computed: true, optional: false, required: false
  public get id() {
    return this.getStringAttribute('id');
  }

  // widgets - computed: false, optional: true, required: false
  private _widgets = new DashboardLayoutSectionsRowsWidgetsList(this, "widgets", false);
  public get widgets() {
    return this._widgets;
  }
  public putWidgets(value: DashboardLayoutSectionsRowsWidgets[] | cdktf.IResolvable) {
    this._widgets.internalValue = value;
  }
  public resetWidgets() {
    this._widgets.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get widgetsInput() {
    return this._widgets.internalValue;
  }
}

export class DashboardLayoutSectionsRowsList extends cdktf.ComplexList {
  public internalValue? : DashboardLayoutSectionsRows[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DashboardLayoutSectionsRowsOutputReference {
    return new DashboardLayoutSectionsRowsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
