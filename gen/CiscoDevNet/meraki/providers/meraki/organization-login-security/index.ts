// https://registry.terraform.io/providers/ciscodevnet/meraki/1.7.1/docs/resources/organization_login_security
// generated from terraform resource schema

import { Construct } from 'constructs';
import * as cdktf from 'cdktf';

// Configuration

export interface OrganizationLoginSecurityConfig extends cdktf.TerraformMetaArguments {
  /**
  * Number of consecutive failed login attempts after which users` accounts will be locked.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/ciscodevnet/meraki/1.7.1/docs/resources/organization_login_security#account_lockout_attempts OrganizationLoginSecurity#account_lockout_attempts}
  */
  readonly accountLockoutAttempts?: number;
  /**
  * Boolean indicating whether the organization will restrict API key (not Dashboard GUI) usage to a specific list of IP addresses or CIDR ranges.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/ciscodevnet/meraki/1.7.1/docs/resources/organization_login_security#api_authentication_ip_restrictions_for_keys_enabled OrganizationLoginSecurity#api_authentication_ip_restrictions_for_keys_enabled}
  */
  readonly apiAuthenticationIpRestrictionsForKeysEnabled?: boolean | cdktf.IResolvable;
  /**
  * List of acceptable IP ranges. Entries can be single IP addresses, IP address ranges, and CIDR subnets.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/ciscodevnet/meraki/1.7.1/docs/resources/organization_login_security#api_authentication_ip_restrictions_for_keys_ranges OrganizationLoginSecurity#api_authentication_ip_restrictions_for_keys_ranges}
  */
  readonly apiAuthenticationIpRestrictionsForKeysRanges?: string[];
  /**
  * Boolean indicating whether users` Dashboard accounts will be locked out after a specified number of consecutive failed login attempts.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/ciscodevnet/meraki/1.7.1/docs/resources/organization_login_security#enforce_account_lockout OrganizationLoginSecurity#enforce_account_lockout}
  */
  readonly enforceAccountLockout?: boolean | cdktf.IResolvable;
  /**
  * Boolean indicating whether users, when setting a new password, are forced to choose a new password that is different from any past passwords.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/ciscodevnet/meraki/1.7.1/docs/resources/organization_login_security#enforce_different_passwords OrganizationLoginSecurity#enforce_different_passwords}
  */
  readonly enforceDifferentPasswords?: boolean | cdktf.IResolvable;
  /**
  * Boolean indicating whether users will be logged out after being idle for the specified number of minutes.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/ciscodevnet/meraki/1.7.1/docs/resources/organization_login_security#enforce_idle_timeout OrganizationLoginSecurity#enforce_idle_timeout}
  */
  readonly enforceIdleTimeout?: boolean | cdktf.IResolvable;
  /**
  * Boolean indicating whether organization will restrict access to Dashboard (including the API) from certain IP addresses.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/ciscodevnet/meraki/1.7.1/docs/resources/organization_login_security#enforce_login_ip_ranges OrganizationLoginSecurity#enforce_login_ip_ranges}
  */
  readonly enforceLoginIpRanges?: boolean | cdktf.IResolvable;
  /**
  * Boolean indicating whether users are forced to change their password every X number of days.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/ciscodevnet/meraki/1.7.1/docs/resources/organization_login_security#enforce_password_expiration OrganizationLoginSecurity#enforce_password_expiration}
  */
  readonly enforcePasswordExpiration?: boolean | cdktf.IResolvable;
  /**
  * Boolean indicating whether users will be forced to choose strong passwords for their accounts. Strong passwords are at least 8 characters that contain 3 of the following: number, uppercase letter, lowercase letter, and symbol
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/ciscodevnet/meraki/1.7.1/docs/resources/organization_login_security#enforce_strong_passwords OrganizationLoginSecurity#enforce_strong_passwords}
  */
  readonly enforceStrongPasswords?: boolean | cdktf.IResolvable;
  /**
  * Boolean indicating whether users in this organization will be required to use an extra verification code when logging in to Dashboard. This code will be sent to their mobile phone via SMS, or can be generated by the authenticator application.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/ciscodevnet/meraki/1.7.1/docs/resources/organization_login_security#enforce_two_factor_auth OrganizationLoginSecurity#enforce_two_factor_auth}
  */
  readonly enforceTwoFactorAuth?: boolean | cdktf.IResolvable;
  /**
  * Number of minutes users can remain idle before being logged out of their accounts.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/ciscodevnet/meraki/1.7.1/docs/resources/organization_login_security#idle_timeout_minutes OrganizationLoginSecurity#idle_timeout_minutes}
  */
  readonly idleTimeoutMinutes?: number;
  /**
  * List of acceptable IP ranges. Entries can be single IP addresses, IP address ranges, and CIDR subnets.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/ciscodevnet/meraki/1.7.1/docs/resources/organization_login_security#login_ip_ranges OrganizationLoginSecurity#login_ip_ranges}
  */
  readonly loginIpRanges?: string[];
  /**
  * Minimum number of characters required in admins` passwords.
  *   - Range: `8`-`16`
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/ciscodevnet/meraki/1.7.1/docs/resources/organization_login_security#minimum_password_length OrganizationLoginSecurity#minimum_password_length}
  */
  readonly minimumPasswordLength?: number;
  /**
  * Number of recent passwords that new password must be distinct from.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/ciscodevnet/meraki/1.7.1/docs/resources/organization_login_security#num_different_passwords OrganizationLoginSecurity#num_different_passwords}
  */
  readonly numDifferentPasswords?: number;
  /**
  * Organization ID
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/ciscodevnet/meraki/1.7.1/docs/resources/organization_login_security#organization_id OrganizationLoginSecurity#organization_id}
  */
  readonly organizationId: string;
  /**
  * Number of days after which users will be forced to change their password.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/ciscodevnet/meraki/1.7.1/docs/resources/organization_login_security#password_expiration_days OrganizationLoginSecurity#password_expiration_days}
  */
  readonly passwordExpirationDays?: number;
}

/**
* Represents a {@link https://registry.terraform.io/providers/ciscodevnet/meraki/1.7.1/docs/resources/organization_login_security meraki_organization_login_security}
*/
export class OrganizationLoginSecurity extends cdktf.TerraformResource {

  // =================
  // STATIC PROPERTIES
  // =================
  public static readonly tfResourceType = "meraki_organization_login_security";

  // ==============
  // STATIC Methods
  // ==============
  /**
  * Generates CDKTF code for importing a OrganizationLoginSecurity resource upon running "cdktf plan <stack-name>"
  * @param scope The scope in which to define this construct
  * @param importToId The construct id used in the generated config for the OrganizationLoginSecurity to import
  * @param importFromId The id of the existing OrganizationLoginSecurity that should be imported. Refer to the {@link https://registry.terraform.io/providers/ciscodevnet/meraki/1.7.1/docs/resources/organization_login_security#import import section} in the documentation of this resource for the id to use
  * @param provider? Optional instance of the provider where the OrganizationLoginSecurity to import is found
  */
  public static generateConfigForImport(scope: Construct, importToId: string, importFromId: string, provider?: cdktf.TerraformProvider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "meraki_organization_login_security", importId: importFromId, provider });
      }

  // ===========
  // INITIALIZER
  // ===========

  /**
  * Create a new {@link https://registry.terraform.io/providers/ciscodevnet/meraki/1.7.1/docs/resources/organization_login_security meraki_organization_login_security} Resource
  *
  * @param scope The scope in which to define this construct
  * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
  * @param options OrganizationLoginSecurityConfig
  */
  public constructor(scope: Construct, id: string, config: OrganizationLoginSecurityConfig) {
    super(scope, id, {
      terraformResourceType: 'meraki_organization_login_security',
      terraformGeneratorMetadata: {
        providerName: 'meraki',
        providerVersion: '1.7.1'
      },
      provider: config.provider,
      dependsOn: config.dependsOn,
      count: config.count,
      lifecycle: config.lifecycle,
      provisioners: config.provisioners,
      connection: config.connection,
      forEach: config.forEach
    });
    this._accountLockoutAttempts = config.accountLockoutAttempts;
    this._apiAuthenticationIpRestrictionsForKeysEnabled = config.apiAuthenticationIpRestrictionsForKeysEnabled;
    this._apiAuthenticationIpRestrictionsForKeysRanges = config.apiAuthenticationIpRestrictionsForKeysRanges;
    this._enforceAccountLockout = config.enforceAccountLockout;
    this._enforceDifferentPasswords = config.enforceDifferentPasswords;
    this._enforceIdleTimeout = config.enforceIdleTimeout;
    this._enforceLoginIpRanges = config.enforceLoginIpRanges;
    this._enforcePasswordExpiration = config.enforcePasswordExpiration;
    this._enforceStrongPasswords = config.enforceStrongPasswords;
    this._enforceTwoFactorAuth = config.enforceTwoFactorAuth;
    this._idleTimeoutMinutes = config.idleTimeoutMinutes;
    this._loginIpRanges = config.loginIpRanges;
    this._minimumPasswordLength = config.minimumPasswordLength;
    this._numDifferentPasswords = config.numDifferentPasswords;
    this._organizationId = config.organizationId;
    this._passwordExpirationDays = config.passwordExpirationDays;
  }

  // ==========
  // ATTRIBUTES
  // ==========

  // account_lockout_attempts - computed: false, optional: true, required: false
  private _accountLockoutAttempts?: number; 
  public get accountLockoutAttempts() {
    return this.getNumberAttribute('account_lockout_attempts');
  }
  public set accountLockoutAttempts(value: number) {
    this._accountLockoutAttempts = value;
  }
  public resetAccountLockoutAttempts() {
    this._accountLockoutAttempts = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get accountLockoutAttemptsInput() {
    return this._accountLockoutAttempts;
  }

  // api_authentication_ip_restrictions_for_keys_enabled - computed: false, optional: true, required: false
  private _apiAuthenticationIpRestrictionsForKeysEnabled?: boolean | cdktf.IResolvable; 
  public get apiAuthenticationIpRestrictionsForKeysEnabled() {
    return this.getBooleanAttribute('api_authentication_ip_restrictions_for_keys_enabled');
  }
  public set apiAuthenticationIpRestrictionsForKeysEnabled(value: boolean | cdktf.IResolvable) {
    this._apiAuthenticationIpRestrictionsForKeysEnabled = value;
  }
  public resetApiAuthenticationIpRestrictionsForKeysEnabled() {
    this._apiAuthenticationIpRestrictionsForKeysEnabled = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get apiAuthenticationIpRestrictionsForKeysEnabledInput() {
    return this._apiAuthenticationIpRestrictionsForKeysEnabled;
  }

  // api_authentication_ip_restrictions_for_keys_ranges - computed: false, optional: true, required: false
  private _apiAuthenticationIpRestrictionsForKeysRanges?: string[]; 
  public get apiAuthenticationIpRestrictionsForKeysRanges() {
    return cdktf.Fn.tolist(this.getListAttribute('api_authentication_ip_restrictions_for_keys_ranges'));
  }
  public set apiAuthenticationIpRestrictionsForKeysRanges(value: string[]) {
    this._apiAuthenticationIpRestrictionsForKeysRanges = value;
  }
  public resetApiAuthenticationIpRestrictionsForKeysRanges() {
    this._apiAuthenticationIpRestrictionsForKeysRanges = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get apiAuthenticationIpRestrictionsForKeysRangesInput() {
    return this._apiAuthenticationIpRestrictionsForKeysRanges;
  }

  // enforce_account_lockout - computed: false, optional: true, required: false
  private _enforceAccountLockout?: boolean | cdktf.IResolvable; 
  public get enforceAccountLockout() {
    return this.getBooleanAttribute('enforce_account_lockout');
  }
  public set enforceAccountLockout(value: boolean | cdktf.IResolvable) {
    this._enforceAccountLockout = value;
  }
  public resetEnforceAccountLockout() {
    this._enforceAccountLockout = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get enforceAccountLockoutInput() {
    return this._enforceAccountLockout;
  }

  // enforce_different_passwords - computed: false, optional: true, required: false
  private _enforceDifferentPasswords?: boolean | cdktf.IResolvable; 
  public get enforceDifferentPasswords() {
    return this.getBooleanAttribute('enforce_different_passwords');
  }
  public set enforceDifferentPasswords(value: boolean | cdktf.IResolvable) {
    this._enforceDifferentPasswords = value;
  }
  public resetEnforceDifferentPasswords() {
    this._enforceDifferentPasswords = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get enforceDifferentPasswordsInput() {
    return this._enforceDifferentPasswords;
  }

  // enforce_idle_timeout - computed: false, optional: true, required: false
  private _enforceIdleTimeout?: boolean | cdktf.IResolvable; 
  public get enforceIdleTimeout() {
    return this.getBooleanAttribute('enforce_idle_timeout');
  }
  public set enforceIdleTimeout(value: boolean | cdktf.IResolvable) {
    this._enforceIdleTimeout = value;
  }
  public resetEnforceIdleTimeout() {
    this._enforceIdleTimeout = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get enforceIdleTimeoutInput() {
    return this._enforceIdleTimeout;
  }

  // enforce_login_ip_ranges - computed: false, optional: true, required: false
  private _enforceLoginIpRanges?: boolean | cdktf.IResolvable; 
  public get enforceLoginIpRanges() {
    return this.getBooleanAttribute('enforce_login_ip_ranges');
  }
  public set enforceLoginIpRanges(value: boolean | cdktf.IResolvable) {
    this._enforceLoginIpRanges = value;
  }
  public resetEnforceLoginIpRanges() {
    this._enforceLoginIpRanges = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get enforceLoginIpRangesInput() {
    return this._enforceLoginIpRanges;
  }

  // enforce_password_expiration - computed: false, optional: true, required: false
  private _enforcePasswordExpiration?: boolean | cdktf.IResolvable; 
  public get enforcePasswordExpiration() {
    return this.getBooleanAttribute('enforce_password_expiration');
  }
  public set enforcePasswordExpiration(value: boolean | cdktf.IResolvable) {
    this._enforcePasswordExpiration = value;
  }
  public resetEnforcePasswordExpiration() {
    this._enforcePasswordExpiration = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get enforcePasswordExpirationInput() {
    return this._enforcePasswordExpiration;
  }

  // enforce_strong_passwords - computed: false, optional: true, required: false
  private _enforceStrongPasswords?: boolean | cdktf.IResolvable; 
  public get enforceStrongPasswords() {
    return this.getBooleanAttribute('enforce_strong_passwords');
  }
  public set enforceStrongPasswords(value: boolean | cdktf.IResolvable) {
    this._enforceStrongPasswords = value;
  }
  public resetEnforceStrongPasswords() {
    this._enforceStrongPasswords = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get enforceStrongPasswordsInput() {
    return this._enforceStrongPasswords;
  }

  // enforce_two_factor_auth - computed: false, optional: true, required: false
  private _enforceTwoFactorAuth?: boolean | cdktf.IResolvable; 
  public get enforceTwoFactorAuth() {
    return this.getBooleanAttribute('enforce_two_factor_auth');
  }
  public set enforceTwoFactorAuth(value: boolean | cdktf.IResolvable) {
    this._enforceTwoFactorAuth = value;
  }
  public resetEnforceTwoFactorAuth() {
    this._enforceTwoFactorAuth = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get enforceTwoFactorAuthInput() {
    return this._enforceTwoFactorAuth;
  }

  // id - computed: true, optional: false, required: false
  public get id() {
    return this.getStringAttribute('id');
  }

  // idle_timeout_minutes - computed: false, optional: true, required: false
  private _idleTimeoutMinutes?: number; 
  public get idleTimeoutMinutes() {
    return this.getNumberAttribute('idle_timeout_minutes');
  }
  public set idleTimeoutMinutes(value: number) {
    this._idleTimeoutMinutes = value;
  }
  public resetIdleTimeoutMinutes() {
    this._idleTimeoutMinutes = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get idleTimeoutMinutesInput() {
    return this._idleTimeoutMinutes;
  }

  // login_ip_ranges - computed: false, optional: true, required: false
  private _loginIpRanges?: string[]; 
  public get loginIpRanges() {
    return cdktf.Fn.tolist(this.getListAttribute('login_ip_ranges'));
  }
  public set loginIpRanges(value: string[]) {
    this._loginIpRanges = value;
  }
  public resetLoginIpRanges() {
    this._loginIpRanges = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get loginIpRangesInput() {
    return this._loginIpRanges;
  }

  // minimum_password_length - computed: false, optional: true, required: false
  private _minimumPasswordLength?: number; 
  public get minimumPasswordLength() {
    return this.getNumberAttribute('minimum_password_length');
  }
  public set minimumPasswordLength(value: number) {
    this._minimumPasswordLength = value;
  }
  public resetMinimumPasswordLength() {
    this._minimumPasswordLength = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get minimumPasswordLengthInput() {
    return this._minimumPasswordLength;
  }

  // num_different_passwords - computed: false, optional: true, required: false
  private _numDifferentPasswords?: number; 
  public get numDifferentPasswords() {
    return this.getNumberAttribute('num_different_passwords');
  }
  public set numDifferentPasswords(value: number) {
    this._numDifferentPasswords = value;
  }
  public resetNumDifferentPasswords() {
    this._numDifferentPasswords = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get numDifferentPasswordsInput() {
    return this._numDifferentPasswords;
  }

  // organization_id - computed: false, optional: false, required: true
  private _organizationId?: string; 
  public get organizationId() {
    return this.getStringAttribute('organization_id');
  }
  public set organizationId(value: string) {
    this._organizationId = value;
  }
  // Temporarily expose input value. Use with caution.
  public get organizationIdInput() {
    return this._organizationId;
  }

  // password_expiration_days - computed: false, optional: true, required: false
  private _passwordExpirationDays?: number; 
  public get passwordExpirationDays() {
    return this.getNumberAttribute('password_expiration_days');
  }
  public set passwordExpirationDays(value: number) {
    this._passwordExpirationDays = value;
  }
  public resetPasswordExpirationDays() {
    this._passwordExpirationDays = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get passwordExpirationDaysInput() {
    return this._passwordExpirationDays;
  }

  // =========
  // SYNTHESIS
  // =========

  protected synthesizeAttributes(): { [name: string]: any } {
    return {
      account_lockout_attempts: cdktf.numberToTerraform(this._accountLockoutAttempts),
      api_authentication_ip_restrictions_for_keys_enabled: cdktf.booleanToTerraform(this._apiAuthenticationIpRestrictionsForKeysEnabled),
      api_authentication_ip_restrictions_for_keys_ranges: cdktf.listMapper(cdktf.stringToTerraform, false)(this._apiAuthenticationIpRestrictionsForKeysRanges),
      enforce_account_lockout: cdktf.booleanToTerraform(this._enforceAccountLockout),
      enforce_different_passwords: cdktf.booleanToTerraform(this._enforceDifferentPasswords),
      enforce_idle_timeout: cdktf.booleanToTerraform(this._enforceIdleTimeout),
      enforce_login_ip_ranges: cdktf.booleanToTerraform(this._enforceLoginIpRanges),
      enforce_password_expiration: cdktf.booleanToTerraform(this._enforcePasswordExpiration),
      enforce_strong_passwords: cdktf.booleanToTerraform(this._enforceStrongPasswords),
      enforce_two_factor_auth: cdktf.booleanToTerraform(this._enforceTwoFactorAuth),
      idle_timeout_minutes: cdktf.numberToTerraform(this._idleTimeoutMinutes),
      login_ip_ranges: cdktf.listMapper(cdktf.stringToTerraform, false)(this._loginIpRanges),
      minimum_password_length: cdktf.numberToTerraform(this._minimumPasswordLength),
      num_different_passwords: cdktf.numberToTerraform(this._numDifferentPasswords),
      organization_id: cdktf.stringToTerraform(this._organizationId),
      password_expiration_days: cdktf.numberToTerraform(this._passwordExpirationDays),
    };
  }

  protected synthesizeHclAttributes(): { [name: string]: any } {
    const attrs = {
      account_lockout_attempts: {
        value: cdktf.numberToHclTerraform(this._accountLockoutAttempts),
        isBlock: false,
        type: "simple",
        storageClassType: "number",
      },
      api_authentication_ip_restrictions_for_keys_enabled: {
        value: cdktf.booleanToHclTerraform(this._apiAuthenticationIpRestrictionsForKeysEnabled),
        isBlock: false,
        type: "simple",
        storageClassType: "boolean",
      },
      api_authentication_ip_restrictions_for_keys_ranges: {
        value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(this._apiAuthenticationIpRestrictionsForKeysRanges),
        isBlock: false,
        type: "set",
        storageClassType: "stringList",
      },
      enforce_account_lockout: {
        value: cdktf.booleanToHclTerraform(this._enforceAccountLockout),
        isBlock: false,
        type: "simple",
        storageClassType: "boolean",
      },
      enforce_different_passwords: {
        value: cdktf.booleanToHclTerraform(this._enforceDifferentPasswords),
        isBlock: false,
        type: "simple",
        storageClassType: "boolean",
      },
      enforce_idle_timeout: {
        value: cdktf.booleanToHclTerraform(this._enforceIdleTimeout),
        isBlock: false,
        type: "simple",
        storageClassType: "boolean",
      },
      enforce_login_ip_ranges: {
        value: cdktf.booleanToHclTerraform(this._enforceLoginIpRanges),
        isBlock: false,
        type: "simple",
        storageClassType: "boolean",
      },
      enforce_password_expiration: {
        value: cdktf.booleanToHclTerraform(this._enforcePasswordExpiration),
        isBlock: false,
        type: "simple",
        storageClassType: "boolean",
      },
      enforce_strong_passwords: {
        value: cdktf.booleanToHclTerraform(this._enforceStrongPasswords),
        isBlock: false,
        type: "simple",
        storageClassType: "boolean",
      },
      enforce_two_factor_auth: {
        value: cdktf.booleanToHclTerraform(this._enforceTwoFactorAuth),
        isBlock: false,
        type: "simple",
        storageClassType: "boolean",
      },
      idle_timeout_minutes: {
        value: cdktf.numberToHclTerraform(this._idleTimeoutMinutes),
        isBlock: false,
        type: "simple",
        storageClassType: "number",
      },
      login_ip_ranges: {
        value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(this._loginIpRanges),
        isBlock: false,
        type: "set",
        storageClassType: "stringList",
      },
      minimum_password_length: {
        value: cdktf.numberToHclTerraform(this._minimumPasswordLength),
        isBlock: false,
        type: "simple",
        storageClassType: "number",
      },
      num_different_passwords: {
        value: cdktf.numberToHclTerraform(this._numDifferentPasswords),
        isBlock: false,
        type: "simple",
        storageClassType: "number",
      },
      organization_id: {
        value: cdktf.stringToHclTerraform(this._organizationId),
        isBlock: false,
        type: "simple",
        storageClassType: "string",
      },
      password_expiration_days: {
        value: cdktf.numberToHclTerraform(this._passwordExpirationDays),
        isBlock: false,
        type: "simple",
        storageClassType: "number",
      },
    };

    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined ))
  }
}
