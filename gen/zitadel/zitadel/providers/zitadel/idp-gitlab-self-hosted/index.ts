// https://registry.terraform.io/providers/zitadel/zitadel/2.2.0/docs/resources/idp_gitlab_self_hosted
// generated from terraform resource schema

import { Construct } from 'constructs';
import * as cdktf from 'cdktf';

// Configuration

export interface IdpGitlabSelfHostedConfig extends cdktf.TerraformMetaArguments {
  /**
  * Enable if users should get prompted to link an existing ZITADEL user to an external account if the selected attribute matches, supported values: AUTO_LINKING_OPTION_UNSPECIFIED, AUTO_LINKING_OPTION_USERNAME, AUTO_LINKING_OPTION_EMAIL
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/zitadel/zitadel/2.2.0/docs/resources/idp_gitlab_self_hosted#auto_linking IdpGitlabSelfHosted#auto_linking}
  */
  readonly autoLinking?: string;
  /**
  * client id generated by the identity provider
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/zitadel/zitadel/2.2.0/docs/resources/idp_gitlab_self_hosted#client_id IdpGitlabSelfHosted#client_id}
  */
  readonly clientId: string;
  /**
  * client secret generated by the identity provider
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/zitadel/zitadel/2.2.0/docs/resources/idp_gitlab_self_hosted#client_secret IdpGitlabSelfHosted#client_secret}
  */
  readonly clientSecret: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/zitadel/zitadel/2.2.0/docs/resources/idp_gitlab_self_hosted#id IdpGitlabSelfHosted#id}
  *
  * Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2.
  * If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
  */
  readonly id?: string;
  /**
  * enable if a new account in ZITADEL should be created automatically on login with an external account
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/zitadel/zitadel/2.2.0/docs/resources/idp_gitlab_self_hosted#is_auto_creation IdpGitlabSelfHosted#is_auto_creation}
  */
  readonly isAutoCreation: boolean | cdktf.IResolvable;
  /**
  * enable if a the ZITADEL account fields should be updated automatically on each login
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/zitadel/zitadel/2.2.0/docs/resources/idp_gitlab_self_hosted#is_auto_update IdpGitlabSelfHosted#is_auto_update}
  */
  readonly isAutoUpdate: boolean | cdktf.IResolvable;
  /**
  * enable if users should be able to create a new account in ZITADEL when using an external account
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/zitadel/zitadel/2.2.0/docs/resources/idp_gitlab_self_hosted#is_creation_allowed IdpGitlabSelfHosted#is_creation_allowed}
  */
  readonly isCreationAllowed: boolean | cdktf.IResolvable;
  /**
  * enable if users should be able to link an existing ZITADEL user with an external account
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/zitadel/zitadel/2.2.0/docs/resources/idp_gitlab_self_hosted#is_linking_allowed IdpGitlabSelfHosted#is_linking_allowed}
  */
  readonly isLinkingAllowed: boolean | cdktf.IResolvable;
  /**
  * the providers issuer
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/zitadel/zitadel/2.2.0/docs/resources/idp_gitlab_self_hosted#issuer IdpGitlabSelfHosted#issuer}
  */
  readonly issuer: string;
  /**
  * Name of the IDP
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/zitadel/zitadel/2.2.0/docs/resources/idp_gitlab_self_hosted#name IdpGitlabSelfHosted#name}
  */
  readonly name?: string;
  /**
  * the scopes requested by ZITADEL during the request on the identity provider
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/zitadel/zitadel/2.2.0/docs/resources/idp_gitlab_self_hosted#scopes IdpGitlabSelfHosted#scopes}
  */
  readonly scopes?: string[];
}

/**
* Represents a {@link https://registry.terraform.io/providers/zitadel/zitadel/2.2.0/docs/resources/idp_gitlab_self_hosted zitadel_idp_gitlab_self_hosted}
*/
export class IdpGitlabSelfHosted extends cdktf.TerraformResource {

  // =================
  // STATIC PROPERTIES
  // =================
  public static readonly tfResourceType = "zitadel_idp_gitlab_self_hosted";

  // ==============
  // STATIC Methods
  // ==============
  /**
  * Generates CDKTF code for importing a IdpGitlabSelfHosted resource upon running "cdktf plan <stack-name>"
  * @param scope The scope in which to define this construct
  * @param importToId The construct id used in the generated config for the IdpGitlabSelfHosted to import
  * @param importFromId The id of the existing IdpGitlabSelfHosted that should be imported. Refer to the {@link https://registry.terraform.io/providers/zitadel/zitadel/2.2.0/docs/resources/idp_gitlab_self_hosted#import import section} in the documentation of this resource for the id to use
  * @param provider? Optional instance of the provider where the IdpGitlabSelfHosted to import is found
  */
  public static generateConfigForImport(scope: Construct, importToId: string, importFromId: string, provider?: cdktf.TerraformProvider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "zitadel_idp_gitlab_self_hosted", importId: importFromId, provider });
      }

  // ===========
  // INITIALIZER
  // ===========

  /**
  * Create a new {@link https://registry.terraform.io/providers/zitadel/zitadel/2.2.0/docs/resources/idp_gitlab_self_hosted zitadel_idp_gitlab_self_hosted} Resource
  *
  * @param scope The scope in which to define this construct
  * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
  * @param options IdpGitlabSelfHostedConfig
  */
  public constructor(scope: Construct, id: string, config: IdpGitlabSelfHostedConfig) {
    super(scope, id, {
      terraformResourceType: 'zitadel_idp_gitlab_self_hosted',
      terraformGeneratorMetadata: {
        providerName: 'zitadel',
        providerVersion: '2.2.0'
      },
      provider: config.provider,
      dependsOn: config.dependsOn,
      count: config.count,
      lifecycle: config.lifecycle,
      provisioners: config.provisioners,
      connection: config.connection,
      forEach: config.forEach
    });
    this._autoLinking = config.autoLinking;
    this._clientId = config.clientId;
    this._clientSecret = config.clientSecret;
    this._id = config.id;
    this._isAutoCreation = config.isAutoCreation;
    this._isAutoUpdate = config.isAutoUpdate;
    this._isCreationAllowed = config.isCreationAllowed;
    this._isLinkingAllowed = config.isLinkingAllowed;
    this._issuer = config.issuer;
    this._name = config.name;
    this._scopes = config.scopes;
  }

  // ==========
  // ATTRIBUTES
  // ==========

  // auto_linking - computed: false, optional: true, required: false
  private _autoLinking?: string; 
  public get autoLinking() {
    return this.getStringAttribute('auto_linking');
  }
  public set autoLinking(value: string) {
    this._autoLinking = value;
  }
  public resetAutoLinking() {
    this._autoLinking = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get autoLinkingInput() {
    return this._autoLinking;
  }

  // client_id - computed: false, optional: false, required: true
  private _clientId?: string; 
  public get clientId() {
    return this.getStringAttribute('client_id');
  }
  public set clientId(value: string) {
    this._clientId = value;
  }
  // Temporarily expose input value. Use with caution.
  public get clientIdInput() {
    return this._clientId;
  }

  // client_secret - computed: false, optional: false, required: true
  private _clientSecret?: string; 
  public get clientSecret() {
    return this.getStringAttribute('client_secret');
  }
  public set clientSecret(value: string) {
    this._clientSecret = value;
  }
  // Temporarily expose input value. Use with caution.
  public get clientSecretInput() {
    return this._clientSecret;
  }

  // id - computed: true, optional: true, required: false
  private _id?: string; 
  public get id() {
    return this.getStringAttribute('id');
  }
  public set id(value: string) {
    this._id = value;
  }
  public resetId() {
    this._id = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get idInput() {
    return this._id;
  }

  // is_auto_creation - computed: false, optional: false, required: true
  private _isAutoCreation?: boolean | cdktf.IResolvable; 
  public get isAutoCreation() {
    return this.getBooleanAttribute('is_auto_creation');
  }
  public set isAutoCreation(value: boolean | cdktf.IResolvable) {
    this._isAutoCreation = value;
  }
  // Temporarily expose input value. Use with caution.
  public get isAutoCreationInput() {
    return this._isAutoCreation;
  }

  // is_auto_update - computed: false, optional: false, required: true
  private _isAutoUpdate?: boolean | cdktf.IResolvable; 
  public get isAutoUpdate() {
    return this.getBooleanAttribute('is_auto_update');
  }
  public set isAutoUpdate(value: boolean | cdktf.IResolvable) {
    this._isAutoUpdate = value;
  }
  // Temporarily expose input value. Use with caution.
  public get isAutoUpdateInput() {
    return this._isAutoUpdate;
  }

  // is_creation_allowed - computed: false, optional: false, required: true
  private _isCreationAllowed?: boolean | cdktf.IResolvable; 
  public get isCreationAllowed() {
    return this.getBooleanAttribute('is_creation_allowed');
  }
  public set isCreationAllowed(value: boolean | cdktf.IResolvable) {
    this._isCreationAllowed = value;
  }
  // Temporarily expose input value. Use with caution.
  public get isCreationAllowedInput() {
    return this._isCreationAllowed;
  }

  // is_linking_allowed - computed: false, optional: false, required: true
  private _isLinkingAllowed?: boolean | cdktf.IResolvable; 
  public get isLinkingAllowed() {
    return this.getBooleanAttribute('is_linking_allowed');
  }
  public set isLinkingAllowed(value: boolean | cdktf.IResolvable) {
    this._isLinkingAllowed = value;
  }
  // Temporarily expose input value. Use with caution.
  public get isLinkingAllowedInput() {
    return this._isLinkingAllowed;
  }

  // issuer - computed: false, optional: false, required: true
  private _issuer?: string; 
  public get issuer() {
    return this.getStringAttribute('issuer');
  }
  public set issuer(value: string) {
    this._issuer = value;
  }
  // Temporarily expose input value. Use with caution.
  public get issuerInput() {
    return this._issuer;
  }

  // name - computed: false, optional: true, required: false
  private _name?: string; 
  public get name() {
    return this.getStringAttribute('name');
  }
  public set name(value: string) {
    this._name = value;
  }
  public resetName() {
    this._name = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get nameInput() {
    return this._name;
  }

  // scopes - computed: false, optional: true, required: false
  private _scopes?: string[]; 
  public get scopes() {
    return cdktf.Fn.tolist(this.getListAttribute('scopes'));
  }
  public set scopes(value: string[]) {
    this._scopes = value;
  }
  public resetScopes() {
    this._scopes = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get scopesInput() {
    return this._scopes;
  }

  // =========
  // SYNTHESIS
  // =========

  protected synthesizeAttributes(): { [name: string]: any } {
    return {
      auto_linking: cdktf.stringToTerraform(this._autoLinking),
      client_id: cdktf.stringToTerraform(this._clientId),
      client_secret: cdktf.stringToTerraform(this._clientSecret),
      id: cdktf.stringToTerraform(this._id),
      is_auto_creation: cdktf.booleanToTerraform(this._isAutoCreation),
      is_auto_update: cdktf.booleanToTerraform(this._isAutoUpdate),
      is_creation_allowed: cdktf.booleanToTerraform(this._isCreationAllowed),
      is_linking_allowed: cdktf.booleanToTerraform(this._isLinkingAllowed),
      issuer: cdktf.stringToTerraform(this._issuer),
      name: cdktf.stringToTerraform(this._name),
      scopes: cdktf.listMapper(cdktf.stringToTerraform, false)(this._scopes),
    };
  }

  protected synthesizeHclAttributes(): { [name: string]: any } {
    const attrs = {
      auto_linking: {
        value: cdktf.stringToHclTerraform(this._autoLinking),
        isBlock: false,
        type: "simple",
        storageClassType: "string",
      },
      client_id: {
        value: cdktf.stringToHclTerraform(this._clientId),
        isBlock: false,
        type: "simple",
        storageClassType: "string",
      },
      client_secret: {
        value: cdktf.stringToHclTerraform(this._clientSecret),
        isBlock: false,
        type: "simple",
        storageClassType: "string",
      },
      id: {
        value: cdktf.stringToHclTerraform(this._id),
        isBlock: false,
        type: "simple",
        storageClassType: "string",
      },
      is_auto_creation: {
        value: cdktf.booleanToHclTerraform(this._isAutoCreation),
        isBlock: false,
        type: "simple",
        storageClassType: "boolean",
      },
      is_auto_update: {
        value: cdktf.booleanToHclTerraform(this._isAutoUpdate),
        isBlock: false,
        type: "simple",
        storageClassType: "boolean",
      },
      is_creation_allowed: {
        value: cdktf.booleanToHclTerraform(this._isCreationAllowed),
        isBlock: false,
        type: "simple",
        storageClassType: "boolean",
      },
      is_linking_allowed: {
        value: cdktf.booleanToHclTerraform(this._isLinkingAllowed),
        isBlock: false,
        type: "simple",
        storageClassType: "boolean",
      },
      issuer: {
        value: cdktf.stringToHclTerraform(this._issuer),
        isBlock: false,
        type: "simple",
        storageClassType: "string",
      },
      name: {
        value: cdktf.stringToHclTerraform(this._name),
        isBlock: false,
        type: "simple",
        storageClassType: "string",
      },
      scopes: {
        value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(this._scopes),
        isBlock: false,
        type: "set",
        storageClassType: "stringList",
      },
    };

    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined ))
  }
}
