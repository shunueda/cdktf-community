// https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest
// generated from terraform resource schema

import { Construct } from 'constructs';
import * as cdktf from 'cdktf';

// Configuration

export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestConfig extends cdktf.TerraformMetaArguments {
  /**
  * Data that helps uniquely identify this object. See https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata for more details.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#metadata DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#metadata}
  */
  readonly metadata: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestMetadata;
  /**
  * ContourDeploymentSpec specifies options for how a Contour instance should be provisioned.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#spec DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#spec}
  */
  readonly spec?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpec;
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestMetadata {
  /**
  * Keys and values that can be used by external tooling to store and retrieve arbitrary metadata about this object. See https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/ for more details.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#annotations DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#annotations}
  */
  readonly annotations?: { [key: string]: string };
  /**
  * Keys and values that can be used to organize and categorize objects. See https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/ for more details.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#labels DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#labels}
  */
  readonly labels?: { [key: string]: string };
  /**
  * Unique identifier for this object. See https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names for more details.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#name DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#name}
  */
  readonly name: string;
  /**
  * Namespaces provides a mechanism for isolating groups of resources within a single cluster. See https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/ for more details.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#namespace DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#namespace}
  */
  readonly namespace: string;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestMetadataToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestMetadata | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    annotations: cdktf.hashMapper(cdktf.stringToTerraform)(struct!.annotations),
    labels: cdktf.hashMapper(cdktf.stringToTerraform)(struct!.labels),
    name: cdktf.stringToTerraform(struct!.name),
    namespace: cdktf.stringToTerraform(struct!.namespace),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestMetadataToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestMetadata | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    annotations: {
      value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct!.annotations),
      isBlock: false,
      type: "map",
      storageClassType: "stringMap",
    },
    labels: {
      value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct!.labels),
      isBlock: false,
      type: "map",
      storageClassType: "stringMap",
    },
    name: {
      value: cdktf.stringToHclTerraform(struct!.name),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    namespace: {
      value: cdktf.stringToHclTerraform(struct!.namespace),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestMetadataOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestMetadata | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._annotations !== undefined) {
      hasAnyValues = true;
      internalValueResult.annotations = this._annotations;
    }
    if (this._labels !== undefined) {
      hasAnyValues = true;
      internalValueResult.labels = this._labels;
    }
    if (this._name !== undefined) {
      hasAnyValues = true;
      internalValueResult.name = this._name;
    }
    if (this._namespace !== undefined) {
      hasAnyValues = true;
      internalValueResult.namespace = this._namespace;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestMetadata | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._annotations = undefined;
      this._labels = undefined;
      this._name = undefined;
      this._namespace = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._annotations = value.annotations;
      this._labels = value.labels;
      this._name = value.name;
      this._namespace = value.namespace;
    }
  }

  // annotations - computed: false, optional: true, required: false
  private _annotations?: { [key: string]: string }; 
  public get annotations() {
    return this.getStringMapAttribute('annotations');
  }
  public set annotations(value: { [key: string]: string }) {
    this._annotations = value;
  }
  public resetAnnotations() {
    this._annotations = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get annotationsInput() {
    return this._annotations;
  }

  // labels - computed: false, optional: true, required: false
  private _labels?: { [key: string]: string }; 
  public get labels() {
    return this.getStringMapAttribute('labels');
  }
  public set labels(value: { [key: string]: string }) {
    this._labels = value;
  }
  public resetLabels() {
    this._labels = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get labelsInput() {
    return this._labels;
  }

  // name - computed: false, optional: false, required: true
  private _name?: string; 
  public get name() {
    return this.getStringAttribute('name');
  }
  public set name(value: string) {
    this._name = value;
  }
  // Temporarily expose input value. Use with caution.
  public get nameInput() {
    return this._name;
  }

  // namespace - computed: false, optional: false, required: true
  private _namespace?: string; 
  public get namespace() {
    return this.getStringAttribute('namespace');
  }
  public set namespace(value: string) {
    this._namespace = value;
  }
  // Temporarily expose input value. Use with caution.
  public get namespaceInput() {
    return this._namespace;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourDeploymentStrategyRollingUpdate {
  /**
  * The maximum number of pods that can be scheduled above the desired number of pods. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 25%. Example: when this is set to 30%, the new ReplicaSet can be scaled up immediately when the rolling update starts, such that the total number of old and new pods do not exceed 130% of desired pods. Once old pods have been killed, new ReplicaSet can be scaled up further, ensuring that total number of pods running at any time during the update is at most 130% of desired pods.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#max_surge DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#max_surge}
  */
  readonly maxSurge?: string;
  /**
  * The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 25%. Example: when this is set to 30%, the old ReplicaSet can be scaled down to 70% of desired pods immediately when the rolling update starts. Once new pods are ready, old ReplicaSet can be scaled down further, followed by scaling up the new ReplicaSet, ensuring that the total number of pods available at all times during the update is at least 70% of desired pods.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#max_unavailable DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#max_unavailable}
  */
  readonly maxUnavailable?: string;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourDeploymentStrategyRollingUpdateToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourDeploymentStrategyRollingUpdate | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    max_surge: cdktf.stringToTerraform(struct!.maxSurge),
    max_unavailable: cdktf.stringToTerraform(struct!.maxUnavailable),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourDeploymentStrategyRollingUpdateToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourDeploymentStrategyRollingUpdate | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    max_surge: {
      value: cdktf.stringToHclTerraform(struct!.maxSurge),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    max_unavailable: {
      value: cdktf.stringToHclTerraform(struct!.maxUnavailable),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourDeploymentStrategyRollingUpdateOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourDeploymentStrategyRollingUpdate | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._maxSurge !== undefined) {
      hasAnyValues = true;
      internalValueResult.maxSurge = this._maxSurge;
    }
    if (this._maxUnavailable !== undefined) {
      hasAnyValues = true;
      internalValueResult.maxUnavailable = this._maxUnavailable;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourDeploymentStrategyRollingUpdate | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._maxSurge = undefined;
      this._maxUnavailable = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._maxSurge = value.maxSurge;
      this._maxUnavailable = value.maxUnavailable;
    }
  }

  // max_surge - computed: false, optional: true, required: false
  private _maxSurge?: string; 
  public get maxSurge() {
    return this.getStringAttribute('max_surge');
  }
  public set maxSurge(value: string) {
    this._maxSurge = value;
  }
  public resetMaxSurge() {
    this._maxSurge = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get maxSurgeInput() {
    return this._maxSurge;
  }

  // max_unavailable - computed: false, optional: true, required: false
  private _maxUnavailable?: string; 
  public get maxUnavailable() {
    return this.getStringAttribute('max_unavailable');
  }
  public set maxUnavailable(value: string) {
    this._maxUnavailable = value;
  }
  public resetMaxUnavailable() {
    this._maxUnavailable = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get maxUnavailableInput() {
    return this._maxUnavailable;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourDeploymentStrategy {
  /**
  * Rolling update config params. Present only if DeploymentStrategyType = RollingUpdate. --- TODO: Update this to follow our convention for oneOf, whatever we decide it to be.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#rolling_update DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#rolling_update}
  */
  readonly rollingUpdate?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourDeploymentStrategyRollingUpdate;
  /**
  * Type of deployment. Can be 'Recreate' or 'RollingUpdate'. Default is RollingUpdate.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#type DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#type}
  */
  readonly type?: string;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourDeploymentStrategyToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourDeploymentStrategy | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    rolling_update: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourDeploymentStrategyRollingUpdateToTerraform(struct!.rollingUpdate),
    type: cdktf.stringToTerraform(struct!.type),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourDeploymentStrategyToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourDeploymentStrategy | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    rolling_update: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourDeploymentStrategyRollingUpdateToHclTerraform(struct!.rollingUpdate),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourDeploymentStrategyRollingUpdate",
    },
    type: {
      value: cdktf.stringToHclTerraform(struct!.type),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourDeploymentStrategyOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourDeploymentStrategy | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._rollingUpdate?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.rollingUpdate = this._rollingUpdate?.internalValue;
    }
    if (this._type !== undefined) {
      hasAnyValues = true;
      internalValueResult.type = this._type;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourDeploymentStrategy | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._rollingUpdate.internalValue = undefined;
      this._type = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._rollingUpdate.internalValue = value.rollingUpdate;
      this._type = value.type;
    }
  }

  // rolling_update - computed: false, optional: true, required: false
  private _rollingUpdate = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourDeploymentStrategyRollingUpdateOutputReference(this, "rolling_update");
  public get rollingUpdate() {
    return this._rollingUpdate;
  }
  public putRollingUpdate(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourDeploymentStrategyRollingUpdate) {
    this._rollingUpdate.internalValue = value;
  }
  public resetRollingUpdate() {
    this._rollingUpdate.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get rollingUpdateInput() {
    return this._rollingUpdate.internalValue;
  }

  // type - computed: false, optional: true, required: false
  private _type?: string; 
  public get type() {
    return this.getStringAttribute('type');
  }
  public set type(value: string) {
    this._type = value;
  }
  public resetType() {
    this._type = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get typeInput() {
    return this._type;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourDeployment {
  /**
  * Replicas is the desired number of replicas.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#replicas DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#replicas}
  */
  readonly replicas?: number;
  /**
  * Strategy describes the deployment strategy to use to replace existing pods with new pods.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#strategy DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#strategy}
  */
  readonly strategy?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourDeploymentStrategy;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourDeploymentToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourDeployment | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    replicas: cdktf.numberToTerraform(struct!.replicas),
    strategy: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourDeploymentStrategyToTerraform(struct!.strategy),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourDeploymentToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourDeployment | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    replicas: {
      value: cdktf.numberToHclTerraform(struct!.replicas),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    strategy: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourDeploymentStrategyToHclTerraform(struct!.strategy),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourDeploymentStrategy",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourDeploymentOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourDeployment | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._replicas !== undefined) {
      hasAnyValues = true;
      internalValueResult.replicas = this._replicas;
    }
    if (this._strategy?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.strategy = this._strategy?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourDeployment | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._replicas = undefined;
      this._strategy.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._replicas = value.replicas;
      this._strategy.internalValue = value.strategy;
    }
  }

  // replicas - computed: false, optional: true, required: false
  private _replicas?: number; 
  public get replicas() {
    return this.getNumberAttribute('replicas');
  }
  public set replicas(value: number) {
    this._replicas = value;
  }
  public resetReplicas() {
    this._replicas = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get replicasInput() {
    return this._replicas;
  }

  // strategy - computed: false, optional: true, required: false
  private _strategy = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourDeploymentStrategyOutputReference(this, "strategy");
  public get strategy() {
    return this._strategy;
  }
  public putStrategy(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourDeploymentStrategy) {
    this._strategy.internalValue = value;
  }
  public resetStrategy() {
    this._strategy.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get strategyInput() {
    return this._strategy.internalValue;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourNodePlacementTolerations {
  /**
  * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#effect DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#effect}
  */
  readonly effect?: string;
  /**
  * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#key DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#key}
  */
  readonly key?: string;
  /**
  * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#operator DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#operator}
  */
  readonly operator?: string;
  /**
  * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#toleration_seconds DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#toleration_seconds}
  */
  readonly tolerationSeconds?: number;
  /**
  * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#value DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#value}
  */
  readonly value?: string;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourNodePlacementTolerationsToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourNodePlacementTolerations | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    effect: cdktf.stringToTerraform(struct!.effect),
    key: cdktf.stringToTerraform(struct!.key),
    operator: cdktf.stringToTerraform(struct!.operator),
    toleration_seconds: cdktf.numberToTerraform(struct!.tolerationSeconds),
    value: cdktf.stringToTerraform(struct!.value),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourNodePlacementTolerationsToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourNodePlacementTolerations | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    effect: {
      value: cdktf.stringToHclTerraform(struct!.effect),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    key: {
      value: cdktf.stringToHclTerraform(struct!.key),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    operator: {
      value: cdktf.stringToHclTerraform(struct!.operator),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    toleration_seconds: {
      value: cdktf.numberToHclTerraform(struct!.tolerationSeconds),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    value: {
      value: cdktf.stringToHclTerraform(struct!.value),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourNodePlacementTolerationsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourNodePlacementTolerations | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._effect !== undefined) {
      hasAnyValues = true;
      internalValueResult.effect = this._effect;
    }
    if (this._key !== undefined) {
      hasAnyValues = true;
      internalValueResult.key = this._key;
    }
    if (this._operator !== undefined) {
      hasAnyValues = true;
      internalValueResult.operator = this._operator;
    }
    if (this._tolerationSeconds !== undefined) {
      hasAnyValues = true;
      internalValueResult.tolerationSeconds = this._tolerationSeconds;
    }
    if (this._value !== undefined) {
      hasAnyValues = true;
      internalValueResult.value = this._value;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourNodePlacementTolerations | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._effect = undefined;
      this._key = undefined;
      this._operator = undefined;
      this._tolerationSeconds = undefined;
      this._value = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._effect = value.effect;
      this._key = value.key;
      this._operator = value.operator;
      this._tolerationSeconds = value.tolerationSeconds;
      this._value = value.value;
    }
  }

  // effect - computed: false, optional: true, required: false
  private _effect?: string; 
  public get effect() {
    return this.getStringAttribute('effect');
  }
  public set effect(value: string) {
    this._effect = value;
  }
  public resetEffect() {
    this._effect = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get effectInput() {
    return this._effect;
  }

  // key - computed: false, optional: true, required: false
  private _key?: string; 
  public get key() {
    return this.getStringAttribute('key');
  }
  public set key(value: string) {
    this._key = value;
  }
  public resetKey() {
    this._key = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get keyInput() {
    return this._key;
  }

  // operator - computed: false, optional: true, required: false
  private _operator?: string; 
  public get operator() {
    return this.getStringAttribute('operator');
  }
  public set operator(value: string) {
    this._operator = value;
  }
  public resetOperator() {
    this._operator = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get operatorInput() {
    return this._operator;
  }

  // toleration_seconds - computed: false, optional: true, required: false
  private _tolerationSeconds?: number; 
  public get tolerationSeconds() {
    return this.getNumberAttribute('toleration_seconds');
  }
  public set tolerationSeconds(value: number) {
    this._tolerationSeconds = value;
  }
  public resetTolerationSeconds() {
    this._tolerationSeconds = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get tolerationSecondsInput() {
    return this._tolerationSeconds;
  }

  // value - computed: false, optional: true, required: false
  private _value?: string; 
  public get value() {
    return this.getStringAttribute('value');
  }
  public set value(value: string) {
    this._value = value;
  }
  public resetValue() {
    this._value = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get valueInput() {
    return this._value;
  }
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourNodePlacementTolerationsList extends cdktf.ComplexList {
  public internalValue? : DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourNodePlacementTolerations[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourNodePlacementTolerationsOutputReference {
    return new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourNodePlacementTolerationsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourNodePlacement {
  /**
  * NodeSelector is the simplest recommended form of node selection constraint and specifies a map of key-value pairs. For the pod to be eligible to run on a node, the node must have each of the indicated key-value pairs as labels (it can have additional labels as well). If unset, the pod(s) will be scheduled to any available node.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#node_selector DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#node_selector}
  */
  readonly nodeSelector?: { [key: string]: string };
  /**
  * Tolerations work with taints to ensure that pods are not scheduled onto inappropriate nodes. One or more taints are applied to a node; this marks that the node should not accept any pods that do not tolerate the taints. The default is an empty list. See https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/ for additional details.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#tolerations DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#tolerations}
  */
  readonly tolerations?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourNodePlacementTolerations[] | cdktf.IResolvable;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourNodePlacementToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourNodePlacement | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    node_selector: cdktf.hashMapper(cdktf.stringToTerraform)(struct!.nodeSelector),
    tolerations: cdktf.listMapper(dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourNodePlacementTolerationsToTerraform, false)(struct!.tolerations),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourNodePlacementToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourNodePlacement | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    node_selector: {
      value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct!.nodeSelector),
      isBlock: false,
      type: "map",
      storageClassType: "stringMap",
    },
    tolerations: {
      value: cdktf.listMapperHcl(dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourNodePlacementTolerationsToHclTerraform, false)(struct!.tolerations),
      isBlock: true,
      type: "list",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourNodePlacementTolerationsList",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourNodePlacementOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourNodePlacement | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._nodeSelector !== undefined) {
      hasAnyValues = true;
      internalValueResult.nodeSelector = this._nodeSelector;
    }
    if (this._tolerations?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.tolerations = this._tolerations?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourNodePlacement | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._nodeSelector = undefined;
      this._tolerations.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._nodeSelector = value.nodeSelector;
      this._tolerations.internalValue = value.tolerations;
    }
  }

  // node_selector - computed: false, optional: true, required: false
  private _nodeSelector?: { [key: string]: string }; 
  public get nodeSelector() {
    return this.getStringMapAttribute('node_selector');
  }
  public set nodeSelector(value: { [key: string]: string }) {
    this._nodeSelector = value;
  }
  public resetNodeSelector() {
    this._nodeSelector = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get nodeSelectorInput() {
    return this._nodeSelector;
  }

  // tolerations - computed: false, optional: true, required: false
  private _tolerations = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourNodePlacementTolerationsList(this, "tolerations", false);
  public get tolerations() {
    return this._tolerations;
  }
  public putTolerations(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourNodePlacementTolerations[] | cdktf.IResolvable) {
    this._tolerations.internalValue = value;
  }
  public resetTolerations() {
    this._tolerations.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get tolerationsInput() {
    return this._tolerations.internalValue;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourResourcesClaims {
  /**
  * Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#name DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#name}
  */
  readonly name: string;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourResourcesClaimsToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourResourcesClaims | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    name: cdktf.stringToTerraform(struct!.name),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourResourcesClaimsToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourResourcesClaims | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    name: {
      value: cdktf.stringToHclTerraform(struct!.name),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourResourcesClaimsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourResourcesClaims | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._name !== undefined) {
      hasAnyValues = true;
      internalValueResult.name = this._name;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourResourcesClaims | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._name = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._name = value.name;
    }
  }

  // name - computed: false, optional: false, required: true
  private _name?: string; 
  public get name() {
    return this.getStringAttribute('name');
  }
  public set name(value: string) {
    this._name = value;
  }
  // Temporarily expose input value. Use with caution.
  public get nameInput() {
    return this._name;
  }
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourResourcesClaimsList extends cdktf.ComplexList {
  public internalValue? : DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourResourcesClaims[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourResourcesClaimsOutputReference {
    return new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourResourcesClaimsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourResources {
  /**
  * Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. This field is immutable. It can only be set for containers.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#claims DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#claims}
  */
  readonly claims?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourResourcesClaims[] | cdktf.IResolvable;
  /**
  * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#limits DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#limits}
  */
  readonly limits?: { [key: string]: string };
  /**
  * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#requests DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#requests}
  */
  readonly requests?: { [key: string]: string };
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourResourcesToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourResources | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    claims: cdktf.listMapper(dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourResourcesClaimsToTerraform, false)(struct!.claims),
    limits: cdktf.hashMapper(cdktf.stringToTerraform)(struct!.limits),
    requests: cdktf.hashMapper(cdktf.stringToTerraform)(struct!.requests),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourResourcesToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourResources | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    claims: {
      value: cdktf.listMapperHcl(dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourResourcesClaimsToHclTerraform, false)(struct!.claims),
      isBlock: true,
      type: "list",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourResourcesClaimsList",
    },
    limits: {
      value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct!.limits),
      isBlock: false,
      type: "map",
      storageClassType: "stringMap",
    },
    requests: {
      value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct!.requests),
      isBlock: false,
      type: "map",
      storageClassType: "stringMap",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourResourcesOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourResources | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._claims?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.claims = this._claims?.internalValue;
    }
    if (this._limits !== undefined) {
      hasAnyValues = true;
      internalValueResult.limits = this._limits;
    }
    if (this._requests !== undefined) {
      hasAnyValues = true;
      internalValueResult.requests = this._requests;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourResources | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._claims.internalValue = undefined;
      this._limits = undefined;
      this._requests = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._claims.internalValue = value.claims;
      this._limits = value.limits;
      this._requests = value.requests;
    }
  }

  // claims - computed: false, optional: true, required: false
  private _claims = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourResourcesClaimsList(this, "claims", false);
  public get claims() {
    return this._claims;
  }
  public putClaims(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourResourcesClaims[] | cdktf.IResolvable) {
    this._claims.internalValue = value;
  }
  public resetClaims() {
    this._claims.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get claimsInput() {
    return this._claims.internalValue;
  }

  // limits - computed: false, optional: true, required: false
  private _limits?: { [key: string]: string }; 
  public get limits() {
    return this.getStringMapAttribute('limits');
  }
  public set limits(value: { [key: string]: string }) {
    this._limits = value;
  }
  public resetLimits() {
    this._limits = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get limitsInput() {
    return this._limits;
  }

  // requests - computed: false, optional: true, required: false
  private _requests?: { [key: string]: string }; 
  public get requests() {
    return this.getStringMapAttribute('requests');
  }
  public set requests(value: { [key: string]: string }) {
    this._requests = value;
  }
  public resetRequests() {
    this._requests = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get requestsInput() {
    return this._requests;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContour {
  /**
  * Deployment describes the settings for running contour as a 'Deployment'.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#deployment DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#deployment}
  */
  readonly deployment?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourDeployment;
  /**
  * DisabledFeatures defines an array of resources that will be ignored by contour reconciler.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#disabled_features DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#disabled_features}
  */
  readonly disabledFeatures?: string[];
  /**
  * KubernetesLogLevel Enable Kubernetes client debug logging with log level. If unset, defaults to 0.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#kubernetes_log_level DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#kubernetes_log_level}
  */
  readonly kubernetesLogLevel?: number;
  /**
  * LogLevel sets the log level for Contour Allowed values are 'info', 'debug'.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#log_level DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#log_level}
  */
  readonly logLevel?: string;
  /**
  * NodePlacement describes node scheduling configuration of Contour pods.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#node_placement DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#node_placement}
  */
  readonly nodePlacement?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourNodePlacement;
  /**
  * PodAnnotations defines annotations to add to the Contour pods. the annotations for Prometheus will be appended or overwritten with predefined value.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#pod_annotations DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#pod_annotations}
  */
  readonly podAnnotations?: { [key: string]: string };
  /**
  * Deprecated: Use 'DeploymentSettings.Replicas' instead. Replicas is the desired number of Contour replicas. If if unset, defaults to 2. if both 'DeploymentSettings.Replicas' and this one is set, use 'DeploymentSettings.Replicas'.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#replicas DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#replicas}
  */
  readonly replicas?: number;
  /**
  * Compute Resources required by contour container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#resources DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#resources}
  */
  readonly resources?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourResources;
  /**
  * WatchNamespaces is an array of namespaces. Setting it will instruct the contour instance to only watch this subset of namespaces.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#watch_namespaces DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#watch_namespaces}
  */
  readonly watchNamespaces?: string[];
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContour | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    deployment: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourDeploymentToTerraform(struct!.deployment),
    disabled_features: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.disabledFeatures),
    kubernetes_log_level: cdktf.numberToTerraform(struct!.kubernetesLogLevel),
    log_level: cdktf.stringToTerraform(struct!.logLevel),
    node_placement: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourNodePlacementToTerraform(struct!.nodePlacement),
    pod_annotations: cdktf.hashMapper(cdktf.stringToTerraform)(struct!.podAnnotations),
    replicas: cdktf.numberToTerraform(struct!.replicas),
    resources: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourResourcesToTerraform(struct!.resources),
    watch_namespaces: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.watchNamespaces),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContour | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    deployment: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourDeploymentToHclTerraform(struct!.deployment),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourDeployment",
    },
    disabled_features: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.disabledFeatures),
      isBlock: false,
      type: "list",
      storageClassType: "stringList",
    },
    kubernetes_log_level: {
      value: cdktf.numberToHclTerraform(struct!.kubernetesLogLevel),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    log_level: {
      value: cdktf.stringToHclTerraform(struct!.logLevel),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    node_placement: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourNodePlacementToHclTerraform(struct!.nodePlacement),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourNodePlacement",
    },
    pod_annotations: {
      value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct!.podAnnotations),
      isBlock: false,
      type: "map",
      storageClassType: "stringMap",
    },
    replicas: {
      value: cdktf.numberToHclTerraform(struct!.replicas),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    resources: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourResourcesToHclTerraform(struct!.resources),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourResources",
    },
    watch_namespaces: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.watchNamespaces),
      isBlock: false,
      type: "list",
      storageClassType: "stringList",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContour | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._deployment?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.deployment = this._deployment?.internalValue;
    }
    if (this._disabledFeatures !== undefined) {
      hasAnyValues = true;
      internalValueResult.disabledFeatures = this._disabledFeatures;
    }
    if (this._kubernetesLogLevel !== undefined) {
      hasAnyValues = true;
      internalValueResult.kubernetesLogLevel = this._kubernetesLogLevel;
    }
    if (this._logLevel !== undefined) {
      hasAnyValues = true;
      internalValueResult.logLevel = this._logLevel;
    }
    if (this._nodePlacement?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.nodePlacement = this._nodePlacement?.internalValue;
    }
    if (this._podAnnotations !== undefined) {
      hasAnyValues = true;
      internalValueResult.podAnnotations = this._podAnnotations;
    }
    if (this._replicas !== undefined) {
      hasAnyValues = true;
      internalValueResult.replicas = this._replicas;
    }
    if (this._resources?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.resources = this._resources?.internalValue;
    }
    if (this._watchNamespaces !== undefined) {
      hasAnyValues = true;
      internalValueResult.watchNamespaces = this._watchNamespaces;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContour | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._deployment.internalValue = undefined;
      this._disabledFeatures = undefined;
      this._kubernetesLogLevel = undefined;
      this._logLevel = undefined;
      this._nodePlacement.internalValue = undefined;
      this._podAnnotations = undefined;
      this._replicas = undefined;
      this._resources.internalValue = undefined;
      this._watchNamespaces = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._deployment.internalValue = value.deployment;
      this._disabledFeatures = value.disabledFeatures;
      this._kubernetesLogLevel = value.kubernetesLogLevel;
      this._logLevel = value.logLevel;
      this._nodePlacement.internalValue = value.nodePlacement;
      this._podAnnotations = value.podAnnotations;
      this._replicas = value.replicas;
      this._resources.internalValue = value.resources;
      this._watchNamespaces = value.watchNamespaces;
    }
  }

  // deployment - computed: false, optional: true, required: false
  private _deployment = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourDeploymentOutputReference(this, "deployment");
  public get deployment() {
    return this._deployment;
  }
  public putDeployment(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourDeployment) {
    this._deployment.internalValue = value;
  }
  public resetDeployment() {
    this._deployment.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get deploymentInput() {
    return this._deployment.internalValue;
  }

  // disabled_features - computed: false, optional: true, required: false
  private _disabledFeatures?: string[]; 
  public get disabledFeatures() {
    return this.getListAttribute('disabled_features');
  }
  public set disabledFeatures(value: string[]) {
    this._disabledFeatures = value;
  }
  public resetDisabledFeatures() {
    this._disabledFeatures = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get disabledFeaturesInput() {
    return this._disabledFeatures;
  }

  // kubernetes_log_level - computed: false, optional: true, required: false
  private _kubernetesLogLevel?: number; 
  public get kubernetesLogLevel() {
    return this.getNumberAttribute('kubernetes_log_level');
  }
  public set kubernetesLogLevel(value: number) {
    this._kubernetesLogLevel = value;
  }
  public resetKubernetesLogLevel() {
    this._kubernetesLogLevel = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get kubernetesLogLevelInput() {
    return this._kubernetesLogLevel;
  }

  // log_level - computed: false, optional: true, required: false
  private _logLevel?: string; 
  public get logLevel() {
    return this.getStringAttribute('log_level');
  }
  public set logLevel(value: string) {
    this._logLevel = value;
  }
  public resetLogLevel() {
    this._logLevel = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get logLevelInput() {
    return this._logLevel;
  }

  // node_placement - computed: false, optional: true, required: false
  private _nodePlacement = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourNodePlacementOutputReference(this, "node_placement");
  public get nodePlacement() {
    return this._nodePlacement;
  }
  public putNodePlacement(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourNodePlacement) {
    this._nodePlacement.internalValue = value;
  }
  public resetNodePlacement() {
    this._nodePlacement.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get nodePlacementInput() {
    return this._nodePlacement.internalValue;
  }

  // pod_annotations - computed: false, optional: true, required: false
  private _podAnnotations?: { [key: string]: string }; 
  public get podAnnotations() {
    return this.getStringMapAttribute('pod_annotations');
  }
  public set podAnnotations(value: { [key: string]: string }) {
    this._podAnnotations = value;
  }
  public resetPodAnnotations() {
    this._podAnnotations = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get podAnnotationsInput() {
    return this._podAnnotations;
  }

  // replicas - computed: false, optional: true, required: false
  private _replicas?: number; 
  public get replicas() {
    return this.getNumberAttribute('replicas');
  }
  public set replicas(value: number) {
    this._replicas = value;
  }
  public resetReplicas() {
    this._replicas = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get replicasInput() {
    return this._replicas;
  }

  // resources - computed: false, optional: true, required: false
  private _resources = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourResourcesOutputReference(this, "resources");
  public get resources() {
    return this._resources;
  }
  public putResources(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourResources) {
    this._resources.internalValue = value;
  }
  public resetResources() {
    this._resources.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get resourcesInput() {
    return this._resources.internalValue;
  }

  // watch_namespaces - computed: false, optional: true, required: false
  private _watchNamespaces?: string[]; 
  public get watchNamespaces() {
    return this.getListAttribute('watch_namespaces');
  }
  public set watchNamespaces(value: string[]) {
    this._watchNamespaces = value;
  }
  public resetWatchNamespaces() {
    this._watchNamespaces = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get watchNamespacesInput() {
    return this._watchNamespaces;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyDaemonSetUpdateStrategyRollingUpdate {
  /**
  * The maximum number of nodes with an existing available DaemonSet pod that can have an updated DaemonSet pod during during an update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up to a minimum of 1. Default value is 0. Example: when this is set to 30%, at most 30% of the total number of nodes that should be running the daemon pod (i.e. status.desiredNumberScheduled) can have their a new pod created before the old pod is marked as deleted. The update starts by launching new pods on 30% of nodes. Once an updated pod is available (Ready for at least minReadySeconds) the old DaemonSet pod on that node is marked deleted. If the old pod becomes unavailable for any reason (Ready transitions to false, is evicted, or is drained) an updated pod is immediatedly created on that node without considering surge limits. Allowing surge implies the possibility that the resources consumed by the daemonset on any given node can double if the readiness check fails, and so resource intensive daemonsets should take into account that they may cause evictions during disruption.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#max_surge DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#max_surge}
  */
  readonly maxSurge?: string;
  /**
  * The maximum number of DaemonSet pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of total number of DaemonSet pods at the start of the update (ex: 10%). Absolute number is calculated from percentage by rounding up. This cannot be 0 if MaxSurge is 0 Default value is 1. Example: when this is set to 30%, at most 30% of the total number of nodes that should be running the daemon pod (i.e. status.desiredNumberScheduled) can have their pods stopped for an update at any given time. The update starts by stopping at most 30% of those DaemonSet pods and then brings up new DaemonSet pods in their place. Once the new pods are available, it then proceeds onto other DaemonSet pods, thus ensuring that at least 70% of original number of DaemonSet pods are available at all times during the update.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#max_unavailable DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#max_unavailable}
  */
  readonly maxUnavailable?: string;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyDaemonSetUpdateStrategyRollingUpdateToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyDaemonSetUpdateStrategyRollingUpdate | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    max_surge: cdktf.stringToTerraform(struct!.maxSurge),
    max_unavailable: cdktf.stringToTerraform(struct!.maxUnavailable),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyDaemonSetUpdateStrategyRollingUpdateToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyDaemonSetUpdateStrategyRollingUpdate | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    max_surge: {
      value: cdktf.stringToHclTerraform(struct!.maxSurge),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    max_unavailable: {
      value: cdktf.stringToHclTerraform(struct!.maxUnavailable),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyDaemonSetUpdateStrategyRollingUpdateOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyDaemonSetUpdateStrategyRollingUpdate | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._maxSurge !== undefined) {
      hasAnyValues = true;
      internalValueResult.maxSurge = this._maxSurge;
    }
    if (this._maxUnavailable !== undefined) {
      hasAnyValues = true;
      internalValueResult.maxUnavailable = this._maxUnavailable;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyDaemonSetUpdateStrategyRollingUpdate | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._maxSurge = undefined;
      this._maxUnavailable = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._maxSurge = value.maxSurge;
      this._maxUnavailable = value.maxUnavailable;
    }
  }

  // max_surge - computed: false, optional: true, required: false
  private _maxSurge?: string; 
  public get maxSurge() {
    return this.getStringAttribute('max_surge');
  }
  public set maxSurge(value: string) {
    this._maxSurge = value;
  }
  public resetMaxSurge() {
    this._maxSurge = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get maxSurgeInput() {
    return this._maxSurge;
  }

  // max_unavailable - computed: false, optional: true, required: false
  private _maxUnavailable?: string; 
  public get maxUnavailable() {
    return this.getStringAttribute('max_unavailable');
  }
  public set maxUnavailable(value: string) {
    this._maxUnavailable = value;
  }
  public resetMaxUnavailable() {
    this._maxUnavailable = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get maxUnavailableInput() {
    return this._maxUnavailable;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyDaemonSetUpdateStrategy {
  /**
  * Rolling update config params. Present only if type = 'RollingUpdate'. --- TODO: Update this to follow our convention for oneOf, whatever we decide it to be. Same as Deployment 'strategy.rollingUpdate'. See https://github.com/kubernetes/kubernetes/issues/35345
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#rolling_update DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#rolling_update}
  */
  readonly rollingUpdate?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyDaemonSetUpdateStrategyRollingUpdate;
  /**
  * Type of daemon set update. Can be 'RollingUpdate' or 'OnDelete'. Default is RollingUpdate.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#type DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#type}
  */
  readonly type?: string;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyDaemonSetUpdateStrategyToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyDaemonSetUpdateStrategy | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    rolling_update: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyDaemonSetUpdateStrategyRollingUpdateToTerraform(struct!.rollingUpdate),
    type: cdktf.stringToTerraform(struct!.type),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyDaemonSetUpdateStrategyToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyDaemonSetUpdateStrategy | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    rolling_update: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyDaemonSetUpdateStrategyRollingUpdateToHclTerraform(struct!.rollingUpdate),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyDaemonSetUpdateStrategyRollingUpdate",
    },
    type: {
      value: cdktf.stringToHclTerraform(struct!.type),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyDaemonSetUpdateStrategyOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyDaemonSetUpdateStrategy | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._rollingUpdate?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.rollingUpdate = this._rollingUpdate?.internalValue;
    }
    if (this._type !== undefined) {
      hasAnyValues = true;
      internalValueResult.type = this._type;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyDaemonSetUpdateStrategy | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._rollingUpdate.internalValue = undefined;
      this._type = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._rollingUpdate.internalValue = value.rollingUpdate;
      this._type = value.type;
    }
  }

  // rolling_update - computed: false, optional: true, required: false
  private _rollingUpdate = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyDaemonSetUpdateStrategyRollingUpdateOutputReference(this, "rolling_update");
  public get rollingUpdate() {
    return this._rollingUpdate;
  }
  public putRollingUpdate(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyDaemonSetUpdateStrategyRollingUpdate) {
    this._rollingUpdate.internalValue = value;
  }
  public resetRollingUpdate() {
    this._rollingUpdate.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get rollingUpdateInput() {
    return this._rollingUpdate.internalValue;
  }

  // type - computed: false, optional: true, required: false
  private _type?: string; 
  public get type() {
    return this.getStringAttribute('type');
  }
  public set type(value: string) {
    this._type = value;
  }
  public resetType() {
    this._type = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get typeInput() {
    return this._type;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyDaemonSet {
  /**
  * Strategy describes the deployment strategy to use to replace existing DaemonSet pods with new pods.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#update_strategy DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#update_strategy}
  */
  readonly updateStrategy?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyDaemonSetUpdateStrategy;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyDaemonSetToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyDaemonSet | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    update_strategy: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyDaemonSetUpdateStrategyToTerraform(struct!.updateStrategy),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyDaemonSetToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyDaemonSet | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    update_strategy: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyDaemonSetUpdateStrategyToHclTerraform(struct!.updateStrategy),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyDaemonSetUpdateStrategy",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyDaemonSetOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyDaemonSet | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._updateStrategy?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.updateStrategy = this._updateStrategy?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyDaemonSet | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._updateStrategy.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._updateStrategy.internalValue = value.updateStrategy;
    }
  }

  // update_strategy - computed: false, optional: true, required: false
  private _updateStrategy = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyDaemonSetUpdateStrategyOutputReference(this, "update_strategy");
  public get updateStrategy() {
    return this._updateStrategy;
  }
  public putUpdateStrategy(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyDaemonSetUpdateStrategy) {
    this._updateStrategy.internalValue = value;
  }
  public resetUpdateStrategy() {
    this._updateStrategy.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get updateStrategyInput() {
    return this._updateStrategy.internalValue;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyDeploymentStrategyRollingUpdate {
  /**
  * The maximum number of pods that can be scheduled above the desired number of pods. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 25%. Example: when this is set to 30%, the new ReplicaSet can be scaled up immediately when the rolling update starts, such that the total number of old and new pods do not exceed 130% of desired pods. Once old pods have been killed, new ReplicaSet can be scaled up further, ensuring that total number of pods running at any time during the update is at most 130% of desired pods.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#max_surge DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#max_surge}
  */
  readonly maxSurge?: string;
  /**
  * The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 25%. Example: when this is set to 30%, the old ReplicaSet can be scaled down to 70% of desired pods immediately when the rolling update starts. Once new pods are ready, old ReplicaSet can be scaled down further, followed by scaling up the new ReplicaSet, ensuring that the total number of pods available at all times during the update is at least 70% of desired pods.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#max_unavailable DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#max_unavailable}
  */
  readonly maxUnavailable?: string;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyDeploymentStrategyRollingUpdateToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyDeploymentStrategyRollingUpdate | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    max_surge: cdktf.stringToTerraform(struct!.maxSurge),
    max_unavailable: cdktf.stringToTerraform(struct!.maxUnavailable),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyDeploymentStrategyRollingUpdateToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyDeploymentStrategyRollingUpdate | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    max_surge: {
      value: cdktf.stringToHclTerraform(struct!.maxSurge),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    max_unavailable: {
      value: cdktf.stringToHclTerraform(struct!.maxUnavailable),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyDeploymentStrategyRollingUpdateOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyDeploymentStrategyRollingUpdate | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._maxSurge !== undefined) {
      hasAnyValues = true;
      internalValueResult.maxSurge = this._maxSurge;
    }
    if (this._maxUnavailable !== undefined) {
      hasAnyValues = true;
      internalValueResult.maxUnavailable = this._maxUnavailable;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyDeploymentStrategyRollingUpdate | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._maxSurge = undefined;
      this._maxUnavailable = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._maxSurge = value.maxSurge;
      this._maxUnavailable = value.maxUnavailable;
    }
  }

  // max_surge - computed: false, optional: true, required: false
  private _maxSurge?: string; 
  public get maxSurge() {
    return this.getStringAttribute('max_surge');
  }
  public set maxSurge(value: string) {
    this._maxSurge = value;
  }
  public resetMaxSurge() {
    this._maxSurge = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get maxSurgeInput() {
    return this._maxSurge;
  }

  // max_unavailable - computed: false, optional: true, required: false
  private _maxUnavailable?: string; 
  public get maxUnavailable() {
    return this.getStringAttribute('max_unavailable');
  }
  public set maxUnavailable(value: string) {
    this._maxUnavailable = value;
  }
  public resetMaxUnavailable() {
    this._maxUnavailable = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get maxUnavailableInput() {
    return this._maxUnavailable;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyDeploymentStrategy {
  /**
  * Rolling update config params. Present only if DeploymentStrategyType = RollingUpdate. --- TODO: Update this to follow our convention for oneOf, whatever we decide it to be.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#rolling_update DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#rolling_update}
  */
  readonly rollingUpdate?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyDeploymentStrategyRollingUpdate;
  /**
  * Type of deployment. Can be 'Recreate' or 'RollingUpdate'. Default is RollingUpdate.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#type DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#type}
  */
  readonly type?: string;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyDeploymentStrategyToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyDeploymentStrategy | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    rolling_update: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyDeploymentStrategyRollingUpdateToTerraform(struct!.rollingUpdate),
    type: cdktf.stringToTerraform(struct!.type),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyDeploymentStrategyToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyDeploymentStrategy | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    rolling_update: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyDeploymentStrategyRollingUpdateToHclTerraform(struct!.rollingUpdate),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyDeploymentStrategyRollingUpdate",
    },
    type: {
      value: cdktf.stringToHclTerraform(struct!.type),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyDeploymentStrategyOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyDeploymentStrategy | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._rollingUpdate?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.rollingUpdate = this._rollingUpdate?.internalValue;
    }
    if (this._type !== undefined) {
      hasAnyValues = true;
      internalValueResult.type = this._type;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyDeploymentStrategy | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._rollingUpdate.internalValue = undefined;
      this._type = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._rollingUpdate.internalValue = value.rollingUpdate;
      this._type = value.type;
    }
  }

  // rolling_update - computed: false, optional: true, required: false
  private _rollingUpdate = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyDeploymentStrategyRollingUpdateOutputReference(this, "rolling_update");
  public get rollingUpdate() {
    return this._rollingUpdate;
  }
  public putRollingUpdate(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyDeploymentStrategyRollingUpdate) {
    this._rollingUpdate.internalValue = value;
  }
  public resetRollingUpdate() {
    this._rollingUpdate.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get rollingUpdateInput() {
    return this._rollingUpdate.internalValue;
  }

  // type - computed: false, optional: true, required: false
  private _type?: string; 
  public get type() {
    return this.getStringAttribute('type');
  }
  public set type(value: string) {
    this._type = value;
  }
  public resetType() {
    this._type = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get typeInput() {
    return this._type;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyDeployment {
  /**
  * Replicas is the desired number of replicas.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#replicas DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#replicas}
  */
  readonly replicas?: number;
  /**
  * Strategy describes the deployment strategy to use to replace existing pods with new pods.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#strategy DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#strategy}
  */
  readonly strategy?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyDeploymentStrategy;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyDeploymentToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyDeployment | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    replicas: cdktf.numberToTerraform(struct!.replicas),
    strategy: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyDeploymentStrategyToTerraform(struct!.strategy),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyDeploymentToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyDeployment | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    replicas: {
      value: cdktf.numberToHclTerraform(struct!.replicas),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    strategy: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyDeploymentStrategyToHclTerraform(struct!.strategy),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyDeploymentStrategy",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyDeploymentOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyDeployment | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._replicas !== undefined) {
      hasAnyValues = true;
      internalValueResult.replicas = this._replicas;
    }
    if (this._strategy?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.strategy = this._strategy?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyDeployment | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._replicas = undefined;
      this._strategy.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._replicas = value.replicas;
      this._strategy.internalValue = value.strategy;
    }
  }

  // replicas - computed: false, optional: true, required: false
  private _replicas?: number; 
  public get replicas() {
    return this.getNumberAttribute('replicas');
  }
  public set replicas(value: number) {
    this._replicas = value;
  }
  public resetReplicas() {
    this._replicas = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get replicasInput() {
    return this._replicas;
  }

  // strategy - computed: false, optional: true, required: false
  private _strategy = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyDeploymentStrategyOutputReference(this, "strategy");
  public get strategy() {
    return this._strategy;
  }
  public putStrategy(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyDeploymentStrategy) {
    this._strategy.internalValue = value;
  }
  public resetStrategy() {
    this._strategy.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get strategyInput() {
    return this._strategy.internalValue;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumeMounts {
  /**
  * Path within the container at which the volume should be mounted. Must not contain ':'.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#mount_path DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#mount_path}
  */
  readonly mountPath: string;
  /**
  * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10. When RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified (which defaults to None).
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#mount_propagation DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#mount_propagation}
  */
  readonly mountPropagation?: string;
  /**
  * This must match the Name of a Volume.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#name DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#name}
  */
  readonly name: string;
  /**
  * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#read_only DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#read_only}
  */
  readonly readOnly?: boolean | cdktf.IResolvable;
  /**
  * RecursiveReadOnly specifies whether read-only mounts should be handled recursively. If ReadOnly is false, this field has no meaning and must be unspecified. If ReadOnly is true, and this field is set to Disabled, the mount is not made recursively read-only. If this field is set to IfPossible, the mount is made recursively read-only, if it is supported by the container runtime. If this field is set to Enabled, the mount is made recursively read-only if it is supported by the container runtime, otherwise the pod will not be started and an error will be generated to indicate the reason. If this field is set to IfPossible or Enabled, MountPropagation must be set to None (or be unspecified, which defaults to None). If this field is not specified, it is treated as an equivalent of Disabled.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#recursive_read_only DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#recursive_read_only}
  */
  readonly recursiveReadOnly?: string;
  /**
  * Path within the volume from which the container's volume should be mounted. Defaults to '' (volume's root).
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#sub_path DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#sub_path}
  */
  readonly subPath?: string;
  /**
  * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to '' (volume's root). SubPathExpr and SubPath are mutually exclusive.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#sub_path_expr DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#sub_path_expr}
  */
  readonly subPathExpr?: string;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumeMountsToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumeMounts | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    mount_path: cdktf.stringToTerraform(struct!.mountPath),
    mount_propagation: cdktf.stringToTerraform(struct!.mountPropagation),
    name: cdktf.stringToTerraform(struct!.name),
    read_only: cdktf.booleanToTerraform(struct!.readOnly),
    recursive_read_only: cdktf.stringToTerraform(struct!.recursiveReadOnly),
    sub_path: cdktf.stringToTerraform(struct!.subPath),
    sub_path_expr: cdktf.stringToTerraform(struct!.subPathExpr),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumeMountsToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumeMounts | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    mount_path: {
      value: cdktf.stringToHclTerraform(struct!.mountPath),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    mount_propagation: {
      value: cdktf.stringToHclTerraform(struct!.mountPropagation),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    name: {
      value: cdktf.stringToHclTerraform(struct!.name),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    read_only: {
      value: cdktf.booleanToHclTerraform(struct!.readOnly),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    recursive_read_only: {
      value: cdktf.stringToHclTerraform(struct!.recursiveReadOnly),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    sub_path: {
      value: cdktf.stringToHclTerraform(struct!.subPath),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    sub_path_expr: {
      value: cdktf.stringToHclTerraform(struct!.subPathExpr),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumeMountsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumeMounts | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._mountPath !== undefined) {
      hasAnyValues = true;
      internalValueResult.mountPath = this._mountPath;
    }
    if (this._mountPropagation !== undefined) {
      hasAnyValues = true;
      internalValueResult.mountPropagation = this._mountPropagation;
    }
    if (this._name !== undefined) {
      hasAnyValues = true;
      internalValueResult.name = this._name;
    }
    if (this._readOnly !== undefined) {
      hasAnyValues = true;
      internalValueResult.readOnly = this._readOnly;
    }
    if (this._recursiveReadOnly !== undefined) {
      hasAnyValues = true;
      internalValueResult.recursiveReadOnly = this._recursiveReadOnly;
    }
    if (this._subPath !== undefined) {
      hasAnyValues = true;
      internalValueResult.subPath = this._subPath;
    }
    if (this._subPathExpr !== undefined) {
      hasAnyValues = true;
      internalValueResult.subPathExpr = this._subPathExpr;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumeMounts | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._mountPath = undefined;
      this._mountPropagation = undefined;
      this._name = undefined;
      this._readOnly = undefined;
      this._recursiveReadOnly = undefined;
      this._subPath = undefined;
      this._subPathExpr = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._mountPath = value.mountPath;
      this._mountPropagation = value.mountPropagation;
      this._name = value.name;
      this._readOnly = value.readOnly;
      this._recursiveReadOnly = value.recursiveReadOnly;
      this._subPath = value.subPath;
      this._subPathExpr = value.subPathExpr;
    }
  }

  // mount_path - computed: false, optional: false, required: true
  private _mountPath?: string; 
  public get mountPath() {
    return this.getStringAttribute('mount_path');
  }
  public set mountPath(value: string) {
    this._mountPath = value;
  }
  // Temporarily expose input value. Use with caution.
  public get mountPathInput() {
    return this._mountPath;
  }

  // mount_propagation - computed: false, optional: true, required: false
  private _mountPropagation?: string; 
  public get mountPropagation() {
    return this.getStringAttribute('mount_propagation');
  }
  public set mountPropagation(value: string) {
    this._mountPropagation = value;
  }
  public resetMountPropagation() {
    this._mountPropagation = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get mountPropagationInput() {
    return this._mountPropagation;
  }

  // name - computed: false, optional: false, required: true
  private _name?: string; 
  public get name() {
    return this.getStringAttribute('name');
  }
  public set name(value: string) {
    this._name = value;
  }
  // Temporarily expose input value. Use with caution.
  public get nameInput() {
    return this._name;
  }

  // read_only - computed: false, optional: true, required: false
  private _readOnly?: boolean | cdktf.IResolvable; 
  public get readOnly() {
    return this.getBooleanAttribute('read_only');
  }
  public set readOnly(value: boolean | cdktf.IResolvable) {
    this._readOnly = value;
  }
  public resetReadOnly() {
    this._readOnly = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get readOnlyInput() {
    return this._readOnly;
  }

  // recursive_read_only - computed: false, optional: true, required: false
  private _recursiveReadOnly?: string; 
  public get recursiveReadOnly() {
    return this.getStringAttribute('recursive_read_only');
  }
  public set recursiveReadOnly(value: string) {
    this._recursiveReadOnly = value;
  }
  public resetRecursiveReadOnly() {
    this._recursiveReadOnly = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get recursiveReadOnlyInput() {
    return this._recursiveReadOnly;
  }

  // sub_path - computed: false, optional: true, required: false
  private _subPath?: string; 
  public get subPath() {
    return this.getStringAttribute('sub_path');
  }
  public set subPath(value: string) {
    this._subPath = value;
  }
  public resetSubPath() {
    this._subPath = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get subPathInput() {
    return this._subPath;
  }

  // sub_path_expr - computed: false, optional: true, required: false
  private _subPathExpr?: string; 
  public get subPathExpr() {
    return this.getStringAttribute('sub_path_expr');
  }
  public set subPathExpr(value: string) {
    this._subPathExpr = value;
  }
  public resetSubPathExpr() {
    this._subPathExpr = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get subPathExprInput() {
    return this._subPathExpr;
  }
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumeMountsList extends cdktf.ComplexList {
  public internalValue? : DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumeMounts[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumeMountsOutputReference {
    return new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumeMountsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesAwsElasticBlockStore {
  /**
  * fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: 'ext4', 'xfs', 'ntfs'. Implicitly inferred to be 'ext4' if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore TODO: how do we prevent errors in the filesystem from compromising the machine
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#fs_type DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#fs_type}
  */
  readonly fsType?: string;
  /**
  * partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as '1'. Similarly, the volume partition for /dev/sda is '0' (or you can leave the property empty).
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#partition DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#partition}
  */
  readonly partition?: number;
  /**
  * readOnly value true will force the readOnly setting in VolumeMounts. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#read_only DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#read_only}
  */
  readonly readOnly?: boolean | cdktf.IResolvable;
  /**
  * volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#volume_id DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#volume_id}
  */
  readonly volumeId: string;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesAwsElasticBlockStoreToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesAwsElasticBlockStore | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    fs_type: cdktf.stringToTerraform(struct!.fsType),
    partition: cdktf.numberToTerraform(struct!.partition),
    read_only: cdktf.booleanToTerraform(struct!.readOnly),
    volume_id: cdktf.stringToTerraform(struct!.volumeId),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesAwsElasticBlockStoreToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesAwsElasticBlockStore | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    fs_type: {
      value: cdktf.stringToHclTerraform(struct!.fsType),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    partition: {
      value: cdktf.numberToHclTerraform(struct!.partition),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    read_only: {
      value: cdktf.booleanToHclTerraform(struct!.readOnly),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    volume_id: {
      value: cdktf.stringToHclTerraform(struct!.volumeId),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesAwsElasticBlockStoreOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesAwsElasticBlockStore | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._fsType !== undefined) {
      hasAnyValues = true;
      internalValueResult.fsType = this._fsType;
    }
    if (this._partition !== undefined) {
      hasAnyValues = true;
      internalValueResult.partition = this._partition;
    }
    if (this._readOnly !== undefined) {
      hasAnyValues = true;
      internalValueResult.readOnly = this._readOnly;
    }
    if (this._volumeId !== undefined) {
      hasAnyValues = true;
      internalValueResult.volumeId = this._volumeId;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesAwsElasticBlockStore | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._fsType = undefined;
      this._partition = undefined;
      this._readOnly = undefined;
      this._volumeId = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._fsType = value.fsType;
      this._partition = value.partition;
      this._readOnly = value.readOnly;
      this._volumeId = value.volumeId;
    }
  }

  // fs_type - computed: false, optional: true, required: false
  private _fsType?: string; 
  public get fsType() {
    return this.getStringAttribute('fs_type');
  }
  public set fsType(value: string) {
    this._fsType = value;
  }
  public resetFsType() {
    this._fsType = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get fsTypeInput() {
    return this._fsType;
  }

  // partition - computed: false, optional: true, required: false
  private _partition?: number; 
  public get partition() {
    return this.getNumberAttribute('partition');
  }
  public set partition(value: number) {
    this._partition = value;
  }
  public resetPartition() {
    this._partition = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get partitionInput() {
    return this._partition;
  }

  // read_only - computed: false, optional: true, required: false
  private _readOnly?: boolean | cdktf.IResolvable; 
  public get readOnly() {
    return this.getBooleanAttribute('read_only');
  }
  public set readOnly(value: boolean | cdktf.IResolvable) {
    this._readOnly = value;
  }
  public resetReadOnly() {
    this._readOnly = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get readOnlyInput() {
    return this._readOnly;
  }

  // volume_id - computed: false, optional: false, required: true
  private _volumeId?: string; 
  public get volumeId() {
    return this.getStringAttribute('volume_id');
  }
  public set volumeId(value: string) {
    this._volumeId = value;
  }
  // Temporarily expose input value. Use with caution.
  public get volumeIdInput() {
    return this._volumeId;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesAzureDisk {
  /**
  * cachingMode is the Host Caching mode: None, Read Only, Read Write.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#caching_mode DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#caching_mode}
  */
  readonly cachingMode?: string;
  /**
  * diskName is the Name of the data disk in the blob storage
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#disk_name DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#disk_name}
  */
  readonly diskName: string;
  /**
  * diskURI is the URI of data disk in the blob storage
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#disk_uri DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#disk_uri}
  */
  readonly diskUri: string;
  /**
  * fsType is Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. 'ext4', 'xfs', 'ntfs'. Implicitly inferred to be 'ext4' if unspecified.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#fs_type DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#fs_type}
  */
  readonly fsType?: string;
  /**
  * kind expected values are Shared: multiple blob disks per storage account Dedicated: single blob disk per storage account Managed: azure managed data disk (only in managed availability set). defaults to shared
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#kind DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#kind}
  */
  readonly kind?: string;
  /**
  * readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#read_only DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#read_only}
  */
  readonly readOnly?: boolean | cdktf.IResolvable;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesAzureDiskToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesAzureDisk | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    caching_mode: cdktf.stringToTerraform(struct!.cachingMode),
    disk_name: cdktf.stringToTerraform(struct!.diskName),
    disk_uri: cdktf.stringToTerraform(struct!.diskUri),
    fs_type: cdktf.stringToTerraform(struct!.fsType),
    kind: cdktf.stringToTerraform(struct!.kind),
    read_only: cdktf.booleanToTerraform(struct!.readOnly),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesAzureDiskToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesAzureDisk | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    caching_mode: {
      value: cdktf.stringToHclTerraform(struct!.cachingMode),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    disk_name: {
      value: cdktf.stringToHclTerraform(struct!.diskName),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    disk_uri: {
      value: cdktf.stringToHclTerraform(struct!.diskUri),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    fs_type: {
      value: cdktf.stringToHclTerraform(struct!.fsType),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    kind: {
      value: cdktf.stringToHclTerraform(struct!.kind),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    read_only: {
      value: cdktf.booleanToHclTerraform(struct!.readOnly),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesAzureDiskOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesAzureDisk | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._cachingMode !== undefined) {
      hasAnyValues = true;
      internalValueResult.cachingMode = this._cachingMode;
    }
    if (this._diskName !== undefined) {
      hasAnyValues = true;
      internalValueResult.diskName = this._diskName;
    }
    if (this._diskUri !== undefined) {
      hasAnyValues = true;
      internalValueResult.diskUri = this._diskUri;
    }
    if (this._fsType !== undefined) {
      hasAnyValues = true;
      internalValueResult.fsType = this._fsType;
    }
    if (this._kind !== undefined) {
      hasAnyValues = true;
      internalValueResult.kind = this._kind;
    }
    if (this._readOnly !== undefined) {
      hasAnyValues = true;
      internalValueResult.readOnly = this._readOnly;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesAzureDisk | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._cachingMode = undefined;
      this._diskName = undefined;
      this._diskUri = undefined;
      this._fsType = undefined;
      this._kind = undefined;
      this._readOnly = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._cachingMode = value.cachingMode;
      this._diskName = value.diskName;
      this._diskUri = value.diskUri;
      this._fsType = value.fsType;
      this._kind = value.kind;
      this._readOnly = value.readOnly;
    }
  }

  // caching_mode - computed: false, optional: true, required: false
  private _cachingMode?: string; 
  public get cachingMode() {
    return this.getStringAttribute('caching_mode');
  }
  public set cachingMode(value: string) {
    this._cachingMode = value;
  }
  public resetCachingMode() {
    this._cachingMode = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get cachingModeInput() {
    return this._cachingMode;
  }

  // disk_name - computed: false, optional: false, required: true
  private _diskName?: string; 
  public get diskName() {
    return this.getStringAttribute('disk_name');
  }
  public set diskName(value: string) {
    this._diskName = value;
  }
  // Temporarily expose input value. Use with caution.
  public get diskNameInput() {
    return this._diskName;
  }

  // disk_uri - computed: false, optional: false, required: true
  private _diskUri?: string; 
  public get diskUri() {
    return this.getStringAttribute('disk_uri');
  }
  public set diskUri(value: string) {
    this._diskUri = value;
  }
  // Temporarily expose input value. Use with caution.
  public get diskUriInput() {
    return this._diskUri;
  }

  // fs_type - computed: false, optional: true, required: false
  private _fsType?: string; 
  public get fsType() {
    return this.getStringAttribute('fs_type');
  }
  public set fsType(value: string) {
    this._fsType = value;
  }
  public resetFsType() {
    this._fsType = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get fsTypeInput() {
    return this._fsType;
  }

  // kind - computed: false, optional: true, required: false
  private _kind?: string; 
  public get kind() {
    return this.getStringAttribute('kind');
  }
  public set kind(value: string) {
    this._kind = value;
  }
  public resetKind() {
    this._kind = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get kindInput() {
    return this._kind;
  }

  // read_only - computed: false, optional: true, required: false
  private _readOnly?: boolean | cdktf.IResolvable; 
  public get readOnly() {
    return this.getBooleanAttribute('read_only');
  }
  public set readOnly(value: boolean | cdktf.IResolvable) {
    this._readOnly = value;
  }
  public resetReadOnly() {
    this._readOnly = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get readOnlyInput() {
    return this._readOnly;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesAzureFile {
  /**
  * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#read_only DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#read_only}
  */
  readonly readOnly?: boolean | cdktf.IResolvable;
  /**
  * secretName is the name of secret that contains Azure Storage Account Name and Key
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#secret_name DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#secret_name}
  */
  readonly secretName: string;
  /**
  * shareName is the azure share Name
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#share_name DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#share_name}
  */
  readonly shareName: string;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesAzureFileToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesAzureFile | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    read_only: cdktf.booleanToTerraform(struct!.readOnly),
    secret_name: cdktf.stringToTerraform(struct!.secretName),
    share_name: cdktf.stringToTerraform(struct!.shareName),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesAzureFileToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesAzureFile | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    read_only: {
      value: cdktf.booleanToHclTerraform(struct!.readOnly),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    secret_name: {
      value: cdktf.stringToHclTerraform(struct!.secretName),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    share_name: {
      value: cdktf.stringToHclTerraform(struct!.shareName),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesAzureFileOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesAzureFile | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._readOnly !== undefined) {
      hasAnyValues = true;
      internalValueResult.readOnly = this._readOnly;
    }
    if (this._secretName !== undefined) {
      hasAnyValues = true;
      internalValueResult.secretName = this._secretName;
    }
    if (this._shareName !== undefined) {
      hasAnyValues = true;
      internalValueResult.shareName = this._shareName;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesAzureFile | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._readOnly = undefined;
      this._secretName = undefined;
      this._shareName = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._readOnly = value.readOnly;
      this._secretName = value.secretName;
      this._shareName = value.shareName;
    }
  }

  // read_only - computed: false, optional: true, required: false
  private _readOnly?: boolean | cdktf.IResolvable; 
  public get readOnly() {
    return this.getBooleanAttribute('read_only');
  }
  public set readOnly(value: boolean | cdktf.IResolvable) {
    this._readOnly = value;
  }
  public resetReadOnly() {
    this._readOnly = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get readOnlyInput() {
    return this._readOnly;
  }

  // secret_name - computed: false, optional: false, required: true
  private _secretName?: string; 
  public get secretName() {
    return this.getStringAttribute('secret_name');
  }
  public set secretName(value: string) {
    this._secretName = value;
  }
  // Temporarily expose input value. Use with caution.
  public get secretNameInput() {
    return this._secretName;
  }

  // share_name - computed: false, optional: false, required: true
  private _shareName?: string; 
  public get shareName() {
    return this.getStringAttribute('share_name');
  }
  public set shareName(value: string) {
    this._shareName = value;
  }
  // Temporarily expose input value. Use with caution.
  public get shareNameInput() {
    return this._shareName;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesCephfsSecretRef {
  /**
  * Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. TODO: Add other useful fields. apiVersion, kind, uid? More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Drop 'kubebuilder:default' when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#name DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#name}
  */
  readonly name?: string;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesCephfsSecretRefToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesCephfsSecretRef | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    name: cdktf.stringToTerraform(struct!.name),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesCephfsSecretRefToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesCephfsSecretRef | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    name: {
      value: cdktf.stringToHclTerraform(struct!.name),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesCephfsSecretRefOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesCephfsSecretRef | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._name !== undefined) {
      hasAnyValues = true;
      internalValueResult.name = this._name;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesCephfsSecretRef | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._name = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._name = value.name;
    }
  }

  // name - computed: false, optional: true, required: false
  private _name?: string; 
  public get name() {
    return this.getStringAttribute('name');
  }
  public set name(value: string) {
    this._name = value;
  }
  public resetName() {
    this._name = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get nameInput() {
    return this._name;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesCephfs {
  /**
  * monitors is Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#monitors DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#monitors}
  */
  readonly monitors: string[];
  /**
  * path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#path DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#path}
  */
  readonly path?: string;
  /**
  * readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#read_only DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#read_only}
  */
  readonly readOnly?: boolean | cdktf.IResolvable;
  /**
  * secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#secret_file DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#secret_file}
  */
  readonly secretFile?: string;
  /**
  * secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#secret_ref DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#secret_ref}
  */
  readonly secretRef?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesCephfsSecretRef;
  /**
  * user is optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#user DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#user}
  */
  readonly user?: string;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesCephfsToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesCephfs | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    monitors: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.monitors),
    path: cdktf.stringToTerraform(struct!.path),
    read_only: cdktf.booleanToTerraform(struct!.readOnly),
    secret_file: cdktf.stringToTerraform(struct!.secretFile),
    secret_ref: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesCephfsSecretRefToTerraform(struct!.secretRef),
    user: cdktf.stringToTerraform(struct!.user),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesCephfsToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesCephfs | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    monitors: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.monitors),
      isBlock: false,
      type: "list",
      storageClassType: "stringList",
    },
    path: {
      value: cdktf.stringToHclTerraform(struct!.path),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    read_only: {
      value: cdktf.booleanToHclTerraform(struct!.readOnly),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    secret_file: {
      value: cdktf.stringToHclTerraform(struct!.secretFile),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    secret_ref: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesCephfsSecretRefToHclTerraform(struct!.secretRef),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesCephfsSecretRef",
    },
    user: {
      value: cdktf.stringToHclTerraform(struct!.user),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesCephfsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesCephfs | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._monitors !== undefined) {
      hasAnyValues = true;
      internalValueResult.monitors = this._monitors;
    }
    if (this._path !== undefined) {
      hasAnyValues = true;
      internalValueResult.path = this._path;
    }
    if (this._readOnly !== undefined) {
      hasAnyValues = true;
      internalValueResult.readOnly = this._readOnly;
    }
    if (this._secretFile !== undefined) {
      hasAnyValues = true;
      internalValueResult.secretFile = this._secretFile;
    }
    if (this._secretRef?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.secretRef = this._secretRef?.internalValue;
    }
    if (this._user !== undefined) {
      hasAnyValues = true;
      internalValueResult.user = this._user;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesCephfs | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._monitors = undefined;
      this._path = undefined;
      this._readOnly = undefined;
      this._secretFile = undefined;
      this._secretRef.internalValue = undefined;
      this._user = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._monitors = value.monitors;
      this._path = value.path;
      this._readOnly = value.readOnly;
      this._secretFile = value.secretFile;
      this._secretRef.internalValue = value.secretRef;
      this._user = value.user;
    }
  }

  // monitors - computed: false, optional: false, required: true
  private _monitors?: string[]; 
  public get monitors() {
    return this.getListAttribute('monitors');
  }
  public set monitors(value: string[]) {
    this._monitors = value;
  }
  // Temporarily expose input value. Use with caution.
  public get monitorsInput() {
    return this._monitors;
  }

  // path - computed: false, optional: true, required: false
  private _path?: string; 
  public get path() {
    return this.getStringAttribute('path');
  }
  public set path(value: string) {
    this._path = value;
  }
  public resetPath() {
    this._path = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get pathInput() {
    return this._path;
  }

  // read_only - computed: false, optional: true, required: false
  private _readOnly?: boolean | cdktf.IResolvable; 
  public get readOnly() {
    return this.getBooleanAttribute('read_only');
  }
  public set readOnly(value: boolean | cdktf.IResolvable) {
    this._readOnly = value;
  }
  public resetReadOnly() {
    this._readOnly = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get readOnlyInput() {
    return this._readOnly;
  }

  // secret_file - computed: false, optional: true, required: false
  private _secretFile?: string; 
  public get secretFile() {
    return this.getStringAttribute('secret_file');
  }
  public set secretFile(value: string) {
    this._secretFile = value;
  }
  public resetSecretFile() {
    this._secretFile = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get secretFileInput() {
    return this._secretFile;
  }

  // secret_ref - computed: false, optional: true, required: false
  private _secretRef = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesCephfsSecretRefOutputReference(this, "secret_ref");
  public get secretRef() {
    return this._secretRef;
  }
  public putSecretRef(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesCephfsSecretRef) {
    this._secretRef.internalValue = value;
  }
  public resetSecretRef() {
    this._secretRef.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get secretRefInput() {
    return this._secretRef.internalValue;
  }

  // user - computed: false, optional: true, required: false
  private _user?: string; 
  public get user() {
    return this.getStringAttribute('user');
  }
  public set user(value: string) {
    this._user = value;
  }
  public resetUser() {
    this._user = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get userInput() {
    return this._user;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesCinderSecretRef {
  /**
  * Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. TODO: Add other useful fields. apiVersion, kind, uid? More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Drop 'kubebuilder:default' when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#name DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#name}
  */
  readonly name?: string;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesCinderSecretRefToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesCinderSecretRef | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    name: cdktf.stringToTerraform(struct!.name),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesCinderSecretRefToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesCinderSecretRef | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    name: {
      value: cdktf.stringToHclTerraform(struct!.name),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesCinderSecretRefOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesCinderSecretRef | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._name !== undefined) {
      hasAnyValues = true;
      internalValueResult.name = this._name;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesCinderSecretRef | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._name = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._name = value.name;
    }
  }

  // name - computed: false, optional: true, required: false
  private _name?: string; 
  public get name() {
    return this.getStringAttribute('name');
  }
  public set name(value: string) {
    this._name = value;
  }
  public resetName() {
    this._name = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get nameInput() {
    return this._name;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesCinder {
  /**
  * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: 'ext4', 'xfs', 'ntfs'. Implicitly inferred to be 'ext4' if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#fs_type DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#fs_type}
  */
  readonly fsType?: string;
  /**
  * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#read_only DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#read_only}
  */
  readonly readOnly?: boolean | cdktf.IResolvable;
  /**
  * secretRef is optional: points to a secret object containing parameters used to connect to OpenStack.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#secret_ref DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#secret_ref}
  */
  readonly secretRef?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesCinderSecretRef;
  /**
  * volumeID used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#volume_id DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#volume_id}
  */
  readonly volumeId: string;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesCinderToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesCinder | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    fs_type: cdktf.stringToTerraform(struct!.fsType),
    read_only: cdktf.booleanToTerraform(struct!.readOnly),
    secret_ref: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesCinderSecretRefToTerraform(struct!.secretRef),
    volume_id: cdktf.stringToTerraform(struct!.volumeId),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesCinderToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesCinder | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    fs_type: {
      value: cdktf.stringToHclTerraform(struct!.fsType),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    read_only: {
      value: cdktf.booleanToHclTerraform(struct!.readOnly),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    secret_ref: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesCinderSecretRefToHclTerraform(struct!.secretRef),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesCinderSecretRef",
    },
    volume_id: {
      value: cdktf.stringToHclTerraform(struct!.volumeId),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesCinderOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesCinder | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._fsType !== undefined) {
      hasAnyValues = true;
      internalValueResult.fsType = this._fsType;
    }
    if (this._readOnly !== undefined) {
      hasAnyValues = true;
      internalValueResult.readOnly = this._readOnly;
    }
    if (this._secretRef?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.secretRef = this._secretRef?.internalValue;
    }
    if (this._volumeId !== undefined) {
      hasAnyValues = true;
      internalValueResult.volumeId = this._volumeId;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesCinder | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._fsType = undefined;
      this._readOnly = undefined;
      this._secretRef.internalValue = undefined;
      this._volumeId = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._fsType = value.fsType;
      this._readOnly = value.readOnly;
      this._secretRef.internalValue = value.secretRef;
      this._volumeId = value.volumeId;
    }
  }

  // fs_type - computed: false, optional: true, required: false
  private _fsType?: string; 
  public get fsType() {
    return this.getStringAttribute('fs_type');
  }
  public set fsType(value: string) {
    this._fsType = value;
  }
  public resetFsType() {
    this._fsType = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get fsTypeInput() {
    return this._fsType;
  }

  // read_only - computed: false, optional: true, required: false
  private _readOnly?: boolean | cdktf.IResolvable; 
  public get readOnly() {
    return this.getBooleanAttribute('read_only');
  }
  public set readOnly(value: boolean | cdktf.IResolvable) {
    this._readOnly = value;
  }
  public resetReadOnly() {
    this._readOnly = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get readOnlyInput() {
    return this._readOnly;
  }

  // secret_ref - computed: false, optional: true, required: false
  private _secretRef = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesCinderSecretRefOutputReference(this, "secret_ref");
  public get secretRef() {
    return this._secretRef;
  }
  public putSecretRef(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesCinderSecretRef) {
    this._secretRef.internalValue = value;
  }
  public resetSecretRef() {
    this._secretRef.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get secretRefInput() {
    return this._secretRef.internalValue;
  }

  // volume_id - computed: false, optional: false, required: true
  private _volumeId?: string; 
  public get volumeId() {
    return this.getStringAttribute('volume_id');
  }
  public set volumeId(value: string) {
    this._volumeId = value;
  }
  // Temporarily expose input value. Use with caution.
  public get volumeIdInput() {
    return this._volumeId;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesConfigMapItems {
  /**
  * key is the key to project.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#key DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#key}
  */
  readonly key: string;
  /**
  * mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#mode DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#mode}
  */
  readonly mode?: number;
  /**
  * path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#path DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#path}
  */
  readonly path: string;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesConfigMapItemsToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesConfigMapItems | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    key: cdktf.stringToTerraform(struct!.key),
    mode: cdktf.numberToTerraform(struct!.mode),
    path: cdktf.stringToTerraform(struct!.path),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesConfigMapItemsToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesConfigMapItems | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    key: {
      value: cdktf.stringToHclTerraform(struct!.key),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    mode: {
      value: cdktf.numberToHclTerraform(struct!.mode),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    path: {
      value: cdktf.stringToHclTerraform(struct!.path),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesConfigMapItemsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesConfigMapItems | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._key !== undefined) {
      hasAnyValues = true;
      internalValueResult.key = this._key;
    }
    if (this._mode !== undefined) {
      hasAnyValues = true;
      internalValueResult.mode = this._mode;
    }
    if (this._path !== undefined) {
      hasAnyValues = true;
      internalValueResult.path = this._path;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesConfigMapItems | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._key = undefined;
      this._mode = undefined;
      this._path = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._key = value.key;
      this._mode = value.mode;
      this._path = value.path;
    }
  }

  // key - computed: false, optional: false, required: true
  private _key?: string; 
  public get key() {
    return this.getStringAttribute('key');
  }
  public set key(value: string) {
    this._key = value;
  }
  // Temporarily expose input value. Use with caution.
  public get keyInput() {
    return this._key;
  }

  // mode - computed: false, optional: true, required: false
  private _mode?: number; 
  public get mode() {
    return this.getNumberAttribute('mode');
  }
  public set mode(value: number) {
    this._mode = value;
  }
  public resetMode() {
    this._mode = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get modeInput() {
    return this._mode;
  }

  // path - computed: false, optional: false, required: true
  private _path?: string; 
  public get path() {
    return this.getStringAttribute('path');
  }
  public set path(value: string) {
    this._path = value;
  }
  // Temporarily expose input value. Use with caution.
  public get pathInput() {
    return this._path;
  }
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesConfigMapItemsList extends cdktf.ComplexList {
  public internalValue? : DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesConfigMapItems[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesConfigMapItemsOutputReference {
    return new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesConfigMapItemsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesConfigMap {
  /**
  * defaultMode is optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#default_mode DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#default_mode}
  */
  readonly defaultMode?: number;
  /**
  * items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#items DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#items}
  */
  readonly items?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesConfigMapItems[] | cdktf.IResolvable;
  /**
  * Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. TODO: Add other useful fields. apiVersion, kind, uid? More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Drop 'kubebuilder:default' when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#name DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#name}
  */
  readonly name?: string;
  /**
  * optional specify whether the ConfigMap or its keys must be defined
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#optional DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#optional}
  */
  readonly optional?: boolean | cdktf.IResolvable;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesConfigMapToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesConfigMap | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    default_mode: cdktf.numberToTerraform(struct!.defaultMode),
    items: cdktf.listMapper(dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesConfigMapItemsToTerraform, false)(struct!.items),
    name: cdktf.stringToTerraform(struct!.name),
    optional: cdktf.booleanToTerraform(struct!.optional),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesConfigMapToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesConfigMap | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    default_mode: {
      value: cdktf.numberToHclTerraform(struct!.defaultMode),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    items: {
      value: cdktf.listMapperHcl(dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesConfigMapItemsToHclTerraform, false)(struct!.items),
      isBlock: true,
      type: "list",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesConfigMapItemsList",
    },
    name: {
      value: cdktf.stringToHclTerraform(struct!.name),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    optional: {
      value: cdktf.booleanToHclTerraform(struct!.optional),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesConfigMapOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesConfigMap | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._defaultMode !== undefined) {
      hasAnyValues = true;
      internalValueResult.defaultMode = this._defaultMode;
    }
    if (this._items?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.items = this._items?.internalValue;
    }
    if (this._name !== undefined) {
      hasAnyValues = true;
      internalValueResult.name = this._name;
    }
    if (this._optional !== undefined) {
      hasAnyValues = true;
      internalValueResult.optional = this._optional;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesConfigMap | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._defaultMode = undefined;
      this._items.internalValue = undefined;
      this._name = undefined;
      this._optional = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._defaultMode = value.defaultMode;
      this._items.internalValue = value.items;
      this._name = value.name;
      this._optional = value.optional;
    }
  }

  // default_mode - computed: false, optional: true, required: false
  private _defaultMode?: number; 
  public get defaultMode() {
    return this.getNumberAttribute('default_mode');
  }
  public set defaultMode(value: number) {
    this._defaultMode = value;
  }
  public resetDefaultMode() {
    this._defaultMode = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get defaultModeInput() {
    return this._defaultMode;
  }

  // items - computed: false, optional: true, required: false
  private _items = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesConfigMapItemsList(this, "items", false);
  public get items() {
    return this._items;
  }
  public putItems(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesConfigMapItems[] | cdktf.IResolvable) {
    this._items.internalValue = value;
  }
  public resetItems() {
    this._items.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get itemsInput() {
    return this._items.internalValue;
  }

  // name - computed: false, optional: true, required: false
  private _name?: string; 
  public get name() {
    return this.getStringAttribute('name');
  }
  public set name(value: string) {
    this._name = value;
  }
  public resetName() {
    this._name = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get nameInput() {
    return this._name;
  }

  // optional - computed: false, optional: true, required: false
  private _optional?: boolean | cdktf.IResolvable; 
  public get optional() {
    return this.getBooleanAttribute('optional');
  }
  public set optional(value: boolean | cdktf.IResolvable) {
    this._optional = value;
  }
  public resetOptional() {
    this._optional = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get optionalInput() {
    return this._optional;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesCsiNodePublishSecretRef {
  /**
  * Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. TODO: Add other useful fields. apiVersion, kind, uid? More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Drop 'kubebuilder:default' when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#name DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#name}
  */
  readonly name?: string;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesCsiNodePublishSecretRefToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesCsiNodePublishSecretRef | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    name: cdktf.stringToTerraform(struct!.name),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesCsiNodePublishSecretRefToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesCsiNodePublishSecretRef | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    name: {
      value: cdktf.stringToHclTerraform(struct!.name),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesCsiNodePublishSecretRefOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesCsiNodePublishSecretRef | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._name !== undefined) {
      hasAnyValues = true;
      internalValueResult.name = this._name;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesCsiNodePublishSecretRef | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._name = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._name = value.name;
    }
  }

  // name - computed: false, optional: true, required: false
  private _name?: string; 
  public get name() {
    return this.getStringAttribute('name');
  }
  public set name(value: string) {
    this._name = value;
  }
  public resetName() {
    this._name = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get nameInput() {
    return this._name;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesCsi {
  /**
  * driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#driver DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#driver}
  */
  readonly driver: string;
  /**
  * fsType to mount. Ex. 'ext4', 'xfs', 'ntfs'. If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#fs_type DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#fs_type}
  */
  readonly fsType?: string;
  /**
  * nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#node_publish_secret_ref DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#node_publish_secret_ref}
  */
  readonly nodePublishSecretRef?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesCsiNodePublishSecretRef;
  /**
  * readOnly specifies a read-only configuration for the volume. Defaults to false (read/write).
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#read_only DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#read_only}
  */
  readonly readOnly?: boolean | cdktf.IResolvable;
  /**
  * volumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#volume_attributes DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#volume_attributes}
  */
  readonly volumeAttributes?: { [key: string]: string };
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesCsiToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesCsi | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    driver: cdktf.stringToTerraform(struct!.driver),
    fs_type: cdktf.stringToTerraform(struct!.fsType),
    node_publish_secret_ref: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesCsiNodePublishSecretRefToTerraform(struct!.nodePublishSecretRef),
    read_only: cdktf.booleanToTerraform(struct!.readOnly),
    volume_attributes: cdktf.hashMapper(cdktf.stringToTerraform)(struct!.volumeAttributes),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesCsiToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesCsi | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    driver: {
      value: cdktf.stringToHclTerraform(struct!.driver),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    fs_type: {
      value: cdktf.stringToHclTerraform(struct!.fsType),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    node_publish_secret_ref: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesCsiNodePublishSecretRefToHclTerraform(struct!.nodePublishSecretRef),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesCsiNodePublishSecretRef",
    },
    read_only: {
      value: cdktf.booleanToHclTerraform(struct!.readOnly),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    volume_attributes: {
      value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct!.volumeAttributes),
      isBlock: false,
      type: "map",
      storageClassType: "stringMap",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesCsiOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesCsi | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._driver !== undefined) {
      hasAnyValues = true;
      internalValueResult.driver = this._driver;
    }
    if (this._fsType !== undefined) {
      hasAnyValues = true;
      internalValueResult.fsType = this._fsType;
    }
    if (this._nodePublishSecretRef?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.nodePublishSecretRef = this._nodePublishSecretRef?.internalValue;
    }
    if (this._readOnly !== undefined) {
      hasAnyValues = true;
      internalValueResult.readOnly = this._readOnly;
    }
    if (this._volumeAttributes !== undefined) {
      hasAnyValues = true;
      internalValueResult.volumeAttributes = this._volumeAttributes;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesCsi | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._driver = undefined;
      this._fsType = undefined;
      this._nodePublishSecretRef.internalValue = undefined;
      this._readOnly = undefined;
      this._volumeAttributes = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._driver = value.driver;
      this._fsType = value.fsType;
      this._nodePublishSecretRef.internalValue = value.nodePublishSecretRef;
      this._readOnly = value.readOnly;
      this._volumeAttributes = value.volumeAttributes;
    }
  }

  // driver - computed: false, optional: false, required: true
  private _driver?: string; 
  public get driver() {
    return this.getStringAttribute('driver');
  }
  public set driver(value: string) {
    this._driver = value;
  }
  // Temporarily expose input value. Use with caution.
  public get driverInput() {
    return this._driver;
  }

  // fs_type - computed: false, optional: true, required: false
  private _fsType?: string; 
  public get fsType() {
    return this.getStringAttribute('fs_type');
  }
  public set fsType(value: string) {
    this._fsType = value;
  }
  public resetFsType() {
    this._fsType = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get fsTypeInput() {
    return this._fsType;
  }

  // node_publish_secret_ref - computed: false, optional: true, required: false
  private _nodePublishSecretRef = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesCsiNodePublishSecretRefOutputReference(this, "node_publish_secret_ref");
  public get nodePublishSecretRef() {
    return this._nodePublishSecretRef;
  }
  public putNodePublishSecretRef(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesCsiNodePublishSecretRef) {
    this._nodePublishSecretRef.internalValue = value;
  }
  public resetNodePublishSecretRef() {
    this._nodePublishSecretRef.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get nodePublishSecretRefInput() {
    return this._nodePublishSecretRef.internalValue;
  }

  // read_only - computed: false, optional: true, required: false
  private _readOnly?: boolean | cdktf.IResolvable; 
  public get readOnly() {
    return this.getBooleanAttribute('read_only');
  }
  public set readOnly(value: boolean | cdktf.IResolvable) {
    this._readOnly = value;
  }
  public resetReadOnly() {
    this._readOnly = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get readOnlyInput() {
    return this._readOnly;
  }

  // volume_attributes - computed: false, optional: true, required: false
  private _volumeAttributes?: { [key: string]: string }; 
  public get volumeAttributes() {
    return this.getStringMapAttribute('volume_attributes');
  }
  public set volumeAttributes(value: { [key: string]: string }) {
    this._volumeAttributes = value;
  }
  public resetVolumeAttributes() {
    this._volumeAttributes = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get volumeAttributesInput() {
    return this._volumeAttributes;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesDownwardApiItemsFieldRef {
  /**
  * Version of the schema the FieldPath is written in terms of, defaults to 'v1'.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#api_version DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#api_version}
  */
  readonly apiVersion?: string;
  /**
  * Path of the field to select in the specified API version.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#field_path DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#field_path}
  */
  readonly fieldPath: string;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesDownwardApiItemsFieldRefToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesDownwardApiItemsFieldRef | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    api_version: cdktf.stringToTerraform(struct!.apiVersion),
    field_path: cdktf.stringToTerraform(struct!.fieldPath),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesDownwardApiItemsFieldRefToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesDownwardApiItemsFieldRef | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    api_version: {
      value: cdktf.stringToHclTerraform(struct!.apiVersion),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    field_path: {
      value: cdktf.stringToHclTerraform(struct!.fieldPath),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesDownwardApiItemsFieldRefOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesDownwardApiItemsFieldRef | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._apiVersion !== undefined) {
      hasAnyValues = true;
      internalValueResult.apiVersion = this._apiVersion;
    }
    if (this._fieldPath !== undefined) {
      hasAnyValues = true;
      internalValueResult.fieldPath = this._fieldPath;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesDownwardApiItemsFieldRef | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._apiVersion = undefined;
      this._fieldPath = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._apiVersion = value.apiVersion;
      this._fieldPath = value.fieldPath;
    }
  }

  // api_version - computed: false, optional: true, required: false
  private _apiVersion?: string; 
  public get apiVersion() {
    return this.getStringAttribute('api_version');
  }
  public set apiVersion(value: string) {
    this._apiVersion = value;
  }
  public resetApiVersion() {
    this._apiVersion = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get apiVersionInput() {
    return this._apiVersion;
  }

  // field_path - computed: false, optional: false, required: true
  private _fieldPath?: string; 
  public get fieldPath() {
    return this.getStringAttribute('field_path');
  }
  public set fieldPath(value: string) {
    this._fieldPath = value;
  }
  // Temporarily expose input value. Use with caution.
  public get fieldPathInput() {
    return this._fieldPath;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesDownwardApiItemsResourceFieldRef {
  /**
  * Container name: required for volumes, optional for env vars
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#container_name DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#container_name}
  */
  readonly containerName?: string;
  /**
  * Specifies the output format of the exposed resources, defaults to '1'
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#divisor DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#divisor}
  */
  readonly divisor?: string;
  /**
  * Required: resource to select
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#resource DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#resource}
  */
  readonly resource: string;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesDownwardApiItemsResourceFieldRefToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesDownwardApiItemsResourceFieldRef | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    container_name: cdktf.stringToTerraform(struct!.containerName),
    divisor: cdktf.stringToTerraform(struct!.divisor),
    resource: cdktf.stringToTerraform(struct!.resource),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesDownwardApiItemsResourceFieldRefToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesDownwardApiItemsResourceFieldRef | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    container_name: {
      value: cdktf.stringToHclTerraform(struct!.containerName),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    divisor: {
      value: cdktf.stringToHclTerraform(struct!.divisor),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    resource: {
      value: cdktf.stringToHclTerraform(struct!.resource),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesDownwardApiItemsResourceFieldRefOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesDownwardApiItemsResourceFieldRef | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._containerName !== undefined) {
      hasAnyValues = true;
      internalValueResult.containerName = this._containerName;
    }
    if (this._divisor !== undefined) {
      hasAnyValues = true;
      internalValueResult.divisor = this._divisor;
    }
    if (this._resource !== undefined) {
      hasAnyValues = true;
      internalValueResult.resource = this._resource;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesDownwardApiItemsResourceFieldRef | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._containerName = undefined;
      this._divisor = undefined;
      this._resource = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._containerName = value.containerName;
      this._divisor = value.divisor;
      this._resource = value.resource;
    }
  }

  // container_name - computed: false, optional: true, required: false
  private _containerName?: string; 
  public get containerName() {
    return this.getStringAttribute('container_name');
  }
  public set containerName(value: string) {
    this._containerName = value;
  }
  public resetContainerName() {
    this._containerName = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get containerNameInput() {
    return this._containerName;
  }

  // divisor - computed: false, optional: true, required: false
  private _divisor?: string; 
  public get divisor() {
    return this.getStringAttribute('divisor');
  }
  public set divisor(value: string) {
    this._divisor = value;
  }
  public resetDivisor() {
    this._divisor = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get divisorInput() {
    return this._divisor;
  }

  // resource - computed: false, optional: false, required: true
  private _resource?: string; 
  public get resource() {
    return this.getStringAttribute('resource');
  }
  public set resource(value: string) {
    this._resource = value;
  }
  // Temporarily expose input value. Use with caution.
  public get resourceInput() {
    return this._resource;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesDownwardApiItems {
  /**
  * Required: Selects a field of the pod: only annotations, labels, name, namespace and uid are supported.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#field_ref DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#field_ref}
  */
  readonly fieldRef?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesDownwardApiItemsFieldRef;
  /**
  * Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#mode DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#mode}
  */
  readonly mode?: number;
  /**
  * Required: Path is the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#path DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#path}
  */
  readonly path: string;
  /**
  * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#resource_field_ref DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#resource_field_ref}
  */
  readonly resourceFieldRef?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesDownwardApiItemsResourceFieldRef;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesDownwardApiItemsToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesDownwardApiItems | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    field_ref: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesDownwardApiItemsFieldRefToTerraform(struct!.fieldRef),
    mode: cdktf.numberToTerraform(struct!.mode),
    path: cdktf.stringToTerraform(struct!.path),
    resource_field_ref: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesDownwardApiItemsResourceFieldRefToTerraform(struct!.resourceFieldRef),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesDownwardApiItemsToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesDownwardApiItems | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    field_ref: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesDownwardApiItemsFieldRefToHclTerraform(struct!.fieldRef),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesDownwardApiItemsFieldRef",
    },
    mode: {
      value: cdktf.numberToHclTerraform(struct!.mode),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    path: {
      value: cdktf.stringToHclTerraform(struct!.path),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    resource_field_ref: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesDownwardApiItemsResourceFieldRefToHclTerraform(struct!.resourceFieldRef),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesDownwardApiItemsResourceFieldRef",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesDownwardApiItemsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesDownwardApiItems | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._fieldRef?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.fieldRef = this._fieldRef?.internalValue;
    }
    if (this._mode !== undefined) {
      hasAnyValues = true;
      internalValueResult.mode = this._mode;
    }
    if (this._path !== undefined) {
      hasAnyValues = true;
      internalValueResult.path = this._path;
    }
    if (this._resourceFieldRef?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.resourceFieldRef = this._resourceFieldRef?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesDownwardApiItems | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._fieldRef.internalValue = undefined;
      this._mode = undefined;
      this._path = undefined;
      this._resourceFieldRef.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._fieldRef.internalValue = value.fieldRef;
      this._mode = value.mode;
      this._path = value.path;
      this._resourceFieldRef.internalValue = value.resourceFieldRef;
    }
  }

  // field_ref - computed: false, optional: true, required: false
  private _fieldRef = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesDownwardApiItemsFieldRefOutputReference(this, "field_ref");
  public get fieldRef() {
    return this._fieldRef;
  }
  public putFieldRef(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesDownwardApiItemsFieldRef) {
    this._fieldRef.internalValue = value;
  }
  public resetFieldRef() {
    this._fieldRef.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get fieldRefInput() {
    return this._fieldRef.internalValue;
  }

  // mode - computed: false, optional: true, required: false
  private _mode?: number; 
  public get mode() {
    return this.getNumberAttribute('mode');
  }
  public set mode(value: number) {
    this._mode = value;
  }
  public resetMode() {
    this._mode = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get modeInput() {
    return this._mode;
  }

  // path - computed: false, optional: false, required: true
  private _path?: string; 
  public get path() {
    return this.getStringAttribute('path');
  }
  public set path(value: string) {
    this._path = value;
  }
  // Temporarily expose input value. Use with caution.
  public get pathInput() {
    return this._path;
  }

  // resource_field_ref - computed: false, optional: true, required: false
  private _resourceFieldRef = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesDownwardApiItemsResourceFieldRefOutputReference(this, "resource_field_ref");
  public get resourceFieldRef() {
    return this._resourceFieldRef;
  }
  public putResourceFieldRef(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesDownwardApiItemsResourceFieldRef) {
    this._resourceFieldRef.internalValue = value;
  }
  public resetResourceFieldRef() {
    this._resourceFieldRef.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get resourceFieldRefInput() {
    return this._resourceFieldRef.internalValue;
  }
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesDownwardApiItemsList extends cdktf.ComplexList {
  public internalValue? : DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesDownwardApiItems[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesDownwardApiItemsOutputReference {
    return new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesDownwardApiItemsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesDownwardApi {
  /**
  * Optional: mode bits to use on created files by default. Must be a Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#default_mode DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#default_mode}
  */
  readonly defaultMode?: number;
  /**
  * Items is a list of downward API volume file
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#items DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#items}
  */
  readonly items?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesDownwardApiItems[] | cdktf.IResolvable;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesDownwardApiToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesDownwardApi | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    default_mode: cdktf.numberToTerraform(struct!.defaultMode),
    items: cdktf.listMapper(dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesDownwardApiItemsToTerraform, false)(struct!.items),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesDownwardApiToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesDownwardApi | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    default_mode: {
      value: cdktf.numberToHclTerraform(struct!.defaultMode),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    items: {
      value: cdktf.listMapperHcl(dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesDownwardApiItemsToHclTerraform, false)(struct!.items),
      isBlock: true,
      type: "list",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesDownwardApiItemsList",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesDownwardApiOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesDownwardApi | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._defaultMode !== undefined) {
      hasAnyValues = true;
      internalValueResult.defaultMode = this._defaultMode;
    }
    if (this._items?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.items = this._items?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesDownwardApi | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._defaultMode = undefined;
      this._items.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._defaultMode = value.defaultMode;
      this._items.internalValue = value.items;
    }
  }

  // default_mode - computed: false, optional: true, required: false
  private _defaultMode?: number; 
  public get defaultMode() {
    return this.getNumberAttribute('default_mode');
  }
  public set defaultMode(value: number) {
    this._defaultMode = value;
  }
  public resetDefaultMode() {
    this._defaultMode = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get defaultModeInput() {
    return this._defaultMode;
  }

  // items - computed: false, optional: true, required: false
  private _items = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesDownwardApiItemsList(this, "items", false);
  public get items() {
    return this._items;
  }
  public putItems(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesDownwardApiItems[] | cdktf.IResolvable) {
    this._items.internalValue = value;
  }
  public resetItems() {
    this._items.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get itemsInput() {
    return this._items.internalValue;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEmptyDir {
  /**
  * medium represents what type of storage medium should back this directory. The default is '' which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#medium DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#medium}
  */
  readonly medium?: string;
  /**
  * sizeLimit is the total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#size_limit DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#size_limit}
  */
  readonly sizeLimit?: string;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEmptyDirToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEmptyDir | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    medium: cdktf.stringToTerraform(struct!.medium),
    size_limit: cdktf.stringToTerraform(struct!.sizeLimit),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEmptyDirToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEmptyDir | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    medium: {
      value: cdktf.stringToHclTerraform(struct!.medium),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    size_limit: {
      value: cdktf.stringToHclTerraform(struct!.sizeLimit),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEmptyDirOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEmptyDir | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._medium !== undefined) {
      hasAnyValues = true;
      internalValueResult.medium = this._medium;
    }
    if (this._sizeLimit !== undefined) {
      hasAnyValues = true;
      internalValueResult.sizeLimit = this._sizeLimit;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEmptyDir | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._medium = undefined;
      this._sizeLimit = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._medium = value.medium;
      this._sizeLimit = value.sizeLimit;
    }
  }

  // medium - computed: false, optional: true, required: false
  private _medium?: string; 
  public get medium() {
    return this.getStringAttribute('medium');
  }
  public set medium(value: string) {
    this._medium = value;
  }
  public resetMedium() {
    this._medium = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get mediumInput() {
    return this._medium;
  }

  // size_limit - computed: false, optional: true, required: false
  private _sizeLimit?: string; 
  public get sizeLimit() {
    return this.getStringAttribute('size_limit');
  }
  public set sizeLimit(value: string) {
    this._sizeLimit = value;
  }
  public resetSizeLimit() {
    this._sizeLimit = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get sizeLimitInput() {
    return this._sizeLimit;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpecDataSource {
  /**
  * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#api_group DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#api_group}
  */
  readonly apiGroup?: string;
  /**
  * Kind is the type of resource being referenced
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#kind DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#kind}
  */
  readonly kind: string;
  /**
  * Name is the name of resource being referenced
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#name DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#name}
  */
  readonly name: string;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpecDataSourceToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpecDataSource | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    api_group: cdktf.stringToTerraform(struct!.apiGroup),
    kind: cdktf.stringToTerraform(struct!.kind),
    name: cdktf.stringToTerraform(struct!.name),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpecDataSourceToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpecDataSource | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    api_group: {
      value: cdktf.stringToHclTerraform(struct!.apiGroup),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    kind: {
      value: cdktf.stringToHclTerraform(struct!.kind),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    name: {
      value: cdktf.stringToHclTerraform(struct!.name),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpecDataSourceOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpecDataSource | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._apiGroup !== undefined) {
      hasAnyValues = true;
      internalValueResult.apiGroup = this._apiGroup;
    }
    if (this._kind !== undefined) {
      hasAnyValues = true;
      internalValueResult.kind = this._kind;
    }
    if (this._name !== undefined) {
      hasAnyValues = true;
      internalValueResult.name = this._name;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpecDataSource | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._apiGroup = undefined;
      this._kind = undefined;
      this._name = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._apiGroup = value.apiGroup;
      this._kind = value.kind;
      this._name = value.name;
    }
  }

  // api_group - computed: false, optional: true, required: false
  private _apiGroup?: string; 
  public get apiGroup() {
    return this.getStringAttribute('api_group');
  }
  public set apiGroup(value: string) {
    this._apiGroup = value;
  }
  public resetApiGroup() {
    this._apiGroup = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get apiGroupInput() {
    return this._apiGroup;
  }

  // kind - computed: false, optional: false, required: true
  private _kind?: string; 
  public get kind() {
    return this.getStringAttribute('kind');
  }
  public set kind(value: string) {
    this._kind = value;
  }
  // Temporarily expose input value. Use with caution.
  public get kindInput() {
    return this._kind;
  }

  // name - computed: false, optional: false, required: true
  private _name?: string; 
  public get name() {
    return this.getStringAttribute('name');
  }
  public set name(value: string) {
    this._name = value;
  }
  // Temporarily expose input value. Use with caution.
  public get nameInput() {
    return this._name;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef {
  /**
  * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#api_group DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#api_group}
  */
  readonly apiGroup?: string;
  /**
  * Kind is the type of resource being referenced
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#kind DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#kind}
  */
  readonly kind: string;
  /**
  * Name is the name of resource being referenced
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#name DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#name}
  */
  readonly name: string;
  /**
  * Namespace is the namespace of resource being referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#namespace DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#namespace}
  */
  readonly namespace?: string;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    api_group: cdktf.stringToTerraform(struct!.apiGroup),
    kind: cdktf.stringToTerraform(struct!.kind),
    name: cdktf.stringToTerraform(struct!.name),
    namespace: cdktf.stringToTerraform(struct!.namespace),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    api_group: {
      value: cdktf.stringToHclTerraform(struct!.apiGroup),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    kind: {
      value: cdktf.stringToHclTerraform(struct!.kind),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    name: {
      value: cdktf.stringToHclTerraform(struct!.name),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    namespace: {
      value: cdktf.stringToHclTerraform(struct!.namespace),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._apiGroup !== undefined) {
      hasAnyValues = true;
      internalValueResult.apiGroup = this._apiGroup;
    }
    if (this._kind !== undefined) {
      hasAnyValues = true;
      internalValueResult.kind = this._kind;
    }
    if (this._name !== undefined) {
      hasAnyValues = true;
      internalValueResult.name = this._name;
    }
    if (this._namespace !== undefined) {
      hasAnyValues = true;
      internalValueResult.namespace = this._namespace;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._apiGroup = undefined;
      this._kind = undefined;
      this._name = undefined;
      this._namespace = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._apiGroup = value.apiGroup;
      this._kind = value.kind;
      this._name = value.name;
      this._namespace = value.namespace;
    }
  }

  // api_group - computed: false, optional: true, required: false
  private _apiGroup?: string; 
  public get apiGroup() {
    return this.getStringAttribute('api_group');
  }
  public set apiGroup(value: string) {
    this._apiGroup = value;
  }
  public resetApiGroup() {
    this._apiGroup = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get apiGroupInput() {
    return this._apiGroup;
  }

  // kind - computed: false, optional: false, required: true
  private _kind?: string; 
  public get kind() {
    return this.getStringAttribute('kind');
  }
  public set kind(value: string) {
    this._kind = value;
  }
  // Temporarily expose input value. Use with caution.
  public get kindInput() {
    return this._kind;
  }

  // name - computed: false, optional: false, required: true
  private _name?: string; 
  public get name() {
    return this.getStringAttribute('name');
  }
  public set name(value: string) {
    this._name = value;
  }
  // Temporarily expose input value. Use with caution.
  public get nameInput() {
    return this._name;
  }

  // namespace - computed: false, optional: true, required: false
  private _namespace?: string; 
  public get namespace() {
    return this.getStringAttribute('namespace');
  }
  public set namespace(value: string) {
    this._namespace = value;
  }
  public resetNamespace() {
    this._namespace = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get namespaceInput() {
    return this._namespace;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpecResources {
  /**
  * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#limits DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#limits}
  */
  readonly limits?: { [key: string]: string };
  /**
  * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#requests DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#requests}
  */
  readonly requests?: { [key: string]: string };
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpecResourcesToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpecResources | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    limits: cdktf.hashMapper(cdktf.stringToTerraform)(struct!.limits),
    requests: cdktf.hashMapper(cdktf.stringToTerraform)(struct!.requests),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpecResourcesToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpecResources | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    limits: {
      value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct!.limits),
      isBlock: false,
      type: "map",
      storageClassType: "stringMap",
    },
    requests: {
      value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct!.requests),
      isBlock: false,
      type: "map",
      storageClassType: "stringMap",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpecResourcesOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpecResources | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._limits !== undefined) {
      hasAnyValues = true;
      internalValueResult.limits = this._limits;
    }
    if (this._requests !== undefined) {
      hasAnyValues = true;
      internalValueResult.requests = this._requests;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpecResources | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._limits = undefined;
      this._requests = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._limits = value.limits;
      this._requests = value.requests;
    }
  }

  // limits - computed: false, optional: true, required: false
  private _limits?: { [key: string]: string }; 
  public get limits() {
    return this.getStringMapAttribute('limits');
  }
  public set limits(value: { [key: string]: string }) {
    this._limits = value;
  }
  public resetLimits() {
    this._limits = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get limitsInput() {
    return this._limits;
  }

  // requests - computed: false, optional: true, required: false
  private _requests?: { [key: string]: string }; 
  public get requests() {
    return this.getStringMapAttribute('requests');
  }
  public set requests(value: { [key: string]: string }) {
    this._requests = value;
  }
  public resetRequests() {
    this._requests = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get requestsInput() {
    return this._requests;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions {
  /**
  * key is the label key that the selector applies to.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#key DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#key}
  */
  readonly key: string;
  /**
  * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#operator DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#operator}
  */
  readonly operator: string;
  /**
  * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#values DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#values}
  */
  readonly values?: string[];
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    key: cdktf.stringToTerraform(struct!.key),
    operator: cdktf.stringToTerraform(struct!.operator),
    values: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.values),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    key: {
      value: cdktf.stringToHclTerraform(struct!.key),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    operator: {
      value: cdktf.stringToHclTerraform(struct!.operator),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    values: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.values),
      isBlock: false,
      type: "list",
      storageClassType: "stringList",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._key !== undefined) {
      hasAnyValues = true;
      internalValueResult.key = this._key;
    }
    if (this._operator !== undefined) {
      hasAnyValues = true;
      internalValueResult.operator = this._operator;
    }
    if (this._values !== undefined) {
      hasAnyValues = true;
      internalValueResult.values = this._values;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._key = undefined;
      this._operator = undefined;
      this._values = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._key = value.key;
      this._operator = value.operator;
      this._values = value.values;
    }
  }

  // key - computed: false, optional: false, required: true
  private _key?: string; 
  public get key() {
    return this.getStringAttribute('key');
  }
  public set key(value: string) {
    this._key = value;
  }
  // Temporarily expose input value. Use with caution.
  public get keyInput() {
    return this._key;
  }

  // operator - computed: false, optional: false, required: true
  private _operator?: string; 
  public get operator() {
    return this.getStringAttribute('operator');
  }
  public set operator(value: string) {
    this._operator = value;
  }
  // Temporarily expose input value. Use with caution.
  public get operatorInput() {
    return this._operator;
  }

  // values - computed: false, optional: true, required: false
  private _values?: string[]; 
  public get values() {
    return this.getListAttribute('values');
  }
  public set values(value: string[]) {
    this._values = value;
  }
  public resetValues() {
    this._values = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get valuesInput() {
    return this._values;
  }
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsList extends cdktf.ComplexList {
  public internalValue? : DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsOutputReference {
    return new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpecSelector {
  /**
  * matchExpressions is a list of label selector requirements. The requirements are ANDed.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#match_expressions DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#match_expressions}
  */
  readonly matchExpressions?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions[] | cdktf.IResolvable;
  /**
  * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is 'key', the operator is 'In', and the values array contains only 'value'. The requirements are ANDed.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#match_labels DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#match_labels}
  */
  readonly matchLabels?: { [key: string]: string };
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpecSelectorToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpecSelector | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    match_expressions: cdktf.listMapper(dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsToTerraform, false)(struct!.matchExpressions),
    match_labels: cdktf.hashMapper(cdktf.stringToTerraform)(struct!.matchLabels),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpecSelectorToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpecSelector | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    match_expressions: {
      value: cdktf.listMapperHcl(dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsToHclTerraform, false)(struct!.matchExpressions),
      isBlock: true,
      type: "list",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsList",
    },
    match_labels: {
      value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct!.matchLabels),
      isBlock: false,
      type: "map",
      storageClassType: "stringMap",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpecSelectorOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpecSelector | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._matchExpressions?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.matchExpressions = this._matchExpressions?.internalValue;
    }
    if (this._matchLabels !== undefined) {
      hasAnyValues = true;
      internalValueResult.matchLabels = this._matchLabels;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpecSelector | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._matchExpressions.internalValue = undefined;
      this._matchLabels = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._matchExpressions.internalValue = value.matchExpressions;
      this._matchLabels = value.matchLabels;
    }
  }

  // match_expressions - computed: false, optional: true, required: false
  private _matchExpressions = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsList(this, "match_expressions", false);
  public get matchExpressions() {
    return this._matchExpressions;
  }
  public putMatchExpressions(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions[] | cdktf.IResolvable) {
    this._matchExpressions.internalValue = value;
  }
  public resetMatchExpressions() {
    this._matchExpressions.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get matchExpressionsInput() {
    return this._matchExpressions.internalValue;
  }

  // match_labels - computed: false, optional: true, required: false
  private _matchLabels?: { [key: string]: string }; 
  public get matchLabels() {
    return this.getStringMapAttribute('match_labels');
  }
  public set matchLabels(value: { [key: string]: string }) {
    this._matchLabels = value;
  }
  public resetMatchLabels() {
    this._matchLabels = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get matchLabelsInput() {
    return this._matchLabels;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpec {
  /**
  * accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#access_modes DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#access_modes}
  */
  readonly accessModes?: string[];
  /**
  * dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#data_source DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#data_source}
  */
  readonly dataSource?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpecDataSource;
  /**
  * dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While dataSource ignores disallowed values (dropping them), dataSourceRef preserves all values, and generates an error if a disallowed value is specified. * While dataSource only allows local objects, dataSourceRef allows objects in any namespaces. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#data_source_ref DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#data_source_ref}
  */
  readonly dataSourceRef?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef;
  /**
  * resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#resources DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#resources}
  */
  readonly resources?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpecResources;
  /**
  * selector is a label query over volumes to consider for binding.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#selector DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#selector}
  */
  readonly selector?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpecSelector;
  /**
  * storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#storage_class_name DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#storage_class_name}
  */
  readonly storageClassName?: string;
  /**
  * volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim. If specified, the CSI driver will create or update the volume with the attributes defined in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName, it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass will be applied to the claim but it's not allowed to reset this field to empty string once it is set. If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass will be set by the persistentvolume controller if it exists. If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource exists. More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/ (Alpha) Using this field requires the VolumeAttributesClass feature gate to be enabled.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#volume_attributes_class_name DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#volume_attributes_class_name}
  */
  readonly volumeAttributesClassName?: string;
  /**
  * volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#volume_mode DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#volume_mode}
  */
  readonly volumeMode?: string;
  /**
  * volumeName is the binding reference to the PersistentVolume backing this claim.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#volume_name DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#volume_name}
  */
  readonly volumeName?: string;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpecToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpec | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    access_modes: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.accessModes),
    data_source: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpecDataSourceToTerraform(struct!.dataSource),
    data_source_ref: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefToTerraform(struct!.dataSourceRef),
    resources: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpecResourcesToTerraform(struct!.resources),
    selector: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpecSelectorToTerraform(struct!.selector),
    storage_class_name: cdktf.stringToTerraform(struct!.storageClassName),
    volume_attributes_class_name: cdktf.stringToTerraform(struct!.volumeAttributesClassName),
    volume_mode: cdktf.stringToTerraform(struct!.volumeMode),
    volume_name: cdktf.stringToTerraform(struct!.volumeName),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpecToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpec | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    access_modes: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.accessModes),
      isBlock: false,
      type: "list",
      storageClassType: "stringList",
    },
    data_source: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpecDataSourceToHclTerraform(struct!.dataSource),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpecDataSource",
    },
    data_source_ref: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefToHclTerraform(struct!.dataSourceRef),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef",
    },
    resources: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpecResourcesToHclTerraform(struct!.resources),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpecResources",
    },
    selector: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpecSelectorToHclTerraform(struct!.selector),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpecSelector",
    },
    storage_class_name: {
      value: cdktf.stringToHclTerraform(struct!.storageClassName),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    volume_attributes_class_name: {
      value: cdktf.stringToHclTerraform(struct!.volumeAttributesClassName),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    volume_mode: {
      value: cdktf.stringToHclTerraform(struct!.volumeMode),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    volume_name: {
      value: cdktf.stringToHclTerraform(struct!.volumeName),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpecOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpec | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._accessModes !== undefined) {
      hasAnyValues = true;
      internalValueResult.accessModes = this._accessModes;
    }
    if (this._dataSource?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.dataSource = this._dataSource?.internalValue;
    }
    if (this._dataSourceRef?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.dataSourceRef = this._dataSourceRef?.internalValue;
    }
    if (this._resources?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.resources = this._resources?.internalValue;
    }
    if (this._selector?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.selector = this._selector?.internalValue;
    }
    if (this._storageClassName !== undefined) {
      hasAnyValues = true;
      internalValueResult.storageClassName = this._storageClassName;
    }
    if (this._volumeAttributesClassName !== undefined) {
      hasAnyValues = true;
      internalValueResult.volumeAttributesClassName = this._volumeAttributesClassName;
    }
    if (this._volumeMode !== undefined) {
      hasAnyValues = true;
      internalValueResult.volumeMode = this._volumeMode;
    }
    if (this._volumeName !== undefined) {
      hasAnyValues = true;
      internalValueResult.volumeName = this._volumeName;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpec | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._accessModes = undefined;
      this._dataSource.internalValue = undefined;
      this._dataSourceRef.internalValue = undefined;
      this._resources.internalValue = undefined;
      this._selector.internalValue = undefined;
      this._storageClassName = undefined;
      this._volumeAttributesClassName = undefined;
      this._volumeMode = undefined;
      this._volumeName = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._accessModes = value.accessModes;
      this._dataSource.internalValue = value.dataSource;
      this._dataSourceRef.internalValue = value.dataSourceRef;
      this._resources.internalValue = value.resources;
      this._selector.internalValue = value.selector;
      this._storageClassName = value.storageClassName;
      this._volumeAttributesClassName = value.volumeAttributesClassName;
      this._volumeMode = value.volumeMode;
      this._volumeName = value.volumeName;
    }
  }

  // access_modes - computed: false, optional: true, required: false
  private _accessModes?: string[]; 
  public get accessModes() {
    return this.getListAttribute('access_modes');
  }
  public set accessModes(value: string[]) {
    this._accessModes = value;
  }
  public resetAccessModes() {
    this._accessModes = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get accessModesInput() {
    return this._accessModes;
  }

  // data_source - computed: false, optional: true, required: false
  private _dataSource = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpecDataSourceOutputReference(this, "data_source");
  public get dataSource() {
    return this._dataSource;
  }
  public putDataSource(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpecDataSource) {
    this._dataSource.internalValue = value;
  }
  public resetDataSource() {
    this._dataSource.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get dataSourceInput() {
    return this._dataSource.internalValue;
  }

  // data_source_ref - computed: false, optional: true, required: false
  private _dataSourceRef = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefOutputReference(this, "data_source_ref");
  public get dataSourceRef() {
    return this._dataSourceRef;
  }
  public putDataSourceRef(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef) {
    this._dataSourceRef.internalValue = value;
  }
  public resetDataSourceRef() {
    this._dataSourceRef.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get dataSourceRefInput() {
    return this._dataSourceRef.internalValue;
  }

  // resources - computed: false, optional: true, required: false
  private _resources = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpecResourcesOutputReference(this, "resources");
  public get resources() {
    return this._resources;
  }
  public putResources(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpecResources) {
    this._resources.internalValue = value;
  }
  public resetResources() {
    this._resources.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get resourcesInput() {
    return this._resources.internalValue;
  }

  // selector - computed: false, optional: true, required: false
  private _selector = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpecSelectorOutputReference(this, "selector");
  public get selector() {
    return this._selector;
  }
  public putSelector(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpecSelector) {
    this._selector.internalValue = value;
  }
  public resetSelector() {
    this._selector.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get selectorInput() {
    return this._selector.internalValue;
  }

  // storage_class_name - computed: false, optional: true, required: false
  private _storageClassName?: string; 
  public get storageClassName() {
    return this.getStringAttribute('storage_class_name');
  }
  public set storageClassName(value: string) {
    this._storageClassName = value;
  }
  public resetStorageClassName() {
    this._storageClassName = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get storageClassNameInput() {
    return this._storageClassName;
  }

  // volume_attributes_class_name - computed: false, optional: true, required: false
  private _volumeAttributesClassName?: string; 
  public get volumeAttributesClassName() {
    return this.getStringAttribute('volume_attributes_class_name');
  }
  public set volumeAttributesClassName(value: string) {
    this._volumeAttributesClassName = value;
  }
  public resetVolumeAttributesClassName() {
    this._volumeAttributesClassName = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get volumeAttributesClassNameInput() {
    return this._volumeAttributesClassName;
  }

  // volume_mode - computed: false, optional: true, required: false
  private _volumeMode?: string; 
  public get volumeMode() {
    return this.getStringAttribute('volume_mode');
  }
  public set volumeMode(value: string) {
    this._volumeMode = value;
  }
  public resetVolumeMode() {
    this._volumeMode = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get volumeModeInput() {
    return this._volumeMode;
  }

  // volume_name - computed: false, optional: true, required: false
  private _volumeName?: string; 
  public get volumeName() {
    return this.getStringAttribute('volume_name');
  }
  public set volumeName(value: string) {
    this._volumeName = value;
  }
  public resetVolumeName() {
    this._volumeName = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get volumeNameInput() {
    return this._volumeName;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplate {
  /**
  * May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#metadata DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#metadata}
  */
  readonly metadata?: { [key: string]: string };
  /**
  * The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#spec DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#spec}
  */
  readonly spec: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpec;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplate | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    metadata: cdktf.hashMapper(cdktf.stringToTerraform)(struct!.metadata),
    spec: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpecToTerraform(struct!.spec),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplate | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    metadata: {
      value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct!.metadata),
      isBlock: false,
      type: "map",
      storageClassType: "stringMap",
    },
    spec: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpecToHclTerraform(struct!.spec),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpec",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplate | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._metadata !== undefined) {
      hasAnyValues = true;
      internalValueResult.metadata = this._metadata;
    }
    if (this._spec?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.spec = this._spec?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplate | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._metadata = undefined;
      this._spec.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._metadata = value.metadata;
      this._spec.internalValue = value.spec;
    }
  }

  // metadata - computed: false, optional: true, required: false
  private _metadata?: { [key: string]: string }; 
  public get metadata() {
    return this.getStringMapAttribute('metadata');
  }
  public set metadata(value: { [key: string]: string }) {
    this._metadata = value;
  }
  public resetMetadata() {
    this._metadata = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get metadataInput() {
    return this._metadata;
  }

  // spec - computed: false, optional: false, required: true
  private _spec = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpecOutputReference(this, "spec");
  public get spec() {
    return this._spec;
  }
  public putSpec(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateSpec) {
    this._spec.internalValue = value;
  }
  // Temporarily expose input value. Use with caution.
  public get specInput() {
    return this._spec.internalValue;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeral {
  /**
  * Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod. The name of the PVC will be '<pod name>-<volume name>' where '<volume name>' is the name from the 'PodSpec.Volumes' array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long). An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster. This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created. Required, must not be nil.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#volume_claim_template DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#volume_claim_template}
  */
  readonly volumeClaimTemplate?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplate;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeral | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    volume_claim_template: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateToTerraform(struct!.volumeClaimTemplate),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeral | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    volume_claim_template: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateToHclTerraform(struct!.volumeClaimTemplate),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplate",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeral | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._volumeClaimTemplate?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.volumeClaimTemplate = this._volumeClaimTemplate?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeral | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._volumeClaimTemplate.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._volumeClaimTemplate.internalValue = value.volumeClaimTemplate;
    }
  }

  // volume_claim_template - computed: false, optional: true, required: false
  private _volumeClaimTemplate = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplateOutputReference(this, "volume_claim_template");
  public get volumeClaimTemplate() {
    return this._volumeClaimTemplate;
  }
  public putVolumeClaimTemplate(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralVolumeClaimTemplate) {
    this._volumeClaimTemplate.internalValue = value;
  }
  public resetVolumeClaimTemplate() {
    this._volumeClaimTemplate.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get volumeClaimTemplateInput() {
    return this._volumeClaimTemplate.internalValue;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesFc {
  /**
  * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. 'ext4', 'xfs', 'ntfs'. Implicitly inferred to be 'ext4' if unspecified. TODO: how do we prevent errors in the filesystem from compromising the machine
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#fs_type DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#fs_type}
  */
  readonly fsType?: string;
  /**
  * lun is Optional: FC target lun number
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#lun DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#lun}
  */
  readonly lun?: number;
  /**
  * readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#read_only DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#read_only}
  */
  readonly readOnly?: boolean | cdktf.IResolvable;
  /**
  * targetWWNs is Optional: FC target worldwide names (WWNs)
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#target_ww_ns DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#target_ww_ns}
  */
  readonly targetWwNs?: string[];
  /**
  * wwids Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#wwids DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#wwids}
  */
  readonly wwids?: string[];
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesFcToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesFc | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    fs_type: cdktf.stringToTerraform(struct!.fsType),
    lun: cdktf.numberToTerraform(struct!.lun),
    read_only: cdktf.booleanToTerraform(struct!.readOnly),
    target_ww_ns: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.targetWwNs),
    wwids: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.wwids),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesFcToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesFc | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    fs_type: {
      value: cdktf.stringToHclTerraform(struct!.fsType),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    lun: {
      value: cdktf.numberToHclTerraform(struct!.lun),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    read_only: {
      value: cdktf.booleanToHclTerraform(struct!.readOnly),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    target_ww_ns: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.targetWwNs),
      isBlock: false,
      type: "list",
      storageClassType: "stringList",
    },
    wwids: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.wwids),
      isBlock: false,
      type: "list",
      storageClassType: "stringList",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesFcOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesFc | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._fsType !== undefined) {
      hasAnyValues = true;
      internalValueResult.fsType = this._fsType;
    }
    if (this._lun !== undefined) {
      hasAnyValues = true;
      internalValueResult.lun = this._lun;
    }
    if (this._readOnly !== undefined) {
      hasAnyValues = true;
      internalValueResult.readOnly = this._readOnly;
    }
    if (this._targetWwNs !== undefined) {
      hasAnyValues = true;
      internalValueResult.targetWwNs = this._targetWwNs;
    }
    if (this._wwids !== undefined) {
      hasAnyValues = true;
      internalValueResult.wwids = this._wwids;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesFc | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._fsType = undefined;
      this._lun = undefined;
      this._readOnly = undefined;
      this._targetWwNs = undefined;
      this._wwids = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._fsType = value.fsType;
      this._lun = value.lun;
      this._readOnly = value.readOnly;
      this._targetWwNs = value.targetWwNs;
      this._wwids = value.wwids;
    }
  }

  // fs_type - computed: false, optional: true, required: false
  private _fsType?: string; 
  public get fsType() {
    return this.getStringAttribute('fs_type');
  }
  public set fsType(value: string) {
    this._fsType = value;
  }
  public resetFsType() {
    this._fsType = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get fsTypeInput() {
    return this._fsType;
  }

  // lun - computed: false, optional: true, required: false
  private _lun?: number; 
  public get lun() {
    return this.getNumberAttribute('lun');
  }
  public set lun(value: number) {
    this._lun = value;
  }
  public resetLun() {
    this._lun = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get lunInput() {
    return this._lun;
  }

  // read_only - computed: false, optional: true, required: false
  private _readOnly?: boolean | cdktf.IResolvable; 
  public get readOnly() {
    return this.getBooleanAttribute('read_only');
  }
  public set readOnly(value: boolean | cdktf.IResolvable) {
    this._readOnly = value;
  }
  public resetReadOnly() {
    this._readOnly = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get readOnlyInput() {
    return this._readOnly;
  }

  // target_ww_ns - computed: false, optional: true, required: false
  private _targetWwNs?: string[]; 
  public get targetWwNs() {
    return this.getListAttribute('target_ww_ns');
  }
  public set targetWwNs(value: string[]) {
    this._targetWwNs = value;
  }
  public resetTargetWwNs() {
    this._targetWwNs = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get targetWwNsInput() {
    return this._targetWwNs;
  }

  // wwids - computed: false, optional: true, required: false
  private _wwids?: string[]; 
  public get wwids() {
    return this.getListAttribute('wwids');
  }
  public set wwids(value: string[]) {
    this._wwids = value;
  }
  public resetWwids() {
    this._wwids = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get wwidsInput() {
    return this._wwids;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesFlexVolumeSecretRef {
  /**
  * Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. TODO: Add other useful fields. apiVersion, kind, uid? More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Drop 'kubebuilder:default' when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#name DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#name}
  */
  readonly name?: string;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesFlexVolumeSecretRefToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesFlexVolumeSecretRef | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    name: cdktf.stringToTerraform(struct!.name),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesFlexVolumeSecretRefToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesFlexVolumeSecretRef | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    name: {
      value: cdktf.stringToHclTerraform(struct!.name),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesFlexVolumeSecretRefOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesFlexVolumeSecretRef | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._name !== undefined) {
      hasAnyValues = true;
      internalValueResult.name = this._name;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesFlexVolumeSecretRef | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._name = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._name = value.name;
    }
  }

  // name - computed: false, optional: true, required: false
  private _name?: string; 
  public get name() {
    return this.getStringAttribute('name');
  }
  public set name(value: string) {
    this._name = value;
  }
  public resetName() {
    this._name = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get nameInput() {
    return this._name;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesFlexVolume {
  /**
  * driver is the name of the driver to use for this volume.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#driver DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#driver}
  */
  readonly driver: string;
  /**
  * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. 'ext4', 'xfs', 'ntfs'. The default filesystem depends on FlexVolume script.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#fs_type DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#fs_type}
  */
  readonly fsType?: string;
  /**
  * options is Optional: this field holds extra command options if any.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#options DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#options}
  */
  readonly options?: { [key: string]: string };
  /**
  * readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#read_only DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#read_only}
  */
  readonly readOnly?: boolean | cdktf.IResolvable;
  /**
  * secretRef is Optional: secretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#secret_ref DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#secret_ref}
  */
  readonly secretRef?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesFlexVolumeSecretRef;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesFlexVolumeToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesFlexVolume | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    driver: cdktf.stringToTerraform(struct!.driver),
    fs_type: cdktf.stringToTerraform(struct!.fsType),
    options: cdktf.hashMapper(cdktf.stringToTerraform)(struct!.options),
    read_only: cdktf.booleanToTerraform(struct!.readOnly),
    secret_ref: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesFlexVolumeSecretRefToTerraform(struct!.secretRef),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesFlexVolumeToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesFlexVolume | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    driver: {
      value: cdktf.stringToHclTerraform(struct!.driver),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    fs_type: {
      value: cdktf.stringToHclTerraform(struct!.fsType),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    options: {
      value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct!.options),
      isBlock: false,
      type: "map",
      storageClassType: "stringMap",
    },
    read_only: {
      value: cdktf.booleanToHclTerraform(struct!.readOnly),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    secret_ref: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesFlexVolumeSecretRefToHclTerraform(struct!.secretRef),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesFlexVolumeSecretRef",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesFlexVolumeOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesFlexVolume | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._driver !== undefined) {
      hasAnyValues = true;
      internalValueResult.driver = this._driver;
    }
    if (this._fsType !== undefined) {
      hasAnyValues = true;
      internalValueResult.fsType = this._fsType;
    }
    if (this._options !== undefined) {
      hasAnyValues = true;
      internalValueResult.options = this._options;
    }
    if (this._readOnly !== undefined) {
      hasAnyValues = true;
      internalValueResult.readOnly = this._readOnly;
    }
    if (this._secretRef?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.secretRef = this._secretRef?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesFlexVolume | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._driver = undefined;
      this._fsType = undefined;
      this._options = undefined;
      this._readOnly = undefined;
      this._secretRef.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._driver = value.driver;
      this._fsType = value.fsType;
      this._options = value.options;
      this._readOnly = value.readOnly;
      this._secretRef.internalValue = value.secretRef;
    }
  }

  // driver - computed: false, optional: false, required: true
  private _driver?: string; 
  public get driver() {
    return this.getStringAttribute('driver');
  }
  public set driver(value: string) {
    this._driver = value;
  }
  // Temporarily expose input value. Use with caution.
  public get driverInput() {
    return this._driver;
  }

  // fs_type - computed: false, optional: true, required: false
  private _fsType?: string; 
  public get fsType() {
    return this.getStringAttribute('fs_type');
  }
  public set fsType(value: string) {
    this._fsType = value;
  }
  public resetFsType() {
    this._fsType = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get fsTypeInput() {
    return this._fsType;
  }

  // options - computed: false, optional: true, required: false
  private _options?: { [key: string]: string }; 
  public get options() {
    return this.getStringMapAttribute('options');
  }
  public set options(value: { [key: string]: string }) {
    this._options = value;
  }
  public resetOptions() {
    this._options = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get optionsInput() {
    return this._options;
  }

  // read_only - computed: false, optional: true, required: false
  private _readOnly?: boolean | cdktf.IResolvable; 
  public get readOnly() {
    return this.getBooleanAttribute('read_only');
  }
  public set readOnly(value: boolean | cdktf.IResolvable) {
    this._readOnly = value;
  }
  public resetReadOnly() {
    this._readOnly = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get readOnlyInput() {
    return this._readOnly;
  }

  // secret_ref - computed: false, optional: true, required: false
  private _secretRef = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesFlexVolumeSecretRefOutputReference(this, "secret_ref");
  public get secretRef() {
    return this._secretRef;
  }
  public putSecretRef(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesFlexVolumeSecretRef) {
    this._secretRef.internalValue = value;
  }
  public resetSecretRef() {
    this._secretRef.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get secretRefInput() {
    return this._secretRef.internalValue;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesFlocker {
  /**
  * datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#dataset_name DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#dataset_name}
  */
  readonly datasetName?: string;
  /**
  * datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#dataset_uuid DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#dataset_uuid}
  */
  readonly datasetUuid?: string;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesFlockerToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesFlocker | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    dataset_name: cdktf.stringToTerraform(struct!.datasetName),
    dataset_uuid: cdktf.stringToTerraform(struct!.datasetUuid),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesFlockerToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesFlocker | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    dataset_name: {
      value: cdktf.stringToHclTerraform(struct!.datasetName),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    dataset_uuid: {
      value: cdktf.stringToHclTerraform(struct!.datasetUuid),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesFlockerOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesFlocker | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._datasetName !== undefined) {
      hasAnyValues = true;
      internalValueResult.datasetName = this._datasetName;
    }
    if (this._datasetUuid !== undefined) {
      hasAnyValues = true;
      internalValueResult.datasetUuid = this._datasetUuid;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesFlocker | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._datasetName = undefined;
      this._datasetUuid = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._datasetName = value.datasetName;
      this._datasetUuid = value.datasetUuid;
    }
  }

  // dataset_name - computed: false, optional: true, required: false
  private _datasetName?: string; 
  public get datasetName() {
    return this.getStringAttribute('dataset_name');
  }
  public set datasetName(value: string) {
    this._datasetName = value;
  }
  public resetDatasetName() {
    this._datasetName = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get datasetNameInput() {
    return this._datasetName;
  }

  // dataset_uuid - computed: false, optional: true, required: false
  private _datasetUuid?: string; 
  public get datasetUuid() {
    return this.getStringAttribute('dataset_uuid');
  }
  public set datasetUuid(value: string) {
    this._datasetUuid = value;
  }
  public resetDatasetUuid() {
    this._datasetUuid = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get datasetUuidInput() {
    return this._datasetUuid;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesGcePersistentDisk {
  /**
  * fsType is filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: 'ext4', 'xfs', 'ntfs'. Implicitly inferred to be 'ext4' if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk TODO: how do we prevent errors in the filesystem from compromising the machine
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#fs_type DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#fs_type}
  */
  readonly fsType?: string;
  /**
  * partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as '1'. Similarly, the volume partition for /dev/sda is '0' (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#partition DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#partition}
  */
  readonly partition?: number;
  /**
  * pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#pd_name DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#pd_name}
  */
  readonly pdName: string;
  /**
  * readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#read_only DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#read_only}
  */
  readonly readOnly?: boolean | cdktf.IResolvable;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesGcePersistentDiskToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesGcePersistentDisk | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    fs_type: cdktf.stringToTerraform(struct!.fsType),
    partition: cdktf.numberToTerraform(struct!.partition),
    pd_name: cdktf.stringToTerraform(struct!.pdName),
    read_only: cdktf.booleanToTerraform(struct!.readOnly),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesGcePersistentDiskToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesGcePersistentDisk | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    fs_type: {
      value: cdktf.stringToHclTerraform(struct!.fsType),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    partition: {
      value: cdktf.numberToHclTerraform(struct!.partition),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    pd_name: {
      value: cdktf.stringToHclTerraform(struct!.pdName),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    read_only: {
      value: cdktf.booleanToHclTerraform(struct!.readOnly),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesGcePersistentDiskOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesGcePersistentDisk | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._fsType !== undefined) {
      hasAnyValues = true;
      internalValueResult.fsType = this._fsType;
    }
    if (this._partition !== undefined) {
      hasAnyValues = true;
      internalValueResult.partition = this._partition;
    }
    if (this._pdName !== undefined) {
      hasAnyValues = true;
      internalValueResult.pdName = this._pdName;
    }
    if (this._readOnly !== undefined) {
      hasAnyValues = true;
      internalValueResult.readOnly = this._readOnly;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesGcePersistentDisk | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._fsType = undefined;
      this._partition = undefined;
      this._pdName = undefined;
      this._readOnly = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._fsType = value.fsType;
      this._partition = value.partition;
      this._pdName = value.pdName;
      this._readOnly = value.readOnly;
    }
  }

  // fs_type - computed: false, optional: true, required: false
  private _fsType?: string; 
  public get fsType() {
    return this.getStringAttribute('fs_type');
  }
  public set fsType(value: string) {
    this._fsType = value;
  }
  public resetFsType() {
    this._fsType = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get fsTypeInput() {
    return this._fsType;
  }

  // partition - computed: false, optional: true, required: false
  private _partition?: number; 
  public get partition() {
    return this.getNumberAttribute('partition');
  }
  public set partition(value: number) {
    this._partition = value;
  }
  public resetPartition() {
    this._partition = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get partitionInput() {
    return this._partition;
  }

  // pd_name - computed: false, optional: false, required: true
  private _pdName?: string; 
  public get pdName() {
    return this.getStringAttribute('pd_name');
  }
  public set pdName(value: string) {
    this._pdName = value;
  }
  // Temporarily expose input value. Use with caution.
  public get pdNameInput() {
    return this._pdName;
  }

  // read_only - computed: false, optional: true, required: false
  private _readOnly?: boolean | cdktf.IResolvable; 
  public get readOnly() {
    return this.getBooleanAttribute('read_only');
  }
  public set readOnly(value: boolean | cdktf.IResolvable) {
    this._readOnly = value;
  }
  public resetReadOnly() {
    this._readOnly = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get readOnlyInput() {
    return this._readOnly;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesGitRepo {
  /**
  * directory is the target directory name. Must not contain or start with '..'. If '.' is supplied, the volume directory will be the git repository. Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#directory DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#directory}
  */
  readonly directory?: string;
  /**
  * repository is the URL
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#repository DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#repository}
  */
  readonly repository: string;
  /**
  * revision is the commit hash for the specified revision.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#revision DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#revision}
  */
  readonly revision?: string;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesGitRepoToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesGitRepo | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    directory: cdktf.stringToTerraform(struct!.directory),
    repository: cdktf.stringToTerraform(struct!.repository),
    revision: cdktf.stringToTerraform(struct!.revision),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesGitRepoToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesGitRepo | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    directory: {
      value: cdktf.stringToHclTerraform(struct!.directory),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    repository: {
      value: cdktf.stringToHclTerraform(struct!.repository),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    revision: {
      value: cdktf.stringToHclTerraform(struct!.revision),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesGitRepoOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesGitRepo | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._directory !== undefined) {
      hasAnyValues = true;
      internalValueResult.directory = this._directory;
    }
    if (this._repository !== undefined) {
      hasAnyValues = true;
      internalValueResult.repository = this._repository;
    }
    if (this._revision !== undefined) {
      hasAnyValues = true;
      internalValueResult.revision = this._revision;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesGitRepo | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._directory = undefined;
      this._repository = undefined;
      this._revision = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._directory = value.directory;
      this._repository = value.repository;
      this._revision = value.revision;
    }
  }

  // directory - computed: false, optional: true, required: false
  private _directory?: string; 
  public get directory() {
    return this.getStringAttribute('directory');
  }
  public set directory(value: string) {
    this._directory = value;
  }
  public resetDirectory() {
    this._directory = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get directoryInput() {
    return this._directory;
  }

  // repository - computed: false, optional: false, required: true
  private _repository?: string; 
  public get repository() {
    return this.getStringAttribute('repository');
  }
  public set repository(value: string) {
    this._repository = value;
  }
  // Temporarily expose input value. Use with caution.
  public get repositoryInput() {
    return this._repository;
  }

  // revision - computed: false, optional: true, required: false
  private _revision?: string; 
  public get revision() {
    return this.getStringAttribute('revision');
  }
  public set revision(value: string) {
    this._revision = value;
  }
  public resetRevision() {
    this._revision = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get revisionInput() {
    return this._revision;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesGlusterfs {
  /**
  * endpoints is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#endpoints DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#endpoints}
  */
  readonly endpoints: string;
  /**
  * path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#path DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#path}
  */
  readonly path: string;
  /**
  * readOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#read_only DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#read_only}
  */
  readonly readOnly?: boolean | cdktf.IResolvable;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesGlusterfsToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesGlusterfs | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    endpoints: cdktf.stringToTerraform(struct!.endpoints),
    path: cdktf.stringToTerraform(struct!.path),
    read_only: cdktf.booleanToTerraform(struct!.readOnly),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesGlusterfsToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesGlusterfs | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    endpoints: {
      value: cdktf.stringToHclTerraform(struct!.endpoints),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    path: {
      value: cdktf.stringToHclTerraform(struct!.path),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    read_only: {
      value: cdktf.booleanToHclTerraform(struct!.readOnly),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesGlusterfsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesGlusterfs | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._endpoints !== undefined) {
      hasAnyValues = true;
      internalValueResult.endpoints = this._endpoints;
    }
    if (this._path !== undefined) {
      hasAnyValues = true;
      internalValueResult.path = this._path;
    }
    if (this._readOnly !== undefined) {
      hasAnyValues = true;
      internalValueResult.readOnly = this._readOnly;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesGlusterfs | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._endpoints = undefined;
      this._path = undefined;
      this._readOnly = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._endpoints = value.endpoints;
      this._path = value.path;
      this._readOnly = value.readOnly;
    }
  }

  // endpoints - computed: false, optional: false, required: true
  private _endpoints?: string; 
  public get endpoints() {
    return this.getStringAttribute('endpoints');
  }
  public set endpoints(value: string) {
    this._endpoints = value;
  }
  // Temporarily expose input value. Use with caution.
  public get endpointsInput() {
    return this._endpoints;
  }

  // path - computed: false, optional: false, required: true
  private _path?: string; 
  public get path() {
    return this.getStringAttribute('path');
  }
  public set path(value: string) {
    this._path = value;
  }
  // Temporarily expose input value. Use with caution.
  public get pathInput() {
    return this._path;
  }

  // read_only - computed: false, optional: true, required: false
  private _readOnly?: boolean | cdktf.IResolvable; 
  public get readOnly() {
    return this.getBooleanAttribute('read_only');
  }
  public set readOnly(value: boolean | cdktf.IResolvable) {
    this._readOnly = value;
  }
  public resetReadOnly() {
    this._readOnly = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get readOnlyInput() {
    return this._readOnly;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesHostPath {
  /**
  * path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#path DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#path}
  */
  readonly path: string;
  /**
  * type for HostPath Volume Defaults to '' More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#type DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#type}
  */
  readonly type?: string;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesHostPathToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesHostPath | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    path: cdktf.stringToTerraform(struct!.path),
    type: cdktf.stringToTerraform(struct!.type),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesHostPathToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesHostPath | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    path: {
      value: cdktf.stringToHclTerraform(struct!.path),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    type: {
      value: cdktf.stringToHclTerraform(struct!.type),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesHostPathOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesHostPath | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._path !== undefined) {
      hasAnyValues = true;
      internalValueResult.path = this._path;
    }
    if (this._type !== undefined) {
      hasAnyValues = true;
      internalValueResult.type = this._type;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesHostPath | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._path = undefined;
      this._type = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._path = value.path;
      this._type = value.type;
    }
  }

  // path - computed: false, optional: false, required: true
  private _path?: string; 
  public get path() {
    return this.getStringAttribute('path');
  }
  public set path(value: string) {
    this._path = value;
  }
  // Temporarily expose input value. Use with caution.
  public get pathInput() {
    return this._path;
  }

  // type - computed: false, optional: true, required: false
  private _type?: string; 
  public get type() {
    return this.getStringAttribute('type');
  }
  public set type(value: string) {
    this._type = value;
  }
  public resetType() {
    this._type = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get typeInput() {
    return this._type;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesIscsiSecretRef {
  /**
  * Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. TODO: Add other useful fields. apiVersion, kind, uid? More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Drop 'kubebuilder:default' when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#name DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#name}
  */
  readonly name?: string;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesIscsiSecretRefToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesIscsiSecretRef | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    name: cdktf.stringToTerraform(struct!.name),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesIscsiSecretRefToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesIscsiSecretRef | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    name: {
      value: cdktf.stringToHclTerraform(struct!.name),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesIscsiSecretRefOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesIscsiSecretRef | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._name !== undefined) {
      hasAnyValues = true;
      internalValueResult.name = this._name;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesIscsiSecretRef | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._name = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._name = value.name;
    }
  }

  // name - computed: false, optional: true, required: false
  private _name?: string; 
  public get name() {
    return this.getStringAttribute('name');
  }
  public set name(value: string) {
    this._name = value;
  }
  public resetName() {
    this._name = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get nameInput() {
    return this._name;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesIscsi {
  /**
  * chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#chap_auth_discovery DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#chap_auth_discovery}
  */
  readonly chapAuthDiscovery?: boolean | cdktf.IResolvable;
  /**
  * chapAuthSession defines whether support iSCSI Session CHAP authentication
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#chap_auth_session DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#chap_auth_session}
  */
  readonly chapAuthSession?: boolean | cdktf.IResolvable;
  /**
  * fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: 'ext4', 'xfs', 'ntfs'. Implicitly inferred to be 'ext4' if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi TODO: how do we prevent errors in the filesystem from compromising the machine
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#fs_type DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#fs_type}
  */
  readonly fsType?: string;
  /**
  * initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#initiator_name DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#initiator_name}
  */
  readonly initiatorName?: string;
  /**
  * iqn is the target iSCSI Qualified Name.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#iqn DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#iqn}
  */
  readonly iqn: string;
  /**
  * iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#iscsi_interface DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#iscsi_interface}
  */
  readonly iscsiInterface?: string;
  /**
  * lun represents iSCSI Target Lun number.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#lun DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#lun}
  */
  readonly lun: number;
  /**
  * portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#portals DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#portals}
  */
  readonly portals?: string[];
  /**
  * readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#read_only DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#read_only}
  */
  readonly readOnly?: boolean | cdktf.IResolvable;
  /**
  * secretRef is the CHAP Secret for iSCSI target and initiator authentication
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#secret_ref DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#secret_ref}
  */
  readonly secretRef?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesIscsiSecretRef;
  /**
  * targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#target_portal DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#target_portal}
  */
  readonly targetPortal: string;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesIscsiToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesIscsi | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    chap_auth_discovery: cdktf.booleanToTerraform(struct!.chapAuthDiscovery),
    chap_auth_session: cdktf.booleanToTerraform(struct!.chapAuthSession),
    fs_type: cdktf.stringToTerraform(struct!.fsType),
    initiator_name: cdktf.stringToTerraform(struct!.initiatorName),
    iqn: cdktf.stringToTerraform(struct!.iqn),
    iscsi_interface: cdktf.stringToTerraform(struct!.iscsiInterface),
    lun: cdktf.numberToTerraform(struct!.lun),
    portals: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.portals),
    read_only: cdktf.booleanToTerraform(struct!.readOnly),
    secret_ref: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesIscsiSecretRefToTerraform(struct!.secretRef),
    target_portal: cdktf.stringToTerraform(struct!.targetPortal),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesIscsiToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesIscsi | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    chap_auth_discovery: {
      value: cdktf.booleanToHclTerraform(struct!.chapAuthDiscovery),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    chap_auth_session: {
      value: cdktf.booleanToHclTerraform(struct!.chapAuthSession),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    fs_type: {
      value: cdktf.stringToHclTerraform(struct!.fsType),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    initiator_name: {
      value: cdktf.stringToHclTerraform(struct!.initiatorName),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    iqn: {
      value: cdktf.stringToHclTerraform(struct!.iqn),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    iscsi_interface: {
      value: cdktf.stringToHclTerraform(struct!.iscsiInterface),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    lun: {
      value: cdktf.numberToHclTerraform(struct!.lun),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    portals: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.portals),
      isBlock: false,
      type: "list",
      storageClassType: "stringList",
    },
    read_only: {
      value: cdktf.booleanToHclTerraform(struct!.readOnly),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    secret_ref: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesIscsiSecretRefToHclTerraform(struct!.secretRef),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesIscsiSecretRef",
    },
    target_portal: {
      value: cdktf.stringToHclTerraform(struct!.targetPortal),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesIscsiOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesIscsi | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._chapAuthDiscovery !== undefined) {
      hasAnyValues = true;
      internalValueResult.chapAuthDiscovery = this._chapAuthDiscovery;
    }
    if (this._chapAuthSession !== undefined) {
      hasAnyValues = true;
      internalValueResult.chapAuthSession = this._chapAuthSession;
    }
    if (this._fsType !== undefined) {
      hasAnyValues = true;
      internalValueResult.fsType = this._fsType;
    }
    if (this._initiatorName !== undefined) {
      hasAnyValues = true;
      internalValueResult.initiatorName = this._initiatorName;
    }
    if (this._iqn !== undefined) {
      hasAnyValues = true;
      internalValueResult.iqn = this._iqn;
    }
    if (this._iscsiInterface !== undefined) {
      hasAnyValues = true;
      internalValueResult.iscsiInterface = this._iscsiInterface;
    }
    if (this._lun !== undefined) {
      hasAnyValues = true;
      internalValueResult.lun = this._lun;
    }
    if (this._portals !== undefined) {
      hasAnyValues = true;
      internalValueResult.portals = this._portals;
    }
    if (this._readOnly !== undefined) {
      hasAnyValues = true;
      internalValueResult.readOnly = this._readOnly;
    }
    if (this._secretRef?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.secretRef = this._secretRef?.internalValue;
    }
    if (this._targetPortal !== undefined) {
      hasAnyValues = true;
      internalValueResult.targetPortal = this._targetPortal;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesIscsi | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._chapAuthDiscovery = undefined;
      this._chapAuthSession = undefined;
      this._fsType = undefined;
      this._initiatorName = undefined;
      this._iqn = undefined;
      this._iscsiInterface = undefined;
      this._lun = undefined;
      this._portals = undefined;
      this._readOnly = undefined;
      this._secretRef.internalValue = undefined;
      this._targetPortal = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._chapAuthDiscovery = value.chapAuthDiscovery;
      this._chapAuthSession = value.chapAuthSession;
      this._fsType = value.fsType;
      this._initiatorName = value.initiatorName;
      this._iqn = value.iqn;
      this._iscsiInterface = value.iscsiInterface;
      this._lun = value.lun;
      this._portals = value.portals;
      this._readOnly = value.readOnly;
      this._secretRef.internalValue = value.secretRef;
      this._targetPortal = value.targetPortal;
    }
  }

  // chap_auth_discovery - computed: false, optional: true, required: false
  private _chapAuthDiscovery?: boolean | cdktf.IResolvable; 
  public get chapAuthDiscovery() {
    return this.getBooleanAttribute('chap_auth_discovery');
  }
  public set chapAuthDiscovery(value: boolean | cdktf.IResolvable) {
    this._chapAuthDiscovery = value;
  }
  public resetChapAuthDiscovery() {
    this._chapAuthDiscovery = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get chapAuthDiscoveryInput() {
    return this._chapAuthDiscovery;
  }

  // chap_auth_session - computed: false, optional: true, required: false
  private _chapAuthSession?: boolean | cdktf.IResolvable; 
  public get chapAuthSession() {
    return this.getBooleanAttribute('chap_auth_session');
  }
  public set chapAuthSession(value: boolean | cdktf.IResolvable) {
    this._chapAuthSession = value;
  }
  public resetChapAuthSession() {
    this._chapAuthSession = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get chapAuthSessionInput() {
    return this._chapAuthSession;
  }

  // fs_type - computed: false, optional: true, required: false
  private _fsType?: string; 
  public get fsType() {
    return this.getStringAttribute('fs_type');
  }
  public set fsType(value: string) {
    this._fsType = value;
  }
  public resetFsType() {
    this._fsType = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get fsTypeInput() {
    return this._fsType;
  }

  // initiator_name - computed: false, optional: true, required: false
  private _initiatorName?: string; 
  public get initiatorName() {
    return this.getStringAttribute('initiator_name');
  }
  public set initiatorName(value: string) {
    this._initiatorName = value;
  }
  public resetInitiatorName() {
    this._initiatorName = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get initiatorNameInput() {
    return this._initiatorName;
  }

  // iqn - computed: false, optional: false, required: true
  private _iqn?: string; 
  public get iqn() {
    return this.getStringAttribute('iqn');
  }
  public set iqn(value: string) {
    this._iqn = value;
  }
  // Temporarily expose input value. Use with caution.
  public get iqnInput() {
    return this._iqn;
  }

  // iscsi_interface - computed: false, optional: true, required: false
  private _iscsiInterface?: string; 
  public get iscsiInterface() {
    return this.getStringAttribute('iscsi_interface');
  }
  public set iscsiInterface(value: string) {
    this._iscsiInterface = value;
  }
  public resetIscsiInterface() {
    this._iscsiInterface = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get iscsiInterfaceInput() {
    return this._iscsiInterface;
  }

  // lun - computed: false, optional: false, required: true
  private _lun?: number; 
  public get lun() {
    return this.getNumberAttribute('lun');
  }
  public set lun(value: number) {
    this._lun = value;
  }
  // Temporarily expose input value. Use with caution.
  public get lunInput() {
    return this._lun;
  }

  // portals - computed: false, optional: true, required: false
  private _portals?: string[]; 
  public get portals() {
    return this.getListAttribute('portals');
  }
  public set portals(value: string[]) {
    this._portals = value;
  }
  public resetPortals() {
    this._portals = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get portalsInput() {
    return this._portals;
  }

  // read_only - computed: false, optional: true, required: false
  private _readOnly?: boolean | cdktf.IResolvable; 
  public get readOnly() {
    return this.getBooleanAttribute('read_only');
  }
  public set readOnly(value: boolean | cdktf.IResolvable) {
    this._readOnly = value;
  }
  public resetReadOnly() {
    this._readOnly = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get readOnlyInput() {
    return this._readOnly;
  }

  // secret_ref - computed: false, optional: true, required: false
  private _secretRef = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesIscsiSecretRefOutputReference(this, "secret_ref");
  public get secretRef() {
    return this._secretRef;
  }
  public putSecretRef(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesIscsiSecretRef) {
    this._secretRef.internalValue = value;
  }
  public resetSecretRef() {
    this._secretRef.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get secretRefInput() {
    return this._secretRef.internalValue;
  }

  // target_portal - computed: false, optional: false, required: true
  private _targetPortal?: string; 
  public get targetPortal() {
    return this.getStringAttribute('target_portal');
  }
  public set targetPortal(value: string) {
    this._targetPortal = value;
  }
  // Temporarily expose input value. Use with caution.
  public get targetPortalInput() {
    return this._targetPortal;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesNfs {
  /**
  * path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#path DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#path}
  */
  readonly path: string;
  /**
  * readOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#read_only DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#read_only}
  */
  readonly readOnly?: boolean | cdktf.IResolvable;
  /**
  * server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#server DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#server}
  */
  readonly server: string;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesNfsToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesNfs | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    path: cdktf.stringToTerraform(struct!.path),
    read_only: cdktf.booleanToTerraform(struct!.readOnly),
    server: cdktf.stringToTerraform(struct!.server),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesNfsToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesNfs | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    path: {
      value: cdktf.stringToHclTerraform(struct!.path),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    read_only: {
      value: cdktf.booleanToHclTerraform(struct!.readOnly),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    server: {
      value: cdktf.stringToHclTerraform(struct!.server),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesNfsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesNfs | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._path !== undefined) {
      hasAnyValues = true;
      internalValueResult.path = this._path;
    }
    if (this._readOnly !== undefined) {
      hasAnyValues = true;
      internalValueResult.readOnly = this._readOnly;
    }
    if (this._server !== undefined) {
      hasAnyValues = true;
      internalValueResult.server = this._server;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesNfs | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._path = undefined;
      this._readOnly = undefined;
      this._server = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._path = value.path;
      this._readOnly = value.readOnly;
      this._server = value.server;
    }
  }

  // path - computed: false, optional: false, required: true
  private _path?: string; 
  public get path() {
    return this.getStringAttribute('path');
  }
  public set path(value: string) {
    this._path = value;
  }
  // Temporarily expose input value. Use with caution.
  public get pathInput() {
    return this._path;
  }

  // read_only - computed: false, optional: true, required: false
  private _readOnly?: boolean | cdktf.IResolvable; 
  public get readOnly() {
    return this.getBooleanAttribute('read_only');
  }
  public set readOnly(value: boolean | cdktf.IResolvable) {
    this._readOnly = value;
  }
  public resetReadOnly() {
    this._readOnly = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get readOnlyInput() {
    return this._readOnly;
  }

  // server - computed: false, optional: false, required: true
  private _server?: string; 
  public get server() {
    return this.getStringAttribute('server');
  }
  public set server(value: string) {
    this._server = value;
  }
  // Temporarily expose input value. Use with caution.
  public get serverInput() {
    return this._server;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesPersistentVolumeClaim {
  /**
  * claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#claim_name DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#claim_name}
  */
  readonly claimName: string;
  /**
  * readOnly Will force the ReadOnly setting in VolumeMounts. Default false.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#read_only DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#read_only}
  */
  readonly readOnly?: boolean | cdktf.IResolvable;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesPersistentVolumeClaimToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesPersistentVolumeClaim | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    claim_name: cdktf.stringToTerraform(struct!.claimName),
    read_only: cdktf.booleanToTerraform(struct!.readOnly),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesPersistentVolumeClaimToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesPersistentVolumeClaim | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    claim_name: {
      value: cdktf.stringToHclTerraform(struct!.claimName),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    read_only: {
      value: cdktf.booleanToHclTerraform(struct!.readOnly),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesPersistentVolumeClaimOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesPersistentVolumeClaim | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._claimName !== undefined) {
      hasAnyValues = true;
      internalValueResult.claimName = this._claimName;
    }
    if (this._readOnly !== undefined) {
      hasAnyValues = true;
      internalValueResult.readOnly = this._readOnly;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesPersistentVolumeClaim | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._claimName = undefined;
      this._readOnly = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._claimName = value.claimName;
      this._readOnly = value.readOnly;
    }
  }

  // claim_name - computed: false, optional: false, required: true
  private _claimName?: string; 
  public get claimName() {
    return this.getStringAttribute('claim_name');
  }
  public set claimName(value: string) {
    this._claimName = value;
  }
  // Temporarily expose input value. Use with caution.
  public get claimNameInput() {
    return this._claimName;
  }

  // read_only - computed: false, optional: true, required: false
  private _readOnly?: boolean | cdktf.IResolvable; 
  public get readOnly() {
    return this.getBooleanAttribute('read_only');
  }
  public set readOnly(value: boolean | cdktf.IResolvable) {
    this._readOnly = value;
  }
  public resetReadOnly() {
    this._readOnly = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get readOnlyInput() {
    return this._readOnly;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesPhotonPersistentDisk {
  /**
  * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. 'ext4', 'xfs', 'ntfs'. Implicitly inferred to be 'ext4' if unspecified.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#fs_type DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#fs_type}
  */
  readonly fsType?: string;
  /**
  * pdID is the ID that identifies Photon Controller persistent disk
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#pd_id DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#pd_id}
  */
  readonly pdId: string;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesPhotonPersistentDiskToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesPhotonPersistentDisk | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    fs_type: cdktf.stringToTerraform(struct!.fsType),
    pd_id: cdktf.stringToTerraform(struct!.pdId),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesPhotonPersistentDiskToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesPhotonPersistentDisk | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    fs_type: {
      value: cdktf.stringToHclTerraform(struct!.fsType),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    pd_id: {
      value: cdktf.stringToHclTerraform(struct!.pdId),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesPhotonPersistentDiskOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesPhotonPersistentDisk | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._fsType !== undefined) {
      hasAnyValues = true;
      internalValueResult.fsType = this._fsType;
    }
    if (this._pdId !== undefined) {
      hasAnyValues = true;
      internalValueResult.pdId = this._pdId;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesPhotonPersistentDisk | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._fsType = undefined;
      this._pdId = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._fsType = value.fsType;
      this._pdId = value.pdId;
    }
  }

  // fs_type - computed: false, optional: true, required: false
  private _fsType?: string; 
  public get fsType() {
    return this.getStringAttribute('fs_type');
  }
  public set fsType(value: string) {
    this._fsType = value;
  }
  public resetFsType() {
    this._fsType = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get fsTypeInput() {
    return this._fsType;
  }

  // pd_id - computed: false, optional: false, required: true
  private _pdId?: string; 
  public get pdId() {
    return this.getStringAttribute('pd_id');
  }
  public set pdId(value: string) {
    this._pdId = value;
  }
  // Temporarily expose input value. Use with caution.
  public get pdIdInput() {
    return this._pdId;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesPortworxVolume {
  /**
  * fSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. 'ext4', 'xfs'. Implicitly inferred to be 'ext4' if unspecified.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#fs_type DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#fs_type}
  */
  readonly fsType?: string;
  /**
  * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#read_only DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#read_only}
  */
  readonly readOnly?: boolean | cdktf.IResolvable;
  /**
  * volumeID uniquely identifies a Portworx volume
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#volume_id DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#volume_id}
  */
  readonly volumeId: string;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesPortworxVolumeToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesPortworxVolume | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    fs_type: cdktf.stringToTerraform(struct!.fsType),
    read_only: cdktf.booleanToTerraform(struct!.readOnly),
    volume_id: cdktf.stringToTerraform(struct!.volumeId),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesPortworxVolumeToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesPortworxVolume | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    fs_type: {
      value: cdktf.stringToHclTerraform(struct!.fsType),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    read_only: {
      value: cdktf.booleanToHclTerraform(struct!.readOnly),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    volume_id: {
      value: cdktf.stringToHclTerraform(struct!.volumeId),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesPortworxVolumeOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesPortworxVolume | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._fsType !== undefined) {
      hasAnyValues = true;
      internalValueResult.fsType = this._fsType;
    }
    if (this._readOnly !== undefined) {
      hasAnyValues = true;
      internalValueResult.readOnly = this._readOnly;
    }
    if (this._volumeId !== undefined) {
      hasAnyValues = true;
      internalValueResult.volumeId = this._volumeId;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesPortworxVolume | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._fsType = undefined;
      this._readOnly = undefined;
      this._volumeId = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._fsType = value.fsType;
      this._readOnly = value.readOnly;
      this._volumeId = value.volumeId;
    }
  }

  // fs_type - computed: false, optional: true, required: false
  private _fsType?: string; 
  public get fsType() {
    return this.getStringAttribute('fs_type');
  }
  public set fsType(value: string) {
    this._fsType = value;
  }
  public resetFsType() {
    this._fsType = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get fsTypeInput() {
    return this._fsType;
  }

  // read_only - computed: false, optional: true, required: false
  private _readOnly?: boolean | cdktf.IResolvable; 
  public get readOnly() {
    return this.getBooleanAttribute('read_only');
  }
  public set readOnly(value: boolean | cdktf.IResolvable) {
    this._readOnly = value;
  }
  public resetReadOnly() {
    this._readOnly = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get readOnlyInput() {
    return this._readOnly;
  }

  // volume_id - computed: false, optional: false, required: true
  private _volumeId?: string; 
  public get volumeId() {
    return this.getStringAttribute('volume_id');
  }
  public set volumeId(value: string) {
    this._volumeId = value;
  }
  // Temporarily expose input value. Use with caution.
  public get volumeIdInput() {
    return this._volumeId;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressions {
  /**
  * key is the label key that the selector applies to.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#key DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#key}
  */
  readonly key: string;
  /**
  * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#operator DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#operator}
  */
  readonly operator: string;
  /**
  * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#values DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#values}
  */
  readonly values?: string[];
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressions | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    key: cdktf.stringToTerraform(struct!.key),
    operator: cdktf.stringToTerraform(struct!.operator),
    values: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.values),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressions | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    key: {
      value: cdktf.stringToHclTerraform(struct!.key),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    operator: {
      value: cdktf.stringToHclTerraform(struct!.operator),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    values: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.values),
      isBlock: false,
      type: "list",
      storageClassType: "stringList",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressions | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._key !== undefined) {
      hasAnyValues = true;
      internalValueResult.key = this._key;
    }
    if (this._operator !== undefined) {
      hasAnyValues = true;
      internalValueResult.operator = this._operator;
    }
    if (this._values !== undefined) {
      hasAnyValues = true;
      internalValueResult.values = this._values;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressions | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._key = undefined;
      this._operator = undefined;
      this._values = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._key = value.key;
      this._operator = value.operator;
      this._values = value.values;
    }
  }

  // key - computed: false, optional: false, required: true
  private _key?: string; 
  public get key() {
    return this.getStringAttribute('key');
  }
  public set key(value: string) {
    this._key = value;
  }
  // Temporarily expose input value. Use with caution.
  public get keyInput() {
    return this._key;
  }

  // operator - computed: false, optional: false, required: true
  private _operator?: string; 
  public get operator() {
    return this.getStringAttribute('operator');
  }
  public set operator(value: string) {
    this._operator = value;
  }
  // Temporarily expose input value. Use with caution.
  public get operatorInput() {
    return this._operator;
  }

  // values - computed: false, optional: true, required: false
  private _values?: string[]; 
  public get values() {
    return this.getListAttribute('values');
  }
  public set values(value: string[]) {
    this._values = value;
  }
  public resetValues() {
    this._values = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get valuesInput() {
    return this._values;
  }
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsList extends cdktf.ComplexList {
  public internalValue? : DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressions[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsOutputReference {
    return new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesClusterTrustBundleLabelSelector {
  /**
  * matchExpressions is a list of label selector requirements. The requirements are ANDed.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#match_expressions DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#match_expressions}
  */
  readonly matchExpressions?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressions[] | cdktf.IResolvable;
  /**
  * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is 'key', the operator is 'In', and the values array contains only 'value'. The requirements are ANDed.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#match_labels DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#match_labels}
  */
  readonly matchLabels?: { [key: string]: string };
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesClusterTrustBundleLabelSelectorToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesClusterTrustBundleLabelSelector | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    match_expressions: cdktf.listMapper(dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsToTerraform, false)(struct!.matchExpressions),
    match_labels: cdktf.hashMapper(cdktf.stringToTerraform)(struct!.matchLabels),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesClusterTrustBundleLabelSelectorToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesClusterTrustBundleLabelSelector | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    match_expressions: {
      value: cdktf.listMapperHcl(dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsToHclTerraform, false)(struct!.matchExpressions),
      isBlock: true,
      type: "list",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsList",
    },
    match_labels: {
      value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct!.matchLabels),
      isBlock: false,
      type: "map",
      storageClassType: "stringMap",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesClusterTrustBundleLabelSelectorOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesClusterTrustBundleLabelSelector | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._matchExpressions?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.matchExpressions = this._matchExpressions?.internalValue;
    }
    if (this._matchLabels !== undefined) {
      hasAnyValues = true;
      internalValueResult.matchLabels = this._matchLabels;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesClusterTrustBundleLabelSelector | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._matchExpressions.internalValue = undefined;
      this._matchLabels = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._matchExpressions.internalValue = value.matchExpressions;
      this._matchLabels = value.matchLabels;
    }
  }

  // match_expressions - computed: false, optional: true, required: false
  private _matchExpressions = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsList(this, "match_expressions", false);
  public get matchExpressions() {
    return this._matchExpressions;
  }
  public putMatchExpressions(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressions[] | cdktf.IResolvable) {
    this._matchExpressions.internalValue = value;
  }
  public resetMatchExpressions() {
    this._matchExpressions.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get matchExpressionsInput() {
    return this._matchExpressions.internalValue;
  }

  // match_labels - computed: false, optional: true, required: false
  private _matchLabels?: { [key: string]: string }; 
  public get matchLabels() {
    return this.getStringMapAttribute('match_labels');
  }
  public set matchLabels(value: { [key: string]: string }) {
    this._matchLabels = value;
  }
  public resetMatchLabels() {
    this._matchLabels = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get matchLabelsInput() {
    return this._matchLabels;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesClusterTrustBundle {
  /**
  * Select all ClusterTrustBundles that match this label selector. Only has effect if signerName is set. Mutually-exclusive with name. If unset, interpreted as 'match nothing'. If set but empty, interpreted as 'match everything'.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#label_selector DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#label_selector}
  */
  readonly labelSelector?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesClusterTrustBundleLabelSelector;
  /**
  * Select a single ClusterTrustBundle by object name. Mutually-exclusive with signerName and labelSelector.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#name DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#name}
  */
  readonly name?: string;
  /**
  * If true, don't block pod startup if the referenced ClusterTrustBundle(s) aren't available. If using name, then the named ClusterTrustBundle is allowed not to exist. If using signerName, then the combination of signerName and labelSelector is allowed to match zero ClusterTrustBundles.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#optional DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#optional}
  */
  readonly optional?: boolean | cdktf.IResolvable;
  /**
  * Relative path from the volume root to write the bundle.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#path DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#path}
  */
  readonly path: string;
  /**
  * Select all ClusterTrustBundles that match this signer name. Mutually-exclusive with name. The contents of all selected ClusterTrustBundles will be unified and deduplicated.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#signer_name DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#signer_name}
  */
  readonly signerName?: string;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesClusterTrustBundleToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesClusterTrustBundle | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    label_selector: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesClusterTrustBundleLabelSelectorToTerraform(struct!.labelSelector),
    name: cdktf.stringToTerraform(struct!.name),
    optional: cdktf.booleanToTerraform(struct!.optional),
    path: cdktf.stringToTerraform(struct!.path),
    signer_name: cdktf.stringToTerraform(struct!.signerName),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesClusterTrustBundleToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesClusterTrustBundle | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    label_selector: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesClusterTrustBundleLabelSelectorToHclTerraform(struct!.labelSelector),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesClusterTrustBundleLabelSelector",
    },
    name: {
      value: cdktf.stringToHclTerraform(struct!.name),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    optional: {
      value: cdktf.booleanToHclTerraform(struct!.optional),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    path: {
      value: cdktf.stringToHclTerraform(struct!.path),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    signer_name: {
      value: cdktf.stringToHclTerraform(struct!.signerName),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesClusterTrustBundleOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesClusterTrustBundle | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._labelSelector?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.labelSelector = this._labelSelector?.internalValue;
    }
    if (this._name !== undefined) {
      hasAnyValues = true;
      internalValueResult.name = this._name;
    }
    if (this._optional !== undefined) {
      hasAnyValues = true;
      internalValueResult.optional = this._optional;
    }
    if (this._path !== undefined) {
      hasAnyValues = true;
      internalValueResult.path = this._path;
    }
    if (this._signerName !== undefined) {
      hasAnyValues = true;
      internalValueResult.signerName = this._signerName;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesClusterTrustBundle | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._labelSelector.internalValue = undefined;
      this._name = undefined;
      this._optional = undefined;
      this._path = undefined;
      this._signerName = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._labelSelector.internalValue = value.labelSelector;
      this._name = value.name;
      this._optional = value.optional;
      this._path = value.path;
      this._signerName = value.signerName;
    }
  }

  // label_selector - computed: false, optional: true, required: false
  private _labelSelector = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesClusterTrustBundleLabelSelectorOutputReference(this, "label_selector");
  public get labelSelector() {
    return this._labelSelector;
  }
  public putLabelSelector(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesClusterTrustBundleLabelSelector) {
    this._labelSelector.internalValue = value;
  }
  public resetLabelSelector() {
    this._labelSelector.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get labelSelectorInput() {
    return this._labelSelector.internalValue;
  }

  // name - computed: false, optional: true, required: false
  private _name?: string; 
  public get name() {
    return this.getStringAttribute('name');
  }
  public set name(value: string) {
    this._name = value;
  }
  public resetName() {
    this._name = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get nameInput() {
    return this._name;
  }

  // optional - computed: false, optional: true, required: false
  private _optional?: boolean | cdktf.IResolvable; 
  public get optional() {
    return this.getBooleanAttribute('optional');
  }
  public set optional(value: boolean | cdktf.IResolvable) {
    this._optional = value;
  }
  public resetOptional() {
    this._optional = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get optionalInput() {
    return this._optional;
  }

  // path - computed: false, optional: false, required: true
  private _path?: string; 
  public get path() {
    return this.getStringAttribute('path');
  }
  public set path(value: string) {
    this._path = value;
  }
  // Temporarily expose input value. Use with caution.
  public get pathInput() {
    return this._path;
  }

  // signer_name - computed: false, optional: true, required: false
  private _signerName?: string; 
  public get signerName() {
    return this.getStringAttribute('signer_name');
  }
  public set signerName(value: string) {
    this._signerName = value;
  }
  public resetSignerName() {
    this._signerName = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get signerNameInput() {
    return this._signerName;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesConfigMapItems {
  /**
  * key is the key to project.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#key DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#key}
  */
  readonly key: string;
  /**
  * mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#mode DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#mode}
  */
  readonly mode?: number;
  /**
  * path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#path DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#path}
  */
  readonly path: string;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesConfigMapItemsToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesConfigMapItems | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    key: cdktf.stringToTerraform(struct!.key),
    mode: cdktf.numberToTerraform(struct!.mode),
    path: cdktf.stringToTerraform(struct!.path),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesConfigMapItemsToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesConfigMapItems | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    key: {
      value: cdktf.stringToHclTerraform(struct!.key),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    mode: {
      value: cdktf.numberToHclTerraform(struct!.mode),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    path: {
      value: cdktf.stringToHclTerraform(struct!.path),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesConfigMapItemsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesConfigMapItems | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._key !== undefined) {
      hasAnyValues = true;
      internalValueResult.key = this._key;
    }
    if (this._mode !== undefined) {
      hasAnyValues = true;
      internalValueResult.mode = this._mode;
    }
    if (this._path !== undefined) {
      hasAnyValues = true;
      internalValueResult.path = this._path;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesConfigMapItems | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._key = undefined;
      this._mode = undefined;
      this._path = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._key = value.key;
      this._mode = value.mode;
      this._path = value.path;
    }
  }

  // key - computed: false, optional: false, required: true
  private _key?: string; 
  public get key() {
    return this.getStringAttribute('key');
  }
  public set key(value: string) {
    this._key = value;
  }
  // Temporarily expose input value. Use with caution.
  public get keyInput() {
    return this._key;
  }

  // mode - computed: false, optional: true, required: false
  private _mode?: number; 
  public get mode() {
    return this.getNumberAttribute('mode');
  }
  public set mode(value: number) {
    this._mode = value;
  }
  public resetMode() {
    this._mode = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get modeInput() {
    return this._mode;
  }

  // path - computed: false, optional: false, required: true
  private _path?: string; 
  public get path() {
    return this.getStringAttribute('path');
  }
  public set path(value: string) {
    this._path = value;
  }
  // Temporarily expose input value. Use with caution.
  public get pathInput() {
    return this._path;
  }
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesConfigMapItemsList extends cdktf.ComplexList {
  public internalValue? : DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesConfigMapItems[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesConfigMapItemsOutputReference {
    return new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesConfigMapItemsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesConfigMap {
  /**
  * items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#items DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#items}
  */
  readonly items?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesConfigMapItems[] | cdktf.IResolvable;
  /**
  * Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. TODO: Add other useful fields. apiVersion, kind, uid? More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Drop 'kubebuilder:default' when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#name DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#name}
  */
  readonly name?: string;
  /**
  * optional specify whether the ConfigMap or its keys must be defined
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#optional DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#optional}
  */
  readonly optional?: boolean | cdktf.IResolvable;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesConfigMapToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesConfigMap | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    items: cdktf.listMapper(dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesConfigMapItemsToTerraform, false)(struct!.items),
    name: cdktf.stringToTerraform(struct!.name),
    optional: cdktf.booleanToTerraform(struct!.optional),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesConfigMapToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesConfigMap | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    items: {
      value: cdktf.listMapperHcl(dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesConfigMapItemsToHclTerraform, false)(struct!.items),
      isBlock: true,
      type: "list",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesConfigMapItemsList",
    },
    name: {
      value: cdktf.stringToHclTerraform(struct!.name),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    optional: {
      value: cdktf.booleanToHclTerraform(struct!.optional),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesConfigMapOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesConfigMap | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._items?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.items = this._items?.internalValue;
    }
    if (this._name !== undefined) {
      hasAnyValues = true;
      internalValueResult.name = this._name;
    }
    if (this._optional !== undefined) {
      hasAnyValues = true;
      internalValueResult.optional = this._optional;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesConfigMap | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._items.internalValue = undefined;
      this._name = undefined;
      this._optional = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._items.internalValue = value.items;
      this._name = value.name;
      this._optional = value.optional;
    }
  }

  // items - computed: false, optional: true, required: false
  private _items = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesConfigMapItemsList(this, "items", false);
  public get items() {
    return this._items;
  }
  public putItems(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesConfigMapItems[] | cdktf.IResolvable) {
    this._items.internalValue = value;
  }
  public resetItems() {
    this._items.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get itemsInput() {
    return this._items.internalValue;
  }

  // name - computed: false, optional: true, required: false
  private _name?: string; 
  public get name() {
    return this.getStringAttribute('name');
  }
  public set name(value: string) {
    this._name = value;
  }
  public resetName() {
    this._name = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get nameInput() {
    return this._name;
  }

  // optional - computed: false, optional: true, required: false
  private _optional?: boolean | cdktf.IResolvable; 
  public get optional() {
    return this.getBooleanAttribute('optional');
  }
  public set optional(value: boolean | cdktf.IResolvable) {
    this._optional = value;
  }
  public resetOptional() {
    this._optional = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get optionalInput() {
    return this._optional;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesDownwardApiItemsFieldRef {
  /**
  * Version of the schema the FieldPath is written in terms of, defaults to 'v1'.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#api_version DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#api_version}
  */
  readonly apiVersion?: string;
  /**
  * Path of the field to select in the specified API version.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#field_path DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#field_path}
  */
  readonly fieldPath: string;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesDownwardApiItemsFieldRefToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesDownwardApiItemsFieldRef | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    api_version: cdktf.stringToTerraform(struct!.apiVersion),
    field_path: cdktf.stringToTerraform(struct!.fieldPath),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesDownwardApiItemsFieldRefToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesDownwardApiItemsFieldRef | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    api_version: {
      value: cdktf.stringToHclTerraform(struct!.apiVersion),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    field_path: {
      value: cdktf.stringToHclTerraform(struct!.fieldPath),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesDownwardApiItemsFieldRefOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesDownwardApiItemsFieldRef | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._apiVersion !== undefined) {
      hasAnyValues = true;
      internalValueResult.apiVersion = this._apiVersion;
    }
    if (this._fieldPath !== undefined) {
      hasAnyValues = true;
      internalValueResult.fieldPath = this._fieldPath;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesDownwardApiItemsFieldRef | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._apiVersion = undefined;
      this._fieldPath = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._apiVersion = value.apiVersion;
      this._fieldPath = value.fieldPath;
    }
  }

  // api_version - computed: false, optional: true, required: false
  private _apiVersion?: string; 
  public get apiVersion() {
    return this.getStringAttribute('api_version');
  }
  public set apiVersion(value: string) {
    this._apiVersion = value;
  }
  public resetApiVersion() {
    this._apiVersion = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get apiVersionInput() {
    return this._apiVersion;
  }

  // field_path - computed: false, optional: false, required: true
  private _fieldPath?: string; 
  public get fieldPath() {
    return this.getStringAttribute('field_path');
  }
  public set fieldPath(value: string) {
    this._fieldPath = value;
  }
  // Temporarily expose input value. Use with caution.
  public get fieldPathInput() {
    return this._fieldPath;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesDownwardApiItemsResourceFieldRef {
  /**
  * Container name: required for volumes, optional for env vars
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#container_name DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#container_name}
  */
  readonly containerName?: string;
  /**
  * Specifies the output format of the exposed resources, defaults to '1'
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#divisor DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#divisor}
  */
  readonly divisor?: string;
  /**
  * Required: resource to select
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#resource DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#resource}
  */
  readonly resource: string;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesDownwardApiItemsResourceFieldRefToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesDownwardApiItemsResourceFieldRef | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    container_name: cdktf.stringToTerraform(struct!.containerName),
    divisor: cdktf.stringToTerraform(struct!.divisor),
    resource: cdktf.stringToTerraform(struct!.resource),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesDownwardApiItemsResourceFieldRefToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesDownwardApiItemsResourceFieldRef | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    container_name: {
      value: cdktf.stringToHclTerraform(struct!.containerName),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    divisor: {
      value: cdktf.stringToHclTerraform(struct!.divisor),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    resource: {
      value: cdktf.stringToHclTerraform(struct!.resource),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesDownwardApiItemsResourceFieldRefOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesDownwardApiItemsResourceFieldRef | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._containerName !== undefined) {
      hasAnyValues = true;
      internalValueResult.containerName = this._containerName;
    }
    if (this._divisor !== undefined) {
      hasAnyValues = true;
      internalValueResult.divisor = this._divisor;
    }
    if (this._resource !== undefined) {
      hasAnyValues = true;
      internalValueResult.resource = this._resource;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesDownwardApiItemsResourceFieldRef | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._containerName = undefined;
      this._divisor = undefined;
      this._resource = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._containerName = value.containerName;
      this._divisor = value.divisor;
      this._resource = value.resource;
    }
  }

  // container_name - computed: false, optional: true, required: false
  private _containerName?: string; 
  public get containerName() {
    return this.getStringAttribute('container_name');
  }
  public set containerName(value: string) {
    this._containerName = value;
  }
  public resetContainerName() {
    this._containerName = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get containerNameInput() {
    return this._containerName;
  }

  // divisor - computed: false, optional: true, required: false
  private _divisor?: string; 
  public get divisor() {
    return this.getStringAttribute('divisor');
  }
  public set divisor(value: string) {
    this._divisor = value;
  }
  public resetDivisor() {
    this._divisor = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get divisorInput() {
    return this._divisor;
  }

  // resource - computed: false, optional: false, required: true
  private _resource?: string; 
  public get resource() {
    return this.getStringAttribute('resource');
  }
  public set resource(value: string) {
    this._resource = value;
  }
  // Temporarily expose input value. Use with caution.
  public get resourceInput() {
    return this._resource;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesDownwardApiItems {
  /**
  * Required: Selects a field of the pod: only annotations, labels, name, namespace and uid are supported.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#field_ref DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#field_ref}
  */
  readonly fieldRef?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesDownwardApiItemsFieldRef;
  /**
  * Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#mode DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#mode}
  */
  readonly mode?: number;
  /**
  * Required: Path is the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#path DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#path}
  */
  readonly path: string;
  /**
  * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#resource_field_ref DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#resource_field_ref}
  */
  readonly resourceFieldRef?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesDownwardApiItemsResourceFieldRef;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesDownwardApiItemsToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesDownwardApiItems | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    field_ref: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesDownwardApiItemsFieldRefToTerraform(struct!.fieldRef),
    mode: cdktf.numberToTerraform(struct!.mode),
    path: cdktf.stringToTerraform(struct!.path),
    resource_field_ref: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesDownwardApiItemsResourceFieldRefToTerraform(struct!.resourceFieldRef),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesDownwardApiItemsToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesDownwardApiItems | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    field_ref: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesDownwardApiItemsFieldRefToHclTerraform(struct!.fieldRef),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesDownwardApiItemsFieldRef",
    },
    mode: {
      value: cdktf.numberToHclTerraform(struct!.mode),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    path: {
      value: cdktf.stringToHclTerraform(struct!.path),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    resource_field_ref: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesDownwardApiItemsResourceFieldRefToHclTerraform(struct!.resourceFieldRef),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesDownwardApiItemsResourceFieldRef",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesDownwardApiItemsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesDownwardApiItems | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._fieldRef?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.fieldRef = this._fieldRef?.internalValue;
    }
    if (this._mode !== undefined) {
      hasAnyValues = true;
      internalValueResult.mode = this._mode;
    }
    if (this._path !== undefined) {
      hasAnyValues = true;
      internalValueResult.path = this._path;
    }
    if (this._resourceFieldRef?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.resourceFieldRef = this._resourceFieldRef?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesDownwardApiItems | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._fieldRef.internalValue = undefined;
      this._mode = undefined;
      this._path = undefined;
      this._resourceFieldRef.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._fieldRef.internalValue = value.fieldRef;
      this._mode = value.mode;
      this._path = value.path;
      this._resourceFieldRef.internalValue = value.resourceFieldRef;
    }
  }

  // field_ref - computed: false, optional: true, required: false
  private _fieldRef = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesDownwardApiItemsFieldRefOutputReference(this, "field_ref");
  public get fieldRef() {
    return this._fieldRef;
  }
  public putFieldRef(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesDownwardApiItemsFieldRef) {
    this._fieldRef.internalValue = value;
  }
  public resetFieldRef() {
    this._fieldRef.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get fieldRefInput() {
    return this._fieldRef.internalValue;
  }

  // mode - computed: false, optional: true, required: false
  private _mode?: number; 
  public get mode() {
    return this.getNumberAttribute('mode');
  }
  public set mode(value: number) {
    this._mode = value;
  }
  public resetMode() {
    this._mode = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get modeInput() {
    return this._mode;
  }

  // path - computed: false, optional: false, required: true
  private _path?: string; 
  public get path() {
    return this.getStringAttribute('path');
  }
  public set path(value: string) {
    this._path = value;
  }
  // Temporarily expose input value. Use with caution.
  public get pathInput() {
    return this._path;
  }

  // resource_field_ref - computed: false, optional: true, required: false
  private _resourceFieldRef = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesDownwardApiItemsResourceFieldRefOutputReference(this, "resource_field_ref");
  public get resourceFieldRef() {
    return this._resourceFieldRef;
  }
  public putResourceFieldRef(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesDownwardApiItemsResourceFieldRef) {
    this._resourceFieldRef.internalValue = value;
  }
  public resetResourceFieldRef() {
    this._resourceFieldRef.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get resourceFieldRefInput() {
    return this._resourceFieldRef.internalValue;
  }
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesDownwardApiItemsList extends cdktf.ComplexList {
  public internalValue? : DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesDownwardApiItems[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesDownwardApiItemsOutputReference {
    return new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesDownwardApiItemsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesDownwardApi {
  /**
  * Items is a list of DownwardAPIVolume file
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#items DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#items}
  */
  readonly items?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesDownwardApiItems[] | cdktf.IResolvable;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesDownwardApiToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesDownwardApi | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    items: cdktf.listMapper(dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesDownwardApiItemsToTerraform, false)(struct!.items),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesDownwardApiToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesDownwardApi | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    items: {
      value: cdktf.listMapperHcl(dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesDownwardApiItemsToHclTerraform, false)(struct!.items),
      isBlock: true,
      type: "list",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesDownwardApiItemsList",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesDownwardApiOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesDownwardApi | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._items?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.items = this._items?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesDownwardApi | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._items.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._items.internalValue = value.items;
    }
  }

  // items - computed: false, optional: true, required: false
  private _items = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesDownwardApiItemsList(this, "items", false);
  public get items() {
    return this._items;
  }
  public putItems(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesDownwardApiItems[] | cdktf.IResolvable) {
    this._items.internalValue = value;
  }
  public resetItems() {
    this._items.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get itemsInput() {
    return this._items.internalValue;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesSecretItems {
  /**
  * key is the key to project.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#key DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#key}
  */
  readonly key: string;
  /**
  * mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#mode DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#mode}
  */
  readonly mode?: number;
  /**
  * path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#path DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#path}
  */
  readonly path: string;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesSecretItemsToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesSecretItems | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    key: cdktf.stringToTerraform(struct!.key),
    mode: cdktf.numberToTerraform(struct!.mode),
    path: cdktf.stringToTerraform(struct!.path),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesSecretItemsToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesSecretItems | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    key: {
      value: cdktf.stringToHclTerraform(struct!.key),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    mode: {
      value: cdktf.numberToHclTerraform(struct!.mode),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    path: {
      value: cdktf.stringToHclTerraform(struct!.path),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesSecretItemsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesSecretItems | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._key !== undefined) {
      hasAnyValues = true;
      internalValueResult.key = this._key;
    }
    if (this._mode !== undefined) {
      hasAnyValues = true;
      internalValueResult.mode = this._mode;
    }
    if (this._path !== undefined) {
      hasAnyValues = true;
      internalValueResult.path = this._path;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesSecretItems | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._key = undefined;
      this._mode = undefined;
      this._path = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._key = value.key;
      this._mode = value.mode;
      this._path = value.path;
    }
  }

  // key - computed: false, optional: false, required: true
  private _key?: string; 
  public get key() {
    return this.getStringAttribute('key');
  }
  public set key(value: string) {
    this._key = value;
  }
  // Temporarily expose input value. Use with caution.
  public get keyInput() {
    return this._key;
  }

  // mode - computed: false, optional: true, required: false
  private _mode?: number; 
  public get mode() {
    return this.getNumberAttribute('mode');
  }
  public set mode(value: number) {
    this._mode = value;
  }
  public resetMode() {
    this._mode = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get modeInput() {
    return this._mode;
  }

  // path - computed: false, optional: false, required: true
  private _path?: string; 
  public get path() {
    return this.getStringAttribute('path');
  }
  public set path(value: string) {
    this._path = value;
  }
  // Temporarily expose input value. Use with caution.
  public get pathInput() {
    return this._path;
  }
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesSecretItemsList extends cdktf.ComplexList {
  public internalValue? : DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesSecretItems[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesSecretItemsOutputReference {
    return new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesSecretItemsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesSecret {
  /**
  * items if unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#items DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#items}
  */
  readonly items?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesSecretItems[] | cdktf.IResolvable;
  /**
  * Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. TODO: Add other useful fields. apiVersion, kind, uid? More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Drop 'kubebuilder:default' when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#name DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#name}
  */
  readonly name?: string;
  /**
  * optional field specify whether the Secret or its key must be defined
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#optional DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#optional}
  */
  readonly optional?: boolean | cdktf.IResolvable;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesSecretToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesSecret | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    items: cdktf.listMapper(dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesSecretItemsToTerraform, false)(struct!.items),
    name: cdktf.stringToTerraform(struct!.name),
    optional: cdktf.booleanToTerraform(struct!.optional),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesSecretToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesSecret | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    items: {
      value: cdktf.listMapperHcl(dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesSecretItemsToHclTerraform, false)(struct!.items),
      isBlock: true,
      type: "list",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesSecretItemsList",
    },
    name: {
      value: cdktf.stringToHclTerraform(struct!.name),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    optional: {
      value: cdktf.booleanToHclTerraform(struct!.optional),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesSecretOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesSecret | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._items?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.items = this._items?.internalValue;
    }
    if (this._name !== undefined) {
      hasAnyValues = true;
      internalValueResult.name = this._name;
    }
    if (this._optional !== undefined) {
      hasAnyValues = true;
      internalValueResult.optional = this._optional;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesSecret | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._items.internalValue = undefined;
      this._name = undefined;
      this._optional = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._items.internalValue = value.items;
      this._name = value.name;
      this._optional = value.optional;
    }
  }

  // items - computed: false, optional: true, required: false
  private _items = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesSecretItemsList(this, "items", false);
  public get items() {
    return this._items;
  }
  public putItems(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesSecretItems[] | cdktf.IResolvable) {
    this._items.internalValue = value;
  }
  public resetItems() {
    this._items.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get itemsInput() {
    return this._items.internalValue;
  }

  // name - computed: false, optional: true, required: false
  private _name?: string; 
  public get name() {
    return this.getStringAttribute('name');
  }
  public set name(value: string) {
    this._name = value;
  }
  public resetName() {
    this._name = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get nameInput() {
    return this._name;
  }

  // optional - computed: false, optional: true, required: false
  private _optional?: boolean | cdktf.IResolvable; 
  public get optional() {
    return this.getBooleanAttribute('optional');
  }
  public set optional(value: boolean | cdktf.IResolvable) {
    this._optional = value;
  }
  public resetOptional() {
    this._optional = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get optionalInput() {
    return this._optional;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesServiceAccountToken {
  /**
  * audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#audience DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#audience}
  */
  readonly audience?: string;
  /**
  * expirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#expiration_seconds DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#expiration_seconds}
  */
  readonly expirationSeconds?: number;
  /**
  * path is the path relative to the mount point of the file to project the token into.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#path DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#path}
  */
  readonly path: string;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesServiceAccountTokenToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesServiceAccountToken | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    audience: cdktf.stringToTerraform(struct!.audience),
    expiration_seconds: cdktf.numberToTerraform(struct!.expirationSeconds),
    path: cdktf.stringToTerraform(struct!.path),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesServiceAccountTokenToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesServiceAccountToken | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    audience: {
      value: cdktf.stringToHclTerraform(struct!.audience),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    expiration_seconds: {
      value: cdktf.numberToHclTerraform(struct!.expirationSeconds),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    path: {
      value: cdktf.stringToHclTerraform(struct!.path),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesServiceAccountTokenOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesServiceAccountToken | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._audience !== undefined) {
      hasAnyValues = true;
      internalValueResult.audience = this._audience;
    }
    if (this._expirationSeconds !== undefined) {
      hasAnyValues = true;
      internalValueResult.expirationSeconds = this._expirationSeconds;
    }
    if (this._path !== undefined) {
      hasAnyValues = true;
      internalValueResult.path = this._path;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesServiceAccountToken | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._audience = undefined;
      this._expirationSeconds = undefined;
      this._path = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._audience = value.audience;
      this._expirationSeconds = value.expirationSeconds;
      this._path = value.path;
    }
  }

  // audience - computed: false, optional: true, required: false
  private _audience?: string; 
  public get audience() {
    return this.getStringAttribute('audience');
  }
  public set audience(value: string) {
    this._audience = value;
  }
  public resetAudience() {
    this._audience = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get audienceInput() {
    return this._audience;
  }

  // expiration_seconds - computed: false, optional: true, required: false
  private _expirationSeconds?: number; 
  public get expirationSeconds() {
    return this.getNumberAttribute('expiration_seconds');
  }
  public set expirationSeconds(value: number) {
    this._expirationSeconds = value;
  }
  public resetExpirationSeconds() {
    this._expirationSeconds = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get expirationSecondsInput() {
    return this._expirationSeconds;
  }

  // path - computed: false, optional: false, required: true
  private _path?: string; 
  public get path() {
    return this.getStringAttribute('path');
  }
  public set path(value: string) {
    this._path = value;
  }
  // Temporarily expose input value. Use with caution.
  public get pathInput() {
    return this._path;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSources {
  /**
  * ClusterTrustBundle allows a pod to access the '.spec.trustBundle' field of ClusterTrustBundle objects in an auto-updating file. Alpha, gated by the ClusterTrustBundleProjection feature gate. ClusterTrustBundle objects can either be selected by name, or by the combination of signer name and a label selector. Kubelet performs aggressive normalization of the PEM contents written into the pod filesystem. Esoteric PEM features such as inter-block comments and block headers are stripped. Certificates are deduplicated. The ordering of certificates within the file is arbitrary, and Kubelet may change the order over time.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#cluster_trust_bundle DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#cluster_trust_bundle}
  */
  readonly clusterTrustBundle?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesClusterTrustBundle;
  /**
  * configMap information about the configMap data to project
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#config_map DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#config_map}
  */
  readonly configMap?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesConfigMap;
  /**
  * downwardAPI information about the downwardAPI data to project
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#downward_api DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#downward_api}
  */
  readonly downwardApi?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesDownwardApi;
  /**
  * secret information about the secret data to project
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#secret DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#secret}
  */
  readonly secret?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesSecret;
  /**
  * serviceAccountToken is information about the serviceAccountToken data to project
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#service_account_token DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#service_account_token}
  */
  readonly serviceAccountToken?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesServiceAccountToken;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSources | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    cluster_trust_bundle: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesClusterTrustBundleToTerraform(struct!.clusterTrustBundle),
    config_map: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesConfigMapToTerraform(struct!.configMap),
    downward_api: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesDownwardApiToTerraform(struct!.downwardApi),
    secret: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesSecretToTerraform(struct!.secret),
    service_account_token: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesServiceAccountTokenToTerraform(struct!.serviceAccountToken),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSources | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    cluster_trust_bundle: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesClusterTrustBundleToHclTerraform(struct!.clusterTrustBundle),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesClusterTrustBundle",
    },
    config_map: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesConfigMapToHclTerraform(struct!.configMap),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesConfigMap",
    },
    downward_api: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesDownwardApiToHclTerraform(struct!.downwardApi),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesDownwardApi",
    },
    secret: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesSecretToHclTerraform(struct!.secret),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesSecret",
    },
    service_account_token: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesServiceAccountTokenToHclTerraform(struct!.serviceAccountToken),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesServiceAccountToken",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSources | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._clusterTrustBundle?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.clusterTrustBundle = this._clusterTrustBundle?.internalValue;
    }
    if (this._configMap?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.configMap = this._configMap?.internalValue;
    }
    if (this._downwardApi?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.downwardApi = this._downwardApi?.internalValue;
    }
    if (this._secret?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.secret = this._secret?.internalValue;
    }
    if (this._serviceAccountToken?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.serviceAccountToken = this._serviceAccountToken?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSources | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._clusterTrustBundle.internalValue = undefined;
      this._configMap.internalValue = undefined;
      this._downwardApi.internalValue = undefined;
      this._secret.internalValue = undefined;
      this._serviceAccountToken.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._clusterTrustBundle.internalValue = value.clusterTrustBundle;
      this._configMap.internalValue = value.configMap;
      this._downwardApi.internalValue = value.downwardApi;
      this._secret.internalValue = value.secret;
      this._serviceAccountToken.internalValue = value.serviceAccountToken;
    }
  }

  // cluster_trust_bundle - computed: false, optional: true, required: false
  private _clusterTrustBundle = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesClusterTrustBundleOutputReference(this, "cluster_trust_bundle");
  public get clusterTrustBundle() {
    return this._clusterTrustBundle;
  }
  public putClusterTrustBundle(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesClusterTrustBundle) {
    this._clusterTrustBundle.internalValue = value;
  }
  public resetClusterTrustBundle() {
    this._clusterTrustBundle.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get clusterTrustBundleInput() {
    return this._clusterTrustBundle.internalValue;
  }

  // config_map - computed: false, optional: true, required: false
  private _configMap = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesConfigMapOutputReference(this, "config_map");
  public get configMap() {
    return this._configMap;
  }
  public putConfigMap(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesConfigMap) {
    this._configMap.internalValue = value;
  }
  public resetConfigMap() {
    this._configMap.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get configMapInput() {
    return this._configMap.internalValue;
  }

  // downward_api - computed: false, optional: true, required: false
  private _downwardApi = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesDownwardApiOutputReference(this, "downward_api");
  public get downwardApi() {
    return this._downwardApi;
  }
  public putDownwardApi(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesDownwardApi) {
    this._downwardApi.internalValue = value;
  }
  public resetDownwardApi() {
    this._downwardApi.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get downwardApiInput() {
    return this._downwardApi.internalValue;
  }

  // secret - computed: false, optional: true, required: false
  private _secret = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesSecretOutputReference(this, "secret");
  public get secret() {
    return this._secret;
  }
  public putSecret(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesSecret) {
    this._secret.internalValue = value;
  }
  public resetSecret() {
    this._secret.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get secretInput() {
    return this._secret.internalValue;
  }

  // service_account_token - computed: false, optional: true, required: false
  private _serviceAccountToken = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesServiceAccountTokenOutputReference(this, "service_account_token");
  public get serviceAccountToken() {
    return this._serviceAccountToken;
  }
  public putServiceAccountToken(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesServiceAccountToken) {
    this._serviceAccountToken.internalValue = value;
  }
  public resetServiceAccountToken() {
    this._serviceAccountToken.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get serviceAccountTokenInput() {
    return this._serviceAccountToken.internalValue;
  }
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesList extends cdktf.ComplexList {
  public internalValue? : DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSources[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesOutputReference {
    return new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjected {
  /**
  * defaultMode are the mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#default_mode DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#default_mode}
  */
  readonly defaultMode?: number;
  /**
  * sources is the list of volume projections
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#sources DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#sources}
  */
  readonly sources?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSources[] | cdktf.IResolvable;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjected | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    default_mode: cdktf.numberToTerraform(struct!.defaultMode),
    sources: cdktf.listMapper(dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesToTerraform, false)(struct!.sources),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjected | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    default_mode: {
      value: cdktf.numberToHclTerraform(struct!.defaultMode),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    sources: {
      value: cdktf.listMapperHcl(dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesToHclTerraform, false)(struct!.sources),
      isBlock: true,
      type: "list",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesList",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjected | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._defaultMode !== undefined) {
      hasAnyValues = true;
      internalValueResult.defaultMode = this._defaultMode;
    }
    if (this._sources?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.sources = this._sources?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjected | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._defaultMode = undefined;
      this._sources.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._defaultMode = value.defaultMode;
      this._sources.internalValue = value.sources;
    }
  }

  // default_mode - computed: false, optional: true, required: false
  private _defaultMode?: number; 
  public get defaultMode() {
    return this.getNumberAttribute('default_mode');
  }
  public set defaultMode(value: number) {
    this._defaultMode = value;
  }
  public resetDefaultMode() {
    this._defaultMode = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get defaultModeInput() {
    return this._defaultMode;
  }

  // sources - computed: false, optional: true, required: false
  private _sources = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSourcesList(this, "sources", false);
  public get sources() {
    return this._sources;
  }
  public putSources(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedSources[] | cdktf.IResolvable) {
    this._sources.internalValue = value;
  }
  public resetSources() {
    this._sources.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get sourcesInput() {
    return this._sources.internalValue;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesQuobyte {
  /**
  * group to map volume access to Default is no group
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#group DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#group}
  */
  readonly group?: string;
  /**
  * readOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#read_only DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#read_only}
  */
  readonly readOnly?: boolean | cdktf.IResolvable;
  /**
  * registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#registry DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#registry}
  */
  readonly registry: string;
  /**
  * tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#tenant DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#tenant}
  */
  readonly tenant?: string;
  /**
  * user to map volume access to Defaults to serivceaccount user
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#user DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#user}
  */
  readonly user?: string;
  /**
  * volume is a string that references an already created Quobyte volume by name.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#volume DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#volume}
  */
  readonly volume: string;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesQuobyteToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesQuobyte | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    group: cdktf.stringToTerraform(struct!.group),
    read_only: cdktf.booleanToTerraform(struct!.readOnly),
    registry: cdktf.stringToTerraform(struct!.registry),
    tenant: cdktf.stringToTerraform(struct!.tenant),
    user: cdktf.stringToTerraform(struct!.user),
    volume: cdktf.stringToTerraform(struct!.volume),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesQuobyteToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesQuobyte | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    group: {
      value: cdktf.stringToHclTerraform(struct!.group),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    read_only: {
      value: cdktf.booleanToHclTerraform(struct!.readOnly),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    registry: {
      value: cdktf.stringToHclTerraform(struct!.registry),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    tenant: {
      value: cdktf.stringToHclTerraform(struct!.tenant),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    user: {
      value: cdktf.stringToHclTerraform(struct!.user),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    volume: {
      value: cdktf.stringToHclTerraform(struct!.volume),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesQuobyteOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesQuobyte | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._group !== undefined) {
      hasAnyValues = true;
      internalValueResult.group = this._group;
    }
    if (this._readOnly !== undefined) {
      hasAnyValues = true;
      internalValueResult.readOnly = this._readOnly;
    }
    if (this._registry !== undefined) {
      hasAnyValues = true;
      internalValueResult.registry = this._registry;
    }
    if (this._tenant !== undefined) {
      hasAnyValues = true;
      internalValueResult.tenant = this._tenant;
    }
    if (this._user !== undefined) {
      hasAnyValues = true;
      internalValueResult.user = this._user;
    }
    if (this._volume !== undefined) {
      hasAnyValues = true;
      internalValueResult.volume = this._volume;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesQuobyte | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._group = undefined;
      this._readOnly = undefined;
      this._registry = undefined;
      this._tenant = undefined;
      this._user = undefined;
      this._volume = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._group = value.group;
      this._readOnly = value.readOnly;
      this._registry = value.registry;
      this._tenant = value.tenant;
      this._user = value.user;
      this._volume = value.volume;
    }
  }

  // group - computed: false, optional: true, required: false
  private _group?: string; 
  public get group() {
    return this.getStringAttribute('group');
  }
  public set group(value: string) {
    this._group = value;
  }
  public resetGroup() {
    this._group = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get groupInput() {
    return this._group;
  }

  // read_only - computed: false, optional: true, required: false
  private _readOnly?: boolean | cdktf.IResolvable; 
  public get readOnly() {
    return this.getBooleanAttribute('read_only');
  }
  public set readOnly(value: boolean | cdktf.IResolvable) {
    this._readOnly = value;
  }
  public resetReadOnly() {
    this._readOnly = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get readOnlyInput() {
    return this._readOnly;
  }

  // registry - computed: false, optional: false, required: true
  private _registry?: string; 
  public get registry() {
    return this.getStringAttribute('registry');
  }
  public set registry(value: string) {
    this._registry = value;
  }
  // Temporarily expose input value. Use with caution.
  public get registryInput() {
    return this._registry;
  }

  // tenant - computed: false, optional: true, required: false
  private _tenant?: string; 
  public get tenant() {
    return this.getStringAttribute('tenant');
  }
  public set tenant(value: string) {
    this._tenant = value;
  }
  public resetTenant() {
    this._tenant = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get tenantInput() {
    return this._tenant;
  }

  // user - computed: false, optional: true, required: false
  private _user?: string; 
  public get user() {
    return this.getStringAttribute('user');
  }
  public set user(value: string) {
    this._user = value;
  }
  public resetUser() {
    this._user = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get userInput() {
    return this._user;
  }

  // volume - computed: false, optional: false, required: true
  private _volume?: string; 
  public get volume() {
    return this.getStringAttribute('volume');
  }
  public set volume(value: string) {
    this._volume = value;
  }
  // Temporarily expose input value. Use with caution.
  public get volumeInput() {
    return this._volume;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesRbdSecretRef {
  /**
  * Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. TODO: Add other useful fields. apiVersion, kind, uid? More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Drop 'kubebuilder:default' when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#name DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#name}
  */
  readonly name?: string;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesRbdSecretRefToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesRbdSecretRef | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    name: cdktf.stringToTerraform(struct!.name),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesRbdSecretRefToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesRbdSecretRef | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    name: {
      value: cdktf.stringToHclTerraform(struct!.name),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesRbdSecretRefOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesRbdSecretRef | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._name !== undefined) {
      hasAnyValues = true;
      internalValueResult.name = this._name;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesRbdSecretRef | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._name = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._name = value.name;
    }
  }

  // name - computed: false, optional: true, required: false
  private _name?: string; 
  public get name() {
    return this.getStringAttribute('name');
  }
  public set name(value: string) {
    this._name = value;
  }
  public resetName() {
    this._name = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get nameInput() {
    return this._name;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesRbd {
  /**
  * fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: 'ext4', 'xfs', 'ntfs'. Implicitly inferred to be 'ext4' if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd TODO: how do we prevent errors in the filesystem from compromising the machine
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#fs_type DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#fs_type}
  */
  readonly fsType?: string;
  /**
  * image is the rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#image DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#image}
  */
  readonly image: string;
  /**
  * keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#keyring DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#keyring}
  */
  readonly keyring?: string;
  /**
  * monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#monitors DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#monitors}
  */
  readonly monitors: string[];
  /**
  * pool is the rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#pool DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#pool}
  */
  readonly pool?: string;
  /**
  * readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#read_only DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#read_only}
  */
  readonly readOnly?: boolean | cdktf.IResolvable;
  /**
  * secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#secret_ref DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#secret_ref}
  */
  readonly secretRef?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesRbdSecretRef;
  /**
  * user is the rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#user DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#user}
  */
  readonly user?: string;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesRbdToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesRbd | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    fs_type: cdktf.stringToTerraform(struct!.fsType),
    image: cdktf.stringToTerraform(struct!.image),
    keyring: cdktf.stringToTerraform(struct!.keyring),
    monitors: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.monitors),
    pool: cdktf.stringToTerraform(struct!.pool),
    read_only: cdktf.booleanToTerraform(struct!.readOnly),
    secret_ref: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesRbdSecretRefToTerraform(struct!.secretRef),
    user: cdktf.stringToTerraform(struct!.user),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesRbdToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesRbd | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    fs_type: {
      value: cdktf.stringToHclTerraform(struct!.fsType),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    image: {
      value: cdktf.stringToHclTerraform(struct!.image),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    keyring: {
      value: cdktf.stringToHclTerraform(struct!.keyring),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    monitors: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.monitors),
      isBlock: false,
      type: "list",
      storageClassType: "stringList",
    },
    pool: {
      value: cdktf.stringToHclTerraform(struct!.pool),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    read_only: {
      value: cdktf.booleanToHclTerraform(struct!.readOnly),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    secret_ref: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesRbdSecretRefToHclTerraform(struct!.secretRef),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesRbdSecretRef",
    },
    user: {
      value: cdktf.stringToHclTerraform(struct!.user),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesRbdOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesRbd | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._fsType !== undefined) {
      hasAnyValues = true;
      internalValueResult.fsType = this._fsType;
    }
    if (this._image !== undefined) {
      hasAnyValues = true;
      internalValueResult.image = this._image;
    }
    if (this._keyring !== undefined) {
      hasAnyValues = true;
      internalValueResult.keyring = this._keyring;
    }
    if (this._monitors !== undefined) {
      hasAnyValues = true;
      internalValueResult.monitors = this._monitors;
    }
    if (this._pool !== undefined) {
      hasAnyValues = true;
      internalValueResult.pool = this._pool;
    }
    if (this._readOnly !== undefined) {
      hasAnyValues = true;
      internalValueResult.readOnly = this._readOnly;
    }
    if (this._secretRef?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.secretRef = this._secretRef?.internalValue;
    }
    if (this._user !== undefined) {
      hasAnyValues = true;
      internalValueResult.user = this._user;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesRbd | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._fsType = undefined;
      this._image = undefined;
      this._keyring = undefined;
      this._monitors = undefined;
      this._pool = undefined;
      this._readOnly = undefined;
      this._secretRef.internalValue = undefined;
      this._user = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._fsType = value.fsType;
      this._image = value.image;
      this._keyring = value.keyring;
      this._monitors = value.monitors;
      this._pool = value.pool;
      this._readOnly = value.readOnly;
      this._secretRef.internalValue = value.secretRef;
      this._user = value.user;
    }
  }

  // fs_type - computed: false, optional: true, required: false
  private _fsType?: string; 
  public get fsType() {
    return this.getStringAttribute('fs_type');
  }
  public set fsType(value: string) {
    this._fsType = value;
  }
  public resetFsType() {
    this._fsType = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get fsTypeInput() {
    return this._fsType;
  }

  // image - computed: false, optional: false, required: true
  private _image?: string; 
  public get image() {
    return this.getStringAttribute('image');
  }
  public set image(value: string) {
    this._image = value;
  }
  // Temporarily expose input value. Use with caution.
  public get imageInput() {
    return this._image;
  }

  // keyring - computed: false, optional: true, required: false
  private _keyring?: string; 
  public get keyring() {
    return this.getStringAttribute('keyring');
  }
  public set keyring(value: string) {
    this._keyring = value;
  }
  public resetKeyring() {
    this._keyring = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get keyringInput() {
    return this._keyring;
  }

  // monitors - computed: false, optional: false, required: true
  private _monitors?: string[]; 
  public get monitors() {
    return this.getListAttribute('monitors');
  }
  public set monitors(value: string[]) {
    this._monitors = value;
  }
  // Temporarily expose input value. Use with caution.
  public get monitorsInput() {
    return this._monitors;
  }

  // pool - computed: false, optional: true, required: false
  private _pool?: string; 
  public get pool() {
    return this.getStringAttribute('pool');
  }
  public set pool(value: string) {
    this._pool = value;
  }
  public resetPool() {
    this._pool = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get poolInput() {
    return this._pool;
  }

  // read_only - computed: false, optional: true, required: false
  private _readOnly?: boolean | cdktf.IResolvable; 
  public get readOnly() {
    return this.getBooleanAttribute('read_only');
  }
  public set readOnly(value: boolean | cdktf.IResolvable) {
    this._readOnly = value;
  }
  public resetReadOnly() {
    this._readOnly = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get readOnlyInput() {
    return this._readOnly;
  }

  // secret_ref - computed: false, optional: true, required: false
  private _secretRef = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesRbdSecretRefOutputReference(this, "secret_ref");
  public get secretRef() {
    return this._secretRef;
  }
  public putSecretRef(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesRbdSecretRef) {
    this._secretRef.internalValue = value;
  }
  public resetSecretRef() {
    this._secretRef.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get secretRefInput() {
    return this._secretRef.internalValue;
  }

  // user - computed: false, optional: true, required: false
  private _user?: string; 
  public get user() {
    return this.getStringAttribute('user');
  }
  public set user(value: string) {
    this._user = value;
  }
  public resetUser() {
    this._user = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get userInput() {
    return this._user;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesScaleIoSecretRef {
  /**
  * Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. TODO: Add other useful fields. apiVersion, kind, uid? More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Drop 'kubebuilder:default' when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#name DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#name}
  */
  readonly name?: string;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesScaleIoSecretRefToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesScaleIoSecretRef | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    name: cdktf.stringToTerraform(struct!.name),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesScaleIoSecretRefToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesScaleIoSecretRef | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    name: {
      value: cdktf.stringToHclTerraform(struct!.name),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesScaleIoSecretRefOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesScaleIoSecretRef | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._name !== undefined) {
      hasAnyValues = true;
      internalValueResult.name = this._name;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesScaleIoSecretRef | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._name = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._name = value.name;
    }
  }

  // name - computed: false, optional: true, required: false
  private _name?: string; 
  public get name() {
    return this.getStringAttribute('name');
  }
  public set name(value: string) {
    this._name = value;
  }
  public resetName() {
    this._name = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get nameInput() {
    return this._name;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesScaleIo {
  /**
  * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. 'ext4', 'xfs', 'ntfs'. Default is 'xfs'.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#fs_type DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#fs_type}
  */
  readonly fsType?: string;
  /**
  * gateway is the host address of the ScaleIO API Gateway.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#gateway DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#gateway}
  */
  readonly gateway: string;
  /**
  * protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#protection_domain DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#protection_domain}
  */
  readonly protectionDomain?: string;
  /**
  * readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#read_only DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#read_only}
  */
  readonly readOnly?: boolean | cdktf.IResolvable;
  /**
  * secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#secret_ref DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#secret_ref}
  */
  readonly secretRef: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesScaleIoSecretRef;
  /**
  * sslEnabled Flag enable/disable SSL communication with Gateway, default false
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#ssl_enabled DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#ssl_enabled}
  */
  readonly sslEnabled?: boolean | cdktf.IResolvable;
  /**
  * storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#storage_mode DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#storage_mode}
  */
  readonly storageMode?: string;
  /**
  * storagePool is the ScaleIO Storage Pool associated with the protection domain.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#storage_pool DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#storage_pool}
  */
  readonly storagePool?: string;
  /**
  * system is the name of the storage system as configured in ScaleIO.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#system DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#system}
  */
  readonly systemAttribute: string;
  /**
  * volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#volume_name DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#volume_name}
  */
  readonly volumeName?: string;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesScaleIoToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesScaleIo | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    fs_type: cdktf.stringToTerraform(struct!.fsType),
    gateway: cdktf.stringToTerraform(struct!.gateway),
    protection_domain: cdktf.stringToTerraform(struct!.protectionDomain),
    read_only: cdktf.booleanToTerraform(struct!.readOnly),
    secret_ref: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesScaleIoSecretRefToTerraform(struct!.secretRef),
    ssl_enabled: cdktf.booleanToTerraform(struct!.sslEnabled),
    storage_mode: cdktf.stringToTerraform(struct!.storageMode),
    storage_pool: cdktf.stringToTerraform(struct!.storagePool),
    system: cdktf.stringToTerraform(struct!.systemAttribute),
    volume_name: cdktf.stringToTerraform(struct!.volumeName),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesScaleIoToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesScaleIo | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    fs_type: {
      value: cdktf.stringToHclTerraform(struct!.fsType),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    gateway: {
      value: cdktf.stringToHclTerraform(struct!.gateway),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    protection_domain: {
      value: cdktf.stringToHclTerraform(struct!.protectionDomain),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    read_only: {
      value: cdktf.booleanToHclTerraform(struct!.readOnly),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    secret_ref: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesScaleIoSecretRefToHclTerraform(struct!.secretRef),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesScaleIoSecretRef",
    },
    ssl_enabled: {
      value: cdktf.booleanToHclTerraform(struct!.sslEnabled),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    storage_mode: {
      value: cdktf.stringToHclTerraform(struct!.storageMode),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    storage_pool: {
      value: cdktf.stringToHclTerraform(struct!.storagePool),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    system: {
      value: cdktf.stringToHclTerraform(struct!.systemAttribute),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    volume_name: {
      value: cdktf.stringToHclTerraform(struct!.volumeName),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesScaleIoOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesScaleIo | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._fsType !== undefined) {
      hasAnyValues = true;
      internalValueResult.fsType = this._fsType;
    }
    if (this._gateway !== undefined) {
      hasAnyValues = true;
      internalValueResult.gateway = this._gateway;
    }
    if (this._protectionDomain !== undefined) {
      hasAnyValues = true;
      internalValueResult.protectionDomain = this._protectionDomain;
    }
    if (this._readOnly !== undefined) {
      hasAnyValues = true;
      internalValueResult.readOnly = this._readOnly;
    }
    if (this._secretRef?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.secretRef = this._secretRef?.internalValue;
    }
    if (this._sslEnabled !== undefined) {
      hasAnyValues = true;
      internalValueResult.sslEnabled = this._sslEnabled;
    }
    if (this._storageMode !== undefined) {
      hasAnyValues = true;
      internalValueResult.storageMode = this._storageMode;
    }
    if (this._storagePool !== undefined) {
      hasAnyValues = true;
      internalValueResult.storagePool = this._storagePool;
    }
    if (this._system !== undefined) {
      hasAnyValues = true;
      internalValueResult.systemAttribute = this._system;
    }
    if (this._volumeName !== undefined) {
      hasAnyValues = true;
      internalValueResult.volumeName = this._volumeName;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesScaleIo | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._fsType = undefined;
      this._gateway = undefined;
      this._protectionDomain = undefined;
      this._readOnly = undefined;
      this._secretRef.internalValue = undefined;
      this._sslEnabled = undefined;
      this._storageMode = undefined;
      this._storagePool = undefined;
      this._system = undefined;
      this._volumeName = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._fsType = value.fsType;
      this._gateway = value.gateway;
      this._protectionDomain = value.protectionDomain;
      this._readOnly = value.readOnly;
      this._secretRef.internalValue = value.secretRef;
      this._sslEnabled = value.sslEnabled;
      this._storageMode = value.storageMode;
      this._storagePool = value.storagePool;
      this._system = value.systemAttribute;
      this._volumeName = value.volumeName;
    }
  }

  // fs_type - computed: false, optional: true, required: false
  private _fsType?: string; 
  public get fsType() {
    return this.getStringAttribute('fs_type');
  }
  public set fsType(value: string) {
    this._fsType = value;
  }
  public resetFsType() {
    this._fsType = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get fsTypeInput() {
    return this._fsType;
  }

  // gateway - computed: false, optional: false, required: true
  private _gateway?: string; 
  public get gateway() {
    return this.getStringAttribute('gateway');
  }
  public set gateway(value: string) {
    this._gateway = value;
  }
  // Temporarily expose input value. Use with caution.
  public get gatewayInput() {
    return this._gateway;
  }

  // protection_domain - computed: false, optional: true, required: false
  private _protectionDomain?: string; 
  public get protectionDomain() {
    return this.getStringAttribute('protection_domain');
  }
  public set protectionDomain(value: string) {
    this._protectionDomain = value;
  }
  public resetProtectionDomain() {
    this._protectionDomain = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get protectionDomainInput() {
    return this._protectionDomain;
  }

  // read_only - computed: false, optional: true, required: false
  private _readOnly?: boolean | cdktf.IResolvable; 
  public get readOnly() {
    return this.getBooleanAttribute('read_only');
  }
  public set readOnly(value: boolean | cdktf.IResolvable) {
    this._readOnly = value;
  }
  public resetReadOnly() {
    this._readOnly = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get readOnlyInput() {
    return this._readOnly;
  }

  // secret_ref - computed: false, optional: false, required: true
  private _secretRef = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesScaleIoSecretRefOutputReference(this, "secret_ref");
  public get secretRef() {
    return this._secretRef;
  }
  public putSecretRef(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesScaleIoSecretRef) {
    this._secretRef.internalValue = value;
  }
  // Temporarily expose input value. Use with caution.
  public get secretRefInput() {
    return this._secretRef.internalValue;
  }

  // ssl_enabled - computed: false, optional: true, required: false
  private _sslEnabled?: boolean | cdktf.IResolvable; 
  public get sslEnabled() {
    return this.getBooleanAttribute('ssl_enabled');
  }
  public set sslEnabled(value: boolean | cdktf.IResolvable) {
    this._sslEnabled = value;
  }
  public resetSslEnabled() {
    this._sslEnabled = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get sslEnabledInput() {
    return this._sslEnabled;
  }

  // storage_mode - computed: false, optional: true, required: false
  private _storageMode?: string; 
  public get storageMode() {
    return this.getStringAttribute('storage_mode');
  }
  public set storageMode(value: string) {
    this._storageMode = value;
  }
  public resetStorageMode() {
    this._storageMode = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get storageModeInput() {
    return this._storageMode;
  }

  // storage_pool - computed: false, optional: true, required: false
  private _storagePool?: string; 
  public get storagePool() {
    return this.getStringAttribute('storage_pool');
  }
  public set storagePool(value: string) {
    this._storagePool = value;
  }
  public resetStoragePool() {
    this._storagePool = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get storagePoolInput() {
    return this._storagePool;
  }

  // system - computed: false, optional: false, required: true
  private _system?: string; 
  public get systemAttribute() {
    return this.getStringAttribute('system');
  }
  public set systemAttribute(value: string) {
    this._system = value;
  }
  // Temporarily expose input value. Use with caution.
  public get systemAttributeInput() {
    return this._system;
  }

  // volume_name - computed: false, optional: true, required: false
  private _volumeName?: string; 
  public get volumeName() {
    return this.getStringAttribute('volume_name');
  }
  public set volumeName(value: string) {
    this._volumeName = value;
  }
  public resetVolumeName() {
    this._volumeName = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get volumeNameInput() {
    return this._volumeName;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesSecretItems {
  /**
  * key is the key to project.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#key DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#key}
  */
  readonly key: string;
  /**
  * mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#mode DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#mode}
  */
  readonly mode?: number;
  /**
  * path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#path DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#path}
  */
  readonly path: string;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesSecretItemsToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesSecretItems | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    key: cdktf.stringToTerraform(struct!.key),
    mode: cdktf.numberToTerraform(struct!.mode),
    path: cdktf.stringToTerraform(struct!.path),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesSecretItemsToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesSecretItems | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    key: {
      value: cdktf.stringToHclTerraform(struct!.key),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    mode: {
      value: cdktf.numberToHclTerraform(struct!.mode),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    path: {
      value: cdktf.stringToHclTerraform(struct!.path),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesSecretItemsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesSecretItems | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._key !== undefined) {
      hasAnyValues = true;
      internalValueResult.key = this._key;
    }
    if (this._mode !== undefined) {
      hasAnyValues = true;
      internalValueResult.mode = this._mode;
    }
    if (this._path !== undefined) {
      hasAnyValues = true;
      internalValueResult.path = this._path;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesSecretItems | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._key = undefined;
      this._mode = undefined;
      this._path = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._key = value.key;
      this._mode = value.mode;
      this._path = value.path;
    }
  }

  // key - computed: false, optional: false, required: true
  private _key?: string; 
  public get key() {
    return this.getStringAttribute('key');
  }
  public set key(value: string) {
    this._key = value;
  }
  // Temporarily expose input value. Use with caution.
  public get keyInput() {
    return this._key;
  }

  // mode - computed: false, optional: true, required: false
  private _mode?: number; 
  public get mode() {
    return this.getNumberAttribute('mode');
  }
  public set mode(value: number) {
    this._mode = value;
  }
  public resetMode() {
    this._mode = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get modeInput() {
    return this._mode;
  }

  // path - computed: false, optional: false, required: true
  private _path?: string; 
  public get path() {
    return this.getStringAttribute('path');
  }
  public set path(value: string) {
    this._path = value;
  }
  // Temporarily expose input value. Use with caution.
  public get pathInput() {
    return this._path;
  }
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesSecretItemsList extends cdktf.ComplexList {
  public internalValue? : DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesSecretItems[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesSecretItemsOutputReference {
    return new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesSecretItemsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesSecret {
  /**
  * defaultMode is Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#default_mode DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#default_mode}
  */
  readonly defaultMode?: number;
  /**
  * items If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#items DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#items}
  */
  readonly items?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesSecretItems[] | cdktf.IResolvable;
  /**
  * optional field specify whether the Secret or its keys must be defined
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#optional DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#optional}
  */
  readonly optional?: boolean | cdktf.IResolvable;
  /**
  * secretName is the name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#secret_name DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#secret_name}
  */
  readonly secretName?: string;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesSecretToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesSecret | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    default_mode: cdktf.numberToTerraform(struct!.defaultMode),
    items: cdktf.listMapper(dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesSecretItemsToTerraform, false)(struct!.items),
    optional: cdktf.booleanToTerraform(struct!.optional),
    secret_name: cdktf.stringToTerraform(struct!.secretName),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesSecretToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesSecret | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    default_mode: {
      value: cdktf.numberToHclTerraform(struct!.defaultMode),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    items: {
      value: cdktf.listMapperHcl(dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesSecretItemsToHclTerraform, false)(struct!.items),
      isBlock: true,
      type: "list",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesSecretItemsList",
    },
    optional: {
      value: cdktf.booleanToHclTerraform(struct!.optional),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    secret_name: {
      value: cdktf.stringToHclTerraform(struct!.secretName),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesSecretOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesSecret | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._defaultMode !== undefined) {
      hasAnyValues = true;
      internalValueResult.defaultMode = this._defaultMode;
    }
    if (this._items?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.items = this._items?.internalValue;
    }
    if (this._optional !== undefined) {
      hasAnyValues = true;
      internalValueResult.optional = this._optional;
    }
    if (this._secretName !== undefined) {
      hasAnyValues = true;
      internalValueResult.secretName = this._secretName;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesSecret | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._defaultMode = undefined;
      this._items.internalValue = undefined;
      this._optional = undefined;
      this._secretName = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._defaultMode = value.defaultMode;
      this._items.internalValue = value.items;
      this._optional = value.optional;
      this._secretName = value.secretName;
    }
  }

  // default_mode - computed: false, optional: true, required: false
  private _defaultMode?: number; 
  public get defaultMode() {
    return this.getNumberAttribute('default_mode');
  }
  public set defaultMode(value: number) {
    this._defaultMode = value;
  }
  public resetDefaultMode() {
    this._defaultMode = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get defaultModeInput() {
    return this._defaultMode;
  }

  // items - computed: false, optional: true, required: false
  private _items = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesSecretItemsList(this, "items", false);
  public get items() {
    return this._items;
  }
  public putItems(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesSecretItems[] | cdktf.IResolvable) {
    this._items.internalValue = value;
  }
  public resetItems() {
    this._items.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get itemsInput() {
    return this._items.internalValue;
  }

  // optional - computed: false, optional: true, required: false
  private _optional?: boolean | cdktf.IResolvable; 
  public get optional() {
    return this.getBooleanAttribute('optional');
  }
  public set optional(value: boolean | cdktf.IResolvable) {
    this._optional = value;
  }
  public resetOptional() {
    this._optional = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get optionalInput() {
    return this._optional;
  }

  // secret_name - computed: false, optional: true, required: false
  private _secretName?: string; 
  public get secretName() {
    return this.getStringAttribute('secret_name');
  }
  public set secretName(value: string) {
    this._secretName = value;
  }
  public resetSecretName() {
    this._secretName = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get secretNameInput() {
    return this._secretName;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesStorageosSecretRef {
  /**
  * Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. TODO: Add other useful fields. apiVersion, kind, uid? More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Drop 'kubebuilder:default' when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#name DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#name}
  */
  readonly name?: string;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesStorageosSecretRefToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesStorageosSecretRef | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    name: cdktf.stringToTerraform(struct!.name),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesStorageosSecretRefToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesStorageosSecretRef | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    name: {
      value: cdktf.stringToHclTerraform(struct!.name),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesStorageosSecretRefOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesStorageosSecretRef | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._name !== undefined) {
      hasAnyValues = true;
      internalValueResult.name = this._name;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesStorageosSecretRef | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._name = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._name = value.name;
    }
  }

  // name - computed: false, optional: true, required: false
  private _name?: string; 
  public get name() {
    return this.getStringAttribute('name');
  }
  public set name(value: string) {
    this._name = value;
  }
  public resetName() {
    this._name = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get nameInput() {
    return this._name;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesStorageos {
  /**
  * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. 'ext4', 'xfs', 'ntfs'. Implicitly inferred to be 'ext4' if unspecified.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#fs_type DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#fs_type}
  */
  readonly fsType?: string;
  /**
  * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#read_only DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#read_only}
  */
  readonly readOnly?: boolean | cdktf.IResolvable;
  /**
  * secretRef specifies the secret to use for obtaining the StorageOS API credentials. If not specified, default values will be attempted.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#secret_ref DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#secret_ref}
  */
  readonly secretRef?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesStorageosSecretRef;
  /**
  * volumeName is the human-readable name of the StorageOS volume. Volume names are only unique within a namespace.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#volume_name DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#volume_name}
  */
  readonly volumeName?: string;
  /**
  * volumeNamespace specifies the scope of the volume within StorageOS. If no namespace is specified then the Pod's namespace will be used. This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to 'default' if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#volume_namespace DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#volume_namespace}
  */
  readonly volumeNamespace?: string;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesStorageosToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesStorageos | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    fs_type: cdktf.stringToTerraform(struct!.fsType),
    read_only: cdktf.booleanToTerraform(struct!.readOnly),
    secret_ref: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesStorageosSecretRefToTerraform(struct!.secretRef),
    volume_name: cdktf.stringToTerraform(struct!.volumeName),
    volume_namespace: cdktf.stringToTerraform(struct!.volumeNamespace),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesStorageosToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesStorageos | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    fs_type: {
      value: cdktf.stringToHclTerraform(struct!.fsType),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    read_only: {
      value: cdktf.booleanToHclTerraform(struct!.readOnly),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    secret_ref: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesStorageosSecretRefToHclTerraform(struct!.secretRef),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesStorageosSecretRef",
    },
    volume_name: {
      value: cdktf.stringToHclTerraform(struct!.volumeName),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    volume_namespace: {
      value: cdktf.stringToHclTerraform(struct!.volumeNamespace),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesStorageosOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesStorageos | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._fsType !== undefined) {
      hasAnyValues = true;
      internalValueResult.fsType = this._fsType;
    }
    if (this._readOnly !== undefined) {
      hasAnyValues = true;
      internalValueResult.readOnly = this._readOnly;
    }
    if (this._secretRef?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.secretRef = this._secretRef?.internalValue;
    }
    if (this._volumeName !== undefined) {
      hasAnyValues = true;
      internalValueResult.volumeName = this._volumeName;
    }
    if (this._volumeNamespace !== undefined) {
      hasAnyValues = true;
      internalValueResult.volumeNamespace = this._volumeNamespace;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesStorageos | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._fsType = undefined;
      this._readOnly = undefined;
      this._secretRef.internalValue = undefined;
      this._volumeName = undefined;
      this._volumeNamespace = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._fsType = value.fsType;
      this._readOnly = value.readOnly;
      this._secretRef.internalValue = value.secretRef;
      this._volumeName = value.volumeName;
      this._volumeNamespace = value.volumeNamespace;
    }
  }

  // fs_type - computed: false, optional: true, required: false
  private _fsType?: string; 
  public get fsType() {
    return this.getStringAttribute('fs_type');
  }
  public set fsType(value: string) {
    this._fsType = value;
  }
  public resetFsType() {
    this._fsType = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get fsTypeInput() {
    return this._fsType;
  }

  // read_only - computed: false, optional: true, required: false
  private _readOnly?: boolean | cdktf.IResolvable; 
  public get readOnly() {
    return this.getBooleanAttribute('read_only');
  }
  public set readOnly(value: boolean | cdktf.IResolvable) {
    this._readOnly = value;
  }
  public resetReadOnly() {
    this._readOnly = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get readOnlyInput() {
    return this._readOnly;
  }

  // secret_ref - computed: false, optional: true, required: false
  private _secretRef = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesStorageosSecretRefOutputReference(this, "secret_ref");
  public get secretRef() {
    return this._secretRef;
  }
  public putSecretRef(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesStorageosSecretRef) {
    this._secretRef.internalValue = value;
  }
  public resetSecretRef() {
    this._secretRef.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get secretRefInput() {
    return this._secretRef.internalValue;
  }

  // volume_name - computed: false, optional: true, required: false
  private _volumeName?: string; 
  public get volumeName() {
    return this.getStringAttribute('volume_name');
  }
  public set volumeName(value: string) {
    this._volumeName = value;
  }
  public resetVolumeName() {
    this._volumeName = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get volumeNameInput() {
    return this._volumeName;
  }

  // volume_namespace - computed: false, optional: true, required: false
  private _volumeNamespace?: string; 
  public get volumeNamespace() {
    return this.getStringAttribute('volume_namespace');
  }
  public set volumeNamespace(value: string) {
    this._volumeNamespace = value;
  }
  public resetVolumeNamespace() {
    this._volumeNamespace = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get volumeNamespaceInput() {
    return this._volumeNamespace;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesVsphereVolume {
  /**
  * fsType is filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. 'ext4', 'xfs', 'ntfs'. Implicitly inferred to be 'ext4' if unspecified.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#fs_type DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#fs_type}
  */
  readonly fsType?: string;
  /**
  * storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#storage_policy_id DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#storage_policy_id}
  */
  readonly storagePolicyId?: string;
  /**
  * storagePolicyName is the storage Policy Based Management (SPBM) profile name.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#storage_policy_name DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#storage_policy_name}
  */
  readonly storagePolicyName?: string;
  /**
  * volumePath is the path that identifies vSphere volume vmdk
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#volume_path DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#volume_path}
  */
  readonly volumePath: string;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesVsphereVolumeToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesVsphereVolume | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    fs_type: cdktf.stringToTerraform(struct!.fsType),
    storage_policy_id: cdktf.stringToTerraform(struct!.storagePolicyId),
    storage_policy_name: cdktf.stringToTerraform(struct!.storagePolicyName),
    volume_path: cdktf.stringToTerraform(struct!.volumePath),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesVsphereVolumeToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesVsphereVolume | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    fs_type: {
      value: cdktf.stringToHclTerraform(struct!.fsType),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    storage_policy_id: {
      value: cdktf.stringToHclTerraform(struct!.storagePolicyId),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    storage_policy_name: {
      value: cdktf.stringToHclTerraform(struct!.storagePolicyName),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    volume_path: {
      value: cdktf.stringToHclTerraform(struct!.volumePath),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesVsphereVolumeOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesVsphereVolume | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._fsType !== undefined) {
      hasAnyValues = true;
      internalValueResult.fsType = this._fsType;
    }
    if (this._storagePolicyId !== undefined) {
      hasAnyValues = true;
      internalValueResult.storagePolicyId = this._storagePolicyId;
    }
    if (this._storagePolicyName !== undefined) {
      hasAnyValues = true;
      internalValueResult.storagePolicyName = this._storagePolicyName;
    }
    if (this._volumePath !== undefined) {
      hasAnyValues = true;
      internalValueResult.volumePath = this._volumePath;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesVsphereVolume | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._fsType = undefined;
      this._storagePolicyId = undefined;
      this._storagePolicyName = undefined;
      this._volumePath = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._fsType = value.fsType;
      this._storagePolicyId = value.storagePolicyId;
      this._storagePolicyName = value.storagePolicyName;
      this._volumePath = value.volumePath;
    }
  }

  // fs_type - computed: false, optional: true, required: false
  private _fsType?: string; 
  public get fsType() {
    return this.getStringAttribute('fs_type');
  }
  public set fsType(value: string) {
    this._fsType = value;
  }
  public resetFsType() {
    this._fsType = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get fsTypeInput() {
    return this._fsType;
  }

  // storage_policy_id - computed: false, optional: true, required: false
  private _storagePolicyId?: string; 
  public get storagePolicyId() {
    return this.getStringAttribute('storage_policy_id');
  }
  public set storagePolicyId(value: string) {
    this._storagePolicyId = value;
  }
  public resetStoragePolicyId() {
    this._storagePolicyId = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get storagePolicyIdInput() {
    return this._storagePolicyId;
  }

  // storage_policy_name - computed: false, optional: true, required: false
  private _storagePolicyName?: string; 
  public get storagePolicyName() {
    return this.getStringAttribute('storage_policy_name');
  }
  public set storagePolicyName(value: string) {
    this._storagePolicyName = value;
  }
  public resetStoragePolicyName() {
    this._storagePolicyName = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get storagePolicyNameInput() {
    return this._storagePolicyName;
  }

  // volume_path - computed: false, optional: false, required: true
  private _volumePath?: string; 
  public get volumePath() {
    return this.getStringAttribute('volume_path');
  }
  public set volumePath(value: string) {
    this._volumePath = value;
  }
  // Temporarily expose input value. Use with caution.
  public get volumePathInput() {
    return this._volumePath;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumes {
  /**
  * awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#aws_elastic_block_store DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#aws_elastic_block_store}
  */
  readonly awsElasticBlockStore?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesAwsElasticBlockStore;
  /**
  * azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#azure_disk DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#azure_disk}
  */
  readonly azureDisk?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesAzureDisk;
  /**
  * azureFile represents an Azure File Service mount on the host and bind mount to the pod.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#azure_file DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#azure_file}
  */
  readonly azureFile?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesAzureFile;
  /**
  * cephFS represents a Ceph FS mount on the host that shares a pod's lifetime
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#cephfs DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#cephfs}
  */
  readonly cephfs?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesCephfs;
  /**
  * cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#cinder DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#cinder}
  */
  readonly cinder?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesCinder;
  /**
  * configMap represents a configMap that should populate this volume
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#config_map DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#config_map}
  */
  readonly configMap?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesConfigMap;
  /**
  * csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#csi DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#csi}
  */
  readonly csi?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesCsi;
  /**
  * downwardAPI represents downward API about the pod that should populate this volume
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#downward_api DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#downward_api}
  */
  readonly downwardApi?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesDownwardApi;
  /**
  * emptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#empty_dir DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#empty_dir}
  */
  readonly emptyDir?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEmptyDir;
  /**
  * ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed. Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity tracking are needed, c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through a PersistentVolumeClaim (see EphemeralVolumeSource for more information on the connection between this volume type and PersistentVolumeClaim). Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod. Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information. A pod can use both types of ephemeral volumes and persistent volumes at the same time.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#ephemeral DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#ephemeral}
  */
  readonly ephemeral?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeral;
  /**
  * fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#fc DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#fc}
  */
  readonly fc?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesFc;
  /**
  * flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#flex_volume DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#flex_volume}
  */
  readonly flexVolume?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesFlexVolume;
  /**
  * flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#flocker DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#flocker}
  */
  readonly flocker?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesFlocker;
  /**
  * gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#gce_persistent_disk DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#gce_persistent_disk}
  */
  readonly gcePersistentDisk?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesGcePersistentDisk;
  /**
  * gitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#git_repo DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#git_repo}
  */
  readonly gitRepo?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesGitRepo;
  /**
  * glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#glusterfs DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#glusterfs}
  */
  readonly glusterfs?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesGlusterfs;
  /**
  * hostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#host_path DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#host_path}
  */
  readonly hostPath?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesHostPath;
  /**
  * iscsi represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#iscsi DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#iscsi}
  */
  readonly iscsi?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesIscsi;
  /**
  * name of the volume. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#name DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#name}
  */
  readonly name: string;
  /**
  * nfs represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#nfs DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#nfs}
  */
  readonly nfs?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesNfs;
  /**
  * persistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#persistent_volume_claim DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#persistent_volume_claim}
  */
  readonly persistentVolumeClaim?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesPersistentVolumeClaim;
  /**
  * photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#photon_persistent_disk DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#photon_persistent_disk}
  */
  readonly photonPersistentDisk?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesPhotonPersistentDisk;
  /**
  * portworxVolume represents a portworx volume attached and mounted on kubelets host machine
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#portworx_volume DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#portworx_volume}
  */
  readonly portworxVolume?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesPortworxVolume;
  /**
  * projected items for all in one resources secrets, configmaps, and downward API
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#projected DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#projected}
  */
  readonly projected?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjected;
  /**
  * quobyte represents a Quobyte mount on the host that shares a pod's lifetime
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#quobyte DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#quobyte}
  */
  readonly quobyte?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesQuobyte;
  /**
  * rbd represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#rbd DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#rbd}
  */
  readonly rbd?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesRbd;
  /**
  * scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#scale_io DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#scale_io}
  */
  readonly scaleIo?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesScaleIo;
  /**
  * secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#secret DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#secret}
  */
  readonly secret?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesSecret;
  /**
  * storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#storageos DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#storageos}
  */
  readonly storageos?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesStorageos;
  /**
  * vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#vsphere_volume DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#vsphere_volume}
  */
  readonly vsphereVolume?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesVsphereVolume;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumes | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    aws_elastic_block_store: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesAwsElasticBlockStoreToTerraform(struct!.awsElasticBlockStore),
    azure_disk: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesAzureDiskToTerraform(struct!.azureDisk),
    azure_file: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesAzureFileToTerraform(struct!.azureFile),
    cephfs: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesCephfsToTerraform(struct!.cephfs),
    cinder: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesCinderToTerraform(struct!.cinder),
    config_map: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesConfigMapToTerraform(struct!.configMap),
    csi: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesCsiToTerraform(struct!.csi),
    downward_api: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesDownwardApiToTerraform(struct!.downwardApi),
    empty_dir: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEmptyDirToTerraform(struct!.emptyDir),
    ephemeral: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralToTerraform(struct!.ephemeral),
    fc: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesFcToTerraform(struct!.fc),
    flex_volume: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesFlexVolumeToTerraform(struct!.flexVolume),
    flocker: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesFlockerToTerraform(struct!.flocker),
    gce_persistent_disk: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesGcePersistentDiskToTerraform(struct!.gcePersistentDisk),
    git_repo: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesGitRepoToTerraform(struct!.gitRepo),
    glusterfs: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesGlusterfsToTerraform(struct!.glusterfs),
    host_path: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesHostPathToTerraform(struct!.hostPath),
    iscsi: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesIscsiToTerraform(struct!.iscsi),
    name: cdktf.stringToTerraform(struct!.name),
    nfs: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesNfsToTerraform(struct!.nfs),
    persistent_volume_claim: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesPersistentVolumeClaimToTerraform(struct!.persistentVolumeClaim),
    photon_persistent_disk: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesPhotonPersistentDiskToTerraform(struct!.photonPersistentDisk),
    portworx_volume: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesPortworxVolumeToTerraform(struct!.portworxVolume),
    projected: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedToTerraform(struct!.projected),
    quobyte: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesQuobyteToTerraform(struct!.quobyte),
    rbd: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesRbdToTerraform(struct!.rbd),
    scale_io: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesScaleIoToTerraform(struct!.scaleIo),
    secret: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesSecretToTerraform(struct!.secret),
    storageos: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesStorageosToTerraform(struct!.storageos),
    vsphere_volume: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesVsphereVolumeToTerraform(struct!.vsphereVolume),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumes | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    aws_elastic_block_store: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesAwsElasticBlockStoreToHclTerraform(struct!.awsElasticBlockStore),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesAwsElasticBlockStore",
    },
    azure_disk: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesAzureDiskToHclTerraform(struct!.azureDisk),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesAzureDisk",
    },
    azure_file: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesAzureFileToHclTerraform(struct!.azureFile),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesAzureFile",
    },
    cephfs: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesCephfsToHclTerraform(struct!.cephfs),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesCephfs",
    },
    cinder: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesCinderToHclTerraform(struct!.cinder),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesCinder",
    },
    config_map: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesConfigMapToHclTerraform(struct!.configMap),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesConfigMap",
    },
    csi: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesCsiToHclTerraform(struct!.csi),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesCsi",
    },
    downward_api: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesDownwardApiToHclTerraform(struct!.downwardApi),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesDownwardApi",
    },
    empty_dir: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEmptyDirToHclTerraform(struct!.emptyDir),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEmptyDir",
    },
    ephemeral: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralToHclTerraform(struct!.ephemeral),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeral",
    },
    fc: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesFcToHclTerraform(struct!.fc),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesFc",
    },
    flex_volume: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesFlexVolumeToHclTerraform(struct!.flexVolume),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesFlexVolume",
    },
    flocker: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesFlockerToHclTerraform(struct!.flocker),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesFlocker",
    },
    gce_persistent_disk: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesGcePersistentDiskToHclTerraform(struct!.gcePersistentDisk),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesGcePersistentDisk",
    },
    git_repo: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesGitRepoToHclTerraform(struct!.gitRepo),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesGitRepo",
    },
    glusterfs: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesGlusterfsToHclTerraform(struct!.glusterfs),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesGlusterfs",
    },
    host_path: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesHostPathToHclTerraform(struct!.hostPath),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesHostPath",
    },
    iscsi: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesIscsiToHclTerraform(struct!.iscsi),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesIscsi",
    },
    name: {
      value: cdktf.stringToHclTerraform(struct!.name),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    nfs: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesNfsToHclTerraform(struct!.nfs),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesNfs",
    },
    persistent_volume_claim: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesPersistentVolumeClaimToHclTerraform(struct!.persistentVolumeClaim),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesPersistentVolumeClaim",
    },
    photon_persistent_disk: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesPhotonPersistentDiskToHclTerraform(struct!.photonPersistentDisk),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesPhotonPersistentDisk",
    },
    portworx_volume: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesPortworxVolumeToHclTerraform(struct!.portworxVolume),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesPortworxVolume",
    },
    projected: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedToHclTerraform(struct!.projected),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjected",
    },
    quobyte: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesQuobyteToHclTerraform(struct!.quobyte),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesQuobyte",
    },
    rbd: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesRbdToHclTerraform(struct!.rbd),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesRbd",
    },
    scale_io: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesScaleIoToHclTerraform(struct!.scaleIo),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesScaleIo",
    },
    secret: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesSecretToHclTerraform(struct!.secret),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesSecret",
    },
    storageos: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesStorageosToHclTerraform(struct!.storageos),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesStorageos",
    },
    vsphere_volume: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesVsphereVolumeToHclTerraform(struct!.vsphereVolume),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesVsphereVolume",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumes | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._awsElasticBlockStore?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.awsElasticBlockStore = this._awsElasticBlockStore?.internalValue;
    }
    if (this._azureDisk?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.azureDisk = this._azureDisk?.internalValue;
    }
    if (this._azureFile?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.azureFile = this._azureFile?.internalValue;
    }
    if (this._cephfs?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.cephfs = this._cephfs?.internalValue;
    }
    if (this._cinder?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.cinder = this._cinder?.internalValue;
    }
    if (this._configMap?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.configMap = this._configMap?.internalValue;
    }
    if (this._csi?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.csi = this._csi?.internalValue;
    }
    if (this._downwardApi?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.downwardApi = this._downwardApi?.internalValue;
    }
    if (this._emptyDir?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.emptyDir = this._emptyDir?.internalValue;
    }
    if (this._ephemeral?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.ephemeral = this._ephemeral?.internalValue;
    }
    if (this._fc?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.fc = this._fc?.internalValue;
    }
    if (this._flexVolume?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.flexVolume = this._flexVolume?.internalValue;
    }
    if (this._flocker?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.flocker = this._flocker?.internalValue;
    }
    if (this._gcePersistentDisk?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.gcePersistentDisk = this._gcePersistentDisk?.internalValue;
    }
    if (this._gitRepo?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.gitRepo = this._gitRepo?.internalValue;
    }
    if (this._glusterfs?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.glusterfs = this._glusterfs?.internalValue;
    }
    if (this._hostPath?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.hostPath = this._hostPath?.internalValue;
    }
    if (this._iscsi?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.iscsi = this._iscsi?.internalValue;
    }
    if (this._name !== undefined) {
      hasAnyValues = true;
      internalValueResult.name = this._name;
    }
    if (this._nfs?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.nfs = this._nfs?.internalValue;
    }
    if (this._persistentVolumeClaim?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.persistentVolumeClaim = this._persistentVolumeClaim?.internalValue;
    }
    if (this._photonPersistentDisk?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.photonPersistentDisk = this._photonPersistentDisk?.internalValue;
    }
    if (this._portworxVolume?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.portworxVolume = this._portworxVolume?.internalValue;
    }
    if (this._projected?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.projected = this._projected?.internalValue;
    }
    if (this._quobyte?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.quobyte = this._quobyte?.internalValue;
    }
    if (this._rbd?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.rbd = this._rbd?.internalValue;
    }
    if (this._scaleIo?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.scaleIo = this._scaleIo?.internalValue;
    }
    if (this._secret?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.secret = this._secret?.internalValue;
    }
    if (this._storageos?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.storageos = this._storageos?.internalValue;
    }
    if (this._vsphereVolume?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.vsphereVolume = this._vsphereVolume?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumes | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._awsElasticBlockStore.internalValue = undefined;
      this._azureDisk.internalValue = undefined;
      this._azureFile.internalValue = undefined;
      this._cephfs.internalValue = undefined;
      this._cinder.internalValue = undefined;
      this._configMap.internalValue = undefined;
      this._csi.internalValue = undefined;
      this._downwardApi.internalValue = undefined;
      this._emptyDir.internalValue = undefined;
      this._ephemeral.internalValue = undefined;
      this._fc.internalValue = undefined;
      this._flexVolume.internalValue = undefined;
      this._flocker.internalValue = undefined;
      this._gcePersistentDisk.internalValue = undefined;
      this._gitRepo.internalValue = undefined;
      this._glusterfs.internalValue = undefined;
      this._hostPath.internalValue = undefined;
      this._iscsi.internalValue = undefined;
      this._name = undefined;
      this._nfs.internalValue = undefined;
      this._persistentVolumeClaim.internalValue = undefined;
      this._photonPersistentDisk.internalValue = undefined;
      this._portworxVolume.internalValue = undefined;
      this._projected.internalValue = undefined;
      this._quobyte.internalValue = undefined;
      this._rbd.internalValue = undefined;
      this._scaleIo.internalValue = undefined;
      this._secret.internalValue = undefined;
      this._storageos.internalValue = undefined;
      this._vsphereVolume.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._awsElasticBlockStore.internalValue = value.awsElasticBlockStore;
      this._azureDisk.internalValue = value.azureDisk;
      this._azureFile.internalValue = value.azureFile;
      this._cephfs.internalValue = value.cephfs;
      this._cinder.internalValue = value.cinder;
      this._configMap.internalValue = value.configMap;
      this._csi.internalValue = value.csi;
      this._downwardApi.internalValue = value.downwardApi;
      this._emptyDir.internalValue = value.emptyDir;
      this._ephemeral.internalValue = value.ephemeral;
      this._fc.internalValue = value.fc;
      this._flexVolume.internalValue = value.flexVolume;
      this._flocker.internalValue = value.flocker;
      this._gcePersistentDisk.internalValue = value.gcePersistentDisk;
      this._gitRepo.internalValue = value.gitRepo;
      this._glusterfs.internalValue = value.glusterfs;
      this._hostPath.internalValue = value.hostPath;
      this._iscsi.internalValue = value.iscsi;
      this._name = value.name;
      this._nfs.internalValue = value.nfs;
      this._persistentVolumeClaim.internalValue = value.persistentVolumeClaim;
      this._photonPersistentDisk.internalValue = value.photonPersistentDisk;
      this._portworxVolume.internalValue = value.portworxVolume;
      this._projected.internalValue = value.projected;
      this._quobyte.internalValue = value.quobyte;
      this._rbd.internalValue = value.rbd;
      this._scaleIo.internalValue = value.scaleIo;
      this._secret.internalValue = value.secret;
      this._storageos.internalValue = value.storageos;
      this._vsphereVolume.internalValue = value.vsphereVolume;
    }
  }

  // aws_elastic_block_store - computed: false, optional: true, required: false
  private _awsElasticBlockStore = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesAwsElasticBlockStoreOutputReference(this, "aws_elastic_block_store");
  public get awsElasticBlockStore() {
    return this._awsElasticBlockStore;
  }
  public putAwsElasticBlockStore(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesAwsElasticBlockStore) {
    this._awsElasticBlockStore.internalValue = value;
  }
  public resetAwsElasticBlockStore() {
    this._awsElasticBlockStore.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get awsElasticBlockStoreInput() {
    return this._awsElasticBlockStore.internalValue;
  }

  // azure_disk - computed: false, optional: true, required: false
  private _azureDisk = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesAzureDiskOutputReference(this, "azure_disk");
  public get azureDisk() {
    return this._azureDisk;
  }
  public putAzureDisk(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesAzureDisk) {
    this._azureDisk.internalValue = value;
  }
  public resetAzureDisk() {
    this._azureDisk.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get azureDiskInput() {
    return this._azureDisk.internalValue;
  }

  // azure_file - computed: false, optional: true, required: false
  private _azureFile = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesAzureFileOutputReference(this, "azure_file");
  public get azureFile() {
    return this._azureFile;
  }
  public putAzureFile(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesAzureFile) {
    this._azureFile.internalValue = value;
  }
  public resetAzureFile() {
    this._azureFile.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get azureFileInput() {
    return this._azureFile.internalValue;
  }

  // cephfs - computed: false, optional: true, required: false
  private _cephfs = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesCephfsOutputReference(this, "cephfs");
  public get cephfs() {
    return this._cephfs;
  }
  public putCephfs(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesCephfs) {
    this._cephfs.internalValue = value;
  }
  public resetCephfs() {
    this._cephfs.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get cephfsInput() {
    return this._cephfs.internalValue;
  }

  // cinder - computed: false, optional: true, required: false
  private _cinder = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesCinderOutputReference(this, "cinder");
  public get cinder() {
    return this._cinder;
  }
  public putCinder(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesCinder) {
    this._cinder.internalValue = value;
  }
  public resetCinder() {
    this._cinder.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get cinderInput() {
    return this._cinder.internalValue;
  }

  // config_map - computed: false, optional: true, required: false
  private _configMap = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesConfigMapOutputReference(this, "config_map");
  public get configMap() {
    return this._configMap;
  }
  public putConfigMap(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesConfigMap) {
    this._configMap.internalValue = value;
  }
  public resetConfigMap() {
    this._configMap.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get configMapInput() {
    return this._configMap.internalValue;
  }

  // csi - computed: false, optional: true, required: false
  private _csi = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesCsiOutputReference(this, "csi");
  public get csi() {
    return this._csi;
  }
  public putCsi(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesCsi) {
    this._csi.internalValue = value;
  }
  public resetCsi() {
    this._csi.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get csiInput() {
    return this._csi.internalValue;
  }

  // downward_api - computed: false, optional: true, required: false
  private _downwardApi = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesDownwardApiOutputReference(this, "downward_api");
  public get downwardApi() {
    return this._downwardApi;
  }
  public putDownwardApi(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesDownwardApi) {
    this._downwardApi.internalValue = value;
  }
  public resetDownwardApi() {
    this._downwardApi.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get downwardApiInput() {
    return this._downwardApi.internalValue;
  }

  // empty_dir - computed: false, optional: true, required: false
  private _emptyDir = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEmptyDirOutputReference(this, "empty_dir");
  public get emptyDir() {
    return this._emptyDir;
  }
  public putEmptyDir(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEmptyDir) {
    this._emptyDir.internalValue = value;
  }
  public resetEmptyDir() {
    this._emptyDir.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get emptyDirInput() {
    return this._emptyDir.internalValue;
  }

  // ephemeral - computed: false, optional: true, required: false
  private _ephemeral = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeralOutputReference(this, "ephemeral");
  public get ephemeral() {
    return this._ephemeral;
  }
  public putEphemeral(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesEphemeral) {
    this._ephemeral.internalValue = value;
  }
  public resetEphemeral() {
    this._ephemeral.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get ephemeralInput() {
    return this._ephemeral.internalValue;
  }

  // fc - computed: false, optional: true, required: false
  private _fc = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesFcOutputReference(this, "fc");
  public get fc() {
    return this._fc;
  }
  public putFc(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesFc) {
    this._fc.internalValue = value;
  }
  public resetFc() {
    this._fc.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get fcInput() {
    return this._fc.internalValue;
  }

  // flex_volume - computed: false, optional: true, required: false
  private _flexVolume = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesFlexVolumeOutputReference(this, "flex_volume");
  public get flexVolume() {
    return this._flexVolume;
  }
  public putFlexVolume(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesFlexVolume) {
    this._flexVolume.internalValue = value;
  }
  public resetFlexVolume() {
    this._flexVolume.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get flexVolumeInput() {
    return this._flexVolume.internalValue;
  }

  // flocker - computed: false, optional: true, required: false
  private _flocker = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesFlockerOutputReference(this, "flocker");
  public get flocker() {
    return this._flocker;
  }
  public putFlocker(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesFlocker) {
    this._flocker.internalValue = value;
  }
  public resetFlocker() {
    this._flocker.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get flockerInput() {
    return this._flocker.internalValue;
  }

  // gce_persistent_disk - computed: false, optional: true, required: false
  private _gcePersistentDisk = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesGcePersistentDiskOutputReference(this, "gce_persistent_disk");
  public get gcePersistentDisk() {
    return this._gcePersistentDisk;
  }
  public putGcePersistentDisk(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesGcePersistentDisk) {
    this._gcePersistentDisk.internalValue = value;
  }
  public resetGcePersistentDisk() {
    this._gcePersistentDisk.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get gcePersistentDiskInput() {
    return this._gcePersistentDisk.internalValue;
  }

  // git_repo - computed: false, optional: true, required: false
  private _gitRepo = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesGitRepoOutputReference(this, "git_repo");
  public get gitRepo() {
    return this._gitRepo;
  }
  public putGitRepo(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesGitRepo) {
    this._gitRepo.internalValue = value;
  }
  public resetGitRepo() {
    this._gitRepo.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get gitRepoInput() {
    return this._gitRepo.internalValue;
  }

  // glusterfs - computed: false, optional: true, required: false
  private _glusterfs = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesGlusterfsOutputReference(this, "glusterfs");
  public get glusterfs() {
    return this._glusterfs;
  }
  public putGlusterfs(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesGlusterfs) {
    this._glusterfs.internalValue = value;
  }
  public resetGlusterfs() {
    this._glusterfs.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get glusterfsInput() {
    return this._glusterfs.internalValue;
  }

  // host_path - computed: false, optional: true, required: false
  private _hostPath = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesHostPathOutputReference(this, "host_path");
  public get hostPath() {
    return this._hostPath;
  }
  public putHostPath(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesHostPath) {
    this._hostPath.internalValue = value;
  }
  public resetHostPath() {
    this._hostPath.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get hostPathInput() {
    return this._hostPath.internalValue;
  }

  // iscsi - computed: false, optional: true, required: false
  private _iscsi = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesIscsiOutputReference(this, "iscsi");
  public get iscsi() {
    return this._iscsi;
  }
  public putIscsi(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesIscsi) {
    this._iscsi.internalValue = value;
  }
  public resetIscsi() {
    this._iscsi.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get iscsiInput() {
    return this._iscsi.internalValue;
  }

  // name - computed: false, optional: false, required: true
  private _name?: string; 
  public get name() {
    return this.getStringAttribute('name');
  }
  public set name(value: string) {
    this._name = value;
  }
  // Temporarily expose input value. Use with caution.
  public get nameInput() {
    return this._name;
  }

  // nfs - computed: false, optional: true, required: false
  private _nfs = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesNfsOutputReference(this, "nfs");
  public get nfs() {
    return this._nfs;
  }
  public putNfs(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesNfs) {
    this._nfs.internalValue = value;
  }
  public resetNfs() {
    this._nfs.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get nfsInput() {
    return this._nfs.internalValue;
  }

  // persistent_volume_claim - computed: false, optional: true, required: false
  private _persistentVolumeClaim = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesPersistentVolumeClaimOutputReference(this, "persistent_volume_claim");
  public get persistentVolumeClaim() {
    return this._persistentVolumeClaim;
  }
  public putPersistentVolumeClaim(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesPersistentVolumeClaim) {
    this._persistentVolumeClaim.internalValue = value;
  }
  public resetPersistentVolumeClaim() {
    this._persistentVolumeClaim.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get persistentVolumeClaimInput() {
    return this._persistentVolumeClaim.internalValue;
  }

  // photon_persistent_disk - computed: false, optional: true, required: false
  private _photonPersistentDisk = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesPhotonPersistentDiskOutputReference(this, "photon_persistent_disk");
  public get photonPersistentDisk() {
    return this._photonPersistentDisk;
  }
  public putPhotonPersistentDisk(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesPhotonPersistentDisk) {
    this._photonPersistentDisk.internalValue = value;
  }
  public resetPhotonPersistentDisk() {
    this._photonPersistentDisk.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get photonPersistentDiskInput() {
    return this._photonPersistentDisk.internalValue;
  }

  // portworx_volume - computed: false, optional: true, required: false
  private _portworxVolume = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesPortworxVolumeOutputReference(this, "portworx_volume");
  public get portworxVolume() {
    return this._portworxVolume;
  }
  public putPortworxVolume(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesPortworxVolume) {
    this._portworxVolume.internalValue = value;
  }
  public resetPortworxVolume() {
    this._portworxVolume.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get portworxVolumeInput() {
    return this._portworxVolume.internalValue;
  }

  // projected - computed: false, optional: true, required: false
  private _projected = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjectedOutputReference(this, "projected");
  public get projected() {
    return this._projected;
  }
  public putProjected(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesProjected) {
    this._projected.internalValue = value;
  }
  public resetProjected() {
    this._projected.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get projectedInput() {
    return this._projected.internalValue;
  }

  // quobyte - computed: false, optional: true, required: false
  private _quobyte = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesQuobyteOutputReference(this, "quobyte");
  public get quobyte() {
    return this._quobyte;
  }
  public putQuobyte(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesQuobyte) {
    this._quobyte.internalValue = value;
  }
  public resetQuobyte() {
    this._quobyte.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get quobyteInput() {
    return this._quobyte.internalValue;
  }

  // rbd - computed: false, optional: true, required: false
  private _rbd = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesRbdOutputReference(this, "rbd");
  public get rbd() {
    return this._rbd;
  }
  public putRbd(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesRbd) {
    this._rbd.internalValue = value;
  }
  public resetRbd() {
    this._rbd.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get rbdInput() {
    return this._rbd.internalValue;
  }

  // scale_io - computed: false, optional: true, required: false
  private _scaleIo = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesScaleIoOutputReference(this, "scale_io");
  public get scaleIo() {
    return this._scaleIo;
  }
  public putScaleIo(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesScaleIo) {
    this._scaleIo.internalValue = value;
  }
  public resetScaleIo() {
    this._scaleIo.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get scaleIoInput() {
    return this._scaleIo.internalValue;
  }

  // secret - computed: false, optional: true, required: false
  private _secret = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesSecretOutputReference(this, "secret");
  public get secret() {
    return this._secret;
  }
  public putSecret(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesSecret) {
    this._secret.internalValue = value;
  }
  public resetSecret() {
    this._secret.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get secretInput() {
    return this._secret.internalValue;
  }

  // storageos - computed: false, optional: true, required: false
  private _storageos = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesStorageosOutputReference(this, "storageos");
  public get storageos() {
    return this._storageos;
  }
  public putStorageos(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesStorageos) {
    this._storageos.internalValue = value;
  }
  public resetStorageos() {
    this._storageos.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get storageosInput() {
    return this._storageos.internalValue;
  }

  // vsphere_volume - computed: false, optional: true, required: false
  private _vsphereVolume = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesVsphereVolumeOutputReference(this, "vsphere_volume");
  public get vsphereVolume() {
    return this._vsphereVolume;
  }
  public putVsphereVolume(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesVsphereVolume) {
    this._vsphereVolume.internalValue = value;
  }
  public resetVsphereVolume() {
    this._vsphereVolume.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get vsphereVolumeInput() {
    return this._vsphereVolume.internalValue;
  }
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesList extends cdktf.ComplexList {
  public internalValue? : DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumes[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesOutputReference {
    return new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyNetworkPublishing {
  /**
  * ExternalTrafficPolicy describes how nodes distribute service traffic they receive on one of the Service's 'externally-facing' addresses (NodePorts, ExternalIPs, and LoadBalancer IPs). If unset, defaults to 'Local'.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#external_traffic_policy DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#external_traffic_policy}
  */
  readonly externalTrafficPolicy?: string;
  /**
  * IPFamilyPolicy represents the dual-stack-ness requested or required by this Service. If there is no value provided, then this field will be set to SingleStack. Services can be 'SingleStack' (a single IP family), 'PreferDualStack' (two IP families on dual-stack configured clusters or a single IP family on single-stack clusters), or 'RequireDualStack' (two IP families on dual-stack configured clusters, otherwise fail).
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#ip_family_policy DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#ip_family_policy}
  */
  readonly ipFamilyPolicy?: string;
  /**
  * ServiceAnnotations is the annotations to add to the provisioned Envoy service.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#service_annotations DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#service_annotations}
  */
  readonly serviceAnnotations?: { [key: string]: string };
  /**
  * NetworkPublishingType is the type of publishing strategy to use. Valid values are: * LoadBalancerService In this configuration, network endpoints for Envoy use container networking. A Kubernetes LoadBalancer Service is created to publish Envoy network endpoints. See: https://kubernetes.io/docs/concepts/services-networking/service/#loadbalancer * NodePortService Publishes Envoy network endpoints using a Kubernetes NodePort Service. In this configuration, Envoy network endpoints use container networking. A Kubernetes NodePort Service is created to publish the network endpoints. See: https://kubernetes.io/docs/concepts/services-networking/service/#nodeport NOTE: When provisioning an Envoy 'NodePortService', use Gateway Listeners' port numbers to populate the Service's node port values, there's no way to auto-allocate them. See: https://github.com/projectcontour/contour/issues/4499 * ClusterIPService Publishes Envoy network endpoints using a Kubernetes ClusterIP Service. In this configuration, Envoy network endpoints use container networking. A Kubernetes ClusterIP Service is created to publish the network endpoints. See: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types If unset, defaults to LoadBalancerService.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#type DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#type}
  */
  readonly type?: string;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyNetworkPublishingToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyNetworkPublishing | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    external_traffic_policy: cdktf.stringToTerraform(struct!.externalTrafficPolicy),
    ip_family_policy: cdktf.stringToTerraform(struct!.ipFamilyPolicy),
    service_annotations: cdktf.hashMapper(cdktf.stringToTerraform)(struct!.serviceAnnotations),
    type: cdktf.stringToTerraform(struct!.type),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyNetworkPublishingToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyNetworkPublishing | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    external_traffic_policy: {
      value: cdktf.stringToHclTerraform(struct!.externalTrafficPolicy),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    ip_family_policy: {
      value: cdktf.stringToHclTerraform(struct!.ipFamilyPolicy),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    service_annotations: {
      value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct!.serviceAnnotations),
      isBlock: false,
      type: "map",
      storageClassType: "stringMap",
    },
    type: {
      value: cdktf.stringToHclTerraform(struct!.type),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyNetworkPublishingOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyNetworkPublishing | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._externalTrafficPolicy !== undefined) {
      hasAnyValues = true;
      internalValueResult.externalTrafficPolicy = this._externalTrafficPolicy;
    }
    if (this._ipFamilyPolicy !== undefined) {
      hasAnyValues = true;
      internalValueResult.ipFamilyPolicy = this._ipFamilyPolicy;
    }
    if (this._serviceAnnotations !== undefined) {
      hasAnyValues = true;
      internalValueResult.serviceAnnotations = this._serviceAnnotations;
    }
    if (this._type !== undefined) {
      hasAnyValues = true;
      internalValueResult.type = this._type;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyNetworkPublishing | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._externalTrafficPolicy = undefined;
      this._ipFamilyPolicy = undefined;
      this._serviceAnnotations = undefined;
      this._type = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._externalTrafficPolicy = value.externalTrafficPolicy;
      this._ipFamilyPolicy = value.ipFamilyPolicy;
      this._serviceAnnotations = value.serviceAnnotations;
      this._type = value.type;
    }
  }

  // external_traffic_policy - computed: false, optional: true, required: false
  private _externalTrafficPolicy?: string; 
  public get externalTrafficPolicy() {
    return this.getStringAttribute('external_traffic_policy');
  }
  public set externalTrafficPolicy(value: string) {
    this._externalTrafficPolicy = value;
  }
  public resetExternalTrafficPolicy() {
    this._externalTrafficPolicy = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get externalTrafficPolicyInput() {
    return this._externalTrafficPolicy;
  }

  // ip_family_policy - computed: false, optional: true, required: false
  private _ipFamilyPolicy?: string; 
  public get ipFamilyPolicy() {
    return this.getStringAttribute('ip_family_policy');
  }
  public set ipFamilyPolicy(value: string) {
    this._ipFamilyPolicy = value;
  }
  public resetIpFamilyPolicy() {
    this._ipFamilyPolicy = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get ipFamilyPolicyInput() {
    return this._ipFamilyPolicy;
  }

  // service_annotations - computed: false, optional: true, required: false
  private _serviceAnnotations?: { [key: string]: string }; 
  public get serviceAnnotations() {
    return this.getStringMapAttribute('service_annotations');
  }
  public set serviceAnnotations(value: { [key: string]: string }) {
    this._serviceAnnotations = value;
  }
  public resetServiceAnnotations() {
    this._serviceAnnotations = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get serviceAnnotationsInput() {
    return this._serviceAnnotations;
  }

  // type - computed: false, optional: true, required: false
  private _type?: string; 
  public get type() {
    return this.getStringAttribute('type');
  }
  public set type(value: string) {
    this._type = value;
  }
  public resetType() {
    this._type = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get typeInput() {
    return this._type;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyNodePlacementTolerations {
  /**
  * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#effect DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#effect}
  */
  readonly effect?: string;
  /**
  * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#key DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#key}
  */
  readonly key?: string;
  /**
  * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#operator DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#operator}
  */
  readonly operator?: string;
  /**
  * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#toleration_seconds DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#toleration_seconds}
  */
  readonly tolerationSeconds?: number;
  /**
  * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#value DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#value}
  */
  readonly value?: string;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyNodePlacementTolerationsToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyNodePlacementTolerations | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    effect: cdktf.stringToTerraform(struct!.effect),
    key: cdktf.stringToTerraform(struct!.key),
    operator: cdktf.stringToTerraform(struct!.operator),
    toleration_seconds: cdktf.numberToTerraform(struct!.tolerationSeconds),
    value: cdktf.stringToTerraform(struct!.value),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyNodePlacementTolerationsToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyNodePlacementTolerations | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    effect: {
      value: cdktf.stringToHclTerraform(struct!.effect),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    key: {
      value: cdktf.stringToHclTerraform(struct!.key),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    operator: {
      value: cdktf.stringToHclTerraform(struct!.operator),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    toleration_seconds: {
      value: cdktf.numberToHclTerraform(struct!.tolerationSeconds),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    value: {
      value: cdktf.stringToHclTerraform(struct!.value),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyNodePlacementTolerationsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyNodePlacementTolerations | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._effect !== undefined) {
      hasAnyValues = true;
      internalValueResult.effect = this._effect;
    }
    if (this._key !== undefined) {
      hasAnyValues = true;
      internalValueResult.key = this._key;
    }
    if (this._operator !== undefined) {
      hasAnyValues = true;
      internalValueResult.operator = this._operator;
    }
    if (this._tolerationSeconds !== undefined) {
      hasAnyValues = true;
      internalValueResult.tolerationSeconds = this._tolerationSeconds;
    }
    if (this._value !== undefined) {
      hasAnyValues = true;
      internalValueResult.value = this._value;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyNodePlacementTolerations | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._effect = undefined;
      this._key = undefined;
      this._operator = undefined;
      this._tolerationSeconds = undefined;
      this._value = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._effect = value.effect;
      this._key = value.key;
      this._operator = value.operator;
      this._tolerationSeconds = value.tolerationSeconds;
      this._value = value.value;
    }
  }

  // effect - computed: false, optional: true, required: false
  private _effect?: string; 
  public get effect() {
    return this.getStringAttribute('effect');
  }
  public set effect(value: string) {
    this._effect = value;
  }
  public resetEffect() {
    this._effect = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get effectInput() {
    return this._effect;
  }

  // key - computed: false, optional: true, required: false
  private _key?: string; 
  public get key() {
    return this.getStringAttribute('key');
  }
  public set key(value: string) {
    this._key = value;
  }
  public resetKey() {
    this._key = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get keyInput() {
    return this._key;
  }

  // operator - computed: false, optional: true, required: false
  private _operator?: string; 
  public get operator() {
    return this.getStringAttribute('operator');
  }
  public set operator(value: string) {
    this._operator = value;
  }
  public resetOperator() {
    this._operator = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get operatorInput() {
    return this._operator;
  }

  // toleration_seconds - computed: false, optional: true, required: false
  private _tolerationSeconds?: number; 
  public get tolerationSeconds() {
    return this.getNumberAttribute('toleration_seconds');
  }
  public set tolerationSeconds(value: number) {
    this._tolerationSeconds = value;
  }
  public resetTolerationSeconds() {
    this._tolerationSeconds = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get tolerationSecondsInput() {
    return this._tolerationSeconds;
  }

  // value - computed: false, optional: true, required: false
  private _value?: string; 
  public get value() {
    return this.getStringAttribute('value');
  }
  public set value(value: string) {
    this._value = value;
  }
  public resetValue() {
    this._value = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get valueInput() {
    return this._value;
  }
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyNodePlacementTolerationsList extends cdktf.ComplexList {
  public internalValue? : DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyNodePlacementTolerations[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyNodePlacementTolerationsOutputReference {
    return new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyNodePlacementTolerationsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyNodePlacement {
  /**
  * NodeSelector is the simplest recommended form of node selection constraint and specifies a map of key-value pairs. For the pod to be eligible to run on a node, the node must have each of the indicated key-value pairs as labels (it can have additional labels as well). If unset, the pod(s) will be scheduled to any available node.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#node_selector DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#node_selector}
  */
  readonly nodeSelector?: { [key: string]: string };
  /**
  * Tolerations work with taints to ensure that pods are not scheduled onto inappropriate nodes. One or more taints are applied to a node; this marks that the node should not accept any pods that do not tolerate the taints. The default is an empty list. See https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/ for additional details.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#tolerations DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#tolerations}
  */
  readonly tolerations?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyNodePlacementTolerations[] | cdktf.IResolvable;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyNodePlacementToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyNodePlacement | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    node_selector: cdktf.hashMapper(cdktf.stringToTerraform)(struct!.nodeSelector),
    tolerations: cdktf.listMapper(dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyNodePlacementTolerationsToTerraform, false)(struct!.tolerations),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyNodePlacementToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyNodePlacement | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    node_selector: {
      value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct!.nodeSelector),
      isBlock: false,
      type: "map",
      storageClassType: "stringMap",
    },
    tolerations: {
      value: cdktf.listMapperHcl(dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyNodePlacementTolerationsToHclTerraform, false)(struct!.tolerations),
      isBlock: true,
      type: "list",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyNodePlacementTolerationsList",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyNodePlacementOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyNodePlacement | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._nodeSelector !== undefined) {
      hasAnyValues = true;
      internalValueResult.nodeSelector = this._nodeSelector;
    }
    if (this._tolerations?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.tolerations = this._tolerations?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyNodePlacement | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._nodeSelector = undefined;
      this._tolerations.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._nodeSelector = value.nodeSelector;
      this._tolerations.internalValue = value.tolerations;
    }
  }

  // node_selector - computed: false, optional: true, required: false
  private _nodeSelector?: { [key: string]: string }; 
  public get nodeSelector() {
    return this.getStringMapAttribute('node_selector');
  }
  public set nodeSelector(value: { [key: string]: string }) {
    this._nodeSelector = value;
  }
  public resetNodeSelector() {
    this._nodeSelector = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get nodeSelectorInput() {
    return this._nodeSelector;
  }

  // tolerations - computed: false, optional: true, required: false
  private _tolerations = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyNodePlacementTolerationsList(this, "tolerations", false);
  public get tolerations() {
    return this._tolerations;
  }
  public putTolerations(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyNodePlacementTolerations[] | cdktf.IResolvable) {
    this._tolerations.internalValue = value;
  }
  public resetTolerations() {
    this._tolerations.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get tolerationsInput() {
    return this._tolerations.internalValue;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyResourcesClaims {
  /**
  * Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#name DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#name}
  */
  readonly name: string;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyResourcesClaimsToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyResourcesClaims | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    name: cdktf.stringToTerraform(struct!.name),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyResourcesClaimsToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyResourcesClaims | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    name: {
      value: cdktf.stringToHclTerraform(struct!.name),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyResourcesClaimsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyResourcesClaims | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._name !== undefined) {
      hasAnyValues = true;
      internalValueResult.name = this._name;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyResourcesClaims | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._name = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._name = value.name;
    }
  }

  // name - computed: false, optional: false, required: true
  private _name?: string; 
  public get name() {
    return this.getStringAttribute('name');
  }
  public set name(value: string) {
    this._name = value;
  }
  // Temporarily expose input value. Use with caution.
  public get nameInput() {
    return this._name;
  }
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyResourcesClaimsList extends cdktf.ComplexList {
  public internalValue? : DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyResourcesClaims[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyResourcesClaimsOutputReference {
    return new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyResourcesClaimsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyResources {
  /**
  * Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. This field is immutable. It can only be set for containers.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#claims DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#claims}
  */
  readonly claims?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyResourcesClaims[] | cdktf.IResolvable;
  /**
  * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#limits DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#limits}
  */
  readonly limits?: { [key: string]: string };
  /**
  * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#requests DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#requests}
  */
  readonly requests?: { [key: string]: string };
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyResourcesToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyResources | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    claims: cdktf.listMapper(dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyResourcesClaimsToTerraform, false)(struct!.claims),
    limits: cdktf.hashMapper(cdktf.stringToTerraform)(struct!.limits),
    requests: cdktf.hashMapper(cdktf.stringToTerraform)(struct!.requests),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyResourcesToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyResources | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    claims: {
      value: cdktf.listMapperHcl(dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyResourcesClaimsToHclTerraform, false)(struct!.claims),
      isBlock: true,
      type: "list",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyResourcesClaimsList",
    },
    limits: {
      value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct!.limits),
      isBlock: false,
      type: "map",
      storageClassType: "stringMap",
    },
    requests: {
      value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct!.requests),
      isBlock: false,
      type: "map",
      storageClassType: "stringMap",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyResourcesOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyResources | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._claims?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.claims = this._claims?.internalValue;
    }
    if (this._limits !== undefined) {
      hasAnyValues = true;
      internalValueResult.limits = this._limits;
    }
    if (this._requests !== undefined) {
      hasAnyValues = true;
      internalValueResult.requests = this._requests;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyResources | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._claims.internalValue = undefined;
      this._limits = undefined;
      this._requests = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._claims.internalValue = value.claims;
      this._limits = value.limits;
      this._requests = value.requests;
    }
  }

  // claims - computed: false, optional: true, required: false
  private _claims = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyResourcesClaimsList(this, "claims", false);
  public get claims() {
    return this._claims;
  }
  public putClaims(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyResourcesClaims[] | cdktf.IResolvable) {
    this._claims.internalValue = value;
  }
  public resetClaims() {
    this._claims.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get claimsInput() {
    return this._claims.internalValue;
  }

  // limits - computed: false, optional: true, required: false
  private _limits?: { [key: string]: string }; 
  public get limits() {
    return this.getStringMapAttribute('limits');
  }
  public set limits(value: { [key: string]: string }) {
    this._limits = value;
  }
  public resetLimits() {
    this._limits = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get limitsInput() {
    return this._limits;
  }

  // requests - computed: false, optional: true, required: false
  private _requests?: { [key: string]: string }; 
  public get requests() {
    return this.getStringMapAttribute('requests');
  }
  public set requests(value: { [key: string]: string }) {
    this._requests = value;
  }
  public resetRequests() {
    this._requests = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get requestsInput() {
    return this._requests;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoy {
  /**
  * The base ID to use when allocating shared memory regions. if Envoy needs to be run multiple times on the same machine, each running Envoy will need a unique base ID so that the shared memory regions do not conflict. defaults to 0.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#base_id DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#base_id}
  */
  readonly baseId?: number;
  /**
  * DaemonSet describes the settings for running envoy as a 'DaemonSet'. if 'WorkloadType' is 'Deployment',it's must be nil
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#daemon_set DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#daemon_set}
  */
  readonly daemonSet?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyDaemonSet;
  /**
  * Deployment describes the settings for running envoy as a 'Deployment'. if 'WorkloadType' is 'DaemonSet',it's must be nil
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#deployment DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#deployment}
  */
  readonly deployment?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyDeployment;
  /**
  * ExtraVolumeMounts holds the extra volume mounts to add (normally used with extraVolumes).
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#extra_volume_mounts DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#extra_volume_mounts}
  */
  readonly extraVolumeMounts?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumeMounts[] | cdktf.IResolvable;
  /**
  * ExtraVolumes holds the extra volumes to add.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#extra_volumes DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#extra_volumes}
  */
  readonly extraVolumes?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumes[] | cdktf.IResolvable;
  /**
  * LogLevel sets the log level for Envoy. Allowed values are 'trace', 'debug', 'info', 'warn', 'error', 'critical', 'off'.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#log_level DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#log_level}
  */
  readonly logLevel?: string;
  /**
  * NetworkPublishing defines how to expose Envoy to a network.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#network_publishing DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#network_publishing}
  */
  readonly networkPublishing?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyNetworkPublishing;
  /**
  * NodePlacement describes node scheduling configuration of Envoy pods.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#node_placement DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#node_placement}
  */
  readonly nodePlacement?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyNodePlacement;
  /**
  * OverloadMaxHeapSize defines the maximum heap memory of the envoy controlled by the overload manager. When the value is greater than 0, the overload manager is enabled, and when envoy reaches 95% of the maximum heap size, it performs a shrink heap operation, When it reaches 98% of the maximum heap size, Envoy Will stop accepting requests. More info: https://projectcontour.io/docs/main/config/overload-manager/
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#overload_max_heap_size DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#overload_max_heap_size}
  */
  readonly overloadMaxHeapSize?: number;
  /**
  * PodAnnotations defines annotations to add to the Envoy pods. the annotations for Prometheus will be appended or overwritten with predefined value.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#pod_annotations DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#pod_annotations}
  */
  readonly podAnnotations?: { [key: string]: string };
  /**
  * Deprecated: Use 'DeploymentSettings.Replicas' instead. Replicas is the desired number of Envoy replicas. If WorkloadType is not 'Deployment', this field is ignored. Otherwise, if unset, defaults to 2. if both 'DeploymentSettings.Replicas' and this one is set, use 'DeploymentSettings.Replicas'.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#replicas DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#replicas}
  */
  readonly replicas?: number;
  /**
  * Compute Resources required by envoy container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#resources DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#resources}
  */
  readonly resources?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyResources;
  /**
  * WorkloadType is the type of workload to install Envoy as. Choices are DaemonSet and Deployment. If unset, defaults to DaemonSet.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#workload_type DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#workload_type}
  */
  readonly workloadType?: string;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoy | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    base_id: cdktf.numberToTerraform(struct!.baseId),
    daemon_set: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyDaemonSetToTerraform(struct!.daemonSet),
    deployment: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyDeploymentToTerraform(struct!.deployment),
    extra_volume_mounts: cdktf.listMapper(dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumeMountsToTerraform, false)(struct!.extraVolumeMounts),
    extra_volumes: cdktf.listMapper(dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesToTerraform, false)(struct!.extraVolumes),
    log_level: cdktf.stringToTerraform(struct!.logLevel),
    network_publishing: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyNetworkPublishingToTerraform(struct!.networkPublishing),
    node_placement: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyNodePlacementToTerraform(struct!.nodePlacement),
    overload_max_heap_size: cdktf.numberToTerraform(struct!.overloadMaxHeapSize),
    pod_annotations: cdktf.hashMapper(cdktf.stringToTerraform)(struct!.podAnnotations),
    replicas: cdktf.numberToTerraform(struct!.replicas),
    resources: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyResourcesToTerraform(struct!.resources),
    workload_type: cdktf.stringToTerraform(struct!.workloadType),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoy | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    base_id: {
      value: cdktf.numberToHclTerraform(struct!.baseId),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    daemon_set: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyDaemonSetToHclTerraform(struct!.daemonSet),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyDaemonSet",
    },
    deployment: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyDeploymentToHclTerraform(struct!.deployment),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyDeployment",
    },
    extra_volume_mounts: {
      value: cdktf.listMapperHcl(dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumeMountsToHclTerraform, false)(struct!.extraVolumeMounts),
      isBlock: true,
      type: "list",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumeMountsList",
    },
    extra_volumes: {
      value: cdktf.listMapperHcl(dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesToHclTerraform, false)(struct!.extraVolumes),
      isBlock: true,
      type: "list",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesList",
    },
    log_level: {
      value: cdktf.stringToHclTerraform(struct!.logLevel),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    network_publishing: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyNetworkPublishingToHclTerraform(struct!.networkPublishing),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyNetworkPublishing",
    },
    node_placement: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyNodePlacementToHclTerraform(struct!.nodePlacement),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyNodePlacement",
    },
    overload_max_heap_size: {
      value: cdktf.numberToHclTerraform(struct!.overloadMaxHeapSize),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    pod_annotations: {
      value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct!.podAnnotations),
      isBlock: false,
      type: "map",
      storageClassType: "stringMap",
    },
    replicas: {
      value: cdktf.numberToHclTerraform(struct!.replicas),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    resources: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyResourcesToHclTerraform(struct!.resources),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyResources",
    },
    workload_type: {
      value: cdktf.stringToHclTerraform(struct!.workloadType),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoy | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._baseId !== undefined) {
      hasAnyValues = true;
      internalValueResult.baseId = this._baseId;
    }
    if (this._daemonSet?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.daemonSet = this._daemonSet?.internalValue;
    }
    if (this._deployment?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.deployment = this._deployment?.internalValue;
    }
    if (this._extraVolumeMounts?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.extraVolumeMounts = this._extraVolumeMounts?.internalValue;
    }
    if (this._extraVolumes?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.extraVolumes = this._extraVolumes?.internalValue;
    }
    if (this._logLevel !== undefined) {
      hasAnyValues = true;
      internalValueResult.logLevel = this._logLevel;
    }
    if (this._networkPublishing?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.networkPublishing = this._networkPublishing?.internalValue;
    }
    if (this._nodePlacement?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.nodePlacement = this._nodePlacement?.internalValue;
    }
    if (this._overloadMaxHeapSize !== undefined) {
      hasAnyValues = true;
      internalValueResult.overloadMaxHeapSize = this._overloadMaxHeapSize;
    }
    if (this._podAnnotations !== undefined) {
      hasAnyValues = true;
      internalValueResult.podAnnotations = this._podAnnotations;
    }
    if (this._replicas !== undefined) {
      hasAnyValues = true;
      internalValueResult.replicas = this._replicas;
    }
    if (this._resources?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.resources = this._resources?.internalValue;
    }
    if (this._workloadType !== undefined) {
      hasAnyValues = true;
      internalValueResult.workloadType = this._workloadType;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoy | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._baseId = undefined;
      this._daemonSet.internalValue = undefined;
      this._deployment.internalValue = undefined;
      this._extraVolumeMounts.internalValue = undefined;
      this._extraVolumes.internalValue = undefined;
      this._logLevel = undefined;
      this._networkPublishing.internalValue = undefined;
      this._nodePlacement.internalValue = undefined;
      this._overloadMaxHeapSize = undefined;
      this._podAnnotations = undefined;
      this._replicas = undefined;
      this._resources.internalValue = undefined;
      this._workloadType = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._baseId = value.baseId;
      this._daemonSet.internalValue = value.daemonSet;
      this._deployment.internalValue = value.deployment;
      this._extraVolumeMounts.internalValue = value.extraVolumeMounts;
      this._extraVolumes.internalValue = value.extraVolumes;
      this._logLevel = value.logLevel;
      this._networkPublishing.internalValue = value.networkPublishing;
      this._nodePlacement.internalValue = value.nodePlacement;
      this._overloadMaxHeapSize = value.overloadMaxHeapSize;
      this._podAnnotations = value.podAnnotations;
      this._replicas = value.replicas;
      this._resources.internalValue = value.resources;
      this._workloadType = value.workloadType;
    }
  }

  // base_id - computed: false, optional: true, required: false
  private _baseId?: number; 
  public get baseId() {
    return this.getNumberAttribute('base_id');
  }
  public set baseId(value: number) {
    this._baseId = value;
  }
  public resetBaseId() {
    this._baseId = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get baseIdInput() {
    return this._baseId;
  }

  // daemon_set - computed: false, optional: true, required: false
  private _daemonSet = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyDaemonSetOutputReference(this, "daemon_set");
  public get daemonSet() {
    return this._daemonSet;
  }
  public putDaemonSet(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyDaemonSet) {
    this._daemonSet.internalValue = value;
  }
  public resetDaemonSet() {
    this._daemonSet.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get daemonSetInput() {
    return this._daemonSet.internalValue;
  }

  // deployment - computed: false, optional: true, required: false
  private _deployment = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyDeploymentOutputReference(this, "deployment");
  public get deployment() {
    return this._deployment;
  }
  public putDeployment(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyDeployment) {
    this._deployment.internalValue = value;
  }
  public resetDeployment() {
    this._deployment.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get deploymentInput() {
    return this._deployment.internalValue;
  }

  // extra_volume_mounts - computed: false, optional: true, required: false
  private _extraVolumeMounts = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumeMountsList(this, "extra_volume_mounts", false);
  public get extraVolumeMounts() {
    return this._extraVolumeMounts;
  }
  public putExtraVolumeMounts(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumeMounts[] | cdktf.IResolvable) {
    this._extraVolumeMounts.internalValue = value;
  }
  public resetExtraVolumeMounts() {
    this._extraVolumeMounts.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get extraVolumeMountsInput() {
    return this._extraVolumeMounts.internalValue;
  }

  // extra_volumes - computed: false, optional: true, required: false
  private _extraVolumes = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumesList(this, "extra_volumes", false);
  public get extraVolumes() {
    return this._extraVolumes;
  }
  public putExtraVolumes(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyExtraVolumes[] | cdktf.IResolvable) {
    this._extraVolumes.internalValue = value;
  }
  public resetExtraVolumes() {
    this._extraVolumes.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get extraVolumesInput() {
    return this._extraVolumes.internalValue;
  }

  // log_level - computed: false, optional: true, required: false
  private _logLevel?: string; 
  public get logLevel() {
    return this.getStringAttribute('log_level');
  }
  public set logLevel(value: string) {
    this._logLevel = value;
  }
  public resetLogLevel() {
    this._logLevel = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get logLevelInput() {
    return this._logLevel;
  }

  // network_publishing - computed: false, optional: true, required: false
  private _networkPublishing = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyNetworkPublishingOutputReference(this, "network_publishing");
  public get networkPublishing() {
    return this._networkPublishing;
  }
  public putNetworkPublishing(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyNetworkPublishing) {
    this._networkPublishing.internalValue = value;
  }
  public resetNetworkPublishing() {
    this._networkPublishing.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get networkPublishingInput() {
    return this._networkPublishing.internalValue;
  }

  // node_placement - computed: false, optional: true, required: false
  private _nodePlacement = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyNodePlacementOutputReference(this, "node_placement");
  public get nodePlacement() {
    return this._nodePlacement;
  }
  public putNodePlacement(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyNodePlacement) {
    this._nodePlacement.internalValue = value;
  }
  public resetNodePlacement() {
    this._nodePlacement.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get nodePlacementInput() {
    return this._nodePlacement.internalValue;
  }

  // overload_max_heap_size - computed: false, optional: true, required: false
  private _overloadMaxHeapSize?: number; 
  public get overloadMaxHeapSize() {
    return this.getNumberAttribute('overload_max_heap_size');
  }
  public set overloadMaxHeapSize(value: number) {
    this._overloadMaxHeapSize = value;
  }
  public resetOverloadMaxHeapSize() {
    this._overloadMaxHeapSize = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get overloadMaxHeapSizeInput() {
    return this._overloadMaxHeapSize;
  }

  // pod_annotations - computed: false, optional: true, required: false
  private _podAnnotations?: { [key: string]: string }; 
  public get podAnnotations() {
    return this.getStringMapAttribute('pod_annotations');
  }
  public set podAnnotations(value: { [key: string]: string }) {
    this._podAnnotations = value;
  }
  public resetPodAnnotations() {
    this._podAnnotations = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get podAnnotationsInput() {
    return this._podAnnotations;
  }

  // replicas - computed: false, optional: true, required: false
  private _replicas?: number; 
  public get replicas() {
    return this.getNumberAttribute('replicas');
  }
  public set replicas(value: number) {
    this._replicas = value;
  }
  public resetReplicas() {
    this._replicas = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get replicasInput() {
    return this._replicas;
  }

  // resources - computed: false, optional: true, required: false
  private _resources = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyResourcesOutputReference(this, "resources");
  public get resources() {
    return this._resources;
  }
  public putResources(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyResources) {
    this._resources.internalValue = value;
  }
  public resetResources() {
    this._resources.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get resourcesInput() {
    return this._resources.internalValue;
  }

  // workload_type - computed: false, optional: true, required: false
  private _workloadType?: string; 
  public get workloadType() {
    return this.getStringAttribute('workload_type');
  }
  public set workloadType(value: string) {
    this._workloadType = value;
  }
  public resetWorkloadType() {
    this._workloadType = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get workloadTypeInput() {
    return this._workloadType;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsDebug {
  /**
  * Defines the Contour debug address interface. Contour's default is '127.0.0.1'.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#address DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#address}
  */
  readonly address?: string;
  /**
  * Defines the Contour debug address port. Contour's default is 6060.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#port DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#port}
  */
  readonly port?: number;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsDebugToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsDebug | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    address: cdktf.stringToTerraform(struct!.address),
    port: cdktf.numberToTerraform(struct!.port),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsDebugToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsDebug | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    address: {
      value: cdktf.stringToHclTerraform(struct!.address),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    port: {
      value: cdktf.numberToHclTerraform(struct!.port),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsDebugOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsDebug | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._address !== undefined) {
      hasAnyValues = true;
      internalValueResult.address = this._address;
    }
    if (this._port !== undefined) {
      hasAnyValues = true;
      internalValueResult.port = this._port;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsDebug | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._address = undefined;
      this._port = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._address = value.address;
      this._port = value.port;
    }
  }

  // address - computed: false, optional: true, required: false
  private _address?: string; 
  public get address() {
    return this.getStringAttribute('address');
  }
  public set address(value: string) {
    this._address = value;
  }
  public resetAddress() {
    this._address = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get addressInput() {
    return this._address;
  }

  // port - computed: false, optional: true, required: false
  private _port?: number; 
  public get port() {
    return this.getNumberAttribute('port');
  }
  public set port(value: number) {
    this._port = value;
  }
  public resetPort() {
    this._port = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get portInput() {
    return this._port;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyClientCertificate {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#name DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#name}
  */
  readonly name: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#namespace DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#namespace}
  */
  readonly namespace: string;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyClientCertificateToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyClientCertificate | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    name: cdktf.stringToTerraform(struct!.name),
    namespace: cdktf.stringToTerraform(struct!.namespace),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyClientCertificateToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyClientCertificate | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    name: {
      value: cdktf.stringToHclTerraform(struct!.name),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    namespace: {
      value: cdktf.stringToHclTerraform(struct!.namespace),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyClientCertificateOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyClientCertificate | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._name !== undefined) {
      hasAnyValues = true;
      internalValueResult.name = this._name;
    }
    if (this._namespace !== undefined) {
      hasAnyValues = true;
      internalValueResult.namespace = this._namespace;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyClientCertificate | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._name = undefined;
      this._namespace = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._name = value.name;
      this._namespace = value.namespace;
    }
  }

  // name - computed: false, optional: false, required: true
  private _name?: string; 
  public get name() {
    return this.getStringAttribute('name');
  }
  public set name(value: string) {
    this._name = value;
  }
  // Temporarily expose input value. Use with caution.
  public get nameInput() {
    return this._name;
  }

  // namespace - computed: false, optional: false, required: true
  private _namespace?: string; 
  public get namespace() {
    return this.getStringAttribute('namespace');
  }
  public set namespace(value: string) {
    this._namespace = value;
  }
  // Temporarily expose input value. Use with caution.
  public get namespaceInput() {
    return this._namespace;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyClusterCircuitBreakers {
  /**
  * The maximum number of connections that a single Envoy instance allows to the Kubernetes Service; defaults to 1024.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#max_connections DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#max_connections}
  */
  readonly maxConnections?: number;
  /**
  * The maximum number of pending requests that a single Envoy instance allows to the Kubernetes Service; defaults to 1024.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#max_pending_requests DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#max_pending_requests}
  */
  readonly maxPendingRequests?: number;
  /**
  * The maximum parallel requests a single Envoy instance allows to the Kubernetes Service; defaults to 1024
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#max_requests DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#max_requests}
  */
  readonly maxRequests?: number;
  /**
  * The maximum number of parallel retries a single Envoy instance allows to the Kubernetes Service; defaults to 3.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#max_retries DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#max_retries}
  */
  readonly maxRetries?: number;
  /**
  * PerHostMaxConnections is the maximum number of connections that Envoy will allow to each individual host in a cluster.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#per_host_max_connections DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#per_host_max_connections}
  */
  readonly perHostMaxConnections?: number;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyClusterCircuitBreakersToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyClusterCircuitBreakers | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    max_connections: cdktf.numberToTerraform(struct!.maxConnections),
    max_pending_requests: cdktf.numberToTerraform(struct!.maxPendingRequests),
    max_requests: cdktf.numberToTerraform(struct!.maxRequests),
    max_retries: cdktf.numberToTerraform(struct!.maxRetries),
    per_host_max_connections: cdktf.numberToTerraform(struct!.perHostMaxConnections),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyClusterCircuitBreakersToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyClusterCircuitBreakers | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    max_connections: {
      value: cdktf.numberToHclTerraform(struct!.maxConnections),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    max_pending_requests: {
      value: cdktf.numberToHclTerraform(struct!.maxPendingRequests),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    max_requests: {
      value: cdktf.numberToHclTerraform(struct!.maxRequests),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    max_retries: {
      value: cdktf.numberToHclTerraform(struct!.maxRetries),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    per_host_max_connections: {
      value: cdktf.numberToHclTerraform(struct!.perHostMaxConnections),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyClusterCircuitBreakersOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyClusterCircuitBreakers | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._maxConnections !== undefined) {
      hasAnyValues = true;
      internalValueResult.maxConnections = this._maxConnections;
    }
    if (this._maxPendingRequests !== undefined) {
      hasAnyValues = true;
      internalValueResult.maxPendingRequests = this._maxPendingRequests;
    }
    if (this._maxRequests !== undefined) {
      hasAnyValues = true;
      internalValueResult.maxRequests = this._maxRequests;
    }
    if (this._maxRetries !== undefined) {
      hasAnyValues = true;
      internalValueResult.maxRetries = this._maxRetries;
    }
    if (this._perHostMaxConnections !== undefined) {
      hasAnyValues = true;
      internalValueResult.perHostMaxConnections = this._perHostMaxConnections;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyClusterCircuitBreakers | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._maxConnections = undefined;
      this._maxPendingRequests = undefined;
      this._maxRequests = undefined;
      this._maxRetries = undefined;
      this._perHostMaxConnections = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._maxConnections = value.maxConnections;
      this._maxPendingRequests = value.maxPendingRequests;
      this._maxRequests = value.maxRequests;
      this._maxRetries = value.maxRetries;
      this._perHostMaxConnections = value.perHostMaxConnections;
    }
  }

  // max_connections - computed: false, optional: true, required: false
  private _maxConnections?: number; 
  public get maxConnections() {
    return this.getNumberAttribute('max_connections');
  }
  public set maxConnections(value: number) {
    this._maxConnections = value;
  }
  public resetMaxConnections() {
    this._maxConnections = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get maxConnectionsInput() {
    return this._maxConnections;
  }

  // max_pending_requests - computed: false, optional: true, required: false
  private _maxPendingRequests?: number; 
  public get maxPendingRequests() {
    return this.getNumberAttribute('max_pending_requests');
  }
  public set maxPendingRequests(value: number) {
    this._maxPendingRequests = value;
  }
  public resetMaxPendingRequests() {
    this._maxPendingRequests = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get maxPendingRequestsInput() {
    return this._maxPendingRequests;
  }

  // max_requests - computed: false, optional: true, required: false
  private _maxRequests?: number; 
  public get maxRequests() {
    return this.getNumberAttribute('max_requests');
  }
  public set maxRequests(value: number) {
    this._maxRequests = value;
  }
  public resetMaxRequests() {
    this._maxRequests = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get maxRequestsInput() {
    return this._maxRequests;
  }

  // max_retries - computed: false, optional: true, required: false
  private _maxRetries?: number; 
  public get maxRetries() {
    return this.getNumberAttribute('max_retries');
  }
  public set maxRetries(value: number) {
    this._maxRetries = value;
  }
  public resetMaxRetries() {
    this._maxRetries = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get maxRetriesInput() {
    return this._maxRetries;
  }

  // per_host_max_connections - computed: false, optional: true, required: false
  private _perHostMaxConnections?: number; 
  public get perHostMaxConnections() {
    return this.getNumberAttribute('per_host_max_connections');
  }
  public set perHostMaxConnections(value: number) {
    this._perHostMaxConnections = value;
  }
  public resetPerHostMaxConnections() {
    this._perHostMaxConnections = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get perHostMaxConnectionsInput() {
    return this._perHostMaxConnections;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyClusterUpstreamTls {
  /**
  * CipherSuites defines the TLS ciphers to be supported by Envoy TLS listeners when negotiating TLS 1.2. Ciphers are validated against the set that Envoy supports by default. This parameter should only be used by advanced users. Note that these will be ignored when TLS 1.3 is in use. This field is optional; when it is undefined, a Contour-managed ciphersuite list will be used, which may be updated to keep it secure. Contour's default list is: - '[ECDHE-ECDSA-AES128-GCM-SHA256|ECDHE-ECDSA-CHACHA20-POLY1305]' - '[ECDHE-RSA-AES128-GCM-SHA256|ECDHE-RSA-CHACHA20-POLY1305]' - 'ECDHE-ECDSA-AES256-GCM-SHA384' - 'ECDHE-RSA-AES256-GCM-SHA384' Ciphers provided are validated against the following list: - '[ECDHE-ECDSA-AES128-GCM-SHA256|ECDHE-ECDSA-CHACHA20-POLY1305]' - '[ECDHE-RSA-AES128-GCM-SHA256|ECDHE-RSA-CHACHA20-POLY1305]' - 'ECDHE-ECDSA-AES128-GCM-SHA256' - 'ECDHE-RSA-AES128-GCM-SHA256' - 'ECDHE-ECDSA-AES128-SHA' - 'ECDHE-RSA-AES128-SHA' - 'AES128-GCM-SHA256' - 'AES128-SHA' - 'ECDHE-ECDSA-AES256-GCM-SHA384' - 'ECDHE-RSA-AES256-GCM-SHA384' - 'ECDHE-ECDSA-AES256-SHA' - 'ECDHE-RSA-AES256-SHA' - 'AES256-GCM-SHA384' - 'AES256-SHA' Contour recommends leaving this undefined unless you are sure you must. See: https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/transport_sockets/tls/v3/common.proto#extensions-transport-sockets-tls-v3-tlsparameters Note: This list is a superset of what is valid for stock Envoy builds and those using BoringSSL FIPS.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#cipher_suites DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#cipher_suites}
  */
  readonly cipherSuites?: string[];
  /**
  * MaximumProtocolVersion is the maximum TLS version this vhost should negotiate. Values: '1.2', '1.3'(default). Other values will produce an error.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#maximum_protocol_version DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#maximum_protocol_version}
  */
  readonly maximumProtocolVersion?: string;
  /**
  * MinimumProtocolVersion is the minimum TLS version this vhost should negotiate. Values: '1.2' (default), '1.3'. Other values will produce an error.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#minimum_protocol_version DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#minimum_protocol_version}
  */
  readonly minimumProtocolVersion?: string;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyClusterUpstreamTlsToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyClusterUpstreamTls | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    cipher_suites: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.cipherSuites),
    maximum_protocol_version: cdktf.stringToTerraform(struct!.maximumProtocolVersion),
    minimum_protocol_version: cdktf.stringToTerraform(struct!.minimumProtocolVersion),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyClusterUpstreamTlsToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyClusterUpstreamTls | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    cipher_suites: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.cipherSuites),
      isBlock: false,
      type: "list",
      storageClassType: "stringList",
    },
    maximum_protocol_version: {
      value: cdktf.stringToHclTerraform(struct!.maximumProtocolVersion),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    minimum_protocol_version: {
      value: cdktf.stringToHclTerraform(struct!.minimumProtocolVersion),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyClusterUpstreamTlsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyClusterUpstreamTls | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._cipherSuites !== undefined) {
      hasAnyValues = true;
      internalValueResult.cipherSuites = this._cipherSuites;
    }
    if (this._maximumProtocolVersion !== undefined) {
      hasAnyValues = true;
      internalValueResult.maximumProtocolVersion = this._maximumProtocolVersion;
    }
    if (this._minimumProtocolVersion !== undefined) {
      hasAnyValues = true;
      internalValueResult.minimumProtocolVersion = this._minimumProtocolVersion;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyClusterUpstreamTls | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._cipherSuites = undefined;
      this._maximumProtocolVersion = undefined;
      this._minimumProtocolVersion = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._cipherSuites = value.cipherSuites;
      this._maximumProtocolVersion = value.maximumProtocolVersion;
      this._minimumProtocolVersion = value.minimumProtocolVersion;
    }
  }

  // cipher_suites - computed: false, optional: true, required: false
  private _cipherSuites?: string[]; 
  public get cipherSuites() {
    return this.getListAttribute('cipher_suites');
  }
  public set cipherSuites(value: string[]) {
    this._cipherSuites = value;
  }
  public resetCipherSuites() {
    this._cipherSuites = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get cipherSuitesInput() {
    return this._cipherSuites;
  }

  // maximum_protocol_version - computed: false, optional: true, required: false
  private _maximumProtocolVersion?: string; 
  public get maximumProtocolVersion() {
    return this.getStringAttribute('maximum_protocol_version');
  }
  public set maximumProtocolVersion(value: string) {
    this._maximumProtocolVersion = value;
  }
  public resetMaximumProtocolVersion() {
    this._maximumProtocolVersion = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get maximumProtocolVersionInput() {
    return this._maximumProtocolVersion;
  }

  // minimum_protocol_version - computed: false, optional: true, required: false
  private _minimumProtocolVersion?: string; 
  public get minimumProtocolVersion() {
    return this.getStringAttribute('minimum_protocol_version');
  }
  public set minimumProtocolVersion(value: string) {
    this._minimumProtocolVersion = value;
  }
  public resetMinimumProtocolVersion() {
    this._minimumProtocolVersion = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get minimumProtocolVersionInput() {
    return this._minimumProtocolVersion;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyCluster {
  /**
  * GlobalCircuitBreakerDefaults specifies default circuit breaker budget across all services. If defined, this will be used as the default for all services.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#circuit_breakers DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#circuit_breakers}
  */
  readonly circuitBreakers?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyClusterCircuitBreakers;
  /**
  * DNSLookupFamily defines how external names are looked up When configured as V4, the DNS resolver will only perform a lookup for addresses in the IPv4 family. If V6 is configured, the DNS resolver will only perform a lookup for addresses in the IPv6 family. If AUTO is configured, the DNS resolver will first perform a lookup for addresses in the IPv6 family and fallback to a lookup for addresses in the IPv4 family. If ALL is specified, the DNS resolver will perform a lookup for both IPv4 and IPv6 families, and return all resolved addresses. When this is used, Happy Eyeballs will be enabled for upstream connections. Refer to Happy Eyeballs Support for more information. Note: This only applies to externalName clusters. See https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/cluster/v3/cluster.proto.html#envoy-v3-api-enum-config-cluster-v3-cluster-dnslookupfamily for more information. Values: 'auto' (default), 'v4', 'v6', 'all'. Other values will produce an error.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#dns_lookup_family DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#dns_lookup_family}
  */
  readonly dnsLookupFamily?: string;
  /**
  * Defines the maximum requests for upstream connections. If not specified, there is no limit. see https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/core/v3/protocol.proto#envoy-v3-api-msg-config-core-v3-httpprotocoloptions for more information.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#max_requests_per_connection DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#max_requests_per_connection}
  */
  readonly maxRequestsPerConnection?: number;
  /**
  * Defines the soft limit on size of the cluster’s new connection read and write buffers in bytes. If unspecified, an implementation defined default is applied (1MiB). see https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/cluster/v3/cluster.proto#envoy-v3-api-field-config-cluster-v3-cluster-per-connection-buffer-limit-bytes for more information.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#per_connection_buffer_limit_bytes DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#per_connection_buffer_limit_bytes}
  */
  readonly perConnectionBufferLimitBytes?: number;
  /**
  * UpstreamTLS contains the TLS policy parameters for upstream connections
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#upstream_tls DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#upstream_tls}
  */
  readonly upstreamTls?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyClusterUpstreamTls;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyClusterToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyCluster | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    circuit_breakers: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyClusterCircuitBreakersToTerraform(struct!.circuitBreakers),
    dns_lookup_family: cdktf.stringToTerraform(struct!.dnsLookupFamily),
    max_requests_per_connection: cdktf.numberToTerraform(struct!.maxRequestsPerConnection),
    per_connection_buffer_limit_bytes: cdktf.numberToTerraform(struct!.perConnectionBufferLimitBytes),
    upstream_tls: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyClusterUpstreamTlsToTerraform(struct!.upstreamTls),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyClusterToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyCluster | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    circuit_breakers: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyClusterCircuitBreakersToHclTerraform(struct!.circuitBreakers),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyClusterCircuitBreakers",
    },
    dns_lookup_family: {
      value: cdktf.stringToHclTerraform(struct!.dnsLookupFamily),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    max_requests_per_connection: {
      value: cdktf.numberToHclTerraform(struct!.maxRequestsPerConnection),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    per_connection_buffer_limit_bytes: {
      value: cdktf.numberToHclTerraform(struct!.perConnectionBufferLimitBytes),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    upstream_tls: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyClusterUpstreamTlsToHclTerraform(struct!.upstreamTls),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyClusterUpstreamTls",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyClusterOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyCluster | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._circuitBreakers?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.circuitBreakers = this._circuitBreakers?.internalValue;
    }
    if (this._dnsLookupFamily !== undefined) {
      hasAnyValues = true;
      internalValueResult.dnsLookupFamily = this._dnsLookupFamily;
    }
    if (this._maxRequestsPerConnection !== undefined) {
      hasAnyValues = true;
      internalValueResult.maxRequestsPerConnection = this._maxRequestsPerConnection;
    }
    if (this._perConnectionBufferLimitBytes !== undefined) {
      hasAnyValues = true;
      internalValueResult.perConnectionBufferLimitBytes = this._perConnectionBufferLimitBytes;
    }
    if (this._upstreamTls?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.upstreamTls = this._upstreamTls?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyCluster | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._circuitBreakers.internalValue = undefined;
      this._dnsLookupFamily = undefined;
      this._maxRequestsPerConnection = undefined;
      this._perConnectionBufferLimitBytes = undefined;
      this._upstreamTls.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._circuitBreakers.internalValue = value.circuitBreakers;
      this._dnsLookupFamily = value.dnsLookupFamily;
      this._maxRequestsPerConnection = value.maxRequestsPerConnection;
      this._perConnectionBufferLimitBytes = value.perConnectionBufferLimitBytes;
      this._upstreamTls.internalValue = value.upstreamTls;
    }
  }

  // circuit_breakers - computed: false, optional: true, required: false
  private _circuitBreakers = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyClusterCircuitBreakersOutputReference(this, "circuit_breakers");
  public get circuitBreakers() {
    return this._circuitBreakers;
  }
  public putCircuitBreakers(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyClusterCircuitBreakers) {
    this._circuitBreakers.internalValue = value;
  }
  public resetCircuitBreakers() {
    this._circuitBreakers.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get circuitBreakersInput() {
    return this._circuitBreakers.internalValue;
  }

  // dns_lookup_family - computed: false, optional: true, required: false
  private _dnsLookupFamily?: string; 
  public get dnsLookupFamily() {
    return this.getStringAttribute('dns_lookup_family');
  }
  public set dnsLookupFamily(value: string) {
    this._dnsLookupFamily = value;
  }
  public resetDnsLookupFamily() {
    this._dnsLookupFamily = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get dnsLookupFamilyInput() {
    return this._dnsLookupFamily;
  }

  // max_requests_per_connection - computed: false, optional: true, required: false
  private _maxRequestsPerConnection?: number; 
  public get maxRequestsPerConnection() {
    return this.getNumberAttribute('max_requests_per_connection');
  }
  public set maxRequestsPerConnection(value: number) {
    this._maxRequestsPerConnection = value;
  }
  public resetMaxRequestsPerConnection() {
    this._maxRequestsPerConnection = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get maxRequestsPerConnectionInput() {
    return this._maxRequestsPerConnection;
  }

  // per_connection_buffer_limit_bytes - computed: false, optional: true, required: false
  private _perConnectionBufferLimitBytes?: number; 
  public get perConnectionBufferLimitBytes() {
    return this.getNumberAttribute('per_connection_buffer_limit_bytes');
  }
  public set perConnectionBufferLimitBytes(value: number) {
    this._perConnectionBufferLimitBytes = value;
  }
  public resetPerConnectionBufferLimitBytes() {
    this._perConnectionBufferLimitBytes = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get perConnectionBufferLimitBytesInput() {
    return this._perConnectionBufferLimitBytes;
  }

  // upstream_tls - computed: false, optional: true, required: false
  private _upstreamTls = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyClusterUpstreamTlsOutputReference(this, "upstream_tls");
  public get upstreamTls() {
    return this._upstreamTls;
  }
  public putUpstreamTls(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyClusterUpstreamTls) {
    this._upstreamTls.internalValue = value;
  }
  public resetUpstreamTls() {
    this._upstreamTls.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get upstreamTlsInput() {
    return this._upstreamTls.internalValue;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyHealth {
  /**
  * Defines the health address interface.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#address DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#address}
  */
  readonly address?: string;
  /**
  * Defines the health port.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#port DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#port}
  */
  readonly port?: number;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyHealthToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyHealth | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    address: cdktf.stringToTerraform(struct!.address),
    port: cdktf.numberToTerraform(struct!.port),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyHealthToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyHealth | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    address: {
      value: cdktf.stringToHclTerraform(struct!.address),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    port: {
      value: cdktf.numberToHclTerraform(struct!.port),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyHealthOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyHealth | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._address !== undefined) {
      hasAnyValues = true;
      internalValueResult.address = this._address;
    }
    if (this._port !== undefined) {
      hasAnyValues = true;
      internalValueResult.port = this._port;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyHealth | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._address = undefined;
      this._port = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._address = value.address;
      this._port = value.port;
    }
  }

  // address - computed: false, optional: true, required: false
  private _address?: string; 
  public get address() {
    return this.getStringAttribute('address');
  }
  public set address(value: string) {
    this._address = value;
  }
  public resetAddress() {
    this._address = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get addressInput() {
    return this._address;
  }

  // port - computed: false, optional: true, required: false
  private _port?: number; 
  public get port() {
    return this.getNumberAttribute('port');
  }
  public set port(value: number) {
    this._port = value;
  }
  public resetPort() {
    this._port = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get portInput() {
    return this._port;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyHttp {
  /**
  * AccessLog defines where Envoy logs are outputted for this listener.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#access_log DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#access_log}
  */
  readonly accessLog?: string;
  /**
  * Defines an Envoy Listener Address.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#address DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#address}
  */
  readonly address?: string;
  /**
  * Defines an Envoy listener Port.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#port DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#port}
  */
  readonly port?: number;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyHttpToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyHttp | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    access_log: cdktf.stringToTerraform(struct!.accessLog),
    address: cdktf.stringToTerraform(struct!.address),
    port: cdktf.numberToTerraform(struct!.port),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyHttpToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyHttp | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    access_log: {
      value: cdktf.stringToHclTerraform(struct!.accessLog),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    address: {
      value: cdktf.stringToHclTerraform(struct!.address),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    port: {
      value: cdktf.numberToHclTerraform(struct!.port),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyHttpOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyHttp | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._accessLog !== undefined) {
      hasAnyValues = true;
      internalValueResult.accessLog = this._accessLog;
    }
    if (this._address !== undefined) {
      hasAnyValues = true;
      internalValueResult.address = this._address;
    }
    if (this._port !== undefined) {
      hasAnyValues = true;
      internalValueResult.port = this._port;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyHttp | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._accessLog = undefined;
      this._address = undefined;
      this._port = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._accessLog = value.accessLog;
      this._address = value.address;
      this._port = value.port;
    }
  }

  // access_log - computed: false, optional: true, required: false
  private _accessLog?: string; 
  public get accessLog() {
    return this.getStringAttribute('access_log');
  }
  public set accessLog(value: string) {
    this._accessLog = value;
  }
  public resetAccessLog() {
    this._accessLog = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get accessLogInput() {
    return this._accessLog;
  }

  // address - computed: false, optional: true, required: false
  private _address?: string; 
  public get address() {
    return this.getStringAttribute('address');
  }
  public set address(value: string) {
    this._address = value;
  }
  public resetAddress() {
    this._address = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get addressInput() {
    return this._address;
  }

  // port - computed: false, optional: true, required: false
  private _port?: number; 
  public get port() {
    return this.getNumberAttribute('port');
  }
  public set port(value: number) {
    this._port = value;
  }
  public resetPort() {
    this._port = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get portInput() {
    return this._port;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyHttps {
  /**
  * AccessLog defines where Envoy logs are outputted for this listener.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#access_log DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#access_log}
  */
  readonly accessLog?: string;
  /**
  * Defines an Envoy Listener Address.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#address DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#address}
  */
  readonly address?: string;
  /**
  * Defines an Envoy listener Port.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#port DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#port}
  */
  readonly port?: number;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyHttpsToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyHttps | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    access_log: cdktf.stringToTerraform(struct!.accessLog),
    address: cdktf.stringToTerraform(struct!.address),
    port: cdktf.numberToTerraform(struct!.port),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyHttpsToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyHttps | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    access_log: {
      value: cdktf.stringToHclTerraform(struct!.accessLog),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    address: {
      value: cdktf.stringToHclTerraform(struct!.address),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    port: {
      value: cdktf.numberToHclTerraform(struct!.port),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyHttpsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyHttps | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._accessLog !== undefined) {
      hasAnyValues = true;
      internalValueResult.accessLog = this._accessLog;
    }
    if (this._address !== undefined) {
      hasAnyValues = true;
      internalValueResult.address = this._address;
    }
    if (this._port !== undefined) {
      hasAnyValues = true;
      internalValueResult.port = this._port;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyHttps | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._accessLog = undefined;
      this._address = undefined;
      this._port = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._accessLog = value.accessLog;
      this._address = value.address;
      this._port = value.port;
    }
  }

  // access_log - computed: false, optional: true, required: false
  private _accessLog?: string; 
  public get accessLog() {
    return this.getStringAttribute('access_log');
  }
  public set accessLog(value: string) {
    this._accessLog = value;
  }
  public resetAccessLog() {
    this._accessLog = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get accessLogInput() {
    return this._accessLog;
  }

  // address - computed: false, optional: true, required: false
  private _address?: string; 
  public get address() {
    return this.getStringAttribute('address');
  }
  public set address(value: string) {
    this._address = value;
  }
  public resetAddress() {
    this._address = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get addressInput() {
    return this._address;
  }

  // port - computed: false, optional: true, required: false
  private _port?: number; 
  public get port() {
    return this.getNumberAttribute('port');
  }
  public set port(value: number) {
    this._port = value;
  }
  public resetPort() {
    this._port = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get portInput() {
    return this._port;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyListenerSocketOptions {
  /**
  * Defines the value for IPv4 TOS field (including 6 bit DSCP field) for IP packets originating from Envoy listeners. Single value is applied to all listeners. If listeners are bound to IPv6-only addresses, setting this option will cause an error.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#tos DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#tos}
  */
  readonly tos?: number;
  /**
  * Defines the value for IPv6 Traffic Class field (including 6 bit DSCP field) for IP packets originating from the Envoy listeners. Single value is applied to all listeners. If listeners are bound to IPv4-only addresses, setting this option will cause an error.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#traffic_class DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#traffic_class}
  */
  readonly trafficClass?: number;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyListenerSocketOptionsToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyListenerSocketOptions | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    tos: cdktf.numberToTerraform(struct!.tos),
    traffic_class: cdktf.numberToTerraform(struct!.trafficClass),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyListenerSocketOptionsToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyListenerSocketOptions | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    tos: {
      value: cdktf.numberToHclTerraform(struct!.tos),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    traffic_class: {
      value: cdktf.numberToHclTerraform(struct!.trafficClass),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyListenerSocketOptionsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyListenerSocketOptions | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._tos !== undefined) {
      hasAnyValues = true;
      internalValueResult.tos = this._tos;
    }
    if (this._trafficClass !== undefined) {
      hasAnyValues = true;
      internalValueResult.trafficClass = this._trafficClass;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyListenerSocketOptions | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._tos = undefined;
      this._trafficClass = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._tos = value.tos;
      this._trafficClass = value.trafficClass;
    }
  }

  // tos - computed: false, optional: true, required: false
  private _tos?: number; 
  public get tos() {
    return this.getNumberAttribute('tos');
  }
  public set tos(value: number) {
    this._tos = value;
  }
  public resetTos() {
    this._tos = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get tosInput() {
    return this._tos;
  }

  // traffic_class - computed: false, optional: true, required: false
  private _trafficClass?: number; 
  public get trafficClass() {
    return this.getNumberAttribute('traffic_class');
  }
  public set trafficClass(value: number) {
    this._trafficClass = value;
  }
  public resetTrafficClass() {
    this._trafficClass = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get trafficClassInput() {
    return this._trafficClass;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyListenerTls {
  /**
  * CipherSuites defines the TLS ciphers to be supported by Envoy TLS listeners when negotiating TLS 1.2. Ciphers are validated against the set that Envoy supports by default. This parameter should only be used by advanced users. Note that these will be ignored when TLS 1.3 is in use. This field is optional; when it is undefined, a Contour-managed ciphersuite list will be used, which may be updated to keep it secure. Contour's default list is: - '[ECDHE-ECDSA-AES128-GCM-SHA256|ECDHE-ECDSA-CHACHA20-POLY1305]' - '[ECDHE-RSA-AES128-GCM-SHA256|ECDHE-RSA-CHACHA20-POLY1305]' - 'ECDHE-ECDSA-AES256-GCM-SHA384' - 'ECDHE-RSA-AES256-GCM-SHA384' Ciphers provided are validated against the following list: - '[ECDHE-ECDSA-AES128-GCM-SHA256|ECDHE-ECDSA-CHACHA20-POLY1305]' - '[ECDHE-RSA-AES128-GCM-SHA256|ECDHE-RSA-CHACHA20-POLY1305]' - 'ECDHE-ECDSA-AES128-GCM-SHA256' - 'ECDHE-RSA-AES128-GCM-SHA256' - 'ECDHE-ECDSA-AES128-SHA' - 'ECDHE-RSA-AES128-SHA' - 'AES128-GCM-SHA256' - 'AES128-SHA' - 'ECDHE-ECDSA-AES256-GCM-SHA384' - 'ECDHE-RSA-AES256-GCM-SHA384' - 'ECDHE-ECDSA-AES256-SHA' - 'ECDHE-RSA-AES256-SHA' - 'AES256-GCM-SHA384' - 'AES256-SHA' Contour recommends leaving this undefined unless you are sure you must. See: https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/transport_sockets/tls/v3/common.proto#extensions-transport-sockets-tls-v3-tlsparameters Note: This list is a superset of what is valid for stock Envoy builds and those using BoringSSL FIPS.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#cipher_suites DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#cipher_suites}
  */
  readonly cipherSuites?: string[];
  /**
  * MaximumProtocolVersion is the maximum TLS version this vhost should negotiate. Values: '1.2', '1.3'(default). Other values will produce an error.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#maximum_protocol_version DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#maximum_protocol_version}
  */
  readonly maximumProtocolVersion?: string;
  /**
  * MinimumProtocolVersion is the minimum TLS version this vhost should negotiate. Values: '1.2' (default), '1.3'. Other values will produce an error.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#minimum_protocol_version DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#minimum_protocol_version}
  */
  readonly minimumProtocolVersion?: string;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyListenerTlsToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyListenerTls | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    cipher_suites: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.cipherSuites),
    maximum_protocol_version: cdktf.stringToTerraform(struct!.maximumProtocolVersion),
    minimum_protocol_version: cdktf.stringToTerraform(struct!.minimumProtocolVersion),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyListenerTlsToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyListenerTls | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    cipher_suites: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.cipherSuites),
      isBlock: false,
      type: "list",
      storageClassType: "stringList",
    },
    maximum_protocol_version: {
      value: cdktf.stringToHclTerraform(struct!.maximumProtocolVersion),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    minimum_protocol_version: {
      value: cdktf.stringToHclTerraform(struct!.minimumProtocolVersion),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyListenerTlsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyListenerTls | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._cipherSuites !== undefined) {
      hasAnyValues = true;
      internalValueResult.cipherSuites = this._cipherSuites;
    }
    if (this._maximumProtocolVersion !== undefined) {
      hasAnyValues = true;
      internalValueResult.maximumProtocolVersion = this._maximumProtocolVersion;
    }
    if (this._minimumProtocolVersion !== undefined) {
      hasAnyValues = true;
      internalValueResult.minimumProtocolVersion = this._minimumProtocolVersion;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyListenerTls | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._cipherSuites = undefined;
      this._maximumProtocolVersion = undefined;
      this._minimumProtocolVersion = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._cipherSuites = value.cipherSuites;
      this._maximumProtocolVersion = value.maximumProtocolVersion;
      this._minimumProtocolVersion = value.minimumProtocolVersion;
    }
  }

  // cipher_suites - computed: false, optional: true, required: false
  private _cipherSuites?: string[]; 
  public get cipherSuites() {
    return this.getListAttribute('cipher_suites');
  }
  public set cipherSuites(value: string[]) {
    this._cipherSuites = value;
  }
  public resetCipherSuites() {
    this._cipherSuites = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get cipherSuitesInput() {
    return this._cipherSuites;
  }

  // maximum_protocol_version - computed: false, optional: true, required: false
  private _maximumProtocolVersion?: string; 
  public get maximumProtocolVersion() {
    return this.getStringAttribute('maximum_protocol_version');
  }
  public set maximumProtocolVersion(value: string) {
    this._maximumProtocolVersion = value;
  }
  public resetMaximumProtocolVersion() {
    this._maximumProtocolVersion = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get maximumProtocolVersionInput() {
    return this._maximumProtocolVersion;
  }

  // minimum_protocol_version - computed: false, optional: true, required: false
  private _minimumProtocolVersion?: string; 
  public get minimumProtocolVersion() {
    return this.getStringAttribute('minimum_protocol_version');
  }
  public set minimumProtocolVersion(value: string) {
    this._minimumProtocolVersion = value;
  }
  public resetMinimumProtocolVersion() {
    this._minimumProtocolVersion = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get minimumProtocolVersionInput() {
    return this._minimumProtocolVersion;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyListener {
  /**
  * ConnectionBalancer. If the value is exact, the listener will use the exact connection balancer See https://www.envoyproxy.io/docs/envoy/latest/api-v2/api/v2/listener.proto#envoy-api-msg-listener-connectionbalanceconfig for more information. Values: (empty string): use the default ConnectionBalancer, 'exact': use the Exact ConnectionBalancer. Other values will produce an error.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#connection_balancer DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#connection_balancer}
  */
  readonly connectionBalancer?: string;
  /**
  * DisableAllowChunkedLength disables the RFC-compliant Envoy behavior to strip the 'Content-Length' header if 'Transfer-Encoding: chunked' is also set. This is an emergency off-switch to revert back to Envoy's default behavior in case of failures. Please file an issue if failures are encountered. See: https://github.com/projectcontour/contour/issues/3221 Contour's default is false.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#disable_allow_chunked_length DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#disable_allow_chunked_length}
  */
  readonly disableAllowChunkedLength?: boolean | cdktf.IResolvable;
  /**
  * DisableMergeSlashes disables Envoy's non-standard merge_slashes path transformation option which strips duplicate slashes from request URL paths. Contour's default is false.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#disable_merge_slashes DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#disable_merge_slashes}
  */
  readonly disableMergeSlashes?: boolean | cdktf.IResolvable;
  /**
  * Defines the value for SETTINGS_MAX_CONCURRENT_STREAMS Envoy will advertise in the SETTINGS frame in HTTP/2 connections and the limit for concurrent streams allowed for a peer on a single HTTP/2 connection. It is recommended to not set this lower than 100 but this field can be used to bound resource usage by HTTP/2 connections and mitigate attacks like CVE-2023-44487. The default value when this is not set is unlimited.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#http_max_concurrent_streams DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#http_max_concurrent_streams}
  */
  readonly httpMaxConcurrentStreams?: number;
  /**
  * Defines the limit on number of active connections to a listener. The limit is applied per listener. The default value when this is not set is unlimited.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#max_connections_per_listener DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#max_connections_per_listener}
  */
  readonly maxConnectionsPerListener?: number;
  /**
  * Defines the maximum requests for downstream connections. If not specified, there is no limit. see https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/core/v3/protocol.proto#envoy-v3-api-msg-config-core-v3-httpprotocoloptions for more information.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#max_requests_per_connection DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#max_requests_per_connection}
  */
  readonly maxRequestsPerConnection?: number;
  /**
  * Defines the limit on number of HTTP requests that Envoy will process from a single connection in a single I/O cycle. Requests over this limit are processed in subsequent I/O cycles. Can be used as a mitigation for CVE-2023-44487 when abusive traffic is detected. Configures the http.max_requests_per_io_cycle Envoy runtime setting. The default value when this is not set is no limit.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#max_requests_per_io_cycle DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#max_requests_per_io_cycle}
  */
  readonly maxRequestsPerIoCycle?: number;
  /**
  * Defines the soft limit on size of the listener’s new connection read and write buffers in bytes. If unspecified, an implementation defined default is applied (1MiB). see https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/listener/v3/listener.proto#envoy-v3-api-field-config-listener-v3-listener-per-connection-buffer-limit-bytes for more information.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#per_connection_buffer_limit_bytes DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#per_connection_buffer_limit_bytes}
  */
  readonly perConnectionBufferLimitBytes?: number;
  /**
  * Defines the action to be applied to the Server header on the response path. When configured as overwrite, overwrites any Server header with 'envoy'. When configured as append_if_absent, if a Server header is present, pass it through, otherwise set it to 'envoy'. When configured as pass_through, pass through the value of the Server header, and do not append a header if none is present. Values: 'overwrite' (default), 'append_if_absent', 'pass_through' Other values will produce an error. Contour's default is overwrite.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#server_header_transformation DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#server_header_transformation}
  */
  readonly serverHeaderTransformation?: string;
  /**
  * SocketOptions defines configurable socket options for the listeners. Single set of options are applied to all listeners.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#socket_options DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#socket_options}
  */
  readonly socketOptions?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyListenerSocketOptions;
  /**
  * TLS holds various configurable Envoy TLS listener values.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#tls DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#tls}
  */
  readonly tls?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyListenerTls;
  /**
  * Use PROXY protocol for all listeners. Contour's default is false.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#use_proxy_protocol DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#use_proxy_protocol}
  */
  readonly useProxyProtocol?: boolean | cdktf.IResolvable;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyListenerToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyListener | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    connection_balancer: cdktf.stringToTerraform(struct!.connectionBalancer),
    disable_allow_chunked_length: cdktf.booleanToTerraform(struct!.disableAllowChunkedLength),
    disable_merge_slashes: cdktf.booleanToTerraform(struct!.disableMergeSlashes),
    http_max_concurrent_streams: cdktf.numberToTerraform(struct!.httpMaxConcurrentStreams),
    max_connections_per_listener: cdktf.numberToTerraform(struct!.maxConnectionsPerListener),
    max_requests_per_connection: cdktf.numberToTerraform(struct!.maxRequestsPerConnection),
    max_requests_per_io_cycle: cdktf.numberToTerraform(struct!.maxRequestsPerIoCycle),
    per_connection_buffer_limit_bytes: cdktf.numberToTerraform(struct!.perConnectionBufferLimitBytes),
    server_header_transformation: cdktf.stringToTerraform(struct!.serverHeaderTransformation),
    socket_options: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyListenerSocketOptionsToTerraform(struct!.socketOptions),
    tls: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyListenerTlsToTerraform(struct!.tls),
    use_proxy_protocol: cdktf.booleanToTerraform(struct!.useProxyProtocol),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyListenerToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyListener | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    connection_balancer: {
      value: cdktf.stringToHclTerraform(struct!.connectionBalancer),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    disable_allow_chunked_length: {
      value: cdktf.booleanToHclTerraform(struct!.disableAllowChunkedLength),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    disable_merge_slashes: {
      value: cdktf.booleanToHclTerraform(struct!.disableMergeSlashes),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    http_max_concurrent_streams: {
      value: cdktf.numberToHclTerraform(struct!.httpMaxConcurrentStreams),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    max_connections_per_listener: {
      value: cdktf.numberToHclTerraform(struct!.maxConnectionsPerListener),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    max_requests_per_connection: {
      value: cdktf.numberToHclTerraform(struct!.maxRequestsPerConnection),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    max_requests_per_io_cycle: {
      value: cdktf.numberToHclTerraform(struct!.maxRequestsPerIoCycle),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    per_connection_buffer_limit_bytes: {
      value: cdktf.numberToHclTerraform(struct!.perConnectionBufferLimitBytes),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    server_header_transformation: {
      value: cdktf.stringToHclTerraform(struct!.serverHeaderTransformation),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    socket_options: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyListenerSocketOptionsToHclTerraform(struct!.socketOptions),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyListenerSocketOptions",
    },
    tls: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyListenerTlsToHclTerraform(struct!.tls),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyListenerTls",
    },
    use_proxy_protocol: {
      value: cdktf.booleanToHclTerraform(struct!.useProxyProtocol),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyListenerOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyListener | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._connectionBalancer !== undefined) {
      hasAnyValues = true;
      internalValueResult.connectionBalancer = this._connectionBalancer;
    }
    if (this._disableAllowChunkedLength !== undefined) {
      hasAnyValues = true;
      internalValueResult.disableAllowChunkedLength = this._disableAllowChunkedLength;
    }
    if (this._disableMergeSlashes !== undefined) {
      hasAnyValues = true;
      internalValueResult.disableMergeSlashes = this._disableMergeSlashes;
    }
    if (this._httpMaxConcurrentStreams !== undefined) {
      hasAnyValues = true;
      internalValueResult.httpMaxConcurrentStreams = this._httpMaxConcurrentStreams;
    }
    if (this._maxConnectionsPerListener !== undefined) {
      hasAnyValues = true;
      internalValueResult.maxConnectionsPerListener = this._maxConnectionsPerListener;
    }
    if (this._maxRequestsPerConnection !== undefined) {
      hasAnyValues = true;
      internalValueResult.maxRequestsPerConnection = this._maxRequestsPerConnection;
    }
    if (this._maxRequestsPerIoCycle !== undefined) {
      hasAnyValues = true;
      internalValueResult.maxRequestsPerIoCycle = this._maxRequestsPerIoCycle;
    }
    if (this._perConnectionBufferLimitBytes !== undefined) {
      hasAnyValues = true;
      internalValueResult.perConnectionBufferLimitBytes = this._perConnectionBufferLimitBytes;
    }
    if (this._serverHeaderTransformation !== undefined) {
      hasAnyValues = true;
      internalValueResult.serverHeaderTransformation = this._serverHeaderTransformation;
    }
    if (this._socketOptions?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.socketOptions = this._socketOptions?.internalValue;
    }
    if (this._tls?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.tls = this._tls?.internalValue;
    }
    if (this._useProxyProtocol !== undefined) {
      hasAnyValues = true;
      internalValueResult.useProxyProtocol = this._useProxyProtocol;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyListener | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._connectionBalancer = undefined;
      this._disableAllowChunkedLength = undefined;
      this._disableMergeSlashes = undefined;
      this._httpMaxConcurrentStreams = undefined;
      this._maxConnectionsPerListener = undefined;
      this._maxRequestsPerConnection = undefined;
      this._maxRequestsPerIoCycle = undefined;
      this._perConnectionBufferLimitBytes = undefined;
      this._serverHeaderTransformation = undefined;
      this._socketOptions.internalValue = undefined;
      this._tls.internalValue = undefined;
      this._useProxyProtocol = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._connectionBalancer = value.connectionBalancer;
      this._disableAllowChunkedLength = value.disableAllowChunkedLength;
      this._disableMergeSlashes = value.disableMergeSlashes;
      this._httpMaxConcurrentStreams = value.httpMaxConcurrentStreams;
      this._maxConnectionsPerListener = value.maxConnectionsPerListener;
      this._maxRequestsPerConnection = value.maxRequestsPerConnection;
      this._maxRequestsPerIoCycle = value.maxRequestsPerIoCycle;
      this._perConnectionBufferLimitBytes = value.perConnectionBufferLimitBytes;
      this._serverHeaderTransformation = value.serverHeaderTransformation;
      this._socketOptions.internalValue = value.socketOptions;
      this._tls.internalValue = value.tls;
      this._useProxyProtocol = value.useProxyProtocol;
    }
  }

  // connection_balancer - computed: false, optional: true, required: false
  private _connectionBalancer?: string; 
  public get connectionBalancer() {
    return this.getStringAttribute('connection_balancer');
  }
  public set connectionBalancer(value: string) {
    this._connectionBalancer = value;
  }
  public resetConnectionBalancer() {
    this._connectionBalancer = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get connectionBalancerInput() {
    return this._connectionBalancer;
  }

  // disable_allow_chunked_length - computed: false, optional: true, required: false
  private _disableAllowChunkedLength?: boolean | cdktf.IResolvable; 
  public get disableAllowChunkedLength() {
    return this.getBooleanAttribute('disable_allow_chunked_length');
  }
  public set disableAllowChunkedLength(value: boolean | cdktf.IResolvable) {
    this._disableAllowChunkedLength = value;
  }
  public resetDisableAllowChunkedLength() {
    this._disableAllowChunkedLength = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get disableAllowChunkedLengthInput() {
    return this._disableAllowChunkedLength;
  }

  // disable_merge_slashes - computed: false, optional: true, required: false
  private _disableMergeSlashes?: boolean | cdktf.IResolvable; 
  public get disableMergeSlashes() {
    return this.getBooleanAttribute('disable_merge_slashes');
  }
  public set disableMergeSlashes(value: boolean | cdktf.IResolvable) {
    this._disableMergeSlashes = value;
  }
  public resetDisableMergeSlashes() {
    this._disableMergeSlashes = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get disableMergeSlashesInput() {
    return this._disableMergeSlashes;
  }

  // http_max_concurrent_streams - computed: false, optional: true, required: false
  private _httpMaxConcurrentStreams?: number; 
  public get httpMaxConcurrentStreams() {
    return this.getNumberAttribute('http_max_concurrent_streams');
  }
  public set httpMaxConcurrentStreams(value: number) {
    this._httpMaxConcurrentStreams = value;
  }
  public resetHttpMaxConcurrentStreams() {
    this._httpMaxConcurrentStreams = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get httpMaxConcurrentStreamsInput() {
    return this._httpMaxConcurrentStreams;
  }

  // max_connections_per_listener - computed: false, optional: true, required: false
  private _maxConnectionsPerListener?: number; 
  public get maxConnectionsPerListener() {
    return this.getNumberAttribute('max_connections_per_listener');
  }
  public set maxConnectionsPerListener(value: number) {
    this._maxConnectionsPerListener = value;
  }
  public resetMaxConnectionsPerListener() {
    this._maxConnectionsPerListener = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get maxConnectionsPerListenerInput() {
    return this._maxConnectionsPerListener;
  }

  // max_requests_per_connection - computed: false, optional: true, required: false
  private _maxRequestsPerConnection?: number; 
  public get maxRequestsPerConnection() {
    return this.getNumberAttribute('max_requests_per_connection');
  }
  public set maxRequestsPerConnection(value: number) {
    this._maxRequestsPerConnection = value;
  }
  public resetMaxRequestsPerConnection() {
    this._maxRequestsPerConnection = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get maxRequestsPerConnectionInput() {
    return this._maxRequestsPerConnection;
  }

  // max_requests_per_io_cycle - computed: false, optional: true, required: false
  private _maxRequestsPerIoCycle?: number; 
  public get maxRequestsPerIoCycle() {
    return this.getNumberAttribute('max_requests_per_io_cycle');
  }
  public set maxRequestsPerIoCycle(value: number) {
    this._maxRequestsPerIoCycle = value;
  }
  public resetMaxRequestsPerIoCycle() {
    this._maxRequestsPerIoCycle = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get maxRequestsPerIoCycleInput() {
    return this._maxRequestsPerIoCycle;
  }

  // per_connection_buffer_limit_bytes - computed: false, optional: true, required: false
  private _perConnectionBufferLimitBytes?: number; 
  public get perConnectionBufferLimitBytes() {
    return this.getNumberAttribute('per_connection_buffer_limit_bytes');
  }
  public set perConnectionBufferLimitBytes(value: number) {
    this._perConnectionBufferLimitBytes = value;
  }
  public resetPerConnectionBufferLimitBytes() {
    this._perConnectionBufferLimitBytes = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get perConnectionBufferLimitBytesInput() {
    return this._perConnectionBufferLimitBytes;
  }

  // server_header_transformation - computed: false, optional: true, required: false
  private _serverHeaderTransformation?: string; 
  public get serverHeaderTransformation() {
    return this.getStringAttribute('server_header_transformation');
  }
  public set serverHeaderTransformation(value: string) {
    this._serverHeaderTransformation = value;
  }
  public resetServerHeaderTransformation() {
    this._serverHeaderTransformation = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get serverHeaderTransformationInput() {
    return this._serverHeaderTransformation;
  }

  // socket_options - computed: false, optional: true, required: false
  private _socketOptions = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyListenerSocketOptionsOutputReference(this, "socket_options");
  public get socketOptions() {
    return this._socketOptions;
  }
  public putSocketOptions(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyListenerSocketOptions) {
    this._socketOptions.internalValue = value;
  }
  public resetSocketOptions() {
    this._socketOptions.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get socketOptionsInput() {
    return this._socketOptions.internalValue;
  }

  // tls - computed: false, optional: true, required: false
  private _tls = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyListenerTlsOutputReference(this, "tls");
  public get tls() {
    return this._tls;
  }
  public putTls(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyListenerTls) {
    this._tls.internalValue = value;
  }
  public resetTls() {
    this._tls.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get tlsInput() {
    return this._tls.internalValue;
  }

  // use_proxy_protocol - computed: false, optional: true, required: false
  private _useProxyProtocol?: boolean | cdktf.IResolvable; 
  public get useProxyProtocol() {
    return this.getBooleanAttribute('use_proxy_protocol');
  }
  public set useProxyProtocol(value: boolean | cdktf.IResolvable) {
    this._useProxyProtocol = value;
  }
  public resetUseProxyProtocol() {
    this._useProxyProtocol = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get useProxyProtocolInput() {
    return this._useProxyProtocol;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyLogging {
  /**
  * AccessLogFormat sets the global access log format. Values: 'envoy' (default), 'json'. Other values will produce an error.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#access_log_format DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#access_log_format}
  */
  readonly accessLogFormat?: string;
  /**
  * AccessLogFormatString sets the access log format when format is set to 'envoy'. When empty, Envoy's default format is used.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#access_log_format_string DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#access_log_format_string}
  */
  readonly accessLogFormatString?: string;
  /**
  * AccessLogJSONFields sets the fields that JSON logging will output when AccessLogFormat is json.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#access_log_json_fields DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#access_log_json_fields}
  */
  readonly accessLogJsonFields?: string[];
  /**
  * AccessLogLevel sets the verbosity level of the access log. Values: 'info' (default, all requests are logged), 'error' (all non-success requests, i.e. 300+ response code, are logged), 'critical' (all 5xx requests are logged) and 'disabled'. Other values will produce an error.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#access_log_level DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#access_log_level}
  */
  readonly accessLogLevel?: string;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyLoggingToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyLogging | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    access_log_format: cdktf.stringToTerraform(struct!.accessLogFormat),
    access_log_format_string: cdktf.stringToTerraform(struct!.accessLogFormatString),
    access_log_json_fields: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.accessLogJsonFields),
    access_log_level: cdktf.stringToTerraform(struct!.accessLogLevel),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyLoggingToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyLogging | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    access_log_format: {
      value: cdktf.stringToHclTerraform(struct!.accessLogFormat),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    access_log_format_string: {
      value: cdktf.stringToHclTerraform(struct!.accessLogFormatString),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    access_log_json_fields: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.accessLogJsonFields),
      isBlock: false,
      type: "list",
      storageClassType: "stringList",
    },
    access_log_level: {
      value: cdktf.stringToHclTerraform(struct!.accessLogLevel),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyLoggingOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyLogging | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._accessLogFormat !== undefined) {
      hasAnyValues = true;
      internalValueResult.accessLogFormat = this._accessLogFormat;
    }
    if (this._accessLogFormatString !== undefined) {
      hasAnyValues = true;
      internalValueResult.accessLogFormatString = this._accessLogFormatString;
    }
    if (this._accessLogJsonFields !== undefined) {
      hasAnyValues = true;
      internalValueResult.accessLogJsonFields = this._accessLogJsonFields;
    }
    if (this._accessLogLevel !== undefined) {
      hasAnyValues = true;
      internalValueResult.accessLogLevel = this._accessLogLevel;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyLogging | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._accessLogFormat = undefined;
      this._accessLogFormatString = undefined;
      this._accessLogJsonFields = undefined;
      this._accessLogLevel = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._accessLogFormat = value.accessLogFormat;
      this._accessLogFormatString = value.accessLogFormatString;
      this._accessLogJsonFields = value.accessLogJsonFields;
      this._accessLogLevel = value.accessLogLevel;
    }
  }

  // access_log_format - computed: false, optional: true, required: false
  private _accessLogFormat?: string; 
  public get accessLogFormat() {
    return this.getStringAttribute('access_log_format');
  }
  public set accessLogFormat(value: string) {
    this._accessLogFormat = value;
  }
  public resetAccessLogFormat() {
    this._accessLogFormat = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get accessLogFormatInput() {
    return this._accessLogFormat;
  }

  // access_log_format_string - computed: false, optional: true, required: false
  private _accessLogFormatString?: string; 
  public get accessLogFormatString() {
    return this.getStringAttribute('access_log_format_string');
  }
  public set accessLogFormatString(value: string) {
    this._accessLogFormatString = value;
  }
  public resetAccessLogFormatString() {
    this._accessLogFormatString = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get accessLogFormatStringInput() {
    return this._accessLogFormatString;
  }

  // access_log_json_fields - computed: false, optional: true, required: false
  private _accessLogJsonFields?: string[]; 
  public get accessLogJsonFields() {
    return this.getListAttribute('access_log_json_fields');
  }
  public set accessLogJsonFields(value: string[]) {
    this._accessLogJsonFields = value;
  }
  public resetAccessLogJsonFields() {
    this._accessLogJsonFields = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get accessLogJsonFieldsInput() {
    return this._accessLogJsonFields;
  }

  // access_log_level - computed: false, optional: true, required: false
  private _accessLogLevel?: string; 
  public get accessLogLevel() {
    return this.getStringAttribute('access_log_level');
  }
  public set accessLogLevel(value: string) {
    this._accessLogLevel = value;
  }
  public resetAccessLogLevel() {
    this._accessLogLevel = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get accessLogLevelInput() {
    return this._accessLogLevel;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyMetricsTls {
  /**
  * CA filename.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#ca_file DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#ca_file}
  */
  readonly caFile?: string;
  /**
  * Client certificate filename.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#cert_file DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#cert_file}
  */
  readonly certFile?: string;
  /**
  * Client key filename.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#key_file DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#key_file}
  */
  readonly keyFile?: string;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyMetricsTlsToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyMetricsTls | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    ca_file: cdktf.stringToTerraform(struct!.caFile),
    cert_file: cdktf.stringToTerraform(struct!.certFile),
    key_file: cdktf.stringToTerraform(struct!.keyFile),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyMetricsTlsToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyMetricsTls | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    ca_file: {
      value: cdktf.stringToHclTerraform(struct!.caFile),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    cert_file: {
      value: cdktf.stringToHclTerraform(struct!.certFile),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    key_file: {
      value: cdktf.stringToHclTerraform(struct!.keyFile),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyMetricsTlsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyMetricsTls | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._caFile !== undefined) {
      hasAnyValues = true;
      internalValueResult.caFile = this._caFile;
    }
    if (this._certFile !== undefined) {
      hasAnyValues = true;
      internalValueResult.certFile = this._certFile;
    }
    if (this._keyFile !== undefined) {
      hasAnyValues = true;
      internalValueResult.keyFile = this._keyFile;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyMetricsTls | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._caFile = undefined;
      this._certFile = undefined;
      this._keyFile = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._caFile = value.caFile;
      this._certFile = value.certFile;
      this._keyFile = value.keyFile;
    }
  }

  // ca_file - computed: false, optional: true, required: false
  private _caFile?: string; 
  public get caFile() {
    return this.getStringAttribute('ca_file');
  }
  public set caFile(value: string) {
    this._caFile = value;
  }
  public resetCaFile() {
    this._caFile = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get caFileInput() {
    return this._caFile;
  }

  // cert_file - computed: false, optional: true, required: false
  private _certFile?: string; 
  public get certFile() {
    return this.getStringAttribute('cert_file');
  }
  public set certFile(value: string) {
    this._certFile = value;
  }
  public resetCertFile() {
    this._certFile = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get certFileInput() {
    return this._certFile;
  }

  // key_file - computed: false, optional: true, required: false
  private _keyFile?: string; 
  public get keyFile() {
    return this.getStringAttribute('key_file');
  }
  public set keyFile(value: string) {
    this._keyFile = value;
  }
  public resetKeyFile() {
    this._keyFile = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get keyFileInput() {
    return this._keyFile;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyMetrics {
  /**
  * Defines the metrics address interface.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#address DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#address}
  */
  readonly address?: string;
  /**
  * Defines the metrics port.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#port DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#port}
  */
  readonly port?: number;
  /**
  * TLS holds TLS file config details. Metrics and health endpoints cannot have same port number when metrics is served over HTTPS.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#tls DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#tls}
  */
  readonly tls?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyMetricsTls;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyMetricsToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyMetrics | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    address: cdktf.stringToTerraform(struct!.address),
    port: cdktf.numberToTerraform(struct!.port),
    tls: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyMetricsTlsToTerraform(struct!.tls),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyMetricsToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyMetrics | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    address: {
      value: cdktf.stringToHclTerraform(struct!.address),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    port: {
      value: cdktf.numberToHclTerraform(struct!.port),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    tls: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyMetricsTlsToHclTerraform(struct!.tls),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyMetricsTls",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyMetricsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyMetrics | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._address !== undefined) {
      hasAnyValues = true;
      internalValueResult.address = this._address;
    }
    if (this._port !== undefined) {
      hasAnyValues = true;
      internalValueResult.port = this._port;
    }
    if (this._tls?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.tls = this._tls?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyMetrics | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._address = undefined;
      this._port = undefined;
      this._tls.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._address = value.address;
      this._port = value.port;
      this._tls.internalValue = value.tls;
    }
  }

  // address - computed: false, optional: true, required: false
  private _address?: string; 
  public get address() {
    return this.getStringAttribute('address');
  }
  public set address(value: string) {
    this._address = value;
  }
  public resetAddress() {
    this._address = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get addressInput() {
    return this._address;
  }

  // port - computed: false, optional: true, required: false
  private _port?: number; 
  public get port() {
    return this.getNumberAttribute('port');
  }
  public set port(value: number) {
    this._port = value;
  }
  public resetPort() {
    this._port = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get portInput() {
    return this._port;
  }

  // tls - computed: false, optional: true, required: false
  private _tls = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyMetricsTlsOutputReference(this, "tls");
  public get tls() {
    return this._tls;
  }
  public putTls(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyMetricsTls) {
    this._tls.internalValue = value;
  }
  public resetTls() {
    this._tls.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get tlsInput() {
    return this._tls.internalValue;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyNetwork {
  /**
  * Configure the port used to access the Envoy Admin interface. If configured to port '0' then the admin interface is disabled. Contour's default is 9001.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#admin_port DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#admin_port}
  */
  readonly adminPort?: number;
  /**
  * XffNumTrustedHops defines the number of additional ingress proxy hops from the right side of the x-forwarded-for HTTP header to trust when determining the origin client’s IP address. See https://www.envoyproxy.io/docs/envoy/v1.17.0/api-v3/extensions/filters/network/http_connection_manager/v3/http_connection_manager.proto?highlight=xff_num_trusted_hops for more information. Contour's default is 0.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#num_trusted_hops DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#num_trusted_hops}
  */
  readonly numTrustedHops?: number;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyNetworkToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyNetwork | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    admin_port: cdktf.numberToTerraform(struct!.adminPort),
    num_trusted_hops: cdktf.numberToTerraform(struct!.numTrustedHops),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyNetworkToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyNetwork | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    admin_port: {
      value: cdktf.numberToHclTerraform(struct!.adminPort),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    num_trusted_hops: {
      value: cdktf.numberToHclTerraform(struct!.numTrustedHops),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyNetworkOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyNetwork | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._adminPort !== undefined) {
      hasAnyValues = true;
      internalValueResult.adminPort = this._adminPort;
    }
    if (this._numTrustedHops !== undefined) {
      hasAnyValues = true;
      internalValueResult.numTrustedHops = this._numTrustedHops;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyNetwork | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._adminPort = undefined;
      this._numTrustedHops = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._adminPort = value.adminPort;
      this._numTrustedHops = value.numTrustedHops;
    }
  }

  // admin_port - computed: false, optional: true, required: false
  private _adminPort?: number; 
  public get adminPort() {
    return this.getNumberAttribute('admin_port');
  }
  public set adminPort(value: number) {
    this._adminPort = value;
  }
  public resetAdminPort() {
    this._adminPort = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get adminPortInput() {
    return this._adminPort;
  }

  // num_trusted_hops - computed: false, optional: true, required: false
  private _numTrustedHops?: number; 
  public get numTrustedHops() {
    return this.getNumberAttribute('num_trusted_hops');
  }
  public set numTrustedHops(value: number) {
    this._numTrustedHops = value;
  }
  public resetNumTrustedHops() {
    this._numTrustedHops = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get numTrustedHopsInput() {
    return this._numTrustedHops;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyService {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#name DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#name}
  */
  readonly name: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#namespace DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#namespace}
  */
  readonly namespace: string;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyServiceToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyService | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    name: cdktf.stringToTerraform(struct!.name),
    namespace: cdktf.stringToTerraform(struct!.namespace),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyServiceToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyService | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    name: {
      value: cdktf.stringToHclTerraform(struct!.name),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    namespace: {
      value: cdktf.stringToHclTerraform(struct!.namespace),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyServiceOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyService | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._name !== undefined) {
      hasAnyValues = true;
      internalValueResult.name = this._name;
    }
    if (this._namespace !== undefined) {
      hasAnyValues = true;
      internalValueResult.namespace = this._namespace;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyService | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._name = undefined;
      this._namespace = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._name = value.name;
      this._namespace = value.namespace;
    }
  }

  // name - computed: false, optional: false, required: true
  private _name?: string; 
  public get name() {
    return this.getStringAttribute('name');
  }
  public set name(value: string) {
    this._name = value;
  }
  // Temporarily expose input value. Use with caution.
  public get nameInput() {
    return this._name;
  }

  // namespace - computed: false, optional: false, required: true
  private _namespace?: string; 
  public get namespace() {
    return this.getStringAttribute('namespace');
  }
  public set namespace(value: string) {
    this._namespace = value;
  }
  // Temporarily expose input value. Use with caution.
  public get namespaceInput() {
    return this._namespace;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyTimeouts {
  /**
  * ConnectTimeout defines how long the proxy should wait when establishing connection to upstream service. If not set, a default value of 2 seconds will be used. See https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/cluster/v3/cluster.proto#envoy-v3-api-field-config-cluster-v3-cluster-connect-timeout for more information.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#connect_timeout DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#connect_timeout}
  */
  readonly connectTimeout?: string;
  /**
  * ConnectionIdleTimeout defines how long the proxy should wait while there are no active requests (for HTTP/1.1) or streams (for HTTP/2) before terminating an HTTP connection. Set to 'infinity' to disable the timeout entirely. See https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/core/v3/protocol.proto#envoy-v3-api-field-config-core-v3-httpprotocoloptions-idle-timeout for more information.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#connection_idle_timeout DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#connection_idle_timeout}
  */
  readonly connectionIdleTimeout?: string;
  /**
  * ConnectionShutdownGracePeriod defines how long the proxy will wait between sending an initial GOAWAY frame and a second, final GOAWAY frame when terminating an HTTP/2 connection. During this grace period, the proxy will continue to respond to new streams. After the final GOAWAY frame has been sent, the proxy will refuse new streams. See https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/filters/network/http_connection_manager/v3/http_connection_manager.proto#envoy-v3-api-field-extensions-filters-network-http-connection-manager-v3-httpconnectionmanager-drain-timeout for more information.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#connection_shutdown_grace_period DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#connection_shutdown_grace_period}
  */
  readonly connectionShutdownGracePeriod?: string;
  /**
  * DelayedCloseTimeout defines how long envoy will wait, once connection close processing has been initiated, for the downstream peer to close the connection before Envoy closes the socket associated with the connection. Setting this timeout to 'infinity' will disable it, equivalent to setting it to '0' in Envoy. Leaving it unset will result in the Envoy default value being used. See https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/filters/network/http_connection_manager/v3/http_connection_manager.proto#envoy-v3-api-field-extensions-filters-network-http-connection-manager-v3-httpconnectionmanager-delayed-close-timeout for more information.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#delayed_close_timeout DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#delayed_close_timeout}
  */
  readonly delayedCloseTimeout?: string;
  /**
  * MaxConnectionDuration defines the maximum period of time after an HTTP connection has been established from the client to the proxy before it is closed by the proxy, regardless of whether there has been activity or not. Omit or set to 'infinity' for no max duration. See https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/core/v3/protocol.proto#envoy-v3-api-field-config-core-v3-httpprotocoloptions-max-connection-duration for more information.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#max_connection_duration DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#max_connection_duration}
  */
  readonly maxConnectionDuration?: string;
  /**
  * RequestTimeout sets the client request timeout globally for Contour. Note that this is a timeout for the entire request, not an idle timeout. Omit or set to 'infinity' to disable the timeout entirely. See https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/filters/network/http_connection_manager/v3/http_connection_manager.proto#envoy-v3-api-field-extensions-filters-network-http-connection-manager-v3-httpconnectionmanager-request-timeout for more information.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#request_timeout DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#request_timeout}
  */
  readonly requestTimeout?: string;
  /**
  * StreamIdleTimeout defines how long the proxy should wait while there is no request activity (for HTTP/1.1) or stream activity (for HTTP/2) before terminating the HTTP request or stream. Set to 'infinity' to disable the timeout entirely. See https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/filters/network/http_connection_manager/v3/http_connection_manager.proto#envoy-v3-api-field-extensions-filters-network-http-connection-manager-v3-httpconnectionmanager-stream-idle-timeout for more information.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#stream_idle_timeout DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#stream_idle_timeout}
  */
  readonly streamIdleTimeout?: string;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyTimeoutsToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyTimeouts | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    connect_timeout: cdktf.stringToTerraform(struct!.connectTimeout),
    connection_idle_timeout: cdktf.stringToTerraform(struct!.connectionIdleTimeout),
    connection_shutdown_grace_period: cdktf.stringToTerraform(struct!.connectionShutdownGracePeriod),
    delayed_close_timeout: cdktf.stringToTerraform(struct!.delayedCloseTimeout),
    max_connection_duration: cdktf.stringToTerraform(struct!.maxConnectionDuration),
    request_timeout: cdktf.stringToTerraform(struct!.requestTimeout),
    stream_idle_timeout: cdktf.stringToTerraform(struct!.streamIdleTimeout),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyTimeoutsToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyTimeouts | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    connect_timeout: {
      value: cdktf.stringToHclTerraform(struct!.connectTimeout),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    connection_idle_timeout: {
      value: cdktf.stringToHclTerraform(struct!.connectionIdleTimeout),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    connection_shutdown_grace_period: {
      value: cdktf.stringToHclTerraform(struct!.connectionShutdownGracePeriod),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    delayed_close_timeout: {
      value: cdktf.stringToHclTerraform(struct!.delayedCloseTimeout),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    max_connection_duration: {
      value: cdktf.stringToHclTerraform(struct!.maxConnectionDuration),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    request_timeout: {
      value: cdktf.stringToHclTerraform(struct!.requestTimeout),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    stream_idle_timeout: {
      value: cdktf.stringToHclTerraform(struct!.streamIdleTimeout),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyTimeoutsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyTimeouts | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._connectTimeout !== undefined) {
      hasAnyValues = true;
      internalValueResult.connectTimeout = this._connectTimeout;
    }
    if (this._connectionIdleTimeout !== undefined) {
      hasAnyValues = true;
      internalValueResult.connectionIdleTimeout = this._connectionIdleTimeout;
    }
    if (this._connectionShutdownGracePeriod !== undefined) {
      hasAnyValues = true;
      internalValueResult.connectionShutdownGracePeriod = this._connectionShutdownGracePeriod;
    }
    if (this._delayedCloseTimeout !== undefined) {
      hasAnyValues = true;
      internalValueResult.delayedCloseTimeout = this._delayedCloseTimeout;
    }
    if (this._maxConnectionDuration !== undefined) {
      hasAnyValues = true;
      internalValueResult.maxConnectionDuration = this._maxConnectionDuration;
    }
    if (this._requestTimeout !== undefined) {
      hasAnyValues = true;
      internalValueResult.requestTimeout = this._requestTimeout;
    }
    if (this._streamIdleTimeout !== undefined) {
      hasAnyValues = true;
      internalValueResult.streamIdleTimeout = this._streamIdleTimeout;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyTimeouts | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._connectTimeout = undefined;
      this._connectionIdleTimeout = undefined;
      this._connectionShutdownGracePeriod = undefined;
      this._delayedCloseTimeout = undefined;
      this._maxConnectionDuration = undefined;
      this._requestTimeout = undefined;
      this._streamIdleTimeout = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._connectTimeout = value.connectTimeout;
      this._connectionIdleTimeout = value.connectionIdleTimeout;
      this._connectionShutdownGracePeriod = value.connectionShutdownGracePeriod;
      this._delayedCloseTimeout = value.delayedCloseTimeout;
      this._maxConnectionDuration = value.maxConnectionDuration;
      this._requestTimeout = value.requestTimeout;
      this._streamIdleTimeout = value.streamIdleTimeout;
    }
  }

  // connect_timeout - computed: false, optional: true, required: false
  private _connectTimeout?: string; 
  public get connectTimeout() {
    return this.getStringAttribute('connect_timeout');
  }
  public set connectTimeout(value: string) {
    this._connectTimeout = value;
  }
  public resetConnectTimeout() {
    this._connectTimeout = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get connectTimeoutInput() {
    return this._connectTimeout;
  }

  // connection_idle_timeout - computed: false, optional: true, required: false
  private _connectionIdleTimeout?: string; 
  public get connectionIdleTimeout() {
    return this.getStringAttribute('connection_idle_timeout');
  }
  public set connectionIdleTimeout(value: string) {
    this._connectionIdleTimeout = value;
  }
  public resetConnectionIdleTimeout() {
    this._connectionIdleTimeout = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get connectionIdleTimeoutInput() {
    return this._connectionIdleTimeout;
  }

  // connection_shutdown_grace_period - computed: false, optional: true, required: false
  private _connectionShutdownGracePeriod?: string; 
  public get connectionShutdownGracePeriod() {
    return this.getStringAttribute('connection_shutdown_grace_period');
  }
  public set connectionShutdownGracePeriod(value: string) {
    this._connectionShutdownGracePeriod = value;
  }
  public resetConnectionShutdownGracePeriod() {
    this._connectionShutdownGracePeriod = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get connectionShutdownGracePeriodInput() {
    return this._connectionShutdownGracePeriod;
  }

  // delayed_close_timeout - computed: false, optional: true, required: false
  private _delayedCloseTimeout?: string; 
  public get delayedCloseTimeout() {
    return this.getStringAttribute('delayed_close_timeout');
  }
  public set delayedCloseTimeout(value: string) {
    this._delayedCloseTimeout = value;
  }
  public resetDelayedCloseTimeout() {
    this._delayedCloseTimeout = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get delayedCloseTimeoutInput() {
    return this._delayedCloseTimeout;
  }

  // max_connection_duration - computed: false, optional: true, required: false
  private _maxConnectionDuration?: string; 
  public get maxConnectionDuration() {
    return this.getStringAttribute('max_connection_duration');
  }
  public set maxConnectionDuration(value: string) {
    this._maxConnectionDuration = value;
  }
  public resetMaxConnectionDuration() {
    this._maxConnectionDuration = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get maxConnectionDurationInput() {
    return this._maxConnectionDuration;
  }

  // request_timeout - computed: false, optional: true, required: false
  private _requestTimeout?: string; 
  public get requestTimeout() {
    return this.getStringAttribute('request_timeout');
  }
  public set requestTimeout(value: string) {
    this._requestTimeout = value;
  }
  public resetRequestTimeout() {
    this._requestTimeout = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get requestTimeoutInput() {
    return this._requestTimeout;
  }

  // stream_idle_timeout - computed: false, optional: true, required: false
  private _streamIdleTimeout?: string; 
  public get streamIdleTimeout() {
    return this.getStringAttribute('stream_idle_timeout');
  }
  public set streamIdleTimeout(value: string) {
    this._streamIdleTimeout = value;
  }
  public resetStreamIdleTimeout() {
    this._streamIdleTimeout = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get streamIdleTimeoutInput() {
    return this._streamIdleTimeout;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoy {
  /**
  * ClientCertificate defines the namespace/name of the Kubernetes secret containing the client certificate and private key to be used when establishing TLS connection to upstream cluster.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#client_certificate DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#client_certificate}
  */
  readonly clientCertificate?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyClientCertificate;
  /**
  * Cluster holds various configurable Envoy cluster values that can be set in the config file.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#cluster DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#cluster}
  */
  readonly cluster?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyCluster;
  /**
  * DefaultHTTPVersions defines the default set of HTTPS versions the proxy should accept. HTTP versions are strings of the form 'HTTP/xx'. Supported versions are 'HTTP/1.1' and 'HTTP/2'. Values: 'HTTP/1.1', 'HTTP/2' (default: both). Other values will produce an error.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#default_http_versions DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#default_http_versions}
  */
  readonly defaultHttpVersions?: string[];
  /**
  * Health defines the endpoint Envoy uses to serve health checks. Contour's default is { address: '0.0.0.0', port: 8002 }.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#health DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#health}
  */
  readonly health?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyHealth;
  /**
  * Defines the HTTP Listener for Envoy. Contour's default is { address: '0.0.0.0', port: 8080, accessLog: '/dev/stdout' }.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#http DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#http}
  */
  readonly http?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyHttp;
  /**
  * Defines the HTTPS Listener for Envoy. Contour's default is { address: '0.0.0.0', port: 8443, accessLog: '/dev/stdout' }.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#https DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#https}
  */
  readonly https?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyHttps;
  /**
  * Listener hold various configurable Envoy listener values.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#listener DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#listener}
  */
  readonly listener?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyListener;
  /**
  * Logging defines how Envoy's logs can be configured.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#logging DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#logging}
  */
  readonly logging?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyLogging;
  /**
  * Metrics defines the endpoint Envoy uses to serve metrics. Contour's default is { address: '0.0.0.0', port: 8002 }.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#metrics DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#metrics}
  */
  readonly metrics?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyMetrics;
  /**
  * Network holds various configurable Envoy network values.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#network DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#network}
  */
  readonly network?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyNetwork;
  /**
  * Service holds Envoy service parameters for setting Ingress status. Contour's default is { namespace: 'projectcontour', name: 'envoy' }.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#service DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#service}
  */
  readonly service?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyService;
  /**
  * Timeouts holds various configurable timeouts that can be set in the config file.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#timeouts DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#timeouts}
  */
  readonly timeouts?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyTimeouts;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoy | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    client_certificate: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyClientCertificateToTerraform(struct!.clientCertificate),
    cluster: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyClusterToTerraform(struct!.cluster),
    default_http_versions: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.defaultHttpVersions),
    health: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyHealthToTerraform(struct!.health),
    http: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyHttpToTerraform(struct!.http),
    https: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyHttpsToTerraform(struct!.https),
    listener: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyListenerToTerraform(struct!.listener),
    logging: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyLoggingToTerraform(struct!.logging),
    metrics: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyMetricsToTerraform(struct!.metrics),
    network: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyNetworkToTerraform(struct!.network),
    service: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyServiceToTerraform(struct!.service),
    timeouts: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyTimeoutsToTerraform(struct!.timeouts),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoy | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    client_certificate: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyClientCertificateToHclTerraform(struct!.clientCertificate),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyClientCertificate",
    },
    cluster: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyClusterToHclTerraform(struct!.cluster),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyCluster",
    },
    default_http_versions: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.defaultHttpVersions),
      isBlock: false,
      type: "list",
      storageClassType: "stringList",
    },
    health: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyHealthToHclTerraform(struct!.health),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyHealth",
    },
    http: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyHttpToHclTerraform(struct!.http),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyHttp",
    },
    https: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyHttpsToHclTerraform(struct!.https),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyHttps",
    },
    listener: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyListenerToHclTerraform(struct!.listener),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyListener",
    },
    logging: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyLoggingToHclTerraform(struct!.logging),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyLogging",
    },
    metrics: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyMetricsToHclTerraform(struct!.metrics),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyMetrics",
    },
    network: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyNetworkToHclTerraform(struct!.network),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyNetwork",
    },
    service: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyServiceToHclTerraform(struct!.service),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyService",
    },
    timeouts: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyTimeoutsToHclTerraform(struct!.timeouts),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyTimeouts",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoy | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._clientCertificate?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.clientCertificate = this._clientCertificate?.internalValue;
    }
    if (this._cluster?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.cluster = this._cluster?.internalValue;
    }
    if (this._defaultHttpVersions !== undefined) {
      hasAnyValues = true;
      internalValueResult.defaultHttpVersions = this._defaultHttpVersions;
    }
    if (this._health?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.health = this._health?.internalValue;
    }
    if (this._http?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.http = this._http?.internalValue;
    }
    if (this._https?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.https = this._https?.internalValue;
    }
    if (this._listener?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.listener = this._listener?.internalValue;
    }
    if (this._logging?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.logging = this._logging?.internalValue;
    }
    if (this._metrics?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.metrics = this._metrics?.internalValue;
    }
    if (this._network?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.network = this._network?.internalValue;
    }
    if (this._service?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.service = this._service?.internalValue;
    }
    if (this._timeouts?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.timeouts = this._timeouts?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoy | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._clientCertificate.internalValue = undefined;
      this._cluster.internalValue = undefined;
      this._defaultHttpVersions = undefined;
      this._health.internalValue = undefined;
      this._http.internalValue = undefined;
      this._https.internalValue = undefined;
      this._listener.internalValue = undefined;
      this._logging.internalValue = undefined;
      this._metrics.internalValue = undefined;
      this._network.internalValue = undefined;
      this._service.internalValue = undefined;
      this._timeouts.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._clientCertificate.internalValue = value.clientCertificate;
      this._cluster.internalValue = value.cluster;
      this._defaultHttpVersions = value.defaultHttpVersions;
      this._health.internalValue = value.health;
      this._http.internalValue = value.http;
      this._https.internalValue = value.https;
      this._listener.internalValue = value.listener;
      this._logging.internalValue = value.logging;
      this._metrics.internalValue = value.metrics;
      this._network.internalValue = value.network;
      this._service.internalValue = value.service;
      this._timeouts.internalValue = value.timeouts;
    }
  }

  // client_certificate - computed: false, optional: true, required: false
  private _clientCertificate = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyClientCertificateOutputReference(this, "client_certificate");
  public get clientCertificate() {
    return this._clientCertificate;
  }
  public putClientCertificate(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyClientCertificate) {
    this._clientCertificate.internalValue = value;
  }
  public resetClientCertificate() {
    this._clientCertificate.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get clientCertificateInput() {
    return this._clientCertificate.internalValue;
  }

  // cluster - computed: false, optional: true, required: false
  private _cluster = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyClusterOutputReference(this, "cluster");
  public get cluster() {
    return this._cluster;
  }
  public putCluster(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyCluster) {
    this._cluster.internalValue = value;
  }
  public resetCluster() {
    this._cluster.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get clusterInput() {
    return this._cluster.internalValue;
  }

  // default_http_versions - computed: false, optional: true, required: false
  private _defaultHttpVersions?: string[]; 
  public get defaultHttpVersions() {
    return this.getListAttribute('default_http_versions');
  }
  public set defaultHttpVersions(value: string[]) {
    this._defaultHttpVersions = value;
  }
  public resetDefaultHttpVersions() {
    this._defaultHttpVersions = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get defaultHttpVersionsInput() {
    return this._defaultHttpVersions;
  }

  // health - computed: false, optional: true, required: false
  private _health = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyHealthOutputReference(this, "health");
  public get health() {
    return this._health;
  }
  public putHealth(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyHealth) {
    this._health.internalValue = value;
  }
  public resetHealth() {
    this._health.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get healthInput() {
    return this._health.internalValue;
  }

  // http - computed: false, optional: true, required: false
  private _http = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyHttpOutputReference(this, "http");
  public get http() {
    return this._http;
  }
  public putHttp(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyHttp) {
    this._http.internalValue = value;
  }
  public resetHttp() {
    this._http.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get httpInput() {
    return this._http.internalValue;
  }

  // https - computed: false, optional: true, required: false
  private _https = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyHttpsOutputReference(this, "https");
  public get https() {
    return this._https;
  }
  public putHttps(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyHttps) {
    this._https.internalValue = value;
  }
  public resetHttps() {
    this._https.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get httpsInput() {
    return this._https.internalValue;
  }

  // listener - computed: false, optional: true, required: false
  private _listener = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyListenerOutputReference(this, "listener");
  public get listener() {
    return this._listener;
  }
  public putListener(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyListener) {
    this._listener.internalValue = value;
  }
  public resetListener() {
    this._listener.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get listenerInput() {
    return this._listener.internalValue;
  }

  // logging - computed: false, optional: true, required: false
  private _logging = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyLoggingOutputReference(this, "logging");
  public get logging() {
    return this._logging;
  }
  public putLogging(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyLogging) {
    this._logging.internalValue = value;
  }
  public resetLogging() {
    this._logging.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get loggingInput() {
    return this._logging.internalValue;
  }

  // metrics - computed: false, optional: true, required: false
  private _metrics = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyMetricsOutputReference(this, "metrics");
  public get metrics() {
    return this._metrics;
  }
  public putMetrics(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyMetrics) {
    this._metrics.internalValue = value;
  }
  public resetMetrics() {
    this._metrics.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get metricsInput() {
    return this._metrics.internalValue;
  }

  // network - computed: false, optional: true, required: false
  private _network = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyNetworkOutputReference(this, "network");
  public get network() {
    return this._network;
  }
  public putNetwork(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyNetwork) {
    this._network.internalValue = value;
  }
  public resetNetwork() {
    this._network.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get networkInput() {
    return this._network.internalValue;
  }

  // service - computed: false, optional: true, required: false
  private _service = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyServiceOutputReference(this, "service");
  public get service() {
    return this._service;
  }
  public putService(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyService) {
    this._service.internalValue = value;
  }
  public resetService() {
    this._service.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get serviceInput() {
    return this._service.internalValue;
  }

  // timeouts - computed: false, optional: true, required: false
  private _timeouts = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyTimeoutsOutputReference(this, "timeouts");
  public get timeouts() {
    return this._timeouts;
  }
  public putTimeouts(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyTimeouts) {
    this._timeouts.internalValue = value;
  }
  public resetTimeouts() {
    this._timeouts.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get timeoutsInput() {
    return this._timeouts.internalValue;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsGatewayGatewayRef {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#name DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#name}
  */
  readonly name: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#namespace DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#namespace}
  */
  readonly namespace: string;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsGatewayGatewayRefToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsGatewayGatewayRef | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    name: cdktf.stringToTerraform(struct!.name),
    namespace: cdktf.stringToTerraform(struct!.namespace),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsGatewayGatewayRefToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsGatewayGatewayRef | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    name: {
      value: cdktf.stringToHclTerraform(struct!.name),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    namespace: {
      value: cdktf.stringToHclTerraform(struct!.namespace),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsGatewayGatewayRefOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsGatewayGatewayRef | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._name !== undefined) {
      hasAnyValues = true;
      internalValueResult.name = this._name;
    }
    if (this._namespace !== undefined) {
      hasAnyValues = true;
      internalValueResult.namespace = this._namespace;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsGatewayGatewayRef | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._name = undefined;
      this._namespace = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._name = value.name;
      this._namespace = value.namespace;
    }
  }

  // name - computed: false, optional: false, required: true
  private _name?: string; 
  public get name() {
    return this.getStringAttribute('name');
  }
  public set name(value: string) {
    this._name = value;
  }
  // Temporarily expose input value. Use with caution.
  public get nameInput() {
    return this._name;
  }

  // namespace - computed: false, optional: false, required: true
  private _namespace?: string; 
  public get namespace() {
    return this.getStringAttribute('namespace');
  }
  public set namespace(value: string) {
    this._namespace = value;
  }
  // Temporarily expose input value. Use with caution.
  public get namespaceInput() {
    return this._namespace;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsGateway {
  /**
  * GatewayRef defines the specific Gateway that this Contour instance corresponds to.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#gateway_ref DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#gateway_ref}
  */
  readonly gatewayRef: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsGatewayGatewayRef;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsGatewayToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsGateway | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    gateway_ref: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsGatewayGatewayRefToTerraform(struct!.gatewayRef),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsGatewayToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsGateway | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    gateway_ref: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsGatewayGatewayRefToHclTerraform(struct!.gatewayRef),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsGatewayGatewayRef",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsGatewayOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsGateway | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._gatewayRef?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.gatewayRef = this._gatewayRef?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsGateway | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._gatewayRef.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._gatewayRef.internalValue = value.gatewayRef;
    }
  }

  // gateway_ref - computed: false, optional: false, required: true
  private _gatewayRef = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsGatewayGatewayRefOutputReference(this, "gateway_ref");
  public get gatewayRef() {
    return this._gatewayRef;
  }
  public putGatewayRef(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsGatewayGatewayRef) {
    this._gatewayRef.internalValue = value;
  }
  // Temporarily expose input value. Use with caution.
  public get gatewayRefInput() {
    return this._gatewayRef.internalValue;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsGlobalExtAuthAuthPolicy {
  /**
  * Context is a set of key/value pairs that are sent to the authentication server in the check request. If a context is provided at an enclosing scope, the entries are merged such that the inner scope overrides matching keys from the outer scope.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#context DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#context}
  */
  readonly context?: { [key: string]: string };
  /**
  * When true, this field disables client request authentication for the scope of the policy.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#disabled DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#disabled}
  */
  readonly disabled?: boolean | cdktf.IResolvable;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsGlobalExtAuthAuthPolicyToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsGlobalExtAuthAuthPolicy | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    context: cdktf.hashMapper(cdktf.stringToTerraform)(struct!.context),
    disabled: cdktf.booleanToTerraform(struct!.disabled),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsGlobalExtAuthAuthPolicyToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsGlobalExtAuthAuthPolicy | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    context: {
      value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct!.context),
      isBlock: false,
      type: "map",
      storageClassType: "stringMap",
    },
    disabled: {
      value: cdktf.booleanToHclTerraform(struct!.disabled),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsGlobalExtAuthAuthPolicyOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsGlobalExtAuthAuthPolicy | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._context !== undefined) {
      hasAnyValues = true;
      internalValueResult.context = this._context;
    }
    if (this._disabled !== undefined) {
      hasAnyValues = true;
      internalValueResult.disabled = this._disabled;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsGlobalExtAuthAuthPolicy | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._context = undefined;
      this._disabled = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._context = value.context;
      this._disabled = value.disabled;
    }
  }

  // context - computed: false, optional: true, required: false
  private _context?: { [key: string]: string }; 
  public get context() {
    return this.getStringMapAttribute('context');
  }
  public set context(value: { [key: string]: string }) {
    this._context = value;
  }
  public resetContext() {
    this._context = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get contextInput() {
    return this._context;
  }

  // disabled - computed: false, optional: true, required: false
  private _disabled?: boolean | cdktf.IResolvable; 
  public get disabled() {
    return this.getBooleanAttribute('disabled');
  }
  public set disabled(value: boolean | cdktf.IResolvable) {
    this._disabled = value;
  }
  public resetDisabled() {
    this._disabled = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get disabledInput() {
    return this._disabled;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsGlobalExtAuthExtensionRef {
  /**
  * API version of the referent. If this field is not specified, the default 'projectcontour.io/v1alpha1' will be used
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#api_version DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#api_version}
  */
  readonly apiVersion?: string;
  /**
  * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#name DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#name}
  */
  readonly name?: string;
  /**
  * Namespace of the referent. If this field is not specifies, the namespace of the resource that targets the referent will be used. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#namespace DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#namespace}
  */
  readonly namespace?: string;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsGlobalExtAuthExtensionRefToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsGlobalExtAuthExtensionRef | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    api_version: cdktf.stringToTerraform(struct!.apiVersion),
    name: cdktf.stringToTerraform(struct!.name),
    namespace: cdktf.stringToTerraform(struct!.namespace),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsGlobalExtAuthExtensionRefToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsGlobalExtAuthExtensionRef | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    api_version: {
      value: cdktf.stringToHclTerraform(struct!.apiVersion),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    name: {
      value: cdktf.stringToHclTerraform(struct!.name),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    namespace: {
      value: cdktf.stringToHclTerraform(struct!.namespace),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsGlobalExtAuthExtensionRefOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsGlobalExtAuthExtensionRef | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._apiVersion !== undefined) {
      hasAnyValues = true;
      internalValueResult.apiVersion = this._apiVersion;
    }
    if (this._name !== undefined) {
      hasAnyValues = true;
      internalValueResult.name = this._name;
    }
    if (this._namespace !== undefined) {
      hasAnyValues = true;
      internalValueResult.namespace = this._namespace;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsGlobalExtAuthExtensionRef | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._apiVersion = undefined;
      this._name = undefined;
      this._namespace = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._apiVersion = value.apiVersion;
      this._name = value.name;
      this._namespace = value.namespace;
    }
  }

  // api_version - computed: false, optional: true, required: false
  private _apiVersion?: string; 
  public get apiVersion() {
    return this.getStringAttribute('api_version');
  }
  public set apiVersion(value: string) {
    this._apiVersion = value;
  }
  public resetApiVersion() {
    this._apiVersion = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get apiVersionInput() {
    return this._apiVersion;
  }

  // name - computed: false, optional: true, required: false
  private _name?: string; 
  public get name() {
    return this.getStringAttribute('name');
  }
  public set name(value: string) {
    this._name = value;
  }
  public resetName() {
    this._name = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get nameInput() {
    return this._name;
  }

  // namespace - computed: false, optional: true, required: false
  private _namespace?: string; 
  public get namespace() {
    return this.getStringAttribute('namespace');
  }
  public set namespace(value: string) {
    this._namespace = value;
  }
  public resetNamespace() {
    this._namespace = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get namespaceInput() {
    return this._namespace;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsGlobalExtAuthWithRequestBody {
  /**
  * If AllowPartialMessage is true, then Envoy will buffer the body until MaxRequestBytes are reached.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#allow_partial_message DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#allow_partial_message}
  */
  readonly allowPartialMessage?: boolean | cdktf.IResolvable;
  /**
  * MaxRequestBytes sets the maximum size of message body ExtAuthz filter will hold in-memory.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#max_request_bytes DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#max_request_bytes}
  */
  readonly maxRequestBytes?: number;
  /**
  * If PackAsBytes is true, the body sent to Authorization Server is in raw bytes.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#pack_as_bytes DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#pack_as_bytes}
  */
  readonly packAsBytes?: boolean | cdktf.IResolvable;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsGlobalExtAuthWithRequestBodyToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsGlobalExtAuthWithRequestBody | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    allow_partial_message: cdktf.booleanToTerraform(struct!.allowPartialMessage),
    max_request_bytes: cdktf.numberToTerraform(struct!.maxRequestBytes),
    pack_as_bytes: cdktf.booleanToTerraform(struct!.packAsBytes),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsGlobalExtAuthWithRequestBodyToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsGlobalExtAuthWithRequestBody | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    allow_partial_message: {
      value: cdktf.booleanToHclTerraform(struct!.allowPartialMessage),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    max_request_bytes: {
      value: cdktf.numberToHclTerraform(struct!.maxRequestBytes),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    pack_as_bytes: {
      value: cdktf.booleanToHclTerraform(struct!.packAsBytes),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsGlobalExtAuthWithRequestBodyOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsGlobalExtAuthWithRequestBody | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._allowPartialMessage !== undefined) {
      hasAnyValues = true;
      internalValueResult.allowPartialMessage = this._allowPartialMessage;
    }
    if (this._maxRequestBytes !== undefined) {
      hasAnyValues = true;
      internalValueResult.maxRequestBytes = this._maxRequestBytes;
    }
    if (this._packAsBytes !== undefined) {
      hasAnyValues = true;
      internalValueResult.packAsBytes = this._packAsBytes;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsGlobalExtAuthWithRequestBody | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._allowPartialMessage = undefined;
      this._maxRequestBytes = undefined;
      this._packAsBytes = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._allowPartialMessage = value.allowPartialMessage;
      this._maxRequestBytes = value.maxRequestBytes;
      this._packAsBytes = value.packAsBytes;
    }
  }

  // allow_partial_message - computed: false, optional: true, required: false
  private _allowPartialMessage?: boolean | cdktf.IResolvable; 
  public get allowPartialMessage() {
    return this.getBooleanAttribute('allow_partial_message');
  }
  public set allowPartialMessage(value: boolean | cdktf.IResolvable) {
    this._allowPartialMessage = value;
  }
  public resetAllowPartialMessage() {
    this._allowPartialMessage = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get allowPartialMessageInput() {
    return this._allowPartialMessage;
  }

  // max_request_bytes - computed: false, optional: true, required: false
  private _maxRequestBytes?: number; 
  public get maxRequestBytes() {
    return this.getNumberAttribute('max_request_bytes');
  }
  public set maxRequestBytes(value: number) {
    this._maxRequestBytes = value;
  }
  public resetMaxRequestBytes() {
    this._maxRequestBytes = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get maxRequestBytesInput() {
    return this._maxRequestBytes;
  }

  // pack_as_bytes - computed: false, optional: true, required: false
  private _packAsBytes?: boolean | cdktf.IResolvable; 
  public get packAsBytes() {
    return this.getBooleanAttribute('pack_as_bytes');
  }
  public set packAsBytes(value: boolean | cdktf.IResolvable) {
    this._packAsBytes = value;
  }
  public resetPackAsBytes() {
    this._packAsBytes = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get packAsBytesInput() {
    return this._packAsBytes;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsGlobalExtAuth {
  /**
  * AuthPolicy sets a default authorization policy for client requests. This policy will be used unless overridden by individual routes.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#auth_policy DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#auth_policy}
  */
  readonly authPolicy?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsGlobalExtAuthAuthPolicy;
  /**
  * ExtensionServiceRef specifies the extension resource that will authorize client requests.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#extension_ref DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#extension_ref}
  */
  readonly extensionRef?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsGlobalExtAuthExtensionRef;
  /**
  * If FailOpen is true, the client request is forwarded to the upstream service even if the authorization server fails to respond. This field should not be set in most cases. It is intended for use only while migrating applications from internal authorization to Contour external authorization.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#fail_open DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#fail_open}
  */
  readonly failOpen?: boolean | cdktf.IResolvable;
  /**
  * ResponseTimeout configures maximum time to wait for a check response from the authorization server. Timeout durations are expressed in the Go [Duration format](https://godoc.org/time#ParseDuration). Valid time units are 'ns', 'us' (or 'µs'), 'ms', 's', 'm', 'h'. The string 'infinity' is also a valid input and specifies no timeout.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#response_timeout DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#response_timeout}
  */
  readonly responseTimeout?: string;
  /**
  * WithRequestBody specifies configuration for sending the client request's body to authorization server.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#with_request_body DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#with_request_body}
  */
  readonly withRequestBody?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsGlobalExtAuthWithRequestBody;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsGlobalExtAuthToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsGlobalExtAuth | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    auth_policy: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsGlobalExtAuthAuthPolicyToTerraform(struct!.authPolicy),
    extension_ref: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsGlobalExtAuthExtensionRefToTerraform(struct!.extensionRef),
    fail_open: cdktf.booleanToTerraform(struct!.failOpen),
    response_timeout: cdktf.stringToTerraform(struct!.responseTimeout),
    with_request_body: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsGlobalExtAuthWithRequestBodyToTerraform(struct!.withRequestBody),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsGlobalExtAuthToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsGlobalExtAuth | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    auth_policy: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsGlobalExtAuthAuthPolicyToHclTerraform(struct!.authPolicy),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsGlobalExtAuthAuthPolicy",
    },
    extension_ref: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsGlobalExtAuthExtensionRefToHclTerraform(struct!.extensionRef),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsGlobalExtAuthExtensionRef",
    },
    fail_open: {
      value: cdktf.booleanToHclTerraform(struct!.failOpen),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    response_timeout: {
      value: cdktf.stringToHclTerraform(struct!.responseTimeout),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    with_request_body: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsGlobalExtAuthWithRequestBodyToHclTerraform(struct!.withRequestBody),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsGlobalExtAuthWithRequestBody",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsGlobalExtAuthOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsGlobalExtAuth | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._authPolicy?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.authPolicy = this._authPolicy?.internalValue;
    }
    if (this._extensionRef?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.extensionRef = this._extensionRef?.internalValue;
    }
    if (this._failOpen !== undefined) {
      hasAnyValues = true;
      internalValueResult.failOpen = this._failOpen;
    }
    if (this._responseTimeout !== undefined) {
      hasAnyValues = true;
      internalValueResult.responseTimeout = this._responseTimeout;
    }
    if (this._withRequestBody?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.withRequestBody = this._withRequestBody?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsGlobalExtAuth | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._authPolicy.internalValue = undefined;
      this._extensionRef.internalValue = undefined;
      this._failOpen = undefined;
      this._responseTimeout = undefined;
      this._withRequestBody.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._authPolicy.internalValue = value.authPolicy;
      this._extensionRef.internalValue = value.extensionRef;
      this._failOpen = value.failOpen;
      this._responseTimeout = value.responseTimeout;
      this._withRequestBody.internalValue = value.withRequestBody;
    }
  }

  // auth_policy - computed: false, optional: true, required: false
  private _authPolicy = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsGlobalExtAuthAuthPolicyOutputReference(this, "auth_policy");
  public get authPolicy() {
    return this._authPolicy;
  }
  public putAuthPolicy(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsGlobalExtAuthAuthPolicy) {
    this._authPolicy.internalValue = value;
  }
  public resetAuthPolicy() {
    this._authPolicy.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get authPolicyInput() {
    return this._authPolicy.internalValue;
  }

  // extension_ref - computed: false, optional: true, required: false
  private _extensionRef = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsGlobalExtAuthExtensionRefOutputReference(this, "extension_ref");
  public get extensionRef() {
    return this._extensionRef;
  }
  public putExtensionRef(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsGlobalExtAuthExtensionRef) {
    this._extensionRef.internalValue = value;
  }
  public resetExtensionRef() {
    this._extensionRef.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get extensionRefInput() {
    return this._extensionRef.internalValue;
  }

  // fail_open - computed: false, optional: true, required: false
  private _failOpen?: boolean | cdktf.IResolvable; 
  public get failOpen() {
    return this.getBooleanAttribute('fail_open');
  }
  public set failOpen(value: boolean | cdktf.IResolvable) {
    this._failOpen = value;
  }
  public resetFailOpen() {
    this._failOpen = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get failOpenInput() {
    return this._failOpen;
  }

  // response_timeout - computed: false, optional: true, required: false
  private _responseTimeout?: string; 
  public get responseTimeout() {
    return this.getStringAttribute('response_timeout');
  }
  public set responseTimeout(value: string) {
    this._responseTimeout = value;
  }
  public resetResponseTimeout() {
    this._responseTimeout = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get responseTimeoutInput() {
    return this._responseTimeout;
  }

  // with_request_body - computed: false, optional: true, required: false
  private _withRequestBody = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsGlobalExtAuthWithRequestBodyOutputReference(this, "with_request_body");
  public get withRequestBody() {
    return this._withRequestBody;
  }
  public putWithRequestBody(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsGlobalExtAuthWithRequestBody) {
    this._withRequestBody.internalValue = value;
  }
  public resetWithRequestBody() {
    this._withRequestBody.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get withRequestBodyInput() {
    return this._withRequestBody.internalValue;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsHealth {
  /**
  * Defines the health address interface.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#address DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#address}
  */
  readonly address?: string;
  /**
  * Defines the health port.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#port DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#port}
  */
  readonly port?: number;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsHealthToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsHealth | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    address: cdktf.stringToTerraform(struct!.address),
    port: cdktf.numberToTerraform(struct!.port),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsHealthToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsHealth | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    address: {
      value: cdktf.stringToHclTerraform(struct!.address),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    port: {
      value: cdktf.numberToHclTerraform(struct!.port),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsHealthOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsHealth | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._address !== undefined) {
      hasAnyValues = true;
      internalValueResult.address = this._address;
    }
    if (this._port !== undefined) {
      hasAnyValues = true;
      internalValueResult.port = this._port;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsHealth | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._address = undefined;
      this._port = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._address = value.address;
      this._port = value.port;
    }
  }

  // address - computed: false, optional: true, required: false
  private _address?: string; 
  public get address() {
    return this.getStringAttribute('address');
  }
  public set address(value: string) {
    this._address = value;
  }
  public resetAddress() {
    this._address = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get addressInput() {
    return this._address;
  }

  // port - computed: false, optional: true, required: false
  private _port?: number; 
  public get port() {
    return this.getNumberAttribute('port');
  }
  public set port(value: number) {
    this._port = value;
  }
  public resetPort() {
    this._port = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get portInput() {
    return this._port;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsHttpproxyFallbackCertificate {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#name DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#name}
  */
  readonly name: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#namespace DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#namespace}
  */
  readonly namespace: string;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsHttpproxyFallbackCertificateToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsHttpproxyFallbackCertificate | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    name: cdktf.stringToTerraform(struct!.name),
    namespace: cdktf.stringToTerraform(struct!.namespace),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsHttpproxyFallbackCertificateToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsHttpproxyFallbackCertificate | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    name: {
      value: cdktf.stringToHclTerraform(struct!.name),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    namespace: {
      value: cdktf.stringToHclTerraform(struct!.namespace),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsHttpproxyFallbackCertificateOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsHttpproxyFallbackCertificate | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._name !== undefined) {
      hasAnyValues = true;
      internalValueResult.name = this._name;
    }
    if (this._namespace !== undefined) {
      hasAnyValues = true;
      internalValueResult.namespace = this._namespace;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsHttpproxyFallbackCertificate | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._name = undefined;
      this._namespace = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._name = value.name;
      this._namespace = value.namespace;
    }
  }

  // name - computed: false, optional: false, required: true
  private _name?: string; 
  public get name() {
    return this.getStringAttribute('name');
  }
  public set name(value: string) {
    this._name = value;
  }
  // Temporarily expose input value. Use with caution.
  public get nameInput() {
    return this._name;
  }

  // namespace - computed: false, optional: false, required: true
  private _namespace?: string; 
  public get namespace() {
    return this.getStringAttribute('namespace');
  }
  public set namespace(value: string) {
    this._namespace = value;
  }
  // Temporarily expose input value. Use with caution.
  public get namespaceInput() {
    return this._namespace;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsHttpproxy {
  /**
  * DisablePermitInsecure disables the use of the permitInsecure field in HTTPProxy. Contour's default is false.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#disable_permit_insecure DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#disable_permit_insecure}
  */
  readonly disablePermitInsecure?: boolean | cdktf.IResolvable;
  /**
  * FallbackCertificate defines the namespace/name of the Kubernetes secret to use as fallback when a non-SNI request is received.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#fallback_certificate DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#fallback_certificate}
  */
  readonly fallbackCertificate?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsHttpproxyFallbackCertificate;
  /**
  * Restrict Contour to searching these namespaces for root ingress routes.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#root_namespaces DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#root_namespaces}
  */
  readonly rootNamespaces?: string[];
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsHttpproxyToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsHttpproxy | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    disable_permit_insecure: cdktf.booleanToTerraform(struct!.disablePermitInsecure),
    fallback_certificate: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsHttpproxyFallbackCertificateToTerraform(struct!.fallbackCertificate),
    root_namespaces: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.rootNamespaces),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsHttpproxyToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsHttpproxy | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    disable_permit_insecure: {
      value: cdktf.booleanToHclTerraform(struct!.disablePermitInsecure),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    fallback_certificate: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsHttpproxyFallbackCertificateToHclTerraform(struct!.fallbackCertificate),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsHttpproxyFallbackCertificate",
    },
    root_namespaces: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.rootNamespaces),
      isBlock: false,
      type: "list",
      storageClassType: "stringList",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsHttpproxyOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsHttpproxy | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._disablePermitInsecure !== undefined) {
      hasAnyValues = true;
      internalValueResult.disablePermitInsecure = this._disablePermitInsecure;
    }
    if (this._fallbackCertificate?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.fallbackCertificate = this._fallbackCertificate?.internalValue;
    }
    if (this._rootNamespaces !== undefined) {
      hasAnyValues = true;
      internalValueResult.rootNamespaces = this._rootNamespaces;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsHttpproxy | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._disablePermitInsecure = undefined;
      this._fallbackCertificate.internalValue = undefined;
      this._rootNamespaces = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._disablePermitInsecure = value.disablePermitInsecure;
      this._fallbackCertificate.internalValue = value.fallbackCertificate;
      this._rootNamespaces = value.rootNamespaces;
    }
  }

  // disable_permit_insecure - computed: false, optional: true, required: false
  private _disablePermitInsecure?: boolean | cdktf.IResolvable; 
  public get disablePermitInsecure() {
    return this.getBooleanAttribute('disable_permit_insecure');
  }
  public set disablePermitInsecure(value: boolean | cdktf.IResolvable) {
    this._disablePermitInsecure = value;
  }
  public resetDisablePermitInsecure() {
    this._disablePermitInsecure = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get disablePermitInsecureInput() {
    return this._disablePermitInsecure;
  }

  // fallback_certificate - computed: false, optional: true, required: false
  private _fallbackCertificate = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsHttpproxyFallbackCertificateOutputReference(this, "fallback_certificate");
  public get fallbackCertificate() {
    return this._fallbackCertificate;
  }
  public putFallbackCertificate(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsHttpproxyFallbackCertificate) {
    this._fallbackCertificate.internalValue = value;
  }
  public resetFallbackCertificate() {
    this._fallbackCertificate.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get fallbackCertificateInput() {
    return this._fallbackCertificate.internalValue;
  }

  // root_namespaces - computed: false, optional: true, required: false
  private _rootNamespaces?: string[]; 
  public get rootNamespaces() {
    return this.getListAttribute('root_namespaces');
  }
  public set rootNamespaces(value: string[]) {
    this._rootNamespaces = value;
  }
  public resetRootNamespaces() {
    this._rootNamespaces = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get rootNamespacesInput() {
    return this._rootNamespaces;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsIngress {
  /**
  * Ingress Class Names Contour should use.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#class_names DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#class_names}
  */
  readonly classNames?: string[];
  /**
  * Address to set in Ingress object status.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#status_address DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#status_address}
  */
  readonly statusAddress?: string;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsIngressToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsIngress | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    class_names: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.classNames),
    status_address: cdktf.stringToTerraform(struct!.statusAddress),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsIngressToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsIngress | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    class_names: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.classNames),
      isBlock: false,
      type: "list",
      storageClassType: "stringList",
    },
    status_address: {
      value: cdktf.stringToHclTerraform(struct!.statusAddress),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsIngressOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsIngress | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._classNames !== undefined) {
      hasAnyValues = true;
      internalValueResult.classNames = this._classNames;
    }
    if (this._statusAddress !== undefined) {
      hasAnyValues = true;
      internalValueResult.statusAddress = this._statusAddress;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsIngress | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._classNames = undefined;
      this._statusAddress = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._classNames = value.classNames;
      this._statusAddress = value.statusAddress;
    }
  }

  // class_names - computed: false, optional: true, required: false
  private _classNames?: string[]; 
  public get classNames() {
    return this.getListAttribute('class_names');
  }
  public set classNames(value: string[]) {
    this._classNames = value;
  }
  public resetClassNames() {
    this._classNames = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get classNamesInput() {
    return this._classNames;
  }

  // status_address - computed: false, optional: true, required: false
  private _statusAddress?: string; 
  public get statusAddress() {
    return this.getStringAttribute('status_address');
  }
  public set statusAddress(value: string) {
    this._statusAddress = value;
  }
  public resetStatusAddress() {
    this._statusAddress = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get statusAddressInput() {
    return this._statusAddress;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsMetricsTls {
  /**
  * CA filename.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#ca_file DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#ca_file}
  */
  readonly caFile?: string;
  /**
  * Client certificate filename.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#cert_file DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#cert_file}
  */
  readonly certFile?: string;
  /**
  * Client key filename.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#key_file DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#key_file}
  */
  readonly keyFile?: string;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsMetricsTlsToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsMetricsTls | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    ca_file: cdktf.stringToTerraform(struct!.caFile),
    cert_file: cdktf.stringToTerraform(struct!.certFile),
    key_file: cdktf.stringToTerraform(struct!.keyFile),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsMetricsTlsToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsMetricsTls | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    ca_file: {
      value: cdktf.stringToHclTerraform(struct!.caFile),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    cert_file: {
      value: cdktf.stringToHclTerraform(struct!.certFile),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    key_file: {
      value: cdktf.stringToHclTerraform(struct!.keyFile),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsMetricsTlsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsMetricsTls | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._caFile !== undefined) {
      hasAnyValues = true;
      internalValueResult.caFile = this._caFile;
    }
    if (this._certFile !== undefined) {
      hasAnyValues = true;
      internalValueResult.certFile = this._certFile;
    }
    if (this._keyFile !== undefined) {
      hasAnyValues = true;
      internalValueResult.keyFile = this._keyFile;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsMetricsTls | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._caFile = undefined;
      this._certFile = undefined;
      this._keyFile = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._caFile = value.caFile;
      this._certFile = value.certFile;
      this._keyFile = value.keyFile;
    }
  }

  // ca_file - computed: false, optional: true, required: false
  private _caFile?: string; 
  public get caFile() {
    return this.getStringAttribute('ca_file');
  }
  public set caFile(value: string) {
    this._caFile = value;
  }
  public resetCaFile() {
    this._caFile = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get caFileInput() {
    return this._caFile;
  }

  // cert_file - computed: false, optional: true, required: false
  private _certFile?: string; 
  public get certFile() {
    return this.getStringAttribute('cert_file');
  }
  public set certFile(value: string) {
    this._certFile = value;
  }
  public resetCertFile() {
    this._certFile = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get certFileInput() {
    return this._certFile;
  }

  // key_file - computed: false, optional: true, required: false
  private _keyFile?: string; 
  public get keyFile() {
    return this.getStringAttribute('key_file');
  }
  public set keyFile(value: string) {
    this._keyFile = value;
  }
  public resetKeyFile() {
    this._keyFile = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get keyFileInput() {
    return this._keyFile;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsMetrics {
  /**
  * Defines the metrics address interface.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#address DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#address}
  */
  readonly address?: string;
  /**
  * Defines the metrics port.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#port DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#port}
  */
  readonly port?: number;
  /**
  * TLS holds TLS file config details. Metrics and health endpoints cannot have same port number when metrics is served over HTTPS.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#tls DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#tls}
  */
  readonly tls?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsMetricsTls;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsMetricsToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsMetrics | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    address: cdktf.stringToTerraform(struct!.address),
    port: cdktf.numberToTerraform(struct!.port),
    tls: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsMetricsTlsToTerraform(struct!.tls),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsMetricsToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsMetrics | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    address: {
      value: cdktf.stringToHclTerraform(struct!.address),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    port: {
      value: cdktf.numberToHclTerraform(struct!.port),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    tls: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsMetricsTlsToHclTerraform(struct!.tls),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsMetricsTls",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsMetricsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsMetrics | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._address !== undefined) {
      hasAnyValues = true;
      internalValueResult.address = this._address;
    }
    if (this._port !== undefined) {
      hasAnyValues = true;
      internalValueResult.port = this._port;
    }
    if (this._tls?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.tls = this._tls?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsMetrics | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._address = undefined;
      this._port = undefined;
      this._tls.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._address = value.address;
      this._port = value.port;
      this._tls.internalValue = value.tls;
    }
  }

  // address - computed: false, optional: true, required: false
  private _address?: string; 
  public get address() {
    return this.getStringAttribute('address');
  }
  public set address(value: string) {
    this._address = value;
  }
  public resetAddress() {
    this._address = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get addressInput() {
    return this._address;
  }

  // port - computed: false, optional: true, required: false
  private _port?: number; 
  public get port() {
    return this.getNumberAttribute('port');
  }
  public set port(value: number) {
    this._port = value;
  }
  public resetPort() {
    this._port = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get portInput() {
    return this._port;
  }

  // tls - computed: false, optional: true, required: false
  private _tls = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsMetricsTlsOutputReference(this, "tls");
  public get tls() {
    return this._tls;
  }
  public putTls(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsMetricsTls) {
    this._tls.internalValue = value;
  }
  public resetTls() {
    this._tls.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get tlsInput() {
    return this._tls.internalValue;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsPolicyRequestHeaders {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#remove DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#remove}
  */
  readonly remove?: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#set DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#set}
  */
  readonly set?: { [key: string]: string };
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsPolicyRequestHeadersToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsPolicyRequestHeaders | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    remove: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.remove),
    set: cdktf.hashMapper(cdktf.stringToTerraform)(struct!.set),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsPolicyRequestHeadersToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsPolicyRequestHeaders | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    remove: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.remove),
      isBlock: false,
      type: "list",
      storageClassType: "stringList",
    },
    set: {
      value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct!.set),
      isBlock: false,
      type: "map",
      storageClassType: "stringMap",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsPolicyRequestHeadersOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsPolicyRequestHeaders | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._remove !== undefined) {
      hasAnyValues = true;
      internalValueResult.remove = this._remove;
    }
    if (this._set !== undefined) {
      hasAnyValues = true;
      internalValueResult.set = this._set;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsPolicyRequestHeaders | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._remove = undefined;
      this._set = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._remove = value.remove;
      this._set = value.set;
    }
  }

  // remove - computed: false, optional: true, required: false
  private _remove?: string[]; 
  public get remove() {
    return this.getListAttribute('remove');
  }
  public set remove(value: string[]) {
    this._remove = value;
  }
  public resetRemove() {
    this._remove = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get removeInput() {
    return this._remove;
  }

  // set - computed: false, optional: true, required: false
  private _set?: { [key: string]: string }; 
  public get set() {
    return this.getStringMapAttribute('set');
  }
  public set set(value: { [key: string]: string }) {
    this._set = value;
  }
  public resetSet() {
    this._set = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get setInput() {
    return this._set;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsPolicyResponseHeaders {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#remove DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#remove}
  */
  readonly remove?: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#set DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#set}
  */
  readonly set?: { [key: string]: string };
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsPolicyResponseHeadersToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsPolicyResponseHeaders | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    remove: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.remove),
    set: cdktf.hashMapper(cdktf.stringToTerraform)(struct!.set),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsPolicyResponseHeadersToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsPolicyResponseHeaders | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    remove: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.remove),
      isBlock: false,
      type: "list",
      storageClassType: "stringList",
    },
    set: {
      value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct!.set),
      isBlock: false,
      type: "map",
      storageClassType: "stringMap",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsPolicyResponseHeadersOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsPolicyResponseHeaders | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._remove !== undefined) {
      hasAnyValues = true;
      internalValueResult.remove = this._remove;
    }
    if (this._set !== undefined) {
      hasAnyValues = true;
      internalValueResult.set = this._set;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsPolicyResponseHeaders | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._remove = undefined;
      this._set = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._remove = value.remove;
      this._set = value.set;
    }
  }

  // remove - computed: false, optional: true, required: false
  private _remove?: string[]; 
  public get remove() {
    return this.getListAttribute('remove');
  }
  public set remove(value: string[]) {
    this._remove = value;
  }
  public resetRemove() {
    this._remove = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get removeInput() {
    return this._remove;
  }

  // set - computed: false, optional: true, required: false
  private _set?: { [key: string]: string }; 
  public get set() {
    return this.getStringMapAttribute('set');
  }
  public set set(value: { [key: string]: string }) {
    this._set = value;
  }
  public resetSet() {
    this._set = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get setInput() {
    return this._set;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsPolicy {
  /**
  * ApplyToIngress determines if the Policies will apply to ingress objects Contour's default is false.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#apply_to_ingress DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#apply_to_ingress}
  */
  readonly applyToIngress?: boolean | cdktf.IResolvable;
  /**
  * RequestHeadersPolicy defines the request headers set/removed on all routes
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#request_headers DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#request_headers}
  */
  readonly requestHeaders?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsPolicyRequestHeaders;
  /**
  * ResponseHeadersPolicy defines the response headers set/removed on all routes
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#response_headers DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#response_headers}
  */
  readonly responseHeaders?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsPolicyResponseHeaders;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsPolicyToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsPolicy | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    apply_to_ingress: cdktf.booleanToTerraform(struct!.applyToIngress),
    request_headers: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsPolicyRequestHeadersToTerraform(struct!.requestHeaders),
    response_headers: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsPolicyResponseHeadersToTerraform(struct!.responseHeaders),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsPolicyToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsPolicy | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    apply_to_ingress: {
      value: cdktf.booleanToHclTerraform(struct!.applyToIngress),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    request_headers: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsPolicyRequestHeadersToHclTerraform(struct!.requestHeaders),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsPolicyRequestHeaders",
    },
    response_headers: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsPolicyResponseHeadersToHclTerraform(struct!.responseHeaders),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsPolicyResponseHeaders",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsPolicyOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsPolicy | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._applyToIngress !== undefined) {
      hasAnyValues = true;
      internalValueResult.applyToIngress = this._applyToIngress;
    }
    if (this._requestHeaders?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.requestHeaders = this._requestHeaders?.internalValue;
    }
    if (this._responseHeaders?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.responseHeaders = this._responseHeaders?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsPolicy | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._applyToIngress = undefined;
      this._requestHeaders.internalValue = undefined;
      this._responseHeaders.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._applyToIngress = value.applyToIngress;
      this._requestHeaders.internalValue = value.requestHeaders;
      this._responseHeaders.internalValue = value.responseHeaders;
    }
  }

  // apply_to_ingress - computed: false, optional: true, required: false
  private _applyToIngress?: boolean | cdktf.IResolvable; 
  public get applyToIngress() {
    return this.getBooleanAttribute('apply_to_ingress');
  }
  public set applyToIngress(value: boolean | cdktf.IResolvable) {
    this._applyToIngress = value;
  }
  public resetApplyToIngress() {
    this._applyToIngress = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get applyToIngressInput() {
    return this._applyToIngress;
  }

  // request_headers - computed: false, optional: true, required: false
  private _requestHeaders = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsPolicyRequestHeadersOutputReference(this, "request_headers");
  public get requestHeaders() {
    return this._requestHeaders;
  }
  public putRequestHeaders(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsPolicyRequestHeaders) {
    this._requestHeaders.internalValue = value;
  }
  public resetRequestHeaders() {
    this._requestHeaders.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get requestHeadersInput() {
    return this._requestHeaders.internalValue;
  }

  // response_headers - computed: false, optional: true, required: false
  private _responseHeaders = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsPolicyResponseHeadersOutputReference(this, "response_headers");
  public get responseHeaders() {
    return this._responseHeaders;
  }
  public putResponseHeaders(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsPolicyResponseHeaders) {
    this._responseHeaders.internalValue = value;
  }
  public resetResponseHeaders() {
    this._responseHeaders.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get responseHeadersInput() {
    return this._responseHeaders.internalValue;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsEntriesGenericKey {
  /**
  * Key defines the key of the descriptor entry. If not set, the key is set to 'generic_key'.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#key DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#key}
  */
  readonly key?: string;
  /**
  * Value defines the value of the descriptor entry.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#value DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#value}
  */
  readonly value?: string;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsEntriesGenericKeyToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsEntriesGenericKey | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    key: cdktf.stringToTerraform(struct!.key),
    value: cdktf.stringToTerraform(struct!.value),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsEntriesGenericKeyToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsEntriesGenericKey | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    key: {
      value: cdktf.stringToHclTerraform(struct!.key),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    value: {
      value: cdktf.stringToHclTerraform(struct!.value),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsEntriesGenericKeyOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsEntriesGenericKey | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._key !== undefined) {
      hasAnyValues = true;
      internalValueResult.key = this._key;
    }
    if (this._value !== undefined) {
      hasAnyValues = true;
      internalValueResult.value = this._value;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsEntriesGenericKey | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._key = undefined;
      this._value = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._key = value.key;
      this._value = value.value;
    }
  }

  // key - computed: false, optional: true, required: false
  private _key?: string; 
  public get key() {
    return this.getStringAttribute('key');
  }
  public set key(value: string) {
    this._key = value;
  }
  public resetKey() {
    this._key = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get keyInput() {
    return this._key;
  }

  // value - computed: false, optional: true, required: false
  private _value?: string; 
  public get value() {
    return this.getStringAttribute('value');
  }
  public set value(value: string) {
    this._value = value;
  }
  public resetValue() {
    this._value = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get valueInput() {
    return this._value;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsEntriesRequestHeader {
  /**
  * DescriptorKey defines the key to use on the descriptor entry.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#descriptor_key DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#descriptor_key}
  */
  readonly descriptorKey?: string;
  /**
  * HeaderName defines the name of the header to look for on the request.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#header_name DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#header_name}
  */
  readonly headerName?: string;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsEntriesRequestHeaderToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsEntriesRequestHeader | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    descriptor_key: cdktf.stringToTerraform(struct!.descriptorKey),
    header_name: cdktf.stringToTerraform(struct!.headerName),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsEntriesRequestHeaderToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsEntriesRequestHeader | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    descriptor_key: {
      value: cdktf.stringToHclTerraform(struct!.descriptorKey),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    header_name: {
      value: cdktf.stringToHclTerraform(struct!.headerName),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsEntriesRequestHeaderOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsEntriesRequestHeader | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._descriptorKey !== undefined) {
      hasAnyValues = true;
      internalValueResult.descriptorKey = this._descriptorKey;
    }
    if (this._headerName !== undefined) {
      hasAnyValues = true;
      internalValueResult.headerName = this._headerName;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsEntriesRequestHeader | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._descriptorKey = undefined;
      this._headerName = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._descriptorKey = value.descriptorKey;
      this._headerName = value.headerName;
    }
  }

  // descriptor_key - computed: false, optional: true, required: false
  private _descriptorKey?: string; 
  public get descriptorKey() {
    return this.getStringAttribute('descriptor_key');
  }
  public set descriptorKey(value: string) {
    this._descriptorKey = value;
  }
  public resetDescriptorKey() {
    this._descriptorKey = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get descriptorKeyInput() {
    return this._descriptorKey;
  }

  // header_name - computed: false, optional: true, required: false
  private _headerName?: string; 
  public get headerName() {
    return this.getStringAttribute('header_name');
  }
  public set headerName(value: string) {
    this._headerName = value;
  }
  public resetHeaderName() {
    this._headerName = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get headerNameInput() {
    return this._headerName;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsEntriesRequestHeaderValueMatchHeaders {
  /**
  * Contains specifies a substring that must be present in the header value.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#contains DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#contains}
  */
  readonly contains?: string;
  /**
  * Exact specifies a string that the header value must be equal to.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#exact DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#exact}
  */
  readonly exact?: string;
  /**
  * IgnoreCase specifies that string matching should be case insensitive. Note that this has no effect on the Regex parameter.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#ignore_case DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#ignore_case}
  */
  readonly ignoreCase?: boolean | cdktf.IResolvable;
  /**
  * Name is the name of the header to match against. Name is required. Header names are case insensitive.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#name DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#name}
  */
  readonly name: string;
  /**
  * NotContains specifies a substring that must not be present in the header value.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#notcontains DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#notcontains}
  */
  readonly notcontains?: string;
  /**
  * NoExact specifies a string that the header value must not be equal to. The condition is true if the header has any other value.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#notexact DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#notexact}
  */
  readonly notexact?: string;
  /**
  * NotPresent specifies that condition is true when the named header is not present. Note that setting NotPresent to false does not make the condition true if the named header is present.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#notpresent DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#notpresent}
  */
  readonly notpresent?: boolean | cdktf.IResolvable;
  /**
  * Present specifies that condition is true when the named header is present, regardless of its value. Note that setting Present to false does not make the condition true if the named header is absent.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#present DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#present}
  */
  readonly present?: boolean | cdktf.IResolvable;
  /**
  * Regex specifies a regular expression pattern that must match the header value.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#regex DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#regex}
  */
  readonly regex?: string;
  /**
  * TreatMissingAsEmpty specifies if the header match rule specified header does not exist, this header value will be treated as empty. Defaults to false. Unlike the underlying Envoy implementation this is **only** supported for negative matches (e.g. NotContains, NotExact).
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#treat_missing_as_empty DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#treat_missing_as_empty}
  */
  readonly treatMissingAsEmpty?: boolean | cdktf.IResolvable;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsEntriesRequestHeaderValueMatchHeadersToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsEntriesRequestHeaderValueMatchHeaders | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    contains: cdktf.stringToTerraform(struct!.contains),
    exact: cdktf.stringToTerraform(struct!.exact),
    ignore_case: cdktf.booleanToTerraform(struct!.ignoreCase),
    name: cdktf.stringToTerraform(struct!.name),
    notcontains: cdktf.stringToTerraform(struct!.notcontains),
    notexact: cdktf.stringToTerraform(struct!.notexact),
    notpresent: cdktf.booleanToTerraform(struct!.notpresent),
    present: cdktf.booleanToTerraform(struct!.present),
    regex: cdktf.stringToTerraform(struct!.regex),
    treat_missing_as_empty: cdktf.booleanToTerraform(struct!.treatMissingAsEmpty),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsEntriesRequestHeaderValueMatchHeadersToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsEntriesRequestHeaderValueMatchHeaders | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    contains: {
      value: cdktf.stringToHclTerraform(struct!.contains),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    exact: {
      value: cdktf.stringToHclTerraform(struct!.exact),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    ignore_case: {
      value: cdktf.booleanToHclTerraform(struct!.ignoreCase),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    name: {
      value: cdktf.stringToHclTerraform(struct!.name),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    notcontains: {
      value: cdktf.stringToHclTerraform(struct!.notcontains),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    notexact: {
      value: cdktf.stringToHclTerraform(struct!.notexact),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    notpresent: {
      value: cdktf.booleanToHclTerraform(struct!.notpresent),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    present: {
      value: cdktf.booleanToHclTerraform(struct!.present),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    regex: {
      value: cdktf.stringToHclTerraform(struct!.regex),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    treat_missing_as_empty: {
      value: cdktf.booleanToHclTerraform(struct!.treatMissingAsEmpty),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsEntriesRequestHeaderValueMatchHeadersOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsEntriesRequestHeaderValueMatchHeaders | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._contains !== undefined) {
      hasAnyValues = true;
      internalValueResult.contains = this._contains;
    }
    if (this._exact !== undefined) {
      hasAnyValues = true;
      internalValueResult.exact = this._exact;
    }
    if (this._ignoreCase !== undefined) {
      hasAnyValues = true;
      internalValueResult.ignoreCase = this._ignoreCase;
    }
    if (this._name !== undefined) {
      hasAnyValues = true;
      internalValueResult.name = this._name;
    }
    if (this._notcontains !== undefined) {
      hasAnyValues = true;
      internalValueResult.notcontains = this._notcontains;
    }
    if (this._notexact !== undefined) {
      hasAnyValues = true;
      internalValueResult.notexact = this._notexact;
    }
    if (this._notpresent !== undefined) {
      hasAnyValues = true;
      internalValueResult.notpresent = this._notpresent;
    }
    if (this._present !== undefined) {
      hasAnyValues = true;
      internalValueResult.present = this._present;
    }
    if (this._regex !== undefined) {
      hasAnyValues = true;
      internalValueResult.regex = this._regex;
    }
    if (this._treatMissingAsEmpty !== undefined) {
      hasAnyValues = true;
      internalValueResult.treatMissingAsEmpty = this._treatMissingAsEmpty;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsEntriesRequestHeaderValueMatchHeaders | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._contains = undefined;
      this._exact = undefined;
      this._ignoreCase = undefined;
      this._name = undefined;
      this._notcontains = undefined;
      this._notexact = undefined;
      this._notpresent = undefined;
      this._present = undefined;
      this._regex = undefined;
      this._treatMissingAsEmpty = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._contains = value.contains;
      this._exact = value.exact;
      this._ignoreCase = value.ignoreCase;
      this._name = value.name;
      this._notcontains = value.notcontains;
      this._notexact = value.notexact;
      this._notpresent = value.notpresent;
      this._present = value.present;
      this._regex = value.regex;
      this._treatMissingAsEmpty = value.treatMissingAsEmpty;
    }
  }

  // contains - computed: false, optional: true, required: false
  private _contains?: string; 
  public get contains() {
    return this.getStringAttribute('contains');
  }
  public set contains(value: string) {
    this._contains = value;
  }
  public resetContains() {
    this._contains = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get containsInput() {
    return this._contains;
  }

  // exact - computed: false, optional: true, required: false
  private _exact?: string; 
  public get exact() {
    return this.getStringAttribute('exact');
  }
  public set exact(value: string) {
    this._exact = value;
  }
  public resetExact() {
    this._exact = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get exactInput() {
    return this._exact;
  }

  // ignore_case - computed: false, optional: true, required: false
  private _ignoreCase?: boolean | cdktf.IResolvable; 
  public get ignoreCase() {
    return this.getBooleanAttribute('ignore_case');
  }
  public set ignoreCase(value: boolean | cdktf.IResolvable) {
    this._ignoreCase = value;
  }
  public resetIgnoreCase() {
    this._ignoreCase = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get ignoreCaseInput() {
    return this._ignoreCase;
  }

  // name - computed: false, optional: false, required: true
  private _name?: string; 
  public get name() {
    return this.getStringAttribute('name');
  }
  public set name(value: string) {
    this._name = value;
  }
  // Temporarily expose input value. Use with caution.
  public get nameInput() {
    return this._name;
  }

  // notcontains - computed: false, optional: true, required: false
  private _notcontains?: string; 
  public get notcontains() {
    return this.getStringAttribute('notcontains');
  }
  public set notcontains(value: string) {
    this._notcontains = value;
  }
  public resetNotcontains() {
    this._notcontains = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get notcontainsInput() {
    return this._notcontains;
  }

  // notexact - computed: false, optional: true, required: false
  private _notexact?: string; 
  public get notexact() {
    return this.getStringAttribute('notexact');
  }
  public set notexact(value: string) {
    this._notexact = value;
  }
  public resetNotexact() {
    this._notexact = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get notexactInput() {
    return this._notexact;
  }

  // notpresent - computed: false, optional: true, required: false
  private _notpresent?: boolean | cdktf.IResolvable; 
  public get notpresent() {
    return this.getBooleanAttribute('notpresent');
  }
  public set notpresent(value: boolean | cdktf.IResolvable) {
    this._notpresent = value;
  }
  public resetNotpresent() {
    this._notpresent = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get notpresentInput() {
    return this._notpresent;
  }

  // present - computed: false, optional: true, required: false
  private _present?: boolean | cdktf.IResolvable; 
  public get present() {
    return this.getBooleanAttribute('present');
  }
  public set present(value: boolean | cdktf.IResolvable) {
    this._present = value;
  }
  public resetPresent() {
    this._present = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get presentInput() {
    return this._present;
  }

  // regex - computed: false, optional: true, required: false
  private _regex?: string; 
  public get regex() {
    return this.getStringAttribute('regex');
  }
  public set regex(value: string) {
    this._regex = value;
  }
  public resetRegex() {
    this._regex = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get regexInput() {
    return this._regex;
  }

  // treat_missing_as_empty - computed: false, optional: true, required: false
  private _treatMissingAsEmpty?: boolean | cdktf.IResolvable; 
  public get treatMissingAsEmpty() {
    return this.getBooleanAttribute('treat_missing_as_empty');
  }
  public set treatMissingAsEmpty(value: boolean | cdktf.IResolvable) {
    this._treatMissingAsEmpty = value;
  }
  public resetTreatMissingAsEmpty() {
    this._treatMissingAsEmpty = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get treatMissingAsEmptyInput() {
    return this._treatMissingAsEmpty;
  }
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsEntriesRequestHeaderValueMatchHeadersList extends cdktf.ComplexList {
  public internalValue? : DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsEntriesRequestHeaderValueMatchHeaders[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsEntriesRequestHeaderValueMatchHeadersOutputReference {
    return new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsEntriesRequestHeaderValueMatchHeadersOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsEntriesRequestHeaderValueMatch {
  /**
  * ExpectMatch defines whether the request must positively match the match criteria in order to generate a descriptor entry (i.e. true), or not match the match criteria in order to generate a descriptor entry (i.e. false). The default is true.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#expect_match DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#expect_match}
  */
  readonly expectMatch?: boolean | cdktf.IResolvable;
  /**
  * Headers is a list of 1+ match criteria to apply against the request to determine whether to populate the descriptor entry or not.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#headers DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#headers}
  */
  readonly headers?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsEntriesRequestHeaderValueMatchHeaders[] | cdktf.IResolvable;
  /**
  * Value defines the value of the descriptor entry.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#value DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#value}
  */
  readonly value?: string;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsEntriesRequestHeaderValueMatchToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsEntriesRequestHeaderValueMatch | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    expect_match: cdktf.booleanToTerraform(struct!.expectMatch),
    headers: cdktf.listMapper(dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsEntriesRequestHeaderValueMatchHeadersToTerraform, false)(struct!.headers),
    value: cdktf.stringToTerraform(struct!.value),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsEntriesRequestHeaderValueMatchToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsEntriesRequestHeaderValueMatch | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    expect_match: {
      value: cdktf.booleanToHclTerraform(struct!.expectMatch),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    headers: {
      value: cdktf.listMapperHcl(dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsEntriesRequestHeaderValueMatchHeadersToHclTerraform, false)(struct!.headers),
      isBlock: true,
      type: "list",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsEntriesRequestHeaderValueMatchHeadersList",
    },
    value: {
      value: cdktf.stringToHclTerraform(struct!.value),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsEntriesRequestHeaderValueMatchOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsEntriesRequestHeaderValueMatch | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._expectMatch !== undefined) {
      hasAnyValues = true;
      internalValueResult.expectMatch = this._expectMatch;
    }
    if (this._headers?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.headers = this._headers?.internalValue;
    }
    if (this._value !== undefined) {
      hasAnyValues = true;
      internalValueResult.value = this._value;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsEntriesRequestHeaderValueMatch | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._expectMatch = undefined;
      this._headers.internalValue = undefined;
      this._value = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._expectMatch = value.expectMatch;
      this._headers.internalValue = value.headers;
      this._value = value.value;
    }
  }

  // expect_match - computed: false, optional: true, required: false
  private _expectMatch?: boolean | cdktf.IResolvable; 
  public get expectMatch() {
    return this.getBooleanAttribute('expect_match');
  }
  public set expectMatch(value: boolean | cdktf.IResolvable) {
    this._expectMatch = value;
  }
  public resetExpectMatch() {
    this._expectMatch = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get expectMatchInput() {
    return this._expectMatch;
  }

  // headers - computed: false, optional: true, required: false
  private _headers = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsEntriesRequestHeaderValueMatchHeadersList(this, "headers", false);
  public get headers() {
    return this._headers;
  }
  public putHeaders(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsEntriesRequestHeaderValueMatchHeaders[] | cdktf.IResolvable) {
    this._headers.internalValue = value;
  }
  public resetHeaders() {
    this._headers.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get headersInput() {
    return this._headers.internalValue;
  }

  // value - computed: false, optional: true, required: false
  private _value?: string; 
  public get value() {
    return this.getStringAttribute('value');
  }
  public set value(value: string) {
    this._value = value;
  }
  public resetValue() {
    this._value = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get valueInput() {
    return this._value;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsEntries {
  /**
  * GenericKey defines a descriptor entry with a static key and value.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#generic_key DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#generic_key}
  */
  readonly genericKey?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsEntriesGenericKey;
  /**
  * RemoteAddress defines a descriptor entry with a key of 'remote_address' and a value equal to the client's IP address (from x-forwarded-for).
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#remote_address DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#remote_address}
  */
  readonly remoteAddress?: { [key: string]: string };
  /**
  * RequestHeader defines a descriptor entry that's populated only if a given header is present on the request. The descriptor key is static, and the descriptor value is equal to the value of the header.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#request_header DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#request_header}
  */
  readonly requestHeader?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsEntriesRequestHeader;
  /**
  * RequestHeaderValueMatch defines a descriptor entry that's populated if the request's headers match a set of 1+ match criteria. The descriptor key is 'header_match', and the descriptor value is static.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#request_header_value_match DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#request_header_value_match}
  */
  readonly requestHeaderValueMatch?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsEntriesRequestHeaderValueMatch;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsEntriesToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsEntries | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    generic_key: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsEntriesGenericKeyToTerraform(struct!.genericKey),
    remote_address: cdktf.hashMapper(cdktf.stringToTerraform)(struct!.remoteAddress),
    request_header: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsEntriesRequestHeaderToTerraform(struct!.requestHeader),
    request_header_value_match: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsEntriesRequestHeaderValueMatchToTerraform(struct!.requestHeaderValueMatch),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsEntriesToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsEntries | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    generic_key: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsEntriesGenericKeyToHclTerraform(struct!.genericKey),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsEntriesGenericKey",
    },
    remote_address: {
      value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct!.remoteAddress),
      isBlock: false,
      type: "map",
      storageClassType: "stringMap",
    },
    request_header: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsEntriesRequestHeaderToHclTerraform(struct!.requestHeader),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsEntriesRequestHeader",
    },
    request_header_value_match: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsEntriesRequestHeaderValueMatchToHclTerraform(struct!.requestHeaderValueMatch),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsEntriesRequestHeaderValueMatch",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsEntriesOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsEntries | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._genericKey?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.genericKey = this._genericKey?.internalValue;
    }
    if (this._remoteAddress !== undefined) {
      hasAnyValues = true;
      internalValueResult.remoteAddress = this._remoteAddress;
    }
    if (this._requestHeader?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.requestHeader = this._requestHeader?.internalValue;
    }
    if (this._requestHeaderValueMatch?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.requestHeaderValueMatch = this._requestHeaderValueMatch?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsEntries | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._genericKey.internalValue = undefined;
      this._remoteAddress = undefined;
      this._requestHeader.internalValue = undefined;
      this._requestHeaderValueMatch.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._genericKey.internalValue = value.genericKey;
      this._remoteAddress = value.remoteAddress;
      this._requestHeader.internalValue = value.requestHeader;
      this._requestHeaderValueMatch.internalValue = value.requestHeaderValueMatch;
    }
  }

  // generic_key - computed: false, optional: true, required: false
  private _genericKey = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsEntriesGenericKeyOutputReference(this, "generic_key");
  public get genericKey() {
    return this._genericKey;
  }
  public putGenericKey(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsEntriesGenericKey) {
    this._genericKey.internalValue = value;
  }
  public resetGenericKey() {
    this._genericKey.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get genericKeyInput() {
    return this._genericKey.internalValue;
  }

  // remote_address - computed: false, optional: true, required: false
  private _remoteAddress?: { [key: string]: string }; 
  public get remoteAddress() {
    return this.getStringMapAttribute('remote_address');
  }
  public set remoteAddress(value: { [key: string]: string }) {
    this._remoteAddress = value;
  }
  public resetRemoteAddress() {
    this._remoteAddress = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get remoteAddressInput() {
    return this._remoteAddress;
  }

  // request_header - computed: false, optional: true, required: false
  private _requestHeader = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsEntriesRequestHeaderOutputReference(this, "request_header");
  public get requestHeader() {
    return this._requestHeader;
  }
  public putRequestHeader(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsEntriesRequestHeader) {
    this._requestHeader.internalValue = value;
  }
  public resetRequestHeader() {
    this._requestHeader.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get requestHeaderInput() {
    return this._requestHeader.internalValue;
  }

  // request_header_value_match - computed: false, optional: true, required: false
  private _requestHeaderValueMatch = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsEntriesRequestHeaderValueMatchOutputReference(this, "request_header_value_match");
  public get requestHeaderValueMatch() {
    return this._requestHeaderValueMatch;
  }
  public putRequestHeaderValueMatch(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsEntriesRequestHeaderValueMatch) {
    this._requestHeaderValueMatch.internalValue = value;
  }
  public resetRequestHeaderValueMatch() {
    this._requestHeaderValueMatch.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get requestHeaderValueMatchInput() {
    return this._requestHeaderValueMatch.internalValue;
  }
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsEntriesList extends cdktf.ComplexList {
  public internalValue? : DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsEntries[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsEntriesOutputReference {
    return new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsEntriesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptors {
  /**
  * Entries is the list of key-value pair generators.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#entries DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#entries}
  */
  readonly entries?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsEntries[] | cdktf.IResolvable;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptors | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    entries: cdktf.listMapper(dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsEntriesToTerraform, false)(struct!.entries),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptors | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    entries: {
      value: cdktf.listMapperHcl(dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsEntriesToHclTerraform, false)(struct!.entries),
      isBlock: true,
      type: "list",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsEntriesList",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptors | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._entries?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.entries = this._entries?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptors | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._entries.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._entries.internalValue = value.entries;
    }
  }

  // entries - computed: false, optional: true, required: false
  private _entries = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsEntriesList(this, "entries", false);
  public get entries() {
    return this._entries;
  }
  public putEntries(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsEntries[] | cdktf.IResolvable) {
    this._entries.internalValue = value;
  }
  public resetEntries() {
    this._entries.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get entriesInput() {
    return this._entries.internalValue;
  }
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsList extends cdktf.ComplexList {
  public internalValue? : DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptors[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsOutputReference {
    return new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicy {
  /**
  * Descriptors defines the list of descriptors that will be generated and sent to the rate limit service. Each descriptor contains 1+ key-value pair entries.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#descriptors DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#descriptors}
  */
  readonly descriptors?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptors[] | cdktf.IResolvable;
  /**
  * Disabled configures the HTTPProxy to not use the default global rate limit policy defined by the Contour configuration.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#disabled DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#disabled}
  */
  readonly disabled?: boolean | cdktf.IResolvable;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicy | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    descriptors: cdktf.listMapper(dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsToTerraform, false)(struct!.descriptors),
    disabled: cdktf.booleanToTerraform(struct!.disabled),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicy | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    descriptors: {
      value: cdktf.listMapperHcl(dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsToHclTerraform, false)(struct!.descriptors),
      isBlock: true,
      type: "list",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsList",
    },
    disabled: {
      value: cdktf.booleanToHclTerraform(struct!.disabled),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicy | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._descriptors?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.descriptors = this._descriptors?.internalValue;
    }
    if (this._disabled !== undefined) {
      hasAnyValues = true;
      internalValueResult.disabled = this._disabled;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicy | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._descriptors.internalValue = undefined;
      this._disabled = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._descriptors.internalValue = value.descriptors;
      this._disabled = value.disabled;
    }
  }

  // descriptors - computed: false, optional: true, required: false
  private _descriptors = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptorsList(this, "descriptors", false);
  public get descriptors() {
    return this._descriptors;
  }
  public putDescriptors(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyDescriptors[] | cdktf.IResolvable) {
    this._descriptors.internalValue = value;
  }
  public resetDescriptors() {
    this._descriptors.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get descriptorsInput() {
    return this._descriptors.internalValue;
  }

  // disabled - computed: false, optional: true, required: false
  private _disabled?: boolean | cdktf.IResolvable; 
  public get disabled() {
    return this.getBooleanAttribute('disabled');
  }
  public set disabled(value: boolean | cdktf.IResolvable) {
    this._disabled = value;
  }
  public resetDisabled() {
    this._disabled = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get disabledInput() {
    return this._disabled;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceExtensionService {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#name DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#name}
  */
  readonly name: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#namespace DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#namespace}
  */
  readonly namespace: string;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceExtensionServiceToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceExtensionService | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    name: cdktf.stringToTerraform(struct!.name),
    namespace: cdktf.stringToTerraform(struct!.namespace),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceExtensionServiceToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceExtensionService | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    name: {
      value: cdktf.stringToHclTerraform(struct!.name),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    namespace: {
      value: cdktf.stringToHclTerraform(struct!.namespace),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceExtensionServiceOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceExtensionService | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._name !== undefined) {
      hasAnyValues = true;
      internalValueResult.name = this._name;
    }
    if (this._namespace !== undefined) {
      hasAnyValues = true;
      internalValueResult.namespace = this._namespace;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceExtensionService | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._name = undefined;
      this._namespace = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._name = value.name;
      this._namespace = value.namespace;
    }
  }

  // name - computed: false, optional: false, required: true
  private _name?: string; 
  public get name() {
    return this.getStringAttribute('name');
  }
  public set name(value: string) {
    this._name = value;
  }
  // Temporarily expose input value. Use with caution.
  public get nameInput() {
    return this._name;
  }

  // namespace - computed: false, optional: false, required: true
  private _namespace?: string; 
  public get namespace() {
    return this.getStringAttribute('namespace');
  }
  public set namespace(value: string) {
    this._namespace = value;
  }
  // Temporarily expose input value. Use with caution.
  public get namespaceInput() {
    return this._namespace;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitService {
  /**
  * DefaultGlobalRateLimitPolicy allows setting a default global rate limit policy for every HTTPProxy. HTTPProxy can overwrite this configuration.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#default_global_rate_limit_policy DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#default_global_rate_limit_policy}
  */
  readonly defaultGlobalRateLimitPolicy?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicy;
  /**
  * Domain is passed to the Rate Limit Service.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#domain DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#domain}
  */
  readonly domain?: string;
  /**
  * EnableResourceExhaustedCode enables translating error code 429 to grpc code RESOURCE_EXHAUSTED. When disabled it's translated to UNAVAILABLE
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#enable_resource_exhausted_code DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#enable_resource_exhausted_code}
  */
  readonly enableResourceExhaustedCode?: boolean | cdktf.IResolvable;
  /**
  * EnableXRateLimitHeaders defines whether to include the X-RateLimit headers X-RateLimit-Limit, X-RateLimit-Remaining, and X-RateLimit-Reset (as defined by the IETF Internet-Draft linked below), on responses to clients when the Rate Limit Service is consulted for a request. ref. https://tools.ietf.org/id/draft-polli-ratelimit-headers-03.html
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#enable_x_rate_limit_headers DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#enable_x_rate_limit_headers}
  */
  readonly enableXRateLimitHeaders?: boolean | cdktf.IResolvable;
  /**
  * ExtensionService identifies the extension service defining the RLS.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#extension_service DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#extension_service}
  */
  readonly extensionService: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceExtensionService;
  /**
  * FailOpen defines whether to allow requests to proceed when the Rate Limit Service fails to respond with a valid rate limit decision within the timeout defined on the extension service.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#fail_open DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#fail_open}
  */
  readonly failOpen?: boolean | cdktf.IResolvable;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitService | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    default_global_rate_limit_policy: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyToTerraform(struct!.defaultGlobalRateLimitPolicy),
    domain: cdktf.stringToTerraform(struct!.domain),
    enable_resource_exhausted_code: cdktf.booleanToTerraform(struct!.enableResourceExhaustedCode),
    enable_x_rate_limit_headers: cdktf.booleanToTerraform(struct!.enableXRateLimitHeaders),
    extension_service: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceExtensionServiceToTerraform(struct!.extensionService),
    fail_open: cdktf.booleanToTerraform(struct!.failOpen),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitService | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    default_global_rate_limit_policy: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyToHclTerraform(struct!.defaultGlobalRateLimitPolicy),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicy",
    },
    domain: {
      value: cdktf.stringToHclTerraform(struct!.domain),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    enable_resource_exhausted_code: {
      value: cdktf.booleanToHclTerraform(struct!.enableResourceExhaustedCode),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    enable_x_rate_limit_headers: {
      value: cdktf.booleanToHclTerraform(struct!.enableXRateLimitHeaders),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    extension_service: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceExtensionServiceToHclTerraform(struct!.extensionService),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceExtensionService",
    },
    fail_open: {
      value: cdktf.booleanToHclTerraform(struct!.failOpen),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitService | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._defaultGlobalRateLimitPolicy?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.defaultGlobalRateLimitPolicy = this._defaultGlobalRateLimitPolicy?.internalValue;
    }
    if (this._domain !== undefined) {
      hasAnyValues = true;
      internalValueResult.domain = this._domain;
    }
    if (this._enableResourceExhaustedCode !== undefined) {
      hasAnyValues = true;
      internalValueResult.enableResourceExhaustedCode = this._enableResourceExhaustedCode;
    }
    if (this._enableXRateLimitHeaders !== undefined) {
      hasAnyValues = true;
      internalValueResult.enableXRateLimitHeaders = this._enableXRateLimitHeaders;
    }
    if (this._extensionService?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.extensionService = this._extensionService?.internalValue;
    }
    if (this._failOpen !== undefined) {
      hasAnyValues = true;
      internalValueResult.failOpen = this._failOpen;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitService | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._defaultGlobalRateLimitPolicy.internalValue = undefined;
      this._domain = undefined;
      this._enableResourceExhaustedCode = undefined;
      this._enableXRateLimitHeaders = undefined;
      this._extensionService.internalValue = undefined;
      this._failOpen = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._defaultGlobalRateLimitPolicy.internalValue = value.defaultGlobalRateLimitPolicy;
      this._domain = value.domain;
      this._enableResourceExhaustedCode = value.enableResourceExhaustedCode;
      this._enableXRateLimitHeaders = value.enableXRateLimitHeaders;
      this._extensionService.internalValue = value.extensionService;
      this._failOpen = value.failOpen;
    }
  }

  // default_global_rate_limit_policy - computed: false, optional: true, required: false
  private _defaultGlobalRateLimitPolicy = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicyOutputReference(this, "default_global_rate_limit_policy");
  public get defaultGlobalRateLimitPolicy() {
    return this._defaultGlobalRateLimitPolicy;
  }
  public putDefaultGlobalRateLimitPolicy(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceDefaultGlobalRateLimitPolicy) {
    this._defaultGlobalRateLimitPolicy.internalValue = value;
  }
  public resetDefaultGlobalRateLimitPolicy() {
    this._defaultGlobalRateLimitPolicy.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get defaultGlobalRateLimitPolicyInput() {
    return this._defaultGlobalRateLimitPolicy.internalValue;
  }

  // domain - computed: false, optional: true, required: false
  private _domain?: string; 
  public get domain() {
    return this.getStringAttribute('domain');
  }
  public set domain(value: string) {
    this._domain = value;
  }
  public resetDomain() {
    this._domain = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get domainInput() {
    return this._domain;
  }

  // enable_resource_exhausted_code - computed: false, optional: true, required: false
  private _enableResourceExhaustedCode?: boolean | cdktf.IResolvable; 
  public get enableResourceExhaustedCode() {
    return this.getBooleanAttribute('enable_resource_exhausted_code');
  }
  public set enableResourceExhaustedCode(value: boolean | cdktf.IResolvable) {
    this._enableResourceExhaustedCode = value;
  }
  public resetEnableResourceExhaustedCode() {
    this._enableResourceExhaustedCode = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get enableResourceExhaustedCodeInput() {
    return this._enableResourceExhaustedCode;
  }

  // enable_x_rate_limit_headers - computed: false, optional: true, required: false
  private _enableXRateLimitHeaders?: boolean | cdktf.IResolvable; 
  public get enableXRateLimitHeaders() {
    return this.getBooleanAttribute('enable_x_rate_limit_headers');
  }
  public set enableXRateLimitHeaders(value: boolean | cdktf.IResolvable) {
    this._enableXRateLimitHeaders = value;
  }
  public resetEnableXRateLimitHeaders() {
    this._enableXRateLimitHeaders = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get enableXRateLimitHeadersInput() {
    return this._enableXRateLimitHeaders;
  }

  // extension_service - computed: false, optional: false, required: true
  private _extensionService = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceExtensionServiceOutputReference(this, "extension_service");
  public get extensionService() {
    return this._extensionService;
  }
  public putExtensionService(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceExtensionService) {
    this._extensionService.internalValue = value;
  }
  // Temporarily expose input value. Use with caution.
  public get extensionServiceInput() {
    return this._extensionService.internalValue;
  }

  // fail_open - computed: false, optional: true, required: false
  private _failOpen?: boolean | cdktf.IResolvable; 
  public get failOpen() {
    return this.getBooleanAttribute('fail_open');
  }
  public set failOpen(value: boolean | cdktf.IResolvable) {
    this._failOpen = value;
  }
  public resetFailOpen() {
    this._failOpen = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get failOpenInput() {
    return this._failOpen;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsTracingCustomTags {
  /**
  * Literal is a static custom tag value. Precisely one of Literal, RequestHeaderName must be set.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#literal DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#literal}
  */
  readonly literal?: string;
  /**
  * RequestHeaderName indicates which request header the label value is obtained from. Precisely one of Literal, RequestHeaderName must be set.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#request_header_name DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#request_header_name}
  */
  readonly requestHeaderName?: string;
  /**
  * TagName is the unique name of the custom tag.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#tag_name DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#tag_name}
  */
  readonly tagName: string;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsTracingCustomTagsToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsTracingCustomTags | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    literal: cdktf.stringToTerraform(struct!.literal),
    request_header_name: cdktf.stringToTerraform(struct!.requestHeaderName),
    tag_name: cdktf.stringToTerraform(struct!.tagName),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsTracingCustomTagsToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsTracingCustomTags | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    literal: {
      value: cdktf.stringToHclTerraform(struct!.literal),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    request_header_name: {
      value: cdktf.stringToHclTerraform(struct!.requestHeaderName),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    tag_name: {
      value: cdktf.stringToHclTerraform(struct!.tagName),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsTracingCustomTagsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsTracingCustomTags | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._literal !== undefined) {
      hasAnyValues = true;
      internalValueResult.literal = this._literal;
    }
    if (this._requestHeaderName !== undefined) {
      hasAnyValues = true;
      internalValueResult.requestHeaderName = this._requestHeaderName;
    }
    if (this._tagName !== undefined) {
      hasAnyValues = true;
      internalValueResult.tagName = this._tagName;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsTracingCustomTags | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._literal = undefined;
      this._requestHeaderName = undefined;
      this._tagName = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._literal = value.literal;
      this._requestHeaderName = value.requestHeaderName;
      this._tagName = value.tagName;
    }
  }

  // literal - computed: false, optional: true, required: false
  private _literal?: string; 
  public get literal() {
    return this.getStringAttribute('literal');
  }
  public set literal(value: string) {
    this._literal = value;
  }
  public resetLiteral() {
    this._literal = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get literalInput() {
    return this._literal;
  }

  // request_header_name - computed: false, optional: true, required: false
  private _requestHeaderName?: string; 
  public get requestHeaderName() {
    return this.getStringAttribute('request_header_name');
  }
  public set requestHeaderName(value: string) {
    this._requestHeaderName = value;
  }
  public resetRequestHeaderName() {
    this._requestHeaderName = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get requestHeaderNameInput() {
    return this._requestHeaderName;
  }

  // tag_name - computed: false, optional: false, required: true
  private _tagName?: string; 
  public get tagName() {
    return this.getStringAttribute('tag_name');
  }
  public set tagName(value: string) {
    this._tagName = value;
  }
  // Temporarily expose input value. Use with caution.
  public get tagNameInput() {
    return this._tagName;
  }
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsTracingCustomTagsList extends cdktf.ComplexList {
  public internalValue? : DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsTracingCustomTags[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsTracingCustomTagsOutputReference {
    return new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsTracingCustomTagsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsTracingExtensionService {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#name DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#name}
  */
  readonly name: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#namespace DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#namespace}
  */
  readonly namespace: string;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsTracingExtensionServiceToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsTracingExtensionService | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    name: cdktf.stringToTerraform(struct!.name),
    namespace: cdktf.stringToTerraform(struct!.namespace),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsTracingExtensionServiceToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsTracingExtensionService | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    name: {
      value: cdktf.stringToHclTerraform(struct!.name),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    namespace: {
      value: cdktf.stringToHclTerraform(struct!.namespace),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsTracingExtensionServiceOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsTracingExtensionService | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._name !== undefined) {
      hasAnyValues = true;
      internalValueResult.name = this._name;
    }
    if (this._namespace !== undefined) {
      hasAnyValues = true;
      internalValueResult.namespace = this._namespace;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsTracingExtensionService | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._name = undefined;
      this._namespace = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._name = value.name;
      this._namespace = value.namespace;
    }
  }

  // name - computed: false, optional: false, required: true
  private _name?: string; 
  public get name() {
    return this.getStringAttribute('name');
  }
  public set name(value: string) {
    this._name = value;
  }
  // Temporarily expose input value. Use with caution.
  public get nameInput() {
    return this._name;
  }

  // namespace - computed: false, optional: false, required: true
  private _namespace?: string; 
  public get namespace() {
    return this.getStringAttribute('namespace');
  }
  public set namespace(value: string) {
    this._namespace = value;
  }
  // Temporarily expose input value. Use with caution.
  public get namespaceInput() {
    return this._namespace;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsTracing {
  /**
  * CustomTags defines a list of custom tags with unique tag name.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#custom_tags DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#custom_tags}
  */
  readonly customTags?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsTracingCustomTags[] | cdktf.IResolvable;
  /**
  * ExtensionService identifies the extension service defining the otel-collector.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#extension_service DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#extension_service}
  */
  readonly extensionService: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsTracingExtensionService;
  /**
  * IncludePodDetail defines a flag. If it is true, contour will add the pod name and namespace to the span of the trace. the default is true. Note: The Envoy pods MUST have the HOSTNAME and CONTOUR_NAMESPACE environment variables set for this to work properly.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#include_pod_detail DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#include_pod_detail}
  */
  readonly includePodDetail?: boolean | cdktf.IResolvable;
  /**
  * MaxPathTagLength defines maximum length of the request path to extract and include in the HttpUrl tag. contour's default is 256.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#max_path_tag_length DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#max_path_tag_length}
  */
  readonly maxPathTagLength?: number;
  /**
  * OverallSampling defines the sampling rate of trace data. contour's default is 100.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#overall_sampling DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#overall_sampling}
  */
  readonly overallSampling?: string;
  /**
  * ServiceName defines the name for the service. contour's default is contour.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#service_name DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#service_name}
  */
  readonly serviceName?: string;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsTracingToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsTracing | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    custom_tags: cdktf.listMapper(dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsTracingCustomTagsToTerraform, false)(struct!.customTags),
    extension_service: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsTracingExtensionServiceToTerraform(struct!.extensionService),
    include_pod_detail: cdktf.booleanToTerraform(struct!.includePodDetail),
    max_path_tag_length: cdktf.numberToTerraform(struct!.maxPathTagLength),
    overall_sampling: cdktf.stringToTerraform(struct!.overallSampling),
    service_name: cdktf.stringToTerraform(struct!.serviceName),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsTracingToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsTracing | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    custom_tags: {
      value: cdktf.listMapperHcl(dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsTracingCustomTagsToHclTerraform, false)(struct!.customTags),
      isBlock: true,
      type: "list",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsTracingCustomTagsList",
    },
    extension_service: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsTracingExtensionServiceToHclTerraform(struct!.extensionService),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsTracingExtensionService",
    },
    include_pod_detail: {
      value: cdktf.booleanToHclTerraform(struct!.includePodDetail),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    max_path_tag_length: {
      value: cdktf.numberToHclTerraform(struct!.maxPathTagLength),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    overall_sampling: {
      value: cdktf.stringToHclTerraform(struct!.overallSampling),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    service_name: {
      value: cdktf.stringToHclTerraform(struct!.serviceName),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsTracingOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsTracing | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._customTags?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.customTags = this._customTags?.internalValue;
    }
    if (this._extensionService?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.extensionService = this._extensionService?.internalValue;
    }
    if (this._includePodDetail !== undefined) {
      hasAnyValues = true;
      internalValueResult.includePodDetail = this._includePodDetail;
    }
    if (this._maxPathTagLength !== undefined) {
      hasAnyValues = true;
      internalValueResult.maxPathTagLength = this._maxPathTagLength;
    }
    if (this._overallSampling !== undefined) {
      hasAnyValues = true;
      internalValueResult.overallSampling = this._overallSampling;
    }
    if (this._serviceName !== undefined) {
      hasAnyValues = true;
      internalValueResult.serviceName = this._serviceName;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsTracing | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._customTags.internalValue = undefined;
      this._extensionService.internalValue = undefined;
      this._includePodDetail = undefined;
      this._maxPathTagLength = undefined;
      this._overallSampling = undefined;
      this._serviceName = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._customTags.internalValue = value.customTags;
      this._extensionService.internalValue = value.extensionService;
      this._includePodDetail = value.includePodDetail;
      this._maxPathTagLength = value.maxPathTagLength;
      this._overallSampling = value.overallSampling;
      this._serviceName = value.serviceName;
    }
  }

  // custom_tags - computed: false, optional: true, required: false
  private _customTags = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsTracingCustomTagsList(this, "custom_tags", false);
  public get customTags() {
    return this._customTags;
  }
  public putCustomTags(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsTracingCustomTags[] | cdktf.IResolvable) {
    this._customTags.internalValue = value;
  }
  public resetCustomTags() {
    this._customTags.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get customTagsInput() {
    return this._customTags.internalValue;
  }

  // extension_service - computed: false, optional: false, required: true
  private _extensionService = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsTracingExtensionServiceOutputReference(this, "extension_service");
  public get extensionService() {
    return this._extensionService;
  }
  public putExtensionService(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsTracingExtensionService) {
    this._extensionService.internalValue = value;
  }
  // Temporarily expose input value. Use with caution.
  public get extensionServiceInput() {
    return this._extensionService.internalValue;
  }

  // include_pod_detail - computed: false, optional: true, required: false
  private _includePodDetail?: boolean | cdktf.IResolvable; 
  public get includePodDetail() {
    return this.getBooleanAttribute('include_pod_detail');
  }
  public set includePodDetail(value: boolean | cdktf.IResolvable) {
    this._includePodDetail = value;
  }
  public resetIncludePodDetail() {
    this._includePodDetail = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get includePodDetailInput() {
    return this._includePodDetail;
  }

  // max_path_tag_length - computed: false, optional: true, required: false
  private _maxPathTagLength?: number; 
  public get maxPathTagLength() {
    return this.getNumberAttribute('max_path_tag_length');
  }
  public set maxPathTagLength(value: number) {
    this._maxPathTagLength = value;
  }
  public resetMaxPathTagLength() {
    this._maxPathTagLength = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get maxPathTagLengthInput() {
    return this._maxPathTagLength;
  }

  // overall_sampling - computed: false, optional: true, required: false
  private _overallSampling?: string; 
  public get overallSampling() {
    return this.getStringAttribute('overall_sampling');
  }
  public set overallSampling(value: string) {
    this._overallSampling = value;
  }
  public resetOverallSampling() {
    this._overallSampling = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get overallSamplingInput() {
    return this._overallSampling;
  }

  // service_name - computed: false, optional: true, required: false
  private _serviceName?: string; 
  public get serviceName() {
    return this.getStringAttribute('service_name');
  }
  public set serviceName(value: string) {
    this._serviceName = value;
  }
  public resetServiceName() {
    this._serviceName = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get serviceNameInput() {
    return this._serviceName;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsXdsServerTls {
  /**
  * CA filename.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#ca_file DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#ca_file}
  */
  readonly caFile?: string;
  /**
  * Client certificate filename.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#cert_file DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#cert_file}
  */
  readonly certFile?: string;
  /**
  * Allow serving the xDS gRPC API without TLS.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#insecure DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#insecure}
  */
  readonly insecure?: boolean | cdktf.IResolvable;
  /**
  * Client key filename.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#key_file DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#key_file}
  */
  readonly keyFile?: string;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsXdsServerTlsToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsXdsServerTls | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    ca_file: cdktf.stringToTerraform(struct!.caFile),
    cert_file: cdktf.stringToTerraform(struct!.certFile),
    insecure: cdktf.booleanToTerraform(struct!.insecure),
    key_file: cdktf.stringToTerraform(struct!.keyFile),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsXdsServerTlsToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsXdsServerTls | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    ca_file: {
      value: cdktf.stringToHclTerraform(struct!.caFile),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    cert_file: {
      value: cdktf.stringToHclTerraform(struct!.certFile),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    insecure: {
      value: cdktf.booleanToHclTerraform(struct!.insecure),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    key_file: {
      value: cdktf.stringToHclTerraform(struct!.keyFile),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsXdsServerTlsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsXdsServerTls | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._caFile !== undefined) {
      hasAnyValues = true;
      internalValueResult.caFile = this._caFile;
    }
    if (this._certFile !== undefined) {
      hasAnyValues = true;
      internalValueResult.certFile = this._certFile;
    }
    if (this._insecure !== undefined) {
      hasAnyValues = true;
      internalValueResult.insecure = this._insecure;
    }
    if (this._keyFile !== undefined) {
      hasAnyValues = true;
      internalValueResult.keyFile = this._keyFile;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsXdsServerTls | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._caFile = undefined;
      this._certFile = undefined;
      this._insecure = undefined;
      this._keyFile = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._caFile = value.caFile;
      this._certFile = value.certFile;
      this._insecure = value.insecure;
      this._keyFile = value.keyFile;
    }
  }

  // ca_file - computed: false, optional: true, required: false
  private _caFile?: string; 
  public get caFile() {
    return this.getStringAttribute('ca_file');
  }
  public set caFile(value: string) {
    this._caFile = value;
  }
  public resetCaFile() {
    this._caFile = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get caFileInput() {
    return this._caFile;
  }

  // cert_file - computed: false, optional: true, required: false
  private _certFile?: string; 
  public get certFile() {
    return this.getStringAttribute('cert_file');
  }
  public set certFile(value: string) {
    this._certFile = value;
  }
  public resetCertFile() {
    this._certFile = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get certFileInput() {
    return this._certFile;
  }

  // insecure - computed: false, optional: true, required: false
  private _insecure?: boolean | cdktf.IResolvable; 
  public get insecure() {
    return this.getBooleanAttribute('insecure');
  }
  public set insecure(value: boolean | cdktf.IResolvable) {
    this._insecure = value;
  }
  public resetInsecure() {
    this._insecure = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get insecureInput() {
    return this._insecure;
  }

  // key_file - computed: false, optional: true, required: false
  private _keyFile?: string; 
  public get keyFile() {
    return this.getStringAttribute('key_file');
  }
  public set keyFile(value: string) {
    this._keyFile = value;
  }
  public resetKeyFile() {
    this._keyFile = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get keyFileInput() {
    return this._keyFile;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsXdsServer {
  /**
  * Defines the xDS gRPC API address which Contour will serve. Contour's default is '0.0.0.0'.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#address DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#address}
  */
  readonly address?: string;
  /**
  * Defines the xDS gRPC API port which Contour will serve. Contour's default is 8001.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#port DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#port}
  */
  readonly port?: number;
  /**
  * TLS holds TLS file config details. Contour's default is { caFile: '/certs/ca.crt', certFile: '/certs/tls.cert', keyFile: '/certs/tls.key', insecure: false }.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#tls DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#tls}
  */
  readonly tls?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsXdsServerTls;
  /**
  * Defines the XDSServer to use for 'contour serve'. Values: 'envoy' (default), 'contour (deprecated)'. Other values will produce an error. Deprecated: this field will be removed in a future release when the 'contour' xDS server implementation is removed.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#type DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#type}
  */
  readonly type?: string;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsXdsServerToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsXdsServer | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    address: cdktf.stringToTerraform(struct!.address),
    port: cdktf.numberToTerraform(struct!.port),
    tls: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsXdsServerTlsToTerraform(struct!.tls),
    type: cdktf.stringToTerraform(struct!.type),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsXdsServerToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsXdsServer | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    address: {
      value: cdktf.stringToHclTerraform(struct!.address),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    port: {
      value: cdktf.numberToHclTerraform(struct!.port),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    tls: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsXdsServerTlsToHclTerraform(struct!.tls),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsXdsServerTls",
    },
    type: {
      value: cdktf.stringToHclTerraform(struct!.type),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsXdsServerOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsXdsServer | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._address !== undefined) {
      hasAnyValues = true;
      internalValueResult.address = this._address;
    }
    if (this._port !== undefined) {
      hasAnyValues = true;
      internalValueResult.port = this._port;
    }
    if (this._tls?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.tls = this._tls?.internalValue;
    }
    if (this._type !== undefined) {
      hasAnyValues = true;
      internalValueResult.type = this._type;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsXdsServer | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._address = undefined;
      this._port = undefined;
      this._tls.internalValue = undefined;
      this._type = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._address = value.address;
      this._port = value.port;
      this._tls.internalValue = value.tls;
      this._type = value.type;
    }
  }

  // address - computed: false, optional: true, required: false
  private _address?: string; 
  public get address() {
    return this.getStringAttribute('address');
  }
  public set address(value: string) {
    this._address = value;
  }
  public resetAddress() {
    this._address = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get addressInput() {
    return this._address;
  }

  // port - computed: false, optional: true, required: false
  private _port?: number; 
  public get port() {
    return this.getNumberAttribute('port');
  }
  public set port(value: number) {
    this._port = value;
  }
  public resetPort() {
    this._port = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get portInput() {
    return this._port;
  }

  // tls - computed: false, optional: true, required: false
  private _tls = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsXdsServerTlsOutputReference(this, "tls");
  public get tls() {
    return this._tls;
  }
  public putTls(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsXdsServerTls) {
    this._tls.internalValue = value;
  }
  public resetTls() {
    this._tls.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get tlsInput() {
    return this._tls.internalValue;
  }

  // type - computed: false, optional: true, required: false
  private _type?: string; 
  public get type() {
    return this.getStringAttribute('type');
  }
  public set type(value: string) {
    this._type = value;
  }
  public resetType() {
    this._type = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get typeInput() {
    return this._type;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettings {
  /**
  * Debug contains parameters to enable debug logging and debug interfaces inside Contour.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#debug DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#debug}
  */
  readonly debug?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsDebug;
  /**
  * EnableExternalNameService allows processing of ExternalNameServices Contour's default is false for security reasons.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#enable_external_name_service DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#enable_external_name_service}
  */
  readonly enableExternalNameService?: boolean | cdktf.IResolvable;
  /**
  * Envoy contains parameters for Envoy as well as how to optionally configure a managed Envoy fleet.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#envoy DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#envoy}
  */
  readonly envoy?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoy;
  /**
  * FeatureFlags defines toggle to enable new contour features. Available toggles are: useEndpointSlices - Configures contour to fetch endpoint data from k8s endpoint slices. defaults to true, If false then reads endpoint data from the k8s endpoints.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#feature_flags DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#feature_flags}
  */
  readonly featureFlags?: string[];
  /**
  * Gateway contains parameters for the gateway-api Gateway that Contour is configured to serve traffic.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#gateway DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#gateway}
  */
  readonly gateway?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsGateway;
  /**
  * GlobalExternalAuthorization allows envoys external authorization filter to be enabled for all virtual hosts.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#global_ext_auth DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#global_ext_auth}
  */
  readonly globalExtAuth?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsGlobalExtAuth;
  /**
  * Health defines the endpoints Contour uses to serve health checks. Contour's default is { address: '0.0.0.0', port: 8000 }.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#health DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#health}
  */
  readonly health?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsHealth;
  /**
  * HTTPProxy defines parameters on HTTPProxy.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#httpproxy DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#httpproxy}
  */
  readonly httpproxy?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsHttpproxy;
  /**
  * Ingress contains parameters for ingress options.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#ingress DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#ingress}
  */
  readonly ingress?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsIngress;
  /**
  * Metrics defines the endpoint Contour uses to serve metrics. Contour's default is { address: '0.0.0.0', port: 8000 }.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#metrics DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#metrics}
  */
  readonly metrics?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsMetrics;
  /**
  * Policy specifies default policy applied if not overridden by the user
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#policy DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#policy}
  */
  readonly policy?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsPolicy;
  /**
  * RateLimitService optionally holds properties of the Rate Limit Service to be used for global rate limiting.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#rate_limit_service DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#rate_limit_service}
  */
  readonly rateLimitService?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitService;
  /**
  * Tracing defines properties for exporting trace data to OpenTelemetry.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#tracing DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#tracing}
  */
  readonly tracing?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsTracing;
  /**
  * XDSServer contains parameters for the xDS server.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#xds_server DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#xds_server}
  */
  readonly xdsServer?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsXdsServer;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettings | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    debug: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsDebugToTerraform(struct!.debug),
    enable_external_name_service: cdktf.booleanToTerraform(struct!.enableExternalNameService),
    envoy: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyToTerraform(struct!.envoy),
    feature_flags: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.featureFlags),
    gateway: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsGatewayToTerraform(struct!.gateway),
    global_ext_auth: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsGlobalExtAuthToTerraform(struct!.globalExtAuth),
    health: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsHealthToTerraform(struct!.health),
    httpproxy: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsHttpproxyToTerraform(struct!.httpproxy),
    ingress: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsIngressToTerraform(struct!.ingress),
    metrics: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsMetricsToTerraform(struct!.metrics),
    policy: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsPolicyToTerraform(struct!.policy),
    rate_limit_service: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceToTerraform(struct!.rateLimitService),
    tracing: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsTracingToTerraform(struct!.tracing),
    xds_server: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsXdsServerToTerraform(struct!.xdsServer),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettings | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    debug: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsDebugToHclTerraform(struct!.debug),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsDebug",
    },
    enable_external_name_service: {
      value: cdktf.booleanToHclTerraform(struct!.enableExternalNameService),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    envoy: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyToHclTerraform(struct!.envoy),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoy",
    },
    feature_flags: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.featureFlags),
      isBlock: false,
      type: "list",
      storageClassType: "stringList",
    },
    gateway: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsGatewayToHclTerraform(struct!.gateway),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsGateway",
    },
    global_ext_auth: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsGlobalExtAuthToHclTerraform(struct!.globalExtAuth),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsGlobalExtAuth",
    },
    health: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsHealthToHclTerraform(struct!.health),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsHealth",
    },
    httpproxy: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsHttpproxyToHclTerraform(struct!.httpproxy),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsHttpproxy",
    },
    ingress: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsIngressToHclTerraform(struct!.ingress),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsIngress",
    },
    metrics: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsMetricsToHclTerraform(struct!.metrics),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsMetrics",
    },
    policy: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsPolicyToHclTerraform(struct!.policy),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsPolicy",
    },
    rate_limit_service: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceToHclTerraform(struct!.rateLimitService),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitService",
    },
    tracing: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsTracingToHclTerraform(struct!.tracing),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsTracing",
    },
    xds_server: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsXdsServerToHclTerraform(struct!.xdsServer),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsXdsServer",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettings | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._debug?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.debug = this._debug?.internalValue;
    }
    if (this._enableExternalNameService !== undefined) {
      hasAnyValues = true;
      internalValueResult.enableExternalNameService = this._enableExternalNameService;
    }
    if (this._envoy?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.envoy = this._envoy?.internalValue;
    }
    if (this._featureFlags !== undefined) {
      hasAnyValues = true;
      internalValueResult.featureFlags = this._featureFlags;
    }
    if (this._gateway?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.gateway = this._gateway?.internalValue;
    }
    if (this._globalExtAuth?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.globalExtAuth = this._globalExtAuth?.internalValue;
    }
    if (this._health?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.health = this._health?.internalValue;
    }
    if (this._httpproxy?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.httpproxy = this._httpproxy?.internalValue;
    }
    if (this._ingress?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.ingress = this._ingress?.internalValue;
    }
    if (this._metrics?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.metrics = this._metrics?.internalValue;
    }
    if (this._policy?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.policy = this._policy?.internalValue;
    }
    if (this._rateLimitService?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.rateLimitService = this._rateLimitService?.internalValue;
    }
    if (this._tracing?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.tracing = this._tracing?.internalValue;
    }
    if (this._xdsServer?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.xdsServer = this._xdsServer?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettings | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._debug.internalValue = undefined;
      this._enableExternalNameService = undefined;
      this._envoy.internalValue = undefined;
      this._featureFlags = undefined;
      this._gateway.internalValue = undefined;
      this._globalExtAuth.internalValue = undefined;
      this._health.internalValue = undefined;
      this._httpproxy.internalValue = undefined;
      this._ingress.internalValue = undefined;
      this._metrics.internalValue = undefined;
      this._policy.internalValue = undefined;
      this._rateLimitService.internalValue = undefined;
      this._tracing.internalValue = undefined;
      this._xdsServer.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._debug.internalValue = value.debug;
      this._enableExternalNameService = value.enableExternalNameService;
      this._envoy.internalValue = value.envoy;
      this._featureFlags = value.featureFlags;
      this._gateway.internalValue = value.gateway;
      this._globalExtAuth.internalValue = value.globalExtAuth;
      this._health.internalValue = value.health;
      this._httpproxy.internalValue = value.httpproxy;
      this._ingress.internalValue = value.ingress;
      this._metrics.internalValue = value.metrics;
      this._policy.internalValue = value.policy;
      this._rateLimitService.internalValue = value.rateLimitService;
      this._tracing.internalValue = value.tracing;
      this._xdsServer.internalValue = value.xdsServer;
    }
  }

  // debug - computed: false, optional: true, required: false
  private _debug = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsDebugOutputReference(this, "debug");
  public get debug() {
    return this._debug;
  }
  public putDebug(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsDebug) {
    this._debug.internalValue = value;
  }
  public resetDebug() {
    this._debug.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get debugInput() {
    return this._debug.internalValue;
  }

  // enable_external_name_service - computed: false, optional: true, required: false
  private _enableExternalNameService?: boolean | cdktf.IResolvable; 
  public get enableExternalNameService() {
    return this.getBooleanAttribute('enable_external_name_service');
  }
  public set enableExternalNameService(value: boolean | cdktf.IResolvable) {
    this._enableExternalNameService = value;
  }
  public resetEnableExternalNameService() {
    this._enableExternalNameService = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get enableExternalNameServiceInput() {
    return this._enableExternalNameService;
  }

  // envoy - computed: false, optional: true, required: false
  private _envoy = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoyOutputReference(this, "envoy");
  public get envoy() {
    return this._envoy;
  }
  public putEnvoy(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsEnvoy) {
    this._envoy.internalValue = value;
  }
  public resetEnvoy() {
    this._envoy.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get envoyInput() {
    return this._envoy.internalValue;
  }

  // feature_flags - computed: false, optional: true, required: false
  private _featureFlags?: string[]; 
  public get featureFlags() {
    return this.getListAttribute('feature_flags');
  }
  public set featureFlags(value: string[]) {
    this._featureFlags = value;
  }
  public resetFeatureFlags() {
    this._featureFlags = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get featureFlagsInput() {
    return this._featureFlags;
  }

  // gateway - computed: false, optional: true, required: false
  private _gateway = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsGatewayOutputReference(this, "gateway");
  public get gateway() {
    return this._gateway;
  }
  public putGateway(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsGateway) {
    this._gateway.internalValue = value;
  }
  public resetGateway() {
    this._gateway.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get gatewayInput() {
    return this._gateway.internalValue;
  }

  // global_ext_auth - computed: false, optional: true, required: false
  private _globalExtAuth = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsGlobalExtAuthOutputReference(this, "global_ext_auth");
  public get globalExtAuth() {
    return this._globalExtAuth;
  }
  public putGlobalExtAuth(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsGlobalExtAuth) {
    this._globalExtAuth.internalValue = value;
  }
  public resetGlobalExtAuth() {
    this._globalExtAuth.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get globalExtAuthInput() {
    return this._globalExtAuth.internalValue;
  }

  // health - computed: false, optional: true, required: false
  private _health = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsHealthOutputReference(this, "health");
  public get health() {
    return this._health;
  }
  public putHealth(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsHealth) {
    this._health.internalValue = value;
  }
  public resetHealth() {
    this._health.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get healthInput() {
    return this._health.internalValue;
  }

  // httpproxy - computed: false, optional: true, required: false
  private _httpproxy = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsHttpproxyOutputReference(this, "httpproxy");
  public get httpproxy() {
    return this._httpproxy;
  }
  public putHttpproxy(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsHttpproxy) {
    this._httpproxy.internalValue = value;
  }
  public resetHttpproxy() {
    this._httpproxy.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get httpproxyInput() {
    return this._httpproxy.internalValue;
  }

  // ingress - computed: false, optional: true, required: false
  private _ingress = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsIngressOutputReference(this, "ingress");
  public get ingress() {
    return this._ingress;
  }
  public putIngress(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsIngress) {
    this._ingress.internalValue = value;
  }
  public resetIngress() {
    this._ingress.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get ingressInput() {
    return this._ingress.internalValue;
  }

  // metrics - computed: false, optional: true, required: false
  private _metrics = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsMetricsOutputReference(this, "metrics");
  public get metrics() {
    return this._metrics;
  }
  public putMetrics(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsMetrics) {
    this._metrics.internalValue = value;
  }
  public resetMetrics() {
    this._metrics.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get metricsInput() {
    return this._metrics.internalValue;
  }

  // policy - computed: false, optional: true, required: false
  private _policy = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsPolicyOutputReference(this, "policy");
  public get policy() {
    return this._policy;
  }
  public putPolicy(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsPolicy) {
    this._policy.internalValue = value;
  }
  public resetPolicy() {
    this._policy.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get policyInput() {
    return this._policy.internalValue;
  }

  // rate_limit_service - computed: false, optional: true, required: false
  private _rateLimitService = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitServiceOutputReference(this, "rate_limit_service");
  public get rateLimitService() {
    return this._rateLimitService;
  }
  public putRateLimitService(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsRateLimitService) {
    this._rateLimitService.internalValue = value;
  }
  public resetRateLimitService() {
    this._rateLimitService.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get rateLimitServiceInput() {
    return this._rateLimitService.internalValue;
  }

  // tracing - computed: false, optional: true, required: false
  private _tracing = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsTracingOutputReference(this, "tracing");
  public get tracing() {
    return this._tracing;
  }
  public putTracing(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsTracing) {
    this._tracing.internalValue = value;
  }
  public resetTracing() {
    this._tracing.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get tracingInput() {
    return this._tracing.internalValue;
  }

  // xds_server - computed: false, optional: true, required: false
  private _xdsServer = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsXdsServerOutputReference(this, "xds_server");
  public get xdsServer() {
    return this._xdsServer;
  }
  public putXdsServer(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsXdsServer) {
    this._xdsServer.internalValue = value;
  }
  public resetXdsServer() {
    this._xdsServer.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get xdsServerInput() {
    return this._xdsServer.internalValue;
  }
}
export interface DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpec {
  /**
  * Contour specifies deployment-time settings for the Contour part of the installation, i.e. the xDS server/control plane and associated resources, including things like replica count for the Deployment, and node placement constraints for the pods.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#contour DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#contour}
  */
  readonly contour?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContour;
  /**
  * Envoy specifies deployment-time settings for the Envoy part of the installation, i.e. the xDS client/data plane and associated resources, including things like the workload type to use (DaemonSet or Deployment), node placement constraints for the pods, and various options for the Envoy service.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#envoy DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#envoy}
  */
  readonly envoy?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoy;
  /**
  * ResourceLabels is a set of labels to add to the provisioned Contour resources. Deprecated: use Gateway.Spec.Infrastructure.Labels instead. This field will be removed in a future release.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#resource_labels DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#resource_labels}
  */
  readonly resourceLabels?: { [key: string]: string };
  /**
  * RuntimeSettings is a ContourConfiguration spec to be used when provisioning a Contour instance that will influence aspects of the Contour instance's runtime behavior.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#runtime_settings DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest#runtime_settings}
  */
  readonly runtimeSettings?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettings;
}

export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecToTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpec | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    contour: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourToTerraform(struct!.contour),
    envoy: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyToTerraform(struct!.envoy),
    resource_labels: cdktf.hashMapper(cdktf.stringToTerraform)(struct!.resourceLabels),
    runtime_settings: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsToTerraform(struct!.runtimeSettings),
  }
}


export function dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecToHclTerraform(struct?: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpec | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    contour: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourToHclTerraform(struct!.contour),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContour",
    },
    envoy: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyToHclTerraform(struct!.envoy),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoy",
    },
    resource_labels: {
      value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct!.resourceLabels),
      isBlock: false,
      type: "map",
      storageClassType: "stringMap",
    },
    runtime_settings: {
      value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsToHclTerraform(struct!.runtimeSettings),
      isBlock: true,
      type: "struct",
      storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettings",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpec | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._contour?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.contour = this._contour?.internalValue;
    }
    if (this._envoy?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.envoy = this._envoy?.internalValue;
    }
    if (this._resourceLabels !== undefined) {
      hasAnyValues = true;
      internalValueResult.resourceLabels = this._resourceLabels;
    }
    if (this._runtimeSettings?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.runtimeSettings = this._runtimeSettings?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpec | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._contour.internalValue = undefined;
      this._envoy.internalValue = undefined;
      this._resourceLabels = undefined;
      this._runtimeSettings.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._contour.internalValue = value.contour;
      this._envoy.internalValue = value.envoy;
      this._resourceLabels = value.resourceLabels;
      this._runtimeSettings.internalValue = value.runtimeSettings;
    }
  }

  // contour - computed: false, optional: true, required: false
  private _contour = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContourOutputReference(this, "contour");
  public get contour() {
    return this._contour;
  }
  public putContour(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecContour) {
    this._contour.internalValue = value;
  }
  public resetContour() {
    this._contour.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get contourInput() {
    return this._contour.internalValue;
  }

  // envoy - computed: false, optional: true, required: false
  private _envoy = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoyOutputReference(this, "envoy");
  public get envoy() {
    return this._envoy;
  }
  public putEnvoy(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecEnvoy) {
    this._envoy.internalValue = value;
  }
  public resetEnvoy() {
    this._envoy.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get envoyInput() {
    return this._envoy.internalValue;
  }

  // resource_labels - computed: false, optional: true, required: false
  private _resourceLabels?: { [key: string]: string }; 
  public get resourceLabels() {
    return this.getStringMapAttribute('resource_labels');
  }
  public set resourceLabels(value: { [key: string]: string }) {
    this._resourceLabels = value;
  }
  public resetResourceLabels() {
    this._resourceLabels = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get resourceLabelsInput() {
    return this._resourceLabels;
  }

  // runtime_settings - computed: false, optional: true, required: false
  private _runtimeSettings = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettingsOutputReference(this, "runtime_settings");
  public get runtimeSettings() {
    return this._runtimeSettings;
  }
  public putRuntimeSettings(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecRuntimeSettings) {
    this._runtimeSettings.internalValue = value;
  }
  public resetRuntimeSettings() {
    this._runtimeSettings.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get runtimeSettingsInput() {
    return this._runtimeSettings.internalValue;
  }
}

/**
* Represents a {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest k8s_projectcontour_io_contour_deployment_v1alpha1_manifest}
*/
export class DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest extends cdktf.TerraformDataSource {

  // =================
  // STATIC PROPERTIES
  // =================
  public static readonly tfResourceType = "k8s_projectcontour_io_contour_deployment_v1alpha1_manifest";

  // ==============
  // STATIC Methods
  // ==============
  /**
  * Generates CDKTF code for importing a DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest resource upon running "cdktf plan <stack-name>"
  * @param scope The scope in which to define this construct
  * @param importToId The construct id used in the generated config for the DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest to import
  * @param importFromId The id of the existing DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest that should be imported. Refer to the {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest#import import section} in the documentation of this resource for the id to use
  * @param provider? Optional instance of the provider where the DataK8SProjectcontourIoContourDeploymentV1Alpha1Manifest to import is found
  */
  public static generateConfigForImport(scope: Construct, importToId: string, importFromId: string, provider?: cdktf.TerraformProvider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "k8s_projectcontour_io_contour_deployment_v1alpha1_manifest", importId: importFromId, provider });
      }

  // ===========
  // INITIALIZER
  // ===========

  /**
  * Create a new {@link https://registry.terraform.io/providers/metio/k8s/2025.10.20/docs/data-sources/projectcontour_io_contour_deployment_v1alpha1_manifest k8s_projectcontour_io_contour_deployment_v1alpha1_manifest} Data Source
  *
  * @param scope The scope in which to define this construct
  * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
  * @param options DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestConfig
  */
  public constructor(scope: Construct, id: string, config: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestConfig) {
    super(scope, id, {
      terraformResourceType: 'k8s_projectcontour_io_contour_deployment_v1alpha1_manifest',
      terraformGeneratorMetadata: {
        providerName: 'k8s',
        providerVersion: '2025.10.20'
      },
      provider: config.provider,
      dependsOn: config.dependsOn,
      count: config.count,
      lifecycle: config.lifecycle,
      provisioners: config.provisioners,
      connection: config.connection,
      forEach: config.forEach
    });
    this._metadata.internalValue = config.metadata;
    this._spec.internalValue = config.spec;
  }

  // ==========
  // ATTRIBUTES
  // ==========

  // metadata - computed: false, optional: false, required: true
  private _metadata = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestMetadataOutputReference(this, "metadata");
  public get metadata() {
    return this._metadata;
  }
  public putMetadata(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestMetadata) {
    this._metadata.internalValue = value;
  }
  // Temporarily expose input value. Use with caution.
  public get metadataInput() {
    return this._metadata.internalValue;
  }

  // spec - computed: false, optional: true, required: false
  private _spec = new DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecOutputReference(this, "spec");
  public get spec() {
    return this._spec;
  }
  public putSpec(value: DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpec) {
    this._spec.internalValue = value;
  }
  public resetSpec() {
    this._spec.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get specInput() {
    return this._spec.internalValue;
  }

  // yaml - computed: true, optional: false, required: false
  public get yaml() {
    return this.getStringAttribute('yaml');
  }

  // =========
  // SYNTHESIS
  // =========

  protected synthesizeAttributes(): { [name: string]: any } {
    return {
      metadata: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestMetadataToTerraform(this._metadata.internalValue),
      spec: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecToTerraform(this._spec.internalValue),
    };
  }

  protected synthesizeHclAttributes(): { [name: string]: any } {
    const attrs = {
      metadata: {
        value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestMetadataToHclTerraform(this._metadata.internalValue),
        isBlock: true,
        type: "struct",
        storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestMetadata",
      },
      spec: {
        value: dataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpecToHclTerraform(this._spec.internalValue),
        isBlock: true,
        type: "struct",
        storageClassType: "DataK8SProjectcontourIoContourDeploymentV1Alpha1ManifestSpec",
      },
    };

    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined ))
  }
}
