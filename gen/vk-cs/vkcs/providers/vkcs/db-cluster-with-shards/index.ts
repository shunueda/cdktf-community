// https://registry.terraform.io/providers/vk-cs/vkcs/0.13.0/docs/resources/db_cluster_with_shards
// generated from terraform resource schema

import { Construct } from 'constructs';
import * as cdktf from 'cdktf';

// Configuration

export interface DbClusterWithShardsConfig extends cdktf.TerraformMetaArguments {
  /**
  * Enable cloud monitoring for the cluster._new_since_v0.2.0_.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/vk-cs/vkcs/0.13.0/docs/resources/db_cluster_with_shards#cloud_monitoring_enabled DbClusterWithShards#cloud_monitoring_enabled}
  */
  readonly cloudMonitoringEnabled?: boolean | cdktf.IResolvable;
  /**
  * The id of the configuration attached to cluster.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/vk-cs/vkcs/0.13.0/docs/resources/db_cluster_with_shards#configuration_id DbClusterWithShards#configuration_id}
  */
  readonly configurationId?: string;
  /**
  * Boolean field that indicates whether floating ip is created for cluster. Changing this creates a new cluster.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/vk-cs/vkcs/0.13.0/docs/resources/db_cluster_with_shards#floating_ip_enabled DbClusterWithShards#floating_ip_enabled}
  */
  readonly floatingIpEnabled?: boolean | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/vk-cs/vkcs/0.13.0/docs/resources/db_cluster_with_shards#id DbClusterWithShards#id}
  *
  * Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2.
  * If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
  */
  readonly id?: string;
  /**
  * Name of the keypair to be attached to cluster. Changing this creates a new cluster.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/vk-cs/vkcs/0.13.0/docs/resources/db_cluster_with_shards#keypair DbClusterWithShards#keypair}
  */
  readonly keypair?: string;
  /**
  * The name of the cluster. Changing this creates a new cluster.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/vk-cs/vkcs/0.13.0/docs/resources/db_cluster_with_shards#name DbClusterWithShards#name}
  */
  readonly name: string;
  /**
  * Region to create resource in.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/vk-cs/vkcs/0.13.0/docs/resources/db_cluster_with_shards#region DbClusterWithShards#region}
  */
  readonly region?: string;
  /**
  * Indicates whether root user is enabled for the cluster.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/vk-cs/vkcs/0.13.0/docs/resources/db_cluster_with_shards#root_enabled DbClusterWithShards#root_enabled}
  */
  readonly rootEnabled?: boolean | cdktf.IResolvable;
  /**
  * Password for the root user of the cluster. When enabling root, password is autogenerated, use this field to obtain it.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/vk-cs/vkcs/0.13.0/docs/resources/db_cluster_with_shards#root_password DbClusterWithShards#root_password}
  */
  readonly rootPassword?: string;
  /**
  * capabilities block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/vk-cs/vkcs/0.13.0/docs/resources/db_cluster_with_shards#capabilities DbClusterWithShards#capabilities}
  */
  readonly capabilities?: DbClusterWithShardsCapabilities[] | cdktf.IResolvable;
  /**
  * datastore block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/vk-cs/vkcs/0.13.0/docs/resources/db_cluster_with_shards#datastore DbClusterWithShards#datastore}
  */
  readonly datastore: DbClusterWithShardsDatastore;
  /**
  * disk_autoexpand block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/vk-cs/vkcs/0.13.0/docs/resources/db_cluster_with_shards#disk_autoexpand DbClusterWithShards#disk_autoexpand}
  */
  readonly diskAutoexpand?: DbClusterWithShardsDiskAutoexpand;
  /**
  * restore_point block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/vk-cs/vkcs/0.13.0/docs/resources/db_cluster_with_shards#restore_point DbClusterWithShards#restore_point}
  */
  readonly restorePoint?: DbClusterWithShardsRestorePoint;
  /**
  * shard block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/vk-cs/vkcs/0.13.0/docs/resources/db_cluster_with_shards#shard DbClusterWithShards#shard}
  */
  readonly shard: DbClusterWithShardsShard[] | cdktf.IResolvable;
  /**
  * timeouts block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/vk-cs/vkcs/0.13.0/docs/resources/db_cluster_with_shards#timeouts DbClusterWithShards#timeouts}
  */
  readonly timeouts?: DbClusterWithShardsTimeouts;
  /**
  * vendor_options block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/vk-cs/vkcs/0.13.0/docs/resources/db_cluster_with_shards#vendor_options DbClusterWithShards#vendor_options}
  */
  readonly vendorOptions?: DbClusterWithShardsVendorOptions;
  /**
  * wal_disk_autoexpand block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/vk-cs/vkcs/0.13.0/docs/resources/db_cluster_with_shards#wal_disk_autoexpand DbClusterWithShards#wal_disk_autoexpand}
  */
  readonly walDiskAutoexpand?: DbClusterWithShardsWalDiskAutoexpand;
}
export interface DbClusterWithShardsCapabilities {
  /**
  * The name of the capability to apply.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/vk-cs/vkcs/0.13.0/docs/resources/db_cluster_with_shards#name DbClusterWithShards#name}
  */
  readonly name: string;
  /**
  * Map of key-value settings of the capability.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/vk-cs/vkcs/0.13.0/docs/resources/db_cluster_with_shards#settings DbClusterWithShards#settings}
  */
  readonly settings?: { [key: string]: string };
}

export function dbClusterWithShardsCapabilitiesToTerraform(struct?: DbClusterWithShardsCapabilities | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    name: cdktf.stringToTerraform(struct!.name),
    settings: cdktf.hashMapper(cdktf.stringToTerraform)(struct!.settings),
  }
}


export function dbClusterWithShardsCapabilitiesToHclTerraform(struct?: DbClusterWithShardsCapabilities | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    name: {
      value: cdktf.stringToHclTerraform(struct!.name),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    settings: {
      value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct!.settings),
      isBlock: false,
      type: "map",
      storageClassType: "stringMap",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DbClusterWithShardsCapabilitiesOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DbClusterWithShardsCapabilities | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._name !== undefined) {
      hasAnyValues = true;
      internalValueResult.name = this._name;
    }
    if (this._settings !== undefined) {
      hasAnyValues = true;
      internalValueResult.settings = this._settings;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DbClusterWithShardsCapabilities | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._name = undefined;
      this._settings = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._name = value.name;
      this._settings = value.settings;
    }
  }

  // name - computed: false, optional: false, required: true
  private _name?: string; 
  public get name() {
    return this.getStringAttribute('name');
  }
  public set name(value: string) {
    this._name = value;
  }
  // Temporarily expose input value. Use with caution.
  public get nameInput() {
    return this._name;
  }

  // settings - computed: false, optional: true, required: false
  private _settings?: { [key: string]: string }; 
  public get settings() {
    return this.getStringMapAttribute('settings');
  }
  public set settings(value: { [key: string]: string }) {
    this._settings = value;
  }
  public resetSettings() {
    this._settings = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get settingsInput() {
    return this._settings;
  }
}

export class DbClusterWithShardsCapabilitiesList extends cdktf.ComplexList {
  public internalValue? : DbClusterWithShardsCapabilities[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DbClusterWithShardsCapabilitiesOutputReference {
    return new DbClusterWithShardsCapabilitiesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DbClusterWithShardsDatastore {
  /**
  * Type of the datastore. Changing this creates a new cluster. Must be one of: `clickhouse`
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/vk-cs/vkcs/0.13.0/docs/resources/db_cluster_with_shards#type DbClusterWithShards#type}
  */
  readonly type: string;
  /**
  * Version of the datastore. Changing this creates a new cluster.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/vk-cs/vkcs/0.13.0/docs/resources/db_cluster_with_shards#version DbClusterWithShards#version}
  */
  readonly version: string;
}

export function dbClusterWithShardsDatastoreToTerraform(struct?: DbClusterWithShardsDatastoreOutputReference | DbClusterWithShardsDatastore): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    type: cdktf.stringToTerraform(struct!.type),
    version: cdktf.stringToTerraform(struct!.version),
  }
}


export function dbClusterWithShardsDatastoreToHclTerraform(struct?: DbClusterWithShardsDatastoreOutputReference | DbClusterWithShardsDatastore): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    type: {
      value: cdktf.stringToHclTerraform(struct!.type),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    version: {
      value: cdktf.stringToHclTerraform(struct!.version),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DbClusterWithShardsDatastoreOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false, 0);
  }

  public get internalValue(): DbClusterWithShardsDatastore | undefined {
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._type !== undefined) {
      hasAnyValues = true;
      internalValueResult.type = this._type;
    }
    if (this._version !== undefined) {
      hasAnyValues = true;
      internalValueResult.version = this._version;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DbClusterWithShardsDatastore | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this._type = undefined;
      this._version = undefined;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this._type = value.type;
      this._version = value.version;
    }
  }

  // type - computed: false, optional: false, required: true
  private _type?: string; 
  public get type() {
    return this.getStringAttribute('type');
  }
  public set type(value: string) {
    this._type = value;
  }
  // Temporarily expose input value. Use with caution.
  public get typeInput() {
    return this._type;
  }

  // version - computed: false, optional: false, required: true
  private _version?: string; 
  public get version() {
    return this.getStringAttribute('version');
  }
  public set version(value: string) {
    this._version = value;
  }
  // Temporarily expose input value. Use with caution.
  public get versionInput() {
    return this._version;
  }
}
export interface DbClusterWithShardsDiskAutoexpand {
  /**
  * Indicates whether autoresize is enabled.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/vk-cs/vkcs/0.13.0/docs/resources/db_cluster_with_shards#autoexpand DbClusterWithShards#autoexpand}
  */
  readonly autoexpand?: boolean | cdktf.IResolvable;
  /**
  * Maximum disk size for autoresize.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/vk-cs/vkcs/0.13.0/docs/resources/db_cluster_with_shards#max_disk_size DbClusterWithShards#max_disk_size}
  */
  readonly maxDiskSize?: number;
}

export function dbClusterWithShardsDiskAutoexpandToTerraform(struct?: DbClusterWithShardsDiskAutoexpandOutputReference | DbClusterWithShardsDiskAutoexpand): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    autoexpand: cdktf.booleanToTerraform(struct!.autoexpand),
    max_disk_size: cdktf.numberToTerraform(struct!.maxDiskSize),
  }
}


export function dbClusterWithShardsDiskAutoexpandToHclTerraform(struct?: DbClusterWithShardsDiskAutoexpandOutputReference | DbClusterWithShardsDiskAutoexpand): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    autoexpand: {
      value: cdktf.booleanToHclTerraform(struct!.autoexpand),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    max_disk_size: {
      value: cdktf.numberToHclTerraform(struct!.maxDiskSize),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DbClusterWithShardsDiskAutoexpandOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false, 0);
  }

  public get internalValue(): DbClusterWithShardsDiskAutoexpand | undefined {
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._autoexpand !== undefined) {
      hasAnyValues = true;
      internalValueResult.autoexpand = this._autoexpand;
    }
    if (this._maxDiskSize !== undefined) {
      hasAnyValues = true;
      internalValueResult.maxDiskSize = this._maxDiskSize;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DbClusterWithShardsDiskAutoexpand | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this._autoexpand = undefined;
      this._maxDiskSize = undefined;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this._autoexpand = value.autoexpand;
      this._maxDiskSize = value.maxDiskSize;
    }
  }

  // autoexpand - computed: false, optional: true, required: false
  private _autoexpand?: boolean | cdktf.IResolvable; 
  public get autoexpand() {
    return this.getBooleanAttribute('autoexpand');
  }
  public set autoexpand(value: boolean | cdktf.IResolvable) {
    this._autoexpand = value;
  }
  public resetAutoexpand() {
    this._autoexpand = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get autoexpandInput() {
    return this._autoexpand;
  }

  // max_disk_size - computed: false, optional: true, required: false
  private _maxDiskSize?: number; 
  public get maxDiskSize() {
    return this.getNumberAttribute('max_disk_size');
  }
  public set maxDiskSize(value: number) {
    this._maxDiskSize = value;
  }
  public resetMaxDiskSize() {
    this._maxDiskSize = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get maxDiskSizeInput() {
    return this._maxDiskSize;
  }
}
export interface DbClusterWithShardsRestorePoint {
  /**
  * ID of the backup.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/vk-cs/vkcs/0.13.0/docs/resources/db_cluster_with_shards#backup_id DbClusterWithShards#backup_id}
  */
  readonly backupId: string;
}

export function dbClusterWithShardsRestorePointToTerraform(struct?: DbClusterWithShardsRestorePointOutputReference | DbClusterWithShardsRestorePoint): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    backup_id: cdktf.stringToTerraform(struct!.backupId),
  }
}


export function dbClusterWithShardsRestorePointToHclTerraform(struct?: DbClusterWithShardsRestorePointOutputReference | DbClusterWithShardsRestorePoint): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    backup_id: {
      value: cdktf.stringToHclTerraform(struct!.backupId),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DbClusterWithShardsRestorePointOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false, 0);
  }

  public get internalValue(): DbClusterWithShardsRestorePoint | undefined {
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._backupId !== undefined) {
      hasAnyValues = true;
      internalValueResult.backupId = this._backupId;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DbClusterWithShardsRestorePoint | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this._backupId = undefined;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this._backupId = value.backupId;
    }
  }

  // backup_id - computed: false, optional: false, required: true
  private _backupId?: string; 
  public get backupId() {
    return this.getStringAttribute('backup_id');
  }
  public set backupId(value: string) {
    this._backupId = value;
  }
  // Temporarily expose input value. Use with caution.
  public get backupIdInput() {
    return this._backupId;
  }
}
export interface DbClusterWithShardsShardInstances {
}

export function dbClusterWithShardsShardInstancesToTerraform(struct?: DbClusterWithShardsShardInstances): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
  }
}


export function dbClusterWithShardsShardInstancesToHclTerraform(struct?: DbClusterWithShardsShardInstances): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
  };
  return attrs;
}

export class DbClusterWithShardsShardInstancesOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DbClusterWithShardsShardInstances | undefined {
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DbClusterWithShardsShardInstances | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
    }
  }

  // instance_id - computed: true, optional: false, required: false
  public get instanceId() {
    return this.getStringAttribute('instance_id');
  }

  // ip - computed: true, optional: false, required: false
  public get ip() {
    return this.getListAttribute('ip');
  }
}

export class DbClusterWithShardsShardInstancesList extends cdktf.ComplexList {

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DbClusterWithShardsShardInstancesOutputReference {
    return new DbClusterWithShardsShardInstancesOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DbClusterWithShardsShardNetwork {
  /**
  * The port id of the network. Changing this creates a new cluster. **Deprecated** This argument is deprecated, please do not use it.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/vk-cs/vkcs/0.13.0/docs/resources/db_cluster_with_shards#port DbClusterWithShards#port}
  */
  readonly port?: string;
  /**
  * An array of one or more security group IDs to associate with the shard instances. Changing this creates a new cluster._new_since_v0.2.0_.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/vk-cs/vkcs/0.13.0/docs/resources/db_cluster_with_shards#security_groups DbClusterWithShards#security_groups}
  */
  readonly securityGroups?: string[];
  /**
  * The id of the subnet. Changing this creates a new cluster._new_since_v0.1.15_.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/vk-cs/vkcs/0.13.0/docs/resources/db_cluster_with_shards#subnet_id DbClusterWithShards#subnet_id}
  */
  readonly subnetId?: string;
  /**
  * The id of the network. Changing this creates a new cluster. _note_ Although this argument is marked as optional, it is actually required at the moment. Not setting a value for it may cause an error.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/vk-cs/vkcs/0.13.0/docs/resources/db_cluster_with_shards#uuid DbClusterWithShards#uuid}
  */
  readonly uuid?: string;
}

export function dbClusterWithShardsShardNetworkToTerraform(struct?: DbClusterWithShardsShardNetwork | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    port: cdktf.stringToTerraform(struct!.port),
    security_groups: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.securityGroups),
    subnet_id: cdktf.stringToTerraform(struct!.subnetId),
    uuid: cdktf.stringToTerraform(struct!.uuid),
  }
}


export function dbClusterWithShardsShardNetworkToHclTerraform(struct?: DbClusterWithShardsShardNetwork | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    port: {
      value: cdktf.stringToHclTerraform(struct!.port),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    security_groups: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.securityGroups),
      isBlock: false,
      type: "set",
      storageClassType: "stringList",
    },
    subnet_id: {
      value: cdktf.stringToHclTerraform(struct!.subnetId),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    uuid: {
      value: cdktf.stringToHclTerraform(struct!.uuid),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DbClusterWithShardsShardNetworkOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DbClusterWithShardsShardNetwork | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._port !== undefined) {
      hasAnyValues = true;
      internalValueResult.port = this._port;
    }
    if (this._securityGroups !== undefined) {
      hasAnyValues = true;
      internalValueResult.securityGroups = this._securityGroups;
    }
    if (this._subnetId !== undefined) {
      hasAnyValues = true;
      internalValueResult.subnetId = this._subnetId;
    }
    if (this._uuid !== undefined) {
      hasAnyValues = true;
      internalValueResult.uuid = this._uuid;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DbClusterWithShardsShardNetwork | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._port = undefined;
      this._securityGroups = undefined;
      this._subnetId = undefined;
      this._uuid = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._port = value.port;
      this._securityGroups = value.securityGroups;
      this._subnetId = value.subnetId;
      this._uuid = value.uuid;
    }
  }

  // port - computed: false, optional: true, required: false
  private _port?: string; 
  public get port() {
    return this.getStringAttribute('port');
  }
  public set port(value: string) {
    this._port = value;
  }
  public resetPort() {
    this._port = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get portInput() {
    return this._port;
  }

  // security_groups - computed: false, optional: true, required: false
  private _securityGroups?: string[]; 
  public get securityGroups() {
    return cdktf.Fn.tolist(this.getListAttribute('security_groups'));
  }
  public set securityGroups(value: string[]) {
    this._securityGroups = value;
  }
  public resetSecurityGroups() {
    this._securityGroups = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get securityGroupsInput() {
    return this._securityGroups;
  }

  // subnet_id - computed: false, optional: true, required: false
  private _subnetId?: string; 
  public get subnetId() {
    return this.getStringAttribute('subnet_id');
  }
  public set subnetId(value: string) {
    this._subnetId = value;
  }
  public resetSubnetId() {
    this._subnetId = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get subnetIdInput() {
    return this._subnetId;
  }

  // uuid - computed: false, optional: true, required: false
  private _uuid?: string; 
  public get uuid() {
    return this.getStringAttribute('uuid');
  }
  public set uuid(value: string) {
    this._uuid = value;
  }
  public resetUuid() {
    this._uuid = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get uuidInput() {
    return this._uuid;
  }
}

export class DbClusterWithShardsShardNetworkList extends cdktf.ComplexList {
  public internalValue? : DbClusterWithShardsShardNetwork[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DbClusterWithShardsShardNetworkOutputReference {
    return new DbClusterWithShardsShardNetworkOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DbClusterWithShardsShardWalVolume {
  /**
  * Size of the instance wal volume.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/vk-cs/vkcs/0.13.0/docs/resources/db_cluster_with_shards#size DbClusterWithShards#size}
  */
  readonly size: number;
  /**
  * The type of the cluster wal volume.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/vk-cs/vkcs/0.13.0/docs/resources/db_cluster_with_shards#volume_type DbClusterWithShards#volume_type}
  */
  readonly volumeType: string;
}

export function dbClusterWithShardsShardWalVolumeToTerraform(struct?: DbClusterWithShardsShardWalVolume | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    size: cdktf.numberToTerraform(struct!.size),
    volume_type: cdktf.stringToTerraform(struct!.volumeType),
  }
}


export function dbClusterWithShardsShardWalVolumeToHclTerraform(struct?: DbClusterWithShardsShardWalVolume | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    size: {
      value: cdktf.numberToHclTerraform(struct!.size),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    volume_type: {
      value: cdktf.stringToHclTerraform(struct!.volumeType),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DbClusterWithShardsShardWalVolumeOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DbClusterWithShardsShardWalVolume | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._size !== undefined) {
      hasAnyValues = true;
      internalValueResult.size = this._size;
    }
    if (this._volumeType !== undefined) {
      hasAnyValues = true;
      internalValueResult.volumeType = this._volumeType;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DbClusterWithShardsShardWalVolume | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._size = undefined;
      this._volumeType = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._size = value.size;
      this._volumeType = value.volumeType;
    }
  }

  // size - computed: false, optional: false, required: true
  private _size?: number; 
  public get size() {
    return this.getNumberAttribute('size');
  }
  public set size(value: number) {
    this._size = value;
  }
  // Temporarily expose input value. Use with caution.
  public get sizeInput() {
    return this._size;
  }

  // volume_type - computed: false, optional: false, required: true
  private _volumeType?: string; 
  public get volumeType() {
    return this.getStringAttribute('volume_type');
  }
  public set volumeType(value: string) {
    this._volumeType = value;
  }
  // Temporarily expose input value. Use with caution.
  public get volumeTypeInput() {
    return this._volumeType;
  }
}

export class DbClusterWithShardsShardWalVolumeList extends cdktf.ComplexList {
  public internalValue? : DbClusterWithShardsShardWalVolume[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DbClusterWithShardsShardWalVolumeOutputReference {
    return new DbClusterWithShardsShardWalVolumeOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DbClusterWithShardsShard {
  /**
  * The name of the availability zone of the cluster shard. Changing this creates a new cluster.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/vk-cs/vkcs/0.13.0/docs/resources/db_cluster_with_shards#availability_zone DbClusterWithShards#availability_zone}
  */
  readonly availabilityZone?: string;
  /**
  * The ID of flavor for the cluster shard.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/vk-cs/vkcs/0.13.0/docs/resources/db_cluster_with_shards#flavor_id DbClusterWithShards#flavor_id}
  */
  readonly flavorId: string;
  /**
  * The ID of the shard. Changing this creates a new cluster.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/vk-cs/vkcs/0.13.0/docs/resources/db_cluster_with_shards#shard_id DbClusterWithShards#shard_id}
  */
  readonly shardId: string;
  /**
  * Used only for shrinking cluster. List of IDs of instances that should remain after shrink. If no options are supplied, shrink operation will choose first non-leader instance to delete.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/vk-cs/vkcs/0.13.0/docs/resources/db_cluster_with_shards#shrink_options DbClusterWithShards#shrink_options}
  */
  readonly shrinkOptions?: string[];
  /**
  * The number of instances in the cluster shard.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/vk-cs/vkcs/0.13.0/docs/resources/db_cluster_with_shards#size DbClusterWithShards#size}
  */
  readonly size: number;
  /**
  * Size of the cluster shard instance volume.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/vk-cs/vkcs/0.13.0/docs/resources/db_cluster_with_shards#volume_size DbClusterWithShards#volume_size}
  */
  readonly volumeSize: number;
  /**
  * The type of the cluster shard instance volume.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/vk-cs/vkcs/0.13.0/docs/resources/db_cluster_with_shards#volume_type DbClusterWithShards#volume_type}
  */
  readonly volumeType: string;
  /**
  * network block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/vk-cs/vkcs/0.13.0/docs/resources/db_cluster_with_shards#network DbClusterWithShards#network}
  */
  readonly network?: DbClusterWithShardsShardNetwork[] | cdktf.IResolvable;
  /**
  * wal_volume block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/vk-cs/vkcs/0.13.0/docs/resources/db_cluster_with_shards#wal_volume DbClusterWithShards#wal_volume}
  */
  readonly walVolume?: DbClusterWithShardsShardWalVolume[] | cdktf.IResolvable;
}

export function dbClusterWithShardsShardToTerraform(struct?: DbClusterWithShardsShard | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    availability_zone: cdktf.stringToTerraform(struct!.availabilityZone),
    flavor_id: cdktf.stringToTerraform(struct!.flavorId),
    shard_id: cdktf.stringToTerraform(struct!.shardId),
    shrink_options: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.shrinkOptions),
    size: cdktf.numberToTerraform(struct!.size),
    volume_size: cdktf.numberToTerraform(struct!.volumeSize),
    volume_type: cdktf.stringToTerraform(struct!.volumeType),
    network: cdktf.listMapper(dbClusterWithShardsShardNetworkToTerraform, true)(struct!.network),
    wal_volume: cdktf.listMapper(dbClusterWithShardsShardWalVolumeToTerraform, true)(struct!.walVolume),
  }
}


export function dbClusterWithShardsShardToHclTerraform(struct?: DbClusterWithShardsShard | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    availability_zone: {
      value: cdktf.stringToHclTerraform(struct!.availabilityZone),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    flavor_id: {
      value: cdktf.stringToHclTerraform(struct!.flavorId),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    shard_id: {
      value: cdktf.stringToHclTerraform(struct!.shardId),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    shrink_options: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.shrinkOptions),
      isBlock: false,
      type: "list",
      storageClassType: "stringList",
    },
    size: {
      value: cdktf.numberToHclTerraform(struct!.size),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    volume_size: {
      value: cdktf.numberToHclTerraform(struct!.volumeSize),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    volume_type: {
      value: cdktf.stringToHclTerraform(struct!.volumeType),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    network: {
      value: cdktf.listMapperHcl(dbClusterWithShardsShardNetworkToHclTerraform, true)(struct!.network),
      isBlock: true,
      type: "list",
      storageClassType: "DbClusterWithShardsShardNetworkList",
    },
    wal_volume: {
      value: cdktf.listMapperHcl(dbClusterWithShardsShardWalVolumeToHclTerraform, true)(struct!.walVolume),
      isBlock: true,
      type: "list",
      storageClassType: "DbClusterWithShardsShardWalVolumeList",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DbClusterWithShardsShardOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DbClusterWithShardsShard | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._availabilityZone !== undefined) {
      hasAnyValues = true;
      internalValueResult.availabilityZone = this._availabilityZone;
    }
    if (this._flavorId !== undefined) {
      hasAnyValues = true;
      internalValueResult.flavorId = this._flavorId;
    }
    if (this._shardId !== undefined) {
      hasAnyValues = true;
      internalValueResult.shardId = this._shardId;
    }
    if (this._shrinkOptions !== undefined) {
      hasAnyValues = true;
      internalValueResult.shrinkOptions = this._shrinkOptions;
    }
    if (this._size !== undefined) {
      hasAnyValues = true;
      internalValueResult.size = this._size;
    }
    if (this._volumeSize !== undefined) {
      hasAnyValues = true;
      internalValueResult.volumeSize = this._volumeSize;
    }
    if (this._volumeType !== undefined) {
      hasAnyValues = true;
      internalValueResult.volumeType = this._volumeType;
    }
    if (this._network?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.network = this._network?.internalValue;
    }
    if (this._walVolume?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.walVolume = this._walVolume?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DbClusterWithShardsShard | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._availabilityZone = undefined;
      this._flavorId = undefined;
      this._shardId = undefined;
      this._shrinkOptions = undefined;
      this._size = undefined;
      this._volumeSize = undefined;
      this._volumeType = undefined;
      this._network.internalValue = undefined;
      this._walVolume.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._availabilityZone = value.availabilityZone;
      this._flavorId = value.flavorId;
      this._shardId = value.shardId;
      this._shrinkOptions = value.shrinkOptions;
      this._size = value.size;
      this._volumeSize = value.volumeSize;
      this._volumeType = value.volumeType;
      this._network.internalValue = value.network;
      this._walVolume.internalValue = value.walVolume;
    }
  }

  // availability_zone - computed: false, optional: true, required: false
  private _availabilityZone?: string; 
  public get availabilityZone() {
    return this.getStringAttribute('availability_zone');
  }
  public set availabilityZone(value: string) {
    this._availabilityZone = value;
  }
  public resetAvailabilityZone() {
    this._availabilityZone = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get availabilityZoneInput() {
    return this._availabilityZone;
  }

  // flavor_id - computed: false, optional: false, required: true
  private _flavorId?: string; 
  public get flavorId() {
    return this.getStringAttribute('flavor_id');
  }
  public set flavorId(value: string) {
    this._flavorId = value;
  }
  // Temporarily expose input value. Use with caution.
  public get flavorIdInput() {
    return this._flavorId;
  }

  // instances - computed: true, optional: false, required: false
  private _instances = new DbClusterWithShardsShardInstancesList(this, "instances", false);
  public get instances() {
    return this._instances;
  }

  // shard_id - computed: false, optional: false, required: true
  private _shardId?: string; 
  public get shardId() {
    return this.getStringAttribute('shard_id');
  }
  public set shardId(value: string) {
    this._shardId = value;
  }
  // Temporarily expose input value. Use with caution.
  public get shardIdInput() {
    return this._shardId;
  }

  // shrink_options - computed: false, optional: true, required: false
  private _shrinkOptions?: string[]; 
  public get shrinkOptions() {
    return this.getListAttribute('shrink_options');
  }
  public set shrinkOptions(value: string[]) {
    this._shrinkOptions = value;
  }
  public resetShrinkOptions() {
    this._shrinkOptions = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get shrinkOptionsInput() {
    return this._shrinkOptions;
  }

  // size - computed: false, optional: false, required: true
  private _size?: number; 
  public get size() {
    return this.getNumberAttribute('size');
  }
  public set size(value: number) {
    this._size = value;
  }
  // Temporarily expose input value. Use with caution.
  public get sizeInput() {
    return this._size;
  }

  // volume_size - computed: false, optional: false, required: true
  private _volumeSize?: number; 
  public get volumeSize() {
    return this.getNumberAttribute('volume_size');
  }
  public set volumeSize(value: number) {
    this._volumeSize = value;
  }
  // Temporarily expose input value. Use with caution.
  public get volumeSizeInput() {
    return this._volumeSize;
  }

  // volume_type - computed: false, optional: false, required: true
  private _volumeType?: string; 
  public get volumeType() {
    return this.getStringAttribute('volume_type');
  }
  public set volumeType(value: string) {
    this._volumeType = value;
  }
  // Temporarily expose input value. Use with caution.
  public get volumeTypeInput() {
    return this._volumeType;
  }

  // network - computed: false, optional: true, required: false
  private _network = new DbClusterWithShardsShardNetworkList(this, "network", false);
  public get network() {
    return this._network;
  }
  public putNetwork(value: DbClusterWithShardsShardNetwork[] | cdktf.IResolvable) {
    this._network.internalValue = value;
  }
  public resetNetwork() {
    this._network.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get networkInput() {
    return this._network.internalValue;
  }

  // wal_volume - computed: false, optional: true, required: false
  private _walVolume = new DbClusterWithShardsShardWalVolumeList(this, "wal_volume", false);
  public get walVolume() {
    return this._walVolume;
  }
  public putWalVolume(value: DbClusterWithShardsShardWalVolume[] | cdktf.IResolvable) {
    this._walVolume.internalValue = value;
  }
  public resetWalVolume() {
    this._walVolume.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get walVolumeInput() {
    return this._walVolume.internalValue;
  }
}

export class DbClusterWithShardsShardList extends cdktf.ComplexList {
  public internalValue? : DbClusterWithShardsShard[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DbClusterWithShardsShardOutputReference {
    return new DbClusterWithShardsShardOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DbClusterWithShardsTimeouts {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/vk-cs/vkcs/0.13.0/docs/resources/db_cluster_with_shards#create DbClusterWithShards#create}
  */
  readonly create?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/vk-cs/vkcs/0.13.0/docs/resources/db_cluster_with_shards#delete DbClusterWithShards#delete}
  */
  readonly delete?: string;
}

export function dbClusterWithShardsTimeoutsToTerraform(struct?: DbClusterWithShardsTimeouts | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    create: cdktf.stringToTerraform(struct!.create),
    delete: cdktf.stringToTerraform(struct!.delete),
  }
}


export function dbClusterWithShardsTimeoutsToHclTerraform(struct?: DbClusterWithShardsTimeouts | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    create: {
      value: cdktf.stringToHclTerraform(struct!.create),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    delete: {
      value: cdktf.stringToHclTerraform(struct!.delete),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DbClusterWithShardsTimeoutsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false);
  }

  public get internalValue(): DbClusterWithShardsTimeouts | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._create !== undefined) {
      hasAnyValues = true;
      internalValueResult.create = this._create;
    }
    if (this._delete !== undefined) {
      hasAnyValues = true;
      internalValueResult.delete = this._delete;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DbClusterWithShardsTimeouts | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._create = undefined;
      this._delete = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._create = value.create;
      this._delete = value.delete;
    }
  }

  // create - computed: false, optional: true, required: false
  private _create?: string; 
  public get create() {
    return this.getStringAttribute('create');
  }
  public set create(value: string) {
    this._create = value;
  }
  public resetCreate() {
    this._create = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get createInput() {
    return this._create;
  }

  // delete - computed: false, optional: true, required: false
  private _delete?: string; 
  public get delete() {
    return this.getStringAttribute('delete');
  }
  public set delete(value: string) {
    this._delete = value;
  }
  public resetDelete() {
    this._delete = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get deleteInput() {
    return this._delete;
  }
}
export interface DbClusterWithShardsVendorOptions {
  /**
  * Boolean to confirm autorestart of the cluster's instances if it is required to apply configuration group changes.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/vk-cs/vkcs/0.13.0/docs/resources/db_cluster_with_shards#restart_confirmed DbClusterWithShards#restart_confirmed}
  */
  readonly restartConfirmed?: boolean | cdktf.IResolvable;
}

export function dbClusterWithShardsVendorOptionsToTerraform(struct?: DbClusterWithShardsVendorOptionsOutputReference | DbClusterWithShardsVendorOptions): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    restart_confirmed: cdktf.booleanToTerraform(struct!.restartConfirmed),
  }
}


export function dbClusterWithShardsVendorOptionsToHclTerraform(struct?: DbClusterWithShardsVendorOptionsOutputReference | DbClusterWithShardsVendorOptions): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    restart_confirmed: {
      value: cdktf.booleanToHclTerraform(struct!.restartConfirmed),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DbClusterWithShardsVendorOptionsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false, 0);
  }

  public get internalValue(): DbClusterWithShardsVendorOptions | undefined {
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._restartConfirmed !== undefined) {
      hasAnyValues = true;
      internalValueResult.restartConfirmed = this._restartConfirmed;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DbClusterWithShardsVendorOptions | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this._restartConfirmed = undefined;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this._restartConfirmed = value.restartConfirmed;
    }
  }

  // restart_confirmed - computed: false, optional: true, required: false
  private _restartConfirmed?: boolean | cdktf.IResolvable; 
  public get restartConfirmed() {
    return this.getBooleanAttribute('restart_confirmed');
  }
  public set restartConfirmed(value: boolean | cdktf.IResolvable) {
    this._restartConfirmed = value;
  }
  public resetRestartConfirmed() {
    this._restartConfirmed = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get restartConfirmedInput() {
    return this._restartConfirmed;
  }
}
export interface DbClusterWithShardsWalDiskAutoexpand {
  /**
  * Indicates whether wal volume autoresize is enabled.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/vk-cs/vkcs/0.13.0/docs/resources/db_cluster_with_shards#autoexpand DbClusterWithShards#autoexpand}
  */
  readonly autoexpand?: boolean | cdktf.IResolvable;
  /**
  * Maximum disk size for wal volume autoresize.
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/vk-cs/vkcs/0.13.0/docs/resources/db_cluster_with_shards#max_disk_size DbClusterWithShards#max_disk_size}
  */
  readonly maxDiskSize?: number;
}

export function dbClusterWithShardsWalDiskAutoexpandToTerraform(struct?: DbClusterWithShardsWalDiskAutoexpandOutputReference | DbClusterWithShardsWalDiskAutoexpand): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    autoexpand: cdktf.booleanToTerraform(struct!.autoexpand),
    max_disk_size: cdktf.numberToTerraform(struct!.maxDiskSize),
  }
}


export function dbClusterWithShardsWalDiskAutoexpandToHclTerraform(struct?: DbClusterWithShardsWalDiskAutoexpandOutputReference | DbClusterWithShardsWalDiskAutoexpand): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    autoexpand: {
      value: cdktf.booleanToHclTerraform(struct!.autoexpand),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    max_disk_size: {
      value: cdktf.numberToHclTerraform(struct!.maxDiskSize),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DbClusterWithShardsWalDiskAutoexpandOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string) {
    super(terraformResource, terraformAttribute, false, 0);
  }

  public get internalValue(): DbClusterWithShardsWalDiskAutoexpand | undefined {
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._autoexpand !== undefined) {
      hasAnyValues = true;
      internalValueResult.autoexpand = this._autoexpand;
    }
    if (this._maxDiskSize !== undefined) {
      hasAnyValues = true;
      internalValueResult.maxDiskSize = this._maxDiskSize;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DbClusterWithShardsWalDiskAutoexpand | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this._autoexpand = undefined;
      this._maxDiskSize = undefined;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this._autoexpand = value.autoexpand;
      this._maxDiskSize = value.maxDiskSize;
    }
  }

  // autoexpand - computed: false, optional: true, required: false
  private _autoexpand?: boolean | cdktf.IResolvable; 
  public get autoexpand() {
    return this.getBooleanAttribute('autoexpand');
  }
  public set autoexpand(value: boolean | cdktf.IResolvable) {
    this._autoexpand = value;
  }
  public resetAutoexpand() {
    this._autoexpand = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get autoexpandInput() {
    return this._autoexpand;
  }

  // max_disk_size - computed: false, optional: true, required: false
  private _maxDiskSize?: number; 
  public get maxDiskSize() {
    return this.getNumberAttribute('max_disk_size');
  }
  public set maxDiskSize(value: number) {
    this._maxDiskSize = value;
  }
  public resetMaxDiskSize() {
    this._maxDiskSize = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get maxDiskSizeInput() {
    return this._maxDiskSize;
  }
}

/**
* Represents a {@link https://registry.terraform.io/providers/vk-cs/vkcs/0.13.0/docs/resources/db_cluster_with_shards vkcs_db_cluster_with_shards}
*/
export class DbClusterWithShards extends cdktf.TerraformResource {

  // =================
  // STATIC PROPERTIES
  // =================
  public static readonly tfResourceType = "vkcs_db_cluster_with_shards";

  // ==============
  // STATIC Methods
  // ==============
  /**
  * Generates CDKTF code for importing a DbClusterWithShards resource upon running "cdktf plan <stack-name>"
  * @param scope The scope in which to define this construct
  * @param importToId The construct id used in the generated config for the DbClusterWithShards to import
  * @param importFromId The id of the existing DbClusterWithShards that should be imported. Refer to the {@link https://registry.terraform.io/providers/vk-cs/vkcs/0.13.0/docs/resources/db_cluster_with_shards#import import section} in the documentation of this resource for the id to use
  * @param provider? Optional instance of the provider where the DbClusterWithShards to import is found
  */
  public static generateConfigForImport(scope: Construct, importToId: string, importFromId: string, provider?: cdktf.TerraformProvider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "vkcs_db_cluster_with_shards", importId: importFromId, provider });
      }

  // ===========
  // INITIALIZER
  // ===========

  /**
  * Create a new {@link https://registry.terraform.io/providers/vk-cs/vkcs/0.13.0/docs/resources/db_cluster_with_shards vkcs_db_cluster_with_shards} Resource
  *
  * @param scope The scope in which to define this construct
  * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
  * @param options DbClusterWithShardsConfig
  */
  public constructor(scope: Construct, id: string, config: DbClusterWithShardsConfig) {
    super(scope, id, {
      terraformResourceType: 'vkcs_db_cluster_with_shards',
      terraformGeneratorMetadata: {
        providerName: 'vkcs',
        providerVersion: '0.13.0'
      },
      provider: config.provider,
      dependsOn: config.dependsOn,
      count: config.count,
      lifecycle: config.lifecycle,
      provisioners: config.provisioners,
      connection: config.connection,
      forEach: config.forEach
    });
    this._cloudMonitoringEnabled = config.cloudMonitoringEnabled;
    this._configurationId = config.configurationId;
    this._floatingIpEnabled = config.floatingIpEnabled;
    this._id = config.id;
    this._keypair = config.keypair;
    this._name = config.name;
    this._region = config.region;
    this._rootEnabled = config.rootEnabled;
    this._rootPassword = config.rootPassword;
    this._capabilities.internalValue = config.capabilities;
    this._datastore.internalValue = config.datastore;
    this._diskAutoexpand.internalValue = config.diskAutoexpand;
    this._restorePoint.internalValue = config.restorePoint;
    this._shard.internalValue = config.shard;
    this._timeouts.internalValue = config.timeouts;
    this._vendorOptions.internalValue = config.vendorOptions;
    this._walDiskAutoexpand.internalValue = config.walDiskAutoexpand;
  }

  // ==========
  // ATTRIBUTES
  // ==========

  // cloud_monitoring_enabled - computed: false, optional: true, required: false
  private _cloudMonitoringEnabled?: boolean | cdktf.IResolvable; 
  public get cloudMonitoringEnabled() {
    return this.getBooleanAttribute('cloud_monitoring_enabled');
  }
  public set cloudMonitoringEnabled(value: boolean | cdktf.IResolvable) {
    this._cloudMonitoringEnabled = value;
  }
  public resetCloudMonitoringEnabled() {
    this._cloudMonitoringEnabled = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get cloudMonitoringEnabledInput() {
    return this._cloudMonitoringEnabled;
  }

  // configuration_id - computed: false, optional: true, required: false
  private _configurationId?: string; 
  public get configurationId() {
    return this.getStringAttribute('configuration_id');
  }
  public set configurationId(value: string) {
    this._configurationId = value;
  }
  public resetConfigurationId() {
    this._configurationId = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get configurationIdInput() {
    return this._configurationId;
  }

  // floating_ip_enabled - computed: false, optional: true, required: false
  private _floatingIpEnabled?: boolean | cdktf.IResolvable; 
  public get floatingIpEnabled() {
    return this.getBooleanAttribute('floating_ip_enabled');
  }
  public set floatingIpEnabled(value: boolean | cdktf.IResolvable) {
    this._floatingIpEnabled = value;
  }
  public resetFloatingIpEnabled() {
    this._floatingIpEnabled = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get floatingIpEnabledInput() {
    return this._floatingIpEnabled;
  }

  // id - computed: true, optional: true, required: false
  private _id?: string; 
  public get id() {
    return this.getStringAttribute('id');
  }
  public set id(value: string) {
    this._id = value;
  }
  public resetId() {
    this._id = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get idInput() {
    return this._id;
  }

  // keypair - computed: false, optional: true, required: false
  private _keypair?: string; 
  public get keypair() {
    return this.getStringAttribute('keypair');
  }
  public set keypair(value: string) {
    this._keypair = value;
  }
  public resetKeypair() {
    this._keypair = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get keypairInput() {
    return this._keypair;
  }

  // name - computed: false, optional: false, required: true
  private _name?: string; 
  public get name() {
    return this.getStringAttribute('name');
  }
  public set name(value: string) {
    this._name = value;
  }
  // Temporarily expose input value. Use with caution.
  public get nameInput() {
    return this._name;
  }

  // region - computed: true, optional: true, required: false
  private _region?: string; 
  public get region() {
    return this.getStringAttribute('region');
  }
  public set region(value: string) {
    this._region = value;
  }
  public resetRegion() {
    this._region = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get regionInput() {
    return this._region;
  }

  // root_enabled - computed: false, optional: true, required: false
  private _rootEnabled?: boolean | cdktf.IResolvable; 
  public get rootEnabled() {
    return this.getBooleanAttribute('root_enabled');
  }
  public set rootEnabled(value: boolean | cdktf.IResolvable) {
    this._rootEnabled = value;
  }
  public resetRootEnabled() {
    this._rootEnabled = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get rootEnabledInput() {
    return this._rootEnabled;
  }

  // root_password - computed: true, optional: true, required: false
  private _rootPassword?: string; 
  public get rootPassword() {
    return this.getStringAttribute('root_password');
  }
  public set rootPassword(value: string) {
    this._rootPassword = value;
  }
  public resetRootPassword() {
    this._rootPassword = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get rootPasswordInput() {
    return this._rootPassword;
  }

  // capabilities - computed: false, optional: true, required: false
  private _capabilities = new DbClusterWithShardsCapabilitiesList(this, "capabilities", false);
  public get capabilities() {
    return this._capabilities;
  }
  public putCapabilities(value: DbClusterWithShardsCapabilities[] | cdktf.IResolvable) {
    this._capabilities.internalValue = value;
  }
  public resetCapabilities() {
    this._capabilities.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get capabilitiesInput() {
    return this._capabilities.internalValue;
  }

  // datastore - computed: false, optional: false, required: true
  private _datastore = new DbClusterWithShardsDatastoreOutputReference(this, "datastore");
  public get datastore() {
    return this._datastore;
  }
  public putDatastore(value: DbClusterWithShardsDatastore) {
    this._datastore.internalValue = value;
  }
  // Temporarily expose input value. Use with caution.
  public get datastoreInput() {
    return this._datastore.internalValue;
  }

  // disk_autoexpand - computed: false, optional: true, required: false
  private _diskAutoexpand = new DbClusterWithShardsDiskAutoexpandOutputReference(this, "disk_autoexpand");
  public get diskAutoexpand() {
    return this._diskAutoexpand;
  }
  public putDiskAutoexpand(value: DbClusterWithShardsDiskAutoexpand) {
    this._diskAutoexpand.internalValue = value;
  }
  public resetDiskAutoexpand() {
    this._diskAutoexpand.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get diskAutoexpandInput() {
    return this._diskAutoexpand.internalValue;
  }

  // restore_point - computed: false, optional: true, required: false
  private _restorePoint = new DbClusterWithShardsRestorePointOutputReference(this, "restore_point");
  public get restorePoint() {
    return this._restorePoint;
  }
  public putRestorePoint(value: DbClusterWithShardsRestorePoint) {
    this._restorePoint.internalValue = value;
  }
  public resetRestorePoint() {
    this._restorePoint.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get restorePointInput() {
    return this._restorePoint.internalValue;
  }

  // shard - computed: false, optional: false, required: true
  private _shard = new DbClusterWithShardsShardList(this, "shard", false);
  public get shard() {
    return this._shard;
  }
  public putShard(value: DbClusterWithShardsShard[] | cdktf.IResolvable) {
    this._shard.internalValue = value;
  }
  // Temporarily expose input value. Use with caution.
  public get shardInput() {
    return this._shard.internalValue;
  }

  // timeouts - computed: false, optional: true, required: false
  private _timeouts = new DbClusterWithShardsTimeoutsOutputReference(this, "timeouts");
  public get timeouts() {
    return this._timeouts;
  }
  public putTimeouts(value: DbClusterWithShardsTimeouts) {
    this._timeouts.internalValue = value;
  }
  public resetTimeouts() {
    this._timeouts.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get timeoutsInput() {
    return this._timeouts.internalValue;
  }

  // vendor_options - computed: false, optional: true, required: false
  private _vendorOptions = new DbClusterWithShardsVendorOptionsOutputReference(this, "vendor_options");
  public get vendorOptions() {
    return this._vendorOptions;
  }
  public putVendorOptions(value: DbClusterWithShardsVendorOptions) {
    this._vendorOptions.internalValue = value;
  }
  public resetVendorOptions() {
    this._vendorOptions.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get vendorOptionsInput() {
    return this._vendorOptions.internalValue;
  }

  // wal_disk_autoexpand - computed: false, optional: true, required: false
  private _walDiskAutoexpand = new DbClusterWithShardsWalDiskAutoexpandOutputReference(this, "wal_disk_autoexpand");
  public get walDiskAutoexpand() {
    return this._walDiskAutoexpand;
  }
  public putWalDiskAutoexpand(value: DbClusterWithShardsWalDiskAutoexpand) {
    this._walDiskAutoexpand.internalValue = value;
  }
  public resetWalDiskAutoexpand() {
    this._walDiskAutoexpand.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get walDiskAutoexpandInput() {
    return this._walDiskAutoexpand.internalValue;
  }

  // =========
  // SYNTHESIS
  // =========

  protected synthesizeAttributes(): { [name: string]: any } {
    return {
      cloud_monitoring_enabled: cdktf.booleanToTerraform(this._cloudMonitoringEnabled),
      configuration_id: cdktf.stringToTerraform(this._configurationId),
      floating_ip_enabled: cdktf.booleanToTerraform(this._floatingIpEnabled),
      id: cdktf.stringToTerraform(this._id),
      keypair: cdktf.stringToTerraform(this._keypair),
      name: cdktf.stringToTerraform(this._name),
      region: cdktf.stringToTerraform(this._region),
      root_enabled: cdktf.booleanToTerraform(this._rootEnabled),
      root_password: cdktf.stringToTerraform(this._rootPassword),
      capabilities: cdktf.listMapper(dbClusterWithShardsCapabilitiesToTerraform, true)(this._capabilities.internalValue),
      datastore: dbClusterWithShardsDatastoreToTerraform(this._datastore.internalValue),
      disk_autoexpand: dbClusterWithShardsDiskAutoexpandToTerraform(this._diskAutoexpand.internalValue),
      restore_point: dbClusterWithShardsRestorePointToTerraform(this._restorePoint.internalValue),
      shard: cdktf.listMapper(dbClusterWithShardsShardToTerraform, true)(this._shard.internalValue),
      timeouts: dbClusterWithShardsTimeoutsToTerraform(this._timeouts.internalValue),
      vendor_options: dbClusterWithShardsVendorOptionsToTerraform(this._vendorOptions.internalValue),
      wal_disk_autoexpand: dbClusterWithShardsWalDiskAutoexpandToTerraform(this._walDiskAutoexpand.internalValue),
    };
  }

  protected synthesizeHclAttributes(): { [name: string]: any } {
    const attrs = {
      cloud_monitoring_enabled: {
        value: cdktf.booleanToHclTerraform(this._cloudMonitoringEnabled),
        isBlock: false,
        type: "simple",
        storageClassType: "boolean",
      },
      configuration_id: {
        value: cdktf.stringToHclTerraform(this._configurationId),
        isBlock: false,
        type: "simple",
        storageClassType: "string",
      },
      floating_ip_enabled: {
        value: cdktf.booleanToHclTerraform(this._floatingIpEnabled),
        isBlock: false,
        type: "simple",
        storageClassType: "boolean",
      },
      id: {
        value: cdktf.stringToHclTerraform(this._id),
        isBlock: false,
        type: "simple",
        storageClassType: "string",
      },
      keypair: {
        value: cdktf.stringToHclTerraform(this._keypair),
        isBlock: false,
        type: "simple",
        storageClassType: "string",
      },
      name: {
        value: cdktf.stringToHclTerraform(this._name),
        isBlock: false,
        type: "simple",
        storageClassType: "string",
      },
      region: {
        value: cdktf.stringToHclTerraform(this._region),
        isBlock: false,
        type: "simple",
        storageClassType: "string",
      },
      root_enabled: {
        value: cdktf.booleanToHclTerraform(this._rootEnabled),
        isBlock: false,
        type: "simple",
        storageClassType: "boolean",
      },
      root_password: {
        value: cdktf.stringToHclTerraform(this._rootPassword),
        isBlock: false,
        type: "simple",
        storageClassType: "string",
      },
      capabilities: {
        value: cdktf.listMapperHcl(dbClusterWithShardsCapabilitiesToHclTerraform, true)(this._capabilities.internalValue),
        isBlock: true,
        type: "list",
        storageClassType: "DbClusterWithShardsCapabilitiesList",
      },
      datastore: {
        value: dbClusterWithShardsDatastoreToHclTerraform(this._datastore.internalValue),
        isBlock: true,
        type: "list",
        storageClassType: "DbClusterWithShardsDatastoreList",
      },
      disk_autoexpand: {
        value: dbClusterWithShardsDiskAutoexpandToHclTerraform(this._diskAutoexpand.internalValue),
        isBlock: true,
        type: "list",
        storageClassType: "DbClusterWithShardsDiskAutoexpandList",
      },
      restore_point: {
        value: dbClusterWithShardsRestorePointToHclTerraform(this._restorePoint.internalValue),
        isBlock: true,
        type: "list",
        storageClassType: "DbClusterWithShardsRestorePointList",
      },
      shard: {
        value: cdktf.listMapperHcl(dbClusterWithShardsShardToHclTerraform, true)(this._shard.internalValue),
        isBlock: true,
        type: "list",
        storageClassType: "DbClusterWithShardsShardList",
      },
      timeouts: {
        value: dbClusterWithShardsTimeoutsToHclTerraform(this._timeouts.internalValue),
        isBlock: true,
        type: "struct",
        storageClassType: "DbClusterWithShardsTimeouts",
      },
      vendor_options: {
        value: dbClusterWithShardsVendorOptionsToHclTerraform(this._vendorOptions.internalValue),
        isBlock: true,
        type: "set",
        storageClassType: "DbClusterWithShardsVendorOptionsList",
      },
      wal_disk_autoexpand: {
        value: dbClusterWithShardsWalDiskAutoexpandToHclTerraform(this._walDiskAutoexpand.internalValue),
        isBlock: true,
        type: "list",
        storageClassType: "DbClusterWithShardsWalDiskAutoexpandList",
      },
    };

    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined ))
  }
}
