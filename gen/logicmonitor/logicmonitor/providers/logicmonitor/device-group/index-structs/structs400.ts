import * as cdktf from 'cdktf';
export interface DeviceGroupExtraServicesDMSREPLICATIONTags {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#name DeviceGroup#name}
  */
  readonly name?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#operation DeviceGroup#operation}
  */
  readonly operation?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#value DeviceGroup#value}
  */
  readonly value?: string;
}

export function deviceGroupExtraServicesDMSREPLICATIONTagsToTerraform(struct?: DeviceGroupExtraServicesDMSREPLICATIONTags | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    name: cdktf.stringToTerraform(struct!.name),
    operation: cdktf.stringToTerraform(struct!.operation),
    value: cdktf.stringToTerraform(struct!.value),
  }
}


export function deviceGroupExtraServicesDMSREPLICATIONTagsToHclTerraform(struct?: DeviceGroupExtraServicesDMSREPLICATIONTags | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    name: {
      value: cdktf.stringToHclTerraform(struct!.name),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    operation: {
      value: cdktf.stringToHclTerraform(struct!.operation),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    value: {
      value: cdktf.stringToHclTerraform(struct!.value),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesDMSREPLICATIONTagsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesDMSREPLICATIONTags | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._name !== undefined) {
      hasAnyValues = true;
      internalValueResult.name = this._name;
    }
    if (this._operation !== undefined) {
      hasAnyValues = true;
      internalValueResult.operation = this._operation;
    }
    if (this._value !== undefined) {
      hasAnyValues = true;
      internalValueResult.value = this._value;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesDMSREPLICATIONTags | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._name = undefined;
      this._operation = undefined;
      this._value = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._name = value.name;
      this._operation = value.operation;
      this._value = value.value;
    }
  }

  // name - computed: false, optional: true, required: false
  private _name?: string; 
  public get name() {
    return this.getStringAttribute('name');
  }
  public set name(value: string) {
    this._name = value;
  }
  public resetName() {
    this._name = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get nameInput() {
    return this._name;
  }

  // operation - computed: false, optional: true, required: false
  private _operation?: string; 
  public get operation() {
    return this.getStringAttribute('operation');
  }
  public set operation(value: string) {
    this._operation = value;
  }
  public resetOperation() {
    this._operation = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get operationInput() {
    return this._operation;
  }

  // value - computed: false, optional: true, required: false
  private _value?: string; 
  public get value() {
    return this.getStringAttribute('value');
  }
  public set value(value: string) {
    this._value = value;
  }
  public resetValue() {
    this._value = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get valueInput() {
    return this._value;
  }
}

export class DeviceGroupExtraServicesDMSREPLICATIONTagsList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesDMSREPLICATIONTags[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesDMSREPLICATIONTagsOutputReference {
    return new DeviceGroupExtraServicesDMSREPLICATIONTagsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesDMSREPLICATIONNormalCollectorConfigCollectors {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#applies_to DeviceGroup#applies_to}
  */
  readonly appliesTo?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#auto_balanced_collector_group_id DeviceGroup#auto_balanced_collector_group_id}
  */
  readonly autoBalancedCollectorGroupId?: number;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#collector_id DeviceGroup#collector_id}
  */
  readonly collectorId?: number;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#priority DeviceGroup#priority}
  */
  readonly priority?: number;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#use_public_ip DeviceGroup#use_public_ip}
  */
  readonly usePublicIp?: boolean | cdktf.IResolvable;
}

export function deviceGroupExtraServicesDMSREPLICATIONNormalCollectorConfigCollectorsToTerraform(struct?: DeviceGroupExtraServicesDMSREPLICATIONNormalCollectorConfigCollectors | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    applies_to: cdktf.stringToTerraform(struct!.appliesTo),
    auto_balanced_collector_group_id: cdktf.numberToTerraform(struct!.autoBalancedCollectorGroupId),
    collector_id: cdktf.numberToTerraform(struct!.collectorId),
    priority: cdktf.numberToTerraform(struct!.priority),
    use_public_ip: cdktf.booleanToTerraform(struct!.usePublicIp),
  }
}


export function deviceGroupExtraServicesDMSREPLICATIONNormalCollectorConfigCollectorsToHclTerraform(struct?: DeviceGroupExtraServicesDMSREPLICATIONNormalCollectorConfigCollectors | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    applies_to: {
      value: cdktf.stringToHclTerraform(struct!.appliesTo),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    auto_balanced_collector_group_id: {
      value: cdktf.numberToHclTerraform(struct!.autoBalancedCollectorGroupId),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    collector_id: {
      value: cdktf.numberToHclTerraform(struct!.collectorId),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    priority: {
      value: cdktf.numberToHclTerraform(struct!.priority),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    use_public_ip: {
      value: cdktf.booleanToHclTerraform(struct!.usePublicIp),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesDMSREPLICATIONNormalCollectorConfigCollectorsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesDMSREPLICATIONNormalCollectorConfigCollectors | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._appliesTo !== undefined) {
      hasAnyValues = true;
      internalValueResult.appliesTo = this._appliesTo;
    }
    if (this._autoBalancedCollectorGroupId !== undefined) {
      hasAnyValues = true;
      internalValueResult.autoBalancedCollectorGroupId = this._autoBalancedCollectorGroupId;
    }
    if (this._collectorId !== undefined) {
      hasAnyValues = true;
      internalValueResult.collectorId = this._collectorId;
    }
    if (this._priority !== undefined) {
      hasAnyValues = true;
      internalValueResult.priority = this._priority;
    }
    if (this._usePublicIp !== undefined) {
      hasAnyValues = true;
      internalValueResult.usePublicIp = this._usePublicIp;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesDMSREPLICATIONNormalCollectorConfigCollectors | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._appliesTo = undefined;
      this._autoBalancedCollectorGroupId = undefined;
      this._collectorId = undefined;
      this._priority = undefined;
      this._usePublicIp = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._appliesTo = value.appliesTo;
      this._autoBalancedCollectorGroupId = value.autoBalancedCollectorGroupId;
      this._collectorId = value.collectorId;
      this._priority = value.priority;
      this._usePublicIp = value.usePublicIp;
    }
  }

  // applies_to - computed: false, optional: true, required: false
  private _appliesTo?: string; 
  public get appliesTo() {
    return this.getStringAttribute('applies_to');
  }
  public set appliesTo(value: string) {
    this._appliesTo = value;
  }
  public resetAppliesTo() {
    this._appliesTo = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get appliesToInput() {
    return this._appliesTo;
  }

  // auto_balanced_collector_group_id - computed: false, optional: true, required: false
  private _autoBalancedCollectorGroupId?: number; 
  public get autoBalancedCollectorGroupId() {
    return this.getNumberAttribute('auto_balanced_collector_group_id');
  }
  public set autoBalancedCollectorGroupId(value: number) {
    this._autoBalancedCollectorGroupId = value;
  }
  public resetAutoBalancedCollectorGroupId() {
    this._autoBalancedCollectorGroupId = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get autoBalancedCollectorGroupIdInput() {
    return this._autoBalancedCollectorGroupId;
  }

  // collector_id - computed: false, optional: true, required: false
  private _collectorId?: number; 
  public get collectorId() {
    return this.getNumberAttribute('collector_id');
  }
  public set collectorId(value: number) {
    this._collectorId = value;
  }
  public resetCollectorId() {
    this._collectorId = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get collectorIdInput() {
    return this._collectorId;
  }

  // priority - computed: false, optional: true, required: false
  private _priority?: number; 
  public get priority() {
    return this.getNumberAttribute('priority');
  }
  public set priority(value: number) {
    this._priority = value;
  }
  public resetPriority() {
    this._priority = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get priorityInput() {
    return this._priority;
  }

  // use_public_ip - computed: false, optional: true, required: false
  private _usePublicIp?: boolean | cdktf.IResolvable; 
  public get usePublicIp() {
    return this.getBooleanAttribute('use_public_ip');
  }
  public set usePublicIp(value: boolean | cdktf.IResolvable) {
    this._usePublicIp = value;
  }
  public resetUsePublicIp() {
    this._usePublicIp = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get usePublicIpInput() {
    return this._usePublicIp;
  }
}

export class DeviceGroupExtraServicesDMSREPLICATIONNormalCollectorConfigCollectorsList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesDMSREPLICATIONNormalCollectorConfigCollectors[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesDMSREPLICATIONNormalCollectorConfigCollectorsOutputReference {
    return new DeviceGroupExtraServicesDMSREPLICATIONNormalCollectorConfigCollectorsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesDMSREPLICATIONNormalCollectorConfig {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#collectors DeviceGroup#collectors}
  */
  readonly collectors?: DeviceGroupExtraServicesDMSREPLICATIONNormalCollectorConfigCollectors[] | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#enabled DeviceGroup#enabled}
  */
  readonly enabled: boolean | cdktf.IResolvable;
}

export function deviceGroupExtraServicesDMSREPLICATIONNormalCollectorConfigToTerraform(struct?: DeviceGroupExtraServicesDMSREPLICATIONNormalCollectorConfig | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    collectors: cdktf.listMapper(deviceGroupExtraServicesDMSREPLICATIONNormalCollectorConfigCollectorsToTerraform, false)(struct!.collectors),
    enabled: cdktf.booleanToTerraform(struct!.enabled),
  }
}


export function deviceGroupExtraServicesDMSREPLICATIONNormalCollectorConfigToHclTerraform(struct?: DeviceGroupExtraServicesDMSREPLICATIONNormalCollectorConfig | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    collectors: {
      value: cdktf.listMapperHcl(deviceGroupExtraServicesDMSREPLICATIONNormalCollectorConfigCollectorsToHclTerraform, false)(struct!.collectors),
      isBlock: true,
      type: "list",
      storageClassType: "DeviceGroupExtraServicesDMSREPLICATIONNormalCollectorConfigCollectorsList",
    },
    enabled: {
      value: cdktf.booleanToHclTerraform(struct!.enabled),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesDMSREPLICATIONNormalCollectorConfigOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesDMSREPLICATIONNormalCollectorConfig | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._collectors?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.collectors = this._collectors?.internalValue;
    }
    if (this._enabled !== undefined) {
      hasAnyValues = true;
      internalValueResult.enabled = this._enabled;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesDMSREPLICATIONNormalCollectorConfig | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._collectors.internalValue = undefined;
      this._enabled = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._collectors.internalValue = value.collectors;
      this._enabled = value.enabled;
    }
  }

  // collectors - computed: false, optional: true, required: false
  private _collectors = new DeviceGroupExtraServicesDMSREPLICATIONNormalCollectorConfigCollectorsList(this, "collectors", false);
  public get collectors() {
    return this._collectors;
  }
  public putCollectors(value: DeviceGroupExtraServicesDMSREPLICATIONNormalCollectorConfigCollectors[] | cdktf.IResolvable) {
    this._collectors.internalValue = value;
  }
  public resetCollectors() {
    this._collectors.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get collectorsInput() {
    return this._collectors.internalValue;
  }

  // enabled - computed: false, optional: false, required: true
  private _enabled?: boolean | cdktf.IResolvable; 
  public get enabled() {
    return this.getBooleanAttribute('enabled');
  }
  public set enabled(value: boolean | cdktf.IResolvable) {
    this._enabled = value;
  }
  // Temporarily expose input value. Use with caution.
  public get enabledInput() {
    return this._enabled;
  }
}

export class DeviceGroupExtraServicesDMSREPLICATIONNormalCollectorConfigList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesDMSREPLICATIONNormalCollectorConfig[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesDMSREPLICATIONNormalCollectorConfigOutputReference {
    return new DeviceGroupExtraServicesDMSREPLICATIONNormalCollectorConfigOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesDMSREPLICATION {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#custom_n_s_p_schedule DeviceGroup#custom_n_s_p_schedule}
  */
  readonly customNSPSchedule?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#dead_operation DeviceGroup#dead_operation}
  */
  readonly deadOperation?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#device_display_name_template DeviceGroup#device_display_name_template}
  */
  readonly deviceDisplayNameTemplate?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#disable_stop_terminate_host_monitor DeviceGroup#disable_stop_terminate_host_monitor}
  */
  readonly disableStopTerminateHostMonitor?: boolean | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#disable_terminated_host_alerting DeviceGroup#disable_terminated_host_alerting}
  */
  readonly disableTerminatedHostAlerting?: boolean | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#monitoring_region_infos DeviceGroup#monitoring_region_infos}
  */
  readonly monitoringRegionInfos?: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#monitoring_regions DeviceGroup#monitoring_regions}
  */
  readonly monitoringRegions?: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#name_filter DeviceGroup#name_filter}
  */
  readonly nameFilter?: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#select_all DeviceGroup#select_all}
  */
  readonly selectAll?: boolean | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#tags DeviceGroup#tags}
  */
  readonly tags?: DeviceGroupExtraServicesDMSREPLICATIONTags[] | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#use_default DeviceGroup#use_default}
  */
  readonly useDefault: boolean | cdktf.IResolvable;
  /**
  * normal_collector_config block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#normal_collector_config DeviceGroup#normal_collector_config}
  */
  readonly normalCollectorConfig?: DeviceGroupExtraServicesDMSREPLICATIONNormalCollectorConfig[] | cdktf.IResolvable;
}

export function deviceGroupExtraServicesDMSREPLICATIONToTerraform(struct?: DeviceGroupExtraServicesDMSREPLICATION | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    custom_n_s_p_schedule: cdktf.stringToTerraform(struct!.customNSPSchedule),
    dead_operation: cdktf.stringToTerraform(struct!.deadOperation),
    device_display_name_template: cdktf.stringToTerraform(struct!.deviceDisplayNameTemplate),
    disable_stop_terminate_host_monitor: cdktf.booleanToTerraform(struct!.disableStopTerminateHostMonitor),
    disable_terminated_host_alerting: cdktf.booleanToTerraform(struct!.disableTerminatedHostAlerting),
    monitoring_region_infos: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.monitoringRegionInfos),
    monitoring_regions: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.monitoringRegions),
    name_filter: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.nameFilter),
    select_all: cdktf.booleanToTerraform(struct!.selectAll),
    tags: cdktf.listMapper(deviceGroupExtraServicesDMSREPLICATIONTagsToTerraform, false)(struct!.tags),
    use_default: cdktf.booleanToTerraform(struct!.useDefault),
    normal_collector_config: cdktf.listMapper(deviceGroupExtraServicesDMSREPLICATIONNormalCollectorConfigToTerraform, true)(struct!.normalCollectorConfig),
  }
}


export function deviceGroupExtraServicesDMSREPLICATIONToHclTerraform(struct?: DeviceGroupExtraServicesDMSREPLICATION | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    custom_n_s_p_schedule: {
      value: cdktf.stringToHclTerraform(struct!.customNSPSchedule),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    dead_operation: {
      value: cdktf.stringToHclTerraform(struct!.deadOperation),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    device_display_name_template: {
      value: cdktf.stringToHclTerraform(struct!.deviceDisplayNameTemplate),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    disable_stop_terminate_host_monitor: {
      value: cdktf.booleanToHclTerraform(struct!.disableStopTerminateHostMonitor),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    disable_terminated_host_alerting: {
      value: cdktf.booleanToHclTerraform(struct!.disableTerminatedHostAlerting),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    monitoring_region_infos: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.monitoringRegionInfos),
      isBlock: false,
      type: "set",
      storageClassType: "stringList",
    },
    monitoring_regions: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.monitoringRegions),
      isBlock: false,
      type: "set",
      storageClassType: "stringList",
    },
    name_filter: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.nameFilter),
      isBlock: false,
      type: "set",
      storageClassType: "stringList",
    },
    select_all: {
      value: cdktf.booleanToHclTerraform(struct!.selectAll),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    tags: {
      value: cdktf.listMapperHcl(deviceGroupExtraServicesDMSREPLICATIONTagsToHclTerraform, false)(struct!.tags),
      isBlock: true,
      type: "list",
      storageClassType: "DeviceGroupExtraServicesDMSREPLICATIONTagsList",
    },
    use_default: {
      value: cdktf.booleanToHclTerraform(struct!.useDefault),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    normal_collector_config: {
      value: cdktf.listMapperHcl(deviceGroupExtraServicesDMSREPLICATIONNormalCollectorConfigToHclTerraform, true)(struct!.normalCollectorConfig),
      isBlock: true,
      type: "list",
      storageClassType: "DeviceGroupExtraServicesDMSREPLICATIONNormalCollectorConfigList",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesDMSREPLICATIONOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesDMSREPLICATION | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._customNSPSchedule !== undefined) {
      hasAnyValues = true;
      internalValueResult.customNSPSchedule = this._customNSPSchedule;
    }
    if (this._deadOperation !== undefined) {
      hasAnyValues = true;
      internalValueResult.deadOperation = this._deadOperation;
    }
    if (this._deviceDisplayNameTemplate !== undefined) {
      hasAnyValues = true;
      internalValueResult.deviceDisplayNameTemplate = this._deviceDisplayNameTemplate;
    }
    if (this._disableStopTerminateHostMonitor !== undefined) {
      hasAnyValues = true;
      internalValueResult.disableStopTerminateHostMonitor = this._disableStopTerminateHostMonitor;
    }
    if (this._disableTerminatedHostAlerting !== undefined) {
      hasAnyValues = true;
      internalValueResult.disableTerminatedHostAlerting = this._disableTerminatedHostAlerting;
    }
    if (this._monitoringRegionInfos !== undefined) {
      hasAnyValues = true;
      internalValueResult.monitoringRegionInfos = this._monitoringRegionInfos;
    }
    if (this._monitoringRegions !== undefined) {
      hasAnyValues = true;
      internalValueResult.monitoringRegions = this._monitoringRegions;
    }
    if (this._nameFilter !== undefined) {
      hasAnyValues = true;
      internalValueResult.nameFilter = this._nameFilter;
    }
    if (this._selectAll !== undefined) {
      hasAnyValues = true;
      internalValueResult.selectAll = this._selectAll;
    }
    if (this._tags?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.tags = this._tags?.internalValue;
    }
    if (this._useDefault !== undefined) {
      hasAnyValues = true;
      internalValueResult.useDefault = this._useDefault;
    }
    if (this._normalCollectorConfig?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.normalCollectorConfig = this._normalCollectorConfig?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesDMSREPLICATION | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._customNSPSchedule = undefined;
      this._deadOperation = undefined;
      this._deviceDisplayNameTemplate = undefined;
      this._disableStopTerminateHostMonitor = undefined;
      this._disableTerminatedHostAlerting = undefined;
      this._monitoringRegionInfos = undefined;
      this._monitoringRegions = undefined;
      this._nameFilter = undefined;
      this._selectAll = undefined;
      this._tags.internalValue = undefined;
      this._useDefault = undefined;
      this._normalCollectorConfig.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._customNSPSchedule = value.customNSPSchedule;
      this._deadOperation = value.deadOperation;
      this._deviceDisplayNameTemplate = value.deviceDisplayNameTemplate;
      this._disableStopTerminateHostMonitor = value.disableStopTerminateHostMonitor;
      this._disableTerminatedHostAlerting = value.disableTerminatedHostAlerting;
      this._monitoringRegionInfos = value.monitoringRegionInfos;
      this._monitoringRegions = value.monitoringRegions;
      this._nameFilter = value.nameFilter;
      this._selectAll = value.selectAll;
      this._tags.internalValue = value.tags;
      this._useDefault = value.useDefault;
      this._normalCollectorConfig.internalValue = value.normalCollectorConfig;
    }
  }

  // custom_n_s_p_schedule - computed: false, optional: true, required: false
  private _customNSPSchedule?: string; 
  public get customNSPSchedule() {
    return this.getStringAttribute('custom_n_s_p_schedule');
  }
  public set customNSPSchedule(value: string) {
    this._customNSPSchedule = value;
  }
  public resetCustomNSPSchedule() {
    this._customNSPSchedule = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get customNSPScheduleInput() {
    return this._customNSPSchedule;
  }

  // dead_operation - computed: false, optional: true, required: false
  private _deadOperation?: string; 
  public get deadOperation() {
    return this.getStringAttribute('dead_operation');
  }
  public set deadOperation(value: string) {
    this._deadOperation = value;
  }
  public resetDeadOperation() {
    this._deadOperation = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get deadOperationInput() {
    return this._deadOperation;
  }

  // device_display_name_template - computed: false, optional: true, required: false
  private _deviceDisplayNameTemplate?: string; 
  public get deviceDisplayNameTemplate() {
    return this.getStringAttribute('device_display_name_template');
  }
  public set deviceDisplayNameTemplate(value: string) {
    this._deviceDisplayNameTemplate = value;
  }
  public resetDeviceDisplayNameTemplate() {
    this._deviceDisplayNameTemplate = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get deviceDisplayNameTemplateInput() {
    return this._deviceDisplayNameTemplate;
  }

  // disable_stop_terminate_host_monitor - computed: false, optional: true, required: false
  private _disableStopTerminateHostMonitor?: boolean | cdktf.IResolvable; 
  public get disableStopTerminateHostMonitor() {
    return this.getBooleanAttribute('disable_stop_terminate_host_monitor');
  }
  public set disableStopTerminateHostMonitor(value: boolean | cdktf.IResolvable) {
    this._disableStopTerminateHostMonitor = value;
  }
  public resetDisableStopTerminateHostMonitor() {
    this._disableStopTerminateHostMonitor = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get disableStopTerminateHostMonitorInput() {
    return this._disableStopTerminateHostMonitor;
  }

  // disable_terminated_host_alerting - computed: false, optional: true, required: false
  private _disableTerminatedHostAlerting?: boolean | cdktf.IResolvable; 
  public get disableTerminatedHostAlerting() {
    return this.getBooleanAttribute('disable_terminated_host_alerting');
  }
  public set disableTerminatedHostAlerting(value: boolean | cdktf.IResolvable) {
    this._disableTerminatedHostAlerting = value;
  }
  public resetDisableTerminatedHostAlerting() {
    this._disableTerminatedHostAlerting = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get disableTerminatedHostAlertingInput() {
    return this._disableTerminatedHostAlerting;
  }

  // monitoring_region_infos - computed: false, optional: true, required: false
  private _monitoringRegionInfos?: string[]; 
  public get monitoringRegionInfos() {
    return cdktf.Fn.tolist(this.getListAttribute('monitoring_region_infos'));
  }
  public set monitoringRegionInfos(value: string[]) {
    this._monitoringRegionInfos = value;
  }
  public resetMonitoringRegionInfos() {
    this._monitoringRegionInfos = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get monitoringRegionInfosInput() {
    return this._monitoringRegionInfos;
  }

  // monitoring_regions - computed: false, optional: true, required: false
  private _monitoringRegions?: string[]; 
  public get monitoringRegions() {
    return cdktf.Fn.tolist(this.getListAttribute('monitoring_regions'));
  }
  public set monitoringRegions(value: string[]) {
    this._monitoringRegions = value;
  }
  public resetMonitoringRegions() {
    this._monitoringRegions = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get monitoringRegionsInput() {
    return this._monitoringRegions;
  }

  // name_filter - computed: false, optional: true, required: false
  private _nameFilter?: string[]; 
  public get nameFilter() {
    return cdktf.Fn.tolist(this.getListAttribute('name_filter'));
  }
  public set nameFilter(value: string[]) {
    this._nameFilter = value;
  }
  public resetNameFilter() {
    this._nameFilter = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get nameFilterInput() {
    return this._nameFilter;
  }

  // select_all - computed: false, optional: true, required: false
  private _selectAll?: boolean | cdktf.IResolvable; 
  public get selectAll() {
    return this.getBooleanAttribute('select_all');
  }
  public set selectAll(value: boolean | cdktf.IResolvable) {
    this._selectAll = value;
  }
  public resetSelectAll() {
    this._selectAll = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get selectAllInput() {
    return this._selectAll;
  }

  // tags - computed: false, optional: true, required: false
  private _tags = new DeviceGroupExtraServicesDMSREPLICATIONTagsList(this, "tags", false);
  public get tags() {
    return this._tags;
  }
  public putTags(value: DeviceGroupExtraServicesDMSREPLICATIONTags[] | cdktf.IResolvable) {
    this._tags.internalValue = value;
  }
  public resetTags() {
    this._tags.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get tagsInput() {
    return this._tags.internalValue;
  }

  // use_default - computed: false, optional: false, required: true
  private _useDefault?: boolean | cdktf.IResolvable; 
  public get useDefault() {
    return this.getBooleanAttribute('use_default');
  }
  public set useDefault(value: boolean | cdktf.IResolvable) {
    this._useDefault = value;
  }
  // Temporarily expose input value. Use with caution.
  public get useDefaultInput() {
    return this._useDefault;
  }

  // normal_collector_config - computed: false, optional: true, required: false
  private _normalCollectorConfig = new DeviceGroupExtraServicesDMSREPLICATIONNormalCollectorConfigList(this, "normal_collector_config", false);
  public get normalCollectorConfig() {
    return this._normalCollectorConfig;
  }
  public putNormalCollectorConfig(value: DeviceGroupExtraServicesDMSREPLICATIONNormalCollectorConfig[] | cdktf.IResolvable) {
    this._normalCollectorConfig.internalValue = value;
  }
  public resetNormalCollectorConfig() {
    this._normalCollectorConfig.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get normalCollectorConfigInput() {
    return this._normalCollectorConfig.internalValue;
  }
}

export class DeviceGroupExtraServicesDMSREPLICATIONList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesDMSREPLICATION[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesDMSREPLICATIONOutputReference {
    return new DeviceGroupExtraServicesDMSREPLICATIONOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesDMSREPLICATIONTASKSTags {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#name DeviceGroup#name}
  */
  readonly name?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#operation DeviceGroup#operation}
  */
  readonly operation?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#value DeviceGroup#value}
  */
  readonly value?: string;
}

export function deviceGroupExtraServicesDMSREPLICATIONTASKSTagsToTerraform(struct?: DeviceGroupExtraServicesDMSREPLICATIONTASKSTags | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    name: cdktf.stringToTerraform(struct!.name),
    operation: cdktf.stringToTerraform(struct!.operation),
    value: cdktf.stringToTerraform(struct!.value),
  }
}


export function deviceGroupExtraServicesDMSREPLICATIONTASKSTagsToHclTerraform(struct?: DeviceGroupExtraServicesDMSREPLICATIONTASKSTags | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    name: {
      value: cdktf.stringToHclTerraform(struct!.name),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    operation: {
      value: cdktf.stringToHclTerraform(struct!.operation),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    value: {
      value: cdktf.stringToHclTerraform(struct!.value),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesDMSREPLICATIONTASKSTagsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesDMSREPLICATIONTASKSTags | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._name !== undefined) {
      hasAnyValues = true;
      internalValueResult.name = this._name;
    }
    if (this._operation !== undefined) {
      hasAnyValues = true;
      internalValueResult.operation = this._operation;
    }
    if (this._value !== undefined) {
      hasAnyValues = true;
      internalValueResult.value = this._value;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesDMSREPLICATIONTASKSTags | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._name = undefined;
      this._operation = undefined;
      this._value = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._name = value.name;
      this._operation = value.operation;
      this._value = value.value;
    }
  }

  // name - computed: false, optional: true, required: false
  private _name?: string; 
  public get name() {
    return this.getStringAttribute('name');
  }
  public set name(value: string) {
    this._name = value;
  }
  public resetName() {
    this._name = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get nameInput() {
    return this._name;
  }

  // operation - computed: false, optional: true, required: false
  private _operation?: string; 
  public get operation() {
    return this.getStringAttribute('operation');
  }
  public set operation(value: string) {
    this._operation = value;
  }
  public resetOperation() {
    this._operation = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get operationInput() {
    return this._operation;
  }

  // value - computed: false, optional: true, required: false
  private _value?: string; 
  public get value() {
    return this.getStringAttribute('value');
  }
  public set value(value: string) {
    this._value = value;
  }
  public resetValue() {
    this._value = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get valueInput() {
    return this._value;
  }
}

export class DeviceGroupExtraServicesDMSREPLICATIONTASKSTagsList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesDMSREPLICATIONTASKSTags[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesDMSREPLICATIONTASKSTagsOutputReference {
    return new DeviceGroupExtraServicesDMSREPLICATIONTASKSTagsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesDMSREPLICATIONTASKSNormalCollectorConfigCollectors {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#applies_to DeviceGroup#applies_to}
  */
  readonly appliesTo?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#auto_balanced_collector_group_id DeviceGroup#auto_balanced_collector_group_id}
  */
  readonly autoBalancedCollectorGroupId?: number;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#collector_id DeviceGroup#collector_id}
  */
  readonly collectorId?: number;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#priority DeviceGroup#priority}
  */
  readonly priority?: number;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#use_public_ip DeviceGroup#use_public_ip}
  */
  readonly usePublicIp?: boolean | cdktf.IResolvable;
}

export function deviceGroupExtraServicesDMSREPLICATIONTASKSNormalCollectorConfigCollectorsToTerraform(struct?: DeviceGroupExtraServicesDMSREPLICATIONTASKSNormalCollectorConfigCollectors | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    applies_to: cdktf.stringToTerraform(struct!.appliesTo),
    auto_balanced_collector_group_id: cdktf.numberToTerraform(struct!.autoBalancedCollectorGroupId),
    collector_id: cdktf.numberToTerraform(struct!.collectorId),
    priority: cdktf.numberToTerraform(struct!.priority),
    use_public_ip: cdktf.booleanToTerraform(struct!.usePublicIp),
  }
}


export function deviceGroupExtraServicesDMSREPLICATIONTASKSNormalCollectorConfigCollectorsToHclTerraform(struct?: DeviceGroupExtraServicesDMSREPLICATIONTASKSNormalCollectorConfigCollectors | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    applies_to: {
      value: cdktf.stringToHclTerraform(struct!.appliesTo),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    auto_balanced_collector_group_id: {
      value: cdktf.numberToHclTerraform(struct!.autoBalancedCollectorGroupId),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    collector_id: {
      value: cdktf.numberToHclTerraform(struct!.collectorId),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    priority: {
      value: cdktf.numberToHclTerraform(struct!.priority),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    use_public_ip: {
      value: cdktf.booleanToHclTerraform(struct!.usePublicIp),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesDMSREPLICATIONTASKSNormalCollectorConfigCollectorsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesDMSREPLICATIONTASKSNormalCollectorConfigCollectors | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._appliesTo !== undefined) {
      hasAnyValues = true;
      internalValueResult.appliesTo = this._appliesTo;
    }
    if (this._autoBalancedCollectorGroupId !== undefined) {
      hasAnyValues = true;
      internalValueResult.autoBalancedCollectorGroupId = this._autoBalancedCollectorGroupId;
    }
    if (this._collectorId !== undefined) {
      hasAnyValues = true;
      internalValueResult.collectorId = this._collectorId;
    }
    if (this._priority !== undefined) {
      hasAnyValues = true;
      internalValueResult.priority = this._priority;
    }
    if (this._usePublicIp !== undefined) {
      hasAnyValues = true;
      internalValueResult.usePublicIp = this._usePublicIp;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesDMSREPLICATIONTASKSNormalCollectorConfigCollectors | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._appliesTo = undefined;
      this._autoBalancedCollectorGroupId = undefined;
      this._collectorId = undefined;
      this._priority = undefined;
      this._usePublicIp = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._appliesTo = value.appliesTo;
      this._autoBalancedCollectorGroupId = value.autoBalancedCollectorGroupId;
      this._collectorId = value.collectorId;
      this._priority = value.priority;
      this._usePublicIp = value.usePublicIp;
    }
  }

  // applies_to - computed: false, optional: true, required: false
  private _appliesTo?: string; 
  public get appliesTo() {
    return this.getStringAttribute('applies_to');
  }
  public set appliesTo(value: string) {
    this._appliesTo = value;
  }
  public resetAppliesTo() {
    this._appliesTo = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get appliesToInput() {
    return this._appliesTo;
  }

  // auto_balanced_collector_group_id - computed: false, optional: true, required: false
  private _autoBalancedCollectorGroupId?: number; 
  public get autoBalancedCollectorGroupId() {
    return this.getNumberAttribute('auto_balanced_collector_group_id');
  }
  public set autoBalancedCollectorGroupId(value: number) {
    this._autoBalancedCollectorGroupId = value;
  }
  public resetAutoBalancedCollectorGroupId() {
    this._autoBalancedCollectorGroupId = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get autoBalancedCollectorGroupIdInput() {
    return this._autoBalancedCollectorGroupId;
  }

  // collector_id - computed: false, optional: true, required: false
  private _collectorId?: number; 
  public get collectorId() {
    return this.getNumberAttribute('collector_id');
  }
  public set collectorId(value: number) {
    this._collectorId = value;
  }
  public resetCollectorId() {
    this._collectorId = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get collectorIdInput() {
    return this._collectorId;
  }

  // priority - computed: false, optional: true, required: false
  private _priority?: number; 
  public get priority() {
    return this.getNumberAttribute('priority');
  }
  public set priority(value: number) {
    this._priority = value;
  }
  public resetPriority() {
    this._priority = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get priorityInput() {
    return this._priority;
  }

  // use_public_ip - computed: false, optional: true, required: false
  private _usePublicIp?: boolean | cdktf.IResolvable; 
  public get usePublicIp() {
    return this.getBooleanAttribute('use_public_ip');
  }
  public set usePublicIp(value: boolean | cdktf.IResolvable) {
    this._usePublicIp = value;
  }
  public resetUsePublicIp() {
    this._usePublicIp = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get usePublicIpInput() {
    return this._usePublicIp;
  }
}

export class DeviceGroupExtraServicesDMSREPLICATIONTASKSNormalCollectorConfigCollectorsList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesDMSREPLICATIONTASKSNormalCollectorConfigCollectors[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesDMSREPLICATIONTASKSNormalCollectorConfigCollectorsOutputReference {
    return new DeviceGroupExtraServicesDMSREPLICATIONTASKSNormalCollectorConfigCollectorsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesDMSREPLICATIONTASKSNormalCollectorConfig {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#collectors DeviceGroup#collectors}
  */
  readonly collectors?: DeviceGroupExtraServicesDMSREPLICATIONTASKSNormalCollectorConfigCollectors[] | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#enabled DeviceGroup#enabled}
  */
  readonly enabled: boolean | cdktf.IResolvable;
}

export function deviceGroupExtraServicesDMSREPLICATIONTASKSNormalCollectorConfigToTerraform(struct?: DeviceGroupExtraServicesDMSREPLICATIONTASKSNormalCollectorConfig | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    collectors: cdktf.listMapper(deviceGroupExtraServicesDMSREPLICATIONTASKSNormalCollectorConfigCollectorsToTerraform, false)(struct!.collectors),
    enabled: cdktf.booleanToTerraform(struct!.enabled),
  }
}


export function deviceGroupExtraServicesDMSREPLICATIONTASKSNormalCollectorConfigToHclTerraform(struct?: DeviceGroupExtraServicesDMSREPLICATIONTASKSNormalCollectorConfig | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    collectors: {
      value: cdktf.listMapperHcl(deviceGroupExtraServicesDMSREPLICATIONTASKSNormalCollectorConfigCollectorsToHclTerraform, false)(struct!.collectors),
      isBlock: true,
      type: "list",
      storageClassType: "DeviceGroupExtraServicesDMSREPLICATIONTASKSNormalCollectorConfigCollectorsList",
    },
    enabled: {
      value: cdktf.booleanToHclTerraform(struct!.enabled),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesDMSREPLICATIONTASKSNormalCollectorConfigOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesDMSREPLICATIONTASKSNormalCollectorConfig | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._collectors?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.collectors = this._collectors?.internalValue;
    }
    if (this._enabled !== undefined) {
      hasAnyValues = true;
      internalValueResult.enabled = this._enabled;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesDMSREPLICATIONTASKSNormalCollectorConfig | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._collectors.internalValue = undefined;
      this._enabled = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._collectors.internalValue = value.collectors;
      this._enabled = value.enabled;
    }
  }

  // collectors - computed: false, optional: true, required: false
  private _collectors = new DeviceGroupExtraServicesDMSREPLICATIONTASKSNormalCollectorConfigCollectorsList(this, "collectors", false);
  public get collectors() {
    return this._collectors;
  }
  public putCollectors(value: DeviceGroupExtraServicesDMSREPLICATIONTASKSNormalCollectorConfigCollectors[] | cdktf.IResolvable) {
    this._collectors.internalValue = value;
  }
  public resetCollectors() {
    this._collectors.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get collectorsInput() {
    return this._collectors.internalValue;
  }

  // enabled - computed: false, optional: false, required: true
  private _enabled?: boolean | cdktf.IResolvable; 
  public get enabled() {
    return this.getBooleanAttribute('enabled');
  }
  public set enabled(value: boolean | cdktf.IResolvable) {
    this._enabled = value;
  }
  // Temporarily expose input value. Use with caution.
  public get enabledInput() {
    return this._enabled;
  }
}

export class DeviceGroupExtraServicesDMSREPLICATIONTASKSNormalCollectorConfigList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesDMSREPLICATIONTASKSNormalCollectorConfig[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesDMSREPLICATIONTASKSNormalCollectorConfigOutputReference {
    return new DeviceGroupExtraServicesDMSREPLICATIONTASKSNormalCollectorConfigOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesDMSREPLICATIONTASKS {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#custom_n_s_p_schedule DeviceGroup#custom_n_s_p_schedule}
  */
  readonly customNSPSchedule?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#dead_operation DeviceGroup#dead_operation}
  */
  readonly deadOperation?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#device_display_name_template DeviceGroup#device_display_name_template}
  */
  readonly deviceDisplayNameTemplate?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#disable_stop_terminate_host_monitor DeviceGroup#disable_stop_terminate_host_monitor}
  */
  readonly disableStopTerminateHostMonitor?: boolean | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#disable_terminated_host_alerting DeviceGroup#disable_terminated_host_alerting}
  */
  readonly disableTerminatedHostAlerting?: boolean | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#monitoring_region_infos DeviceGroup#monitoring_region_infos}
  */
  readonly monitoringRegionInfos?: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#monitoring_regions DeviceGroup#monitoring_regions}
  */
  readonly monitoringRegions?: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#name_filter DeviceGroup#name_filter}
  */
  readonly nameFilter?: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#select_all DeviceGroup#select_all}
  */
  readonly selectAll?: boolean | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#tags DeviceGroup#tags}
  */
  readonly tags?: DeviceGroupExtraServicesDMSREPLICATIONTASKSTags[] | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#use_default DeviceGroup#use_default}
  */
  readonly useDefault: boolean | cdktf.IResolvable;
  /**
  * normal_collector_config block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#normal_collector_config DeviceGroup#normal_collector_config}
  */
  readonly normalCollectorConfig?: DeviceGroupExtraServicesDMSREPLICATIONTASKSNormalCollectorConfig[] | cdktf.IResolvable;
}

export function deviceGroupExtraServicesDMSREPLICATIONTASKSToTerraform(struct?: DeviceGroupExtraServicesDMSREPLICATIONTASKS | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    custom_n_s_p_schedule: cdktf.stringToTerraform(struct!.customNSPSchedule),
    dead_operation: cdktf.stringToTerraform(struct!.deadOperation),
    device_display_name_template: cdktf.stringToTerraform(struct!.deviceDisplayNameTemplate),
    disable_stop_terminate_host_monitor: cdktf.booleanToTerraform(struct!.disableStopTerminateHostMonitor),
    disable_terminated_host_alerting: cdktf.booleanToTerraform(struct!.disableTerminatedHostAlerting),
    monitoring_region_infos: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.monitoringRegionInfos),
    monitoring_regions: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.monitoringRegions),
    name_filter: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.nameFilter),
    select_all: cdktf.booleanToTerraform(struct!.selectAll),
    tags: cdktf.listMapper(deviceGroupExtraServicesDMSREPLICATIONTASKSTagsToTerraform, false)(struct!.tags),
    use_default: cdktf.booleanToTerraform(struct!.useDefault),
    normal_collector_config: cdktf.listMapper(deviceGroupExtraServicesDMSREPLICATIONTASKSNormalCollectorConfigToTerraform, true)(struct!.normalCollectorConfig),
  }
}


export function deviceGroupExtraServicesDMSREPLICATIONTASKSToHclTerraform(struct?: DeviceGroupExtraServicesDMSREPLICATIONTASKS | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    custom_n_s_p_schedule: {
      value: cdktf.stringToHclTerraform(struct!.customNSPSchedule),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    dead_operation: {
      value: cdktf.stringToHclTerraform(struct!.deadOperation),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    device_display_name_template: {
      value: cdktf.stringToHclTerraform(struct!.deviceDisplayNameTemplate),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    disable_stop_terminate_host_monitor: {
      value: cdktf.booleanToHclTerraform(struct!.disableStopTerminateHostMonitor),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    disable_terminated_host_alerting: {
      value: cdktf.booleanToHclTerraform(struct!.disableTerminatedHostAlerting),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    monitoring_region_infos: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.monitoringRegionInfos),
      isBlock: false,
      type: "set",
      storageClassType: "stringList",
    },
    monitoring_regions: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.monitoringRegions),
      isBlock: false,
      type: "set",
      storageClassType: "stringList",
    },
    name_filter: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.nameFilter),
      isBlock: false,
      type: "set",
      storageClassType: "stringList",
    },
    select_all: {
      value: cdktf.booleanToHclTerraform(struct!.selectAll),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    tags: {
      value: cdktf.listMapperHcl(deviceGroupExtraServicesDMSREPLICATIONTASKSTagsToHclTerraform, false)(struct!.tags),
      isBlock: true,
      type: "list",
      storageClassType: "DeviceGroupExtraServicesDMSREPLICATIONTASKSTagsList",
    },
    use_default: {
      value: cdktf.booleanToHclTerraform(struct!.useDefault),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    normal_collector_config: {
      value: cdktf.listMapperHcl(deviceGroupExtraServicesDMSREPLICATIONTASKSNormalCollectorConfigToHclTerraform, true)(struct!.normalCollectorConfig),
      isBlock: true,
      type: "list",
      storageClassType: "DeviceGroupExtraServicesDMSREPLICATIONTASKSNormalCollectorConfigList",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesDMSREPLICATIONTASKSOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesDMSREPLICATIONTASKS | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._customNSPSchedule !== undefined) {
      hasAnyValues = true;
      internalValueResult.customNSPSchedule = this._customNSPSchedule;
    }
    if (this._deadOperation !== undefined) {
      hasAnyValues = true;
      internalValueResult.deadOperation = this._deadOperation;
    }
    if (this._deviceDisplayNameTemplate !== undefined) {
      hasAnyValues = true;
      internalValueResult.deviceDisplayNameTemplate = this._deviceDisplayNameTemplate;
    }
    if (this._disableStopTerminateHostMonitor !== undefined) {
      hasAnyValues = true;
      internalValueResult.disableStopTerminateHostMonitor = this._disableStopTerminateHostMonitor;
    }
    if (this._disableTerminatedHostAlerting !== undefined) {
      hasAnyValues = true;
      internalValueResult.disableTerminatedHostAlerting = this._disableTerminatedHostAlerting;
    }
    if (this._monitoringRegionInfos !== undefined) {
      hasAnyValues = true;
      internalValueResult.monitoringRegionInfos = this._monitoringRegionInfos;
    }
    if (this._monitoringRegions !== undefined) {
      hasAnyValues = true;
      internalValueResult.monitoringRegions = this._monitoringRegions;
    }
    if (this._nameFilter !== undefined) {
      hasAnyValues = true;
      internalValueResult.nameFilter = this._nameFilter;
    }
    if (this._selectAll !== undefined) {
      hasAnyValues = true;
      internalValueResult.selectAll = this._selectAll;
    }
    if (this._tags?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.tags = this._tags?.internalValue;
    }
    if (this._useDefault !== undefined) {
      hasAnyValues = true;
      internalValueResult.useDefault = this._useDefault;
    }
    if (this._normalCollectorConfig?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.normalCollectorConfig = this._normalCollectorConfig?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesDMSREPLICATIONTASKS | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._customNSPSchedule = undefined;
      this._deadOperation = undefined;
      this._deviceDisplayNameTemplate = undefined;
      this._disableStopTerminateHostMonitor = undefined;
      this._disableTerminatedHostAlerting = undefined;
      this._monitoringRegionInfos = undefined;
      this._monitoringRegions = undefined;
      this._nameFilter = undefined;
      this._selectAll = undefined;
      this._tags.internalValue = undefined;
      this._useDefault = undefined;
      this._normalCollectorConfig.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._customNSPSchedule = value.customNSPSchedule;
      this._deadOperation = value.deadOperation;
      this._deviceDisplayNameTemplate = value.deviceDisplayNameTemplate;
      this._disableStopTerminateHostMonitor = value.disableStopTerminateHostMonitor;
      this._disableTerminatedHostAlerting = value.disableTerminatedHostAlerting;
      this._monitoringRegionInfos = value.monitoringRegionInfos;
      this._monitoringRegions = value.monitoringRegions;
      this._nameFilter = value.nameFilter;
      this._selectAll = value.selectAll;
      this._tags.internalValue = value.tags;
      this._useDefault = value.useDefault;
      this._normalCollectorConfig.internalValue = value.normalCollectorConfig;
    }
  }

  // custom_n_s_p_schedule - computed: false, optional: true, required: false
  private _customNSPSchedule?: string; 
  public get customNSPSchedule() {
    return this.getStringAttribute('custom_n_s_p_schedule');
  }
  public set customNSPSchedule(value: string) {
    this._customNSPSchedule = value;
  }
  public resetCustomNSPSchedule() {
    this._customNSPSchedule = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get customNSPScheduleInput() {
    return this._customNSPSchedule;
  }

  // dead_operation - computed: false, optional: true, required: false
  private _deadOperation?: string; 
  public get deadOperation() {
    return this.getStringAttribute('dead_operation');
  }
  public set deadOperation(value: string) {
    this._deadOperation = value;
  }
  public resetDeadOperation() {
    this._deadOperation = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get deadOperationInput() {
    return this._deadOperation;
  }

  // device_display_name_template - computed: false, optional: true, required: false
  private _deviceDisplayNameTemplate?: string; 
  public get deviceDisplayNameTemplate() {
    return this.getStringAttribute('device_display_name_template');
  }
  public set deviceDisplayNameTemplate(value: string) {
    this._deviceDisplayNameTemplate = value;
  }
  public resetDeviceDisplayNameTemplate() {
    this._deviceDisplayNameTemplate = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get deviceDisplayNameTemplateInput() {
    return this._deviceDisplayNameTemplate;
  }

  // disable_stop_terminate_host_monitor - computed: false, optional: true, required: false
  private _disableStopTerminateHostMonitor?: boolean | cdktf.IResolvable; 
  public get disableStopTerminateHostMonitor() {
    return this.getBooleanAttribute('disable_stop_terminate_host_monitor');
  }
  public set disableStopTerminateHostMonitor(value: boolean | cdktf.IResolvable) {
    this._disableStopTerminateHostMonitor = value;
  }
  public resetDisableStopTerminateHostMonitor() {
    this._disableStopTerminateHostMonitor = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get disableStopTerminateHostMonitorInput() {
    return this._disableStopTerminateHostMonitor;
  }

  // disable_terminated_host_alerting - computed: false, optional: true, required: false
  private _disableTerminatedHostAlerting?: boolean | cdktf.IResolvable; 
  public get disableTerminatedHostAlerting() {
    return this.getBooleanAttribute('disable_terminated_host_alerting');
  }
  public set disableTerminatedHostAlerting(value: boolean | cdktf.IResolvable) {
    this._disableTerminatedHostAlerting = value;
  }
  public resetDisableTerminatedHostAlerting() {
    this._disableTerminatedHostAlerting = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get disableTerminatedHostAlertingInput() {
    return this._disableTerminatedHostAlerting;
  }

  // monitoring_region_infos - computed: false, optional: true, required: false
  private _monitoringRegionInfos?: string[]; 
  public get monitoringRegionInfos() {
    return cdktf.Fn.tolist(this.getListAttribute('monitoring_region_infos'));
  }
  public set monitoringRegionInfos(value: string[]) {
    this._monitoringRegionInfos = value;
  }
  public resetMonitoringRegionInfos() {
    this._monitoringRegionInfos = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get monitoringRegionInfosInput() {
    return this._monitoringRegionInfos;
  }

  // monitoring_regions - computed: false, optional: true, required: false
  private _monitoringRegions?: string[]; 
  public get monitoringRegions() {
    return cdktf.Fn.tolist(this.getListAttribute('monitoring_regions'));
  }
  public set monitoringRegions(value: string[]) {
    this._monitoringRegions = value;
  }
  public resetMonitoringRegions() {
    this._monitoringRegions = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get monitoringRegionsInput() {
    return this._monitoringRegions;
  }

  // name_filter - computed: false, optional: true, required: false
  private _nameFilter?: string[]; 
  public get nameFilter() {
    return cdktf.Fn.tolist(this.getListAttribute('name_filter'));
  }
  public set nameFilter(value: string[]) {
    this._nameFilter = value;
  }
  public resetNameFilter() {
    this._nameFilter = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get nameFilterInput() {
    return this._nameFilter;
  }

  // select_all - computed: false, optional: true, required: false
  private _selectAll?: boolean | cdktf.IResolvable; 
  public get selectAll() {
    return this.getBooleanAttribute('select_all');
  }
  public set selectAll(value: boolean | cdktf.IResolvable) {
    this._selectAll = value;
  }
  public resetSelectAll() {
    this._selectAll = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get selectAllInput() {
    return this._selectAll;
  }

  // tags - computed: false, optional: true, required: false
  private _tags = new DeviceGroupExtraServicesDMSREPLICATIONTASKSTagsList(this, "tags", false);
  public get tags() {
    return this._tags;
  }
  public putTags(value: DeviceGroupExtraServicesDMSREPLICATIONTASKSTags[] | cdktf.IResolvable) {
    this._tags.internalValue = value;
  }
  public resetTags() {
    this._tags.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get tagsInput() {
    return this._tags.internalValue;
  }

  // use_default - computed: false, optional: false, required: true
  private _useDefault?: boolean | cdktf.IResolvable; 
  public get useDefault() {
    return this.getBooleanAttribute('use_default');
  }
  public set useDefault(value: boolean | cdktf.IResolvable) {
    this._useDefault = value;
  }
  // Temporarily expose input value. Use with caution.
  public get useDefaultInput() {
    return this._useDefault;
  }

  // normal_collector_config - computed: false, optional: true, required: false
  private _normalCollectorConfig = new DeviceGroupExtraServicesDMSREPLICATIONTASKSNormalCollectorConfigList(this, "normal_collector_config", false);
  public get normalCollectorConfig() {
    return this._normalCollectorConfig;
  }
  public putNormalCollectorConfig(value: DeviceGroupExtraServicesDMSREPLICATIONTASKSNormalCollectorConfig[] | cdktf.IResolvable) {
    this._normalCollectorConfig.internalValue = value;
  }
  public resetNormalCollectorConfig() {
    this._normalCollectorConfig.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get normalCollectorConfigInput() {
    return this._normalCollectorConfig.internalValue;
  }
}

export class DeviceGroupExtraServicesDMSREPLICATIONTASKSList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesDMSREPLICATIONTASKS[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesDMSREPLICATIONTASKSOutputReference {
    return new DeviceGroupExtraServicesDMSREPLICATIONTASKSOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesDOCDBTags {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#name DeviceGroup#name}
  */
  readonly name?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#operation DeviceGroup#operation}
  */
  readonly operation?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#value DeviceGroup#value}
  */
  readonly value?: string;
}

export function deviceGroupExtraServicesDOCDBTagsToTerraform(struct?: DeviceGroupExtraServicesDOCDBTags | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    name: cdktf.stringToTerraform(struct!.name),
    operation: cdktf.stringToTerraform(struct!.operation),
    value: cdktf.stringToTerraform(struct!.value),
  }
}


export function deviceGroupExtraServicesDOCDBTagsToHclTerraform(struct?: DeviceGroupExtraServicesDOCDBTags | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    name: {
      value: cdktf.stringToHclTerraform(struct!.name),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    operation: {
      value: cdktf.stringToHclTerraform(struct!.operation),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    value: {
      value: cdktf.stringToHclTerraform(struct!.value),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesDOCDBTagsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesDOCDBTags | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._name !== undefined) {
      hasAnyValues = true;
      internalValueResult.name = this._name;
    }
    if (this._operation !== undefined) {
      hasAnyValues = true;
      internalValueResult.operation = this._operation;
    }
    if (this._value !== undefined) {
      hasAnyValues = true;
      internalValueResult.value = this._value;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesDOCDBTags | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._name = undefined;
      this._operation = undefined;
      this._value = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._name = value.name;
      this._operation = value.operation;
      this._value = value.value;
    }
  }

  // name - computed: false, optional: true, required: false
  private _name?: string; 
  public get name() {
    return this.getStringAttribute('name');
  }
  public set name(value: string) {
    this._name = value;
  }
  public resetName() {
    this._name = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get nameInput() {
    return this._name;
  }

  // operation - computed: false, optional: true, required: false
  private _operation?: string; 
  public get operation() {
    return this.getStringAttribute('operation');
  }
  public set operation(value: string) {
    this._operation = value;
  }
  public resetOperation() {
    this._operation = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get operationInput() {
    return this._operation;
  }

  // value - computed: false, optional: true, required: false
  private _value?: string; 
  public get value() {
    return this.getStringAttribute('value');
  }
  public set value(value: string) {
    this._value = value;
  }
  public resetValue() {
    this._value = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get valueInput() {
    return this._value;
  }
}

export class DeviceGroupExtraServicesDOCDBTagsList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesDOCDBTags[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesDOCDBTagsOutputReference {
    return new DeviceGroupExtraServicesDOCDBTagsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesDOCDBNormalCollectorConfigCollectors {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#applies_to DeviceGroup#applies_to}
  */
  readonly appliesTo?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#auto_balanced_collector_group_id DeviceGroup#auto_balanced_collector_group_id}
  */
  readonly autoBalancedCollectorGroupId?: number;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#collector_id DeviceGroup#collector_id}
  */
  readonly collectorId?: number;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#priority DeviceGroup#priority}
  */
  readonly priority?: number;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#use_public_ip DeviceGroup#use_public_ip}
  */
  readonly usePublicIp?: boolean | cdktf.IResolvable;
}

export function deviceGroupExtraServicesDOCDBNormalCollectorConfigCollectorsToTerraform(struct?: DeviceGroupExtraServicesDOCDBNormalCollectorConfigCollectors | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    applies_to: cdktf.stringToTerraform(struct!.appliesTo),
    auto_balanced_collector_group_id: cdktf.numberToTerraform(struct!.autoBalancedCollectorGroupId),
    collector_id: cdktf.numberToTerraform(struct!.collectorId),
    priority: cdktf.numberToTerraform(struct!.priority),
    use_public_ip: cdktf.booleanToTerraform(struct!.usePublicIp),
  }
}


export function deviceGroupExtraServicesDOCDBNormalCollectorConfigCollectorsToHclTerraform(struct?: DeviceGroupExtraServicesDOCDBNormalCollectorConfigCollectors | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    applies_to: {
      value: cdktf.stringToHclTerraform(struct!.appliesTo),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    auto_balanced_collector_group_id: {
      value: cdktf.numberToHclTerraform(struct!.autoBalancedCollectorGroupId),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    collector_id: {
      value: cdktf.numberToHclTerraform(struct!.collectorId),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    priority: {
      value: cdktf.numberToHclTerraform(struct!.priority),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    use_public_ip: {
      value: cdktf.booleanToHclTerraform(struct!.usePublicIp),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesDOCDBNormalCollectorConfigCollectorsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesDOCDBNormalCollectorConfigCollectors | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._appliesTo !== undefined) {
      hasAnyValues = true;
      internalValueResult.appliesTo = this._appliesTo;
    }
    if (this._autoBalancedCollectorGroupId !== undefined) {
      hasAnyValues = true;
      internalValueResult.autoBalancedCollectorGroupId = this._autoBalancedCollectorGroupId;
    }
    if (this._collectorId !== undefined) {
      hasAnyValues = true;
      internalValueResult.collectorId = this._collectorId;
    }
    if (this._priority !== undefined) {
      hasAnyValues = true;
      internalValueResult.priority = this._priority;
    }
    if (this._usePublicIp !== undefined) {
      hasAnyValues = true;
      internalValueResult.usePublicIp = this._usePublicIp;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesDOCDBNormalCollectorConfigCollectors | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._appliesTo = undefined;
      this._autoBalancedCollectorGroupId = undefined;
      this._collectorId = undefined;
      this._priority = undefined;
      this._usePublicIp = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._appliesTo = value.appliesTo;
      this._autoBalancedCollectorGroupId = value.autoBalancedCollectorGroupId;
      this._collectorId = value.collectorId;
      this._priority = value.priority;
      this._usePublicIp = value.usePublicIp;
    }
  }

  // applies_to - computed: false, optional: true, required: false
  private _appliesTo?: string; 
  public get appliesTo() {
    return this.getStringAttribute('applies_to');
  }
  public set appliesTo(value: string) {
    this._appliesTo = value;
  }
  public resetAppliesTo() {
    this._appliesTo = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get appliesToInput() {
    return this._appliesTo;
  }

  // auto_balanced_collector_group_id - computed: false, optional: true, required: false
  private _autoBalancedCollectorGroupId?: number; 
  public get autoBalancedCollectorGroupId() {
    return this.getNumberAttribute('auto_balanced_collector_group_id');
  }
  public set autoBalancedCollectorGroupId(value: number) {
    this._autoBalancedCollectorGroupId = value;
  }
  public resetAutoBalancedCollectorGroupId() {
    this._autoBalancedCollectorGroupId = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get autoBalancedCollectorGroupIdInput() {
    return this._autoBalancedCollectorGroupId;
  }

  // collector_id - computed: false, optional: true, required: false
  private _collectorId?: number; 
  public get collectorId() {
    return this.getNumberAttribute('collector_id');
  }
  public set collectorId(value: number) {
    this._collectorId = value;
  }
  public resetCollectorId() {
    this._collectorId = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get collectorIdInput() {
    return this._collectorId;
  }

  // priority - computed: false, optional: true, required: false
  private _priority?: number; 
  public get priority() {
    return this.getNumberAttribute('priority');
  }
  public set priority(value: number) {
    this._priority = value;
  }
  public resetPriority() {
    this._priority = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get priorityInput() {
    return this._priority;
  }

  // use_public_ip - computed: false, optional: true, required: false
  private _usePublicIp?: boolean | cdktf.IResolvable; 
  public get usePublicIp() {
    return this.getBooleanAttribute('use_public_ip');
  }
  public set usePublicIp(value: boolean | cdktf.IResolvable) {
    this._usePublicIp = value;
  }
  public resetUsePublicIp() {
    this._usePublicIp = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get usePublicIpInput() {
    return this._usePublicIp;
  }
}

export class DeviceGroupExtraServicesDOCDBNormalCollectorConfigCollectorsList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesDOCDBNormalCollectorConfigCollectors[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesDOCDBNormalCollectorConfigCollectorsOutputReference {
    return new DeviceGroupExtraServicesDOCDBNormalCollectorConfigCollectorsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesDOCDBNormalCollectorConfig {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#collectors DeviceGroup#collectors}
  */
  readonly collectors?: DeviceGroupExtraServicesDOCDBNormalCollectorConfigCollectors[] | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#enabled DeviceGroup#enabled}
  */
  readonly enabled: boolean | cdktf.IResolvable;
}

export function deviceGroupExtraServicesDOCDBNormalCollectorConfigToTerraform(struct?: DeviceGroupExtraServicesDOCDBNormalCollectorConfig | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    collectors: cdktf.listMapper(deviceGroupExtraServicesDOCDBNormalCollectorConfigCollectorsToTerraform, false)(struct!.collectors),
    enabled: cdktf.booleanToTerraform(struct!.enabled),
  }
}


export function deviceGroupExtraServicesDOCDBNormalCollectorConfigToHclTerraform(struct?: DeviceGroupExtraServicesDOCDBNormalCollectorConfig | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    collectors: {
      value: cdktf.listMapperHcl(deviceGroupExtraServicesDOCDBNormalCollectorConfigCollectorsToHclTerraform, false)(struct!.collectors),
      isBlock: true,
      type: "list",
      storageClassType: "DeviceGroupExtraServicesDOCDBNormalCollectorConfigCollectorsList",
    },
    enabled: {
      value: cdktf.booleanToHclTerraform(struct!.enabled),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesDOCDBNormalCollectorConfigOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesDOCDBNormalCollectorConfig | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._collectors?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.collectors = this._collectors?.internalValue;
    }
    if (this._enabled !== undefined) {
      hasAnyValues = true;
      internalValueResult.enabled = this._enabled;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesDOCDBNormalCollectorConfig | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._collectors.internalValue = undefined;
      this._enabled = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._collectors.internalValue = value.collectors;
      this._enabled = value.enabled;
    }
  }

  // collectors - computed: false, optional: true, required: false
  private _collectors = new DeviceGroupExtraServicesDOCDBNormalCollectorConfigCollectorsList(this, "collectors", false);
  public get collectors() {
    return this._collectors;
  }
  public putCollectors(value: DeviceGroupExtraServicesDOCDBNormalCollectorConfigCollectors[] | cdktf.IResolvable) {
    this._collectors.internalValue = value;
  }
  public resetCollectors() {
    this._collectors.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get collectorsInput() {
    return this._collectors.internalValue;
  }

  // enabled - computed: false, optional: false, required: true
  private _enabled?: boolean | cdktf.IResolvable; 
  public get enabled() {
    return this.getBooleanAttribute('enabled');
  }
  public set enabled(value: boolean | cdktf.IResolvable) {
    this._enabled = value;
  }
  // Temporarily expose input value. Use with caution.
  public get enabledInput() {
    return this._enabled;
  }
}

export class DeviceGroupExtraServicesDOCDBNormalCollectorConfigList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesDOCDBNormalCollectorConfig[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesDOCDBNormalCollectorConfigOutputReference {
    return new DeviceGroupExtraServicesDOCDBNormalCollectorConfigOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesDOCDB {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#custom_n_s_p_schedule DeviceGroup#custom_n_s_p_schedule}
  */
  readonly customNSPSchedule?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#dead_operation DeviceGroup#dead_operation}
  */
  readonly deadOperation?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#device_display_name_template DeviceGroup#device_display_name_template}
  */
  readonly deviceDisplayNameTemplate?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#disable_stop_terminate_host_monitor DeviceGroup#disable_stop_terminate_host_monitor}
  */
  readonly disableStopTerminateHostMonitor?: boolean | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#disable_terminated_host_alerting DeviceGroup#disable_terminated_host_alerting}
  */
  readonly disableTerminatedHostAlerting?: boolean | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#monitoring_region_infos DeviceGroup#monitoring_region_infos}
  */
  readonly monitoringRegionInfos?: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#monitoring_regions DeviceGroup#monitoring_regions}
  */
  readonly monitoringRegions?: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#name_filter DeviceGroup#name_filter}
  */
  readonly nameFilter?: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#select_all DeviceGroup#select_all}
  */
  readonly selectAll?: boolean | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#tags DeviceGroup#tags}
  */
  readonly tags?: DeviceGroupExtraServicesDOCDBTags[] | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#use_default DeviceGroup#use_default}
  */
  readonly useDefault: boolean | cdktf.IResolvable;
  /**
  * normal_collector_config block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#normal_collector_config DeviceGroup#normal_collector_config}
  */
  readonly normalCollectorConfig?: DeviceGroupExtraServicesDOCDBNormalCollectorConfig[] | cdktf.IResolvable;
}

export function deviceGroupExtraServicesDOCDBToTerraform(struct?: DeviceGroupExtraServicesDOCDB | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    custom_n_s_p_schedule: cdktf.stringToTerraform(struct!.customNSPSchedule),
    dead_operation: cdktf.stringToTerraform(struct!.deadOperation),
    device_display_name_template: cdktf.stringToTerraform(struct!.deviceDisplayNameTemplate),
    disable_stop_terminate_host_monitor: cdktf.booleanToTerraform(struct!.disableStopTerminateHostMonitor),
    disable_terminated_host_alerting: cdktf.booleanToTerraform(struct!.disableTerminatedHostAlerting),
    monitoring_region_infos: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.monitoringRegionInfos),
    monitoring_regions: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.monitoringRegions),
    name_filter: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.nameFilter),
    select_all: cdktf.booleanToTerraform(struct!.selectAll),
    tags: cdktf.listMapper(deviceGroupExtraServicesDOCDBTagsToTerraform, false)(struct!.tags),
    use_default: cdktf.booleanToTerraform(struct!.useDefault),
    normal_collector_config: cdktf.listMapper(deviceGroupExtraServicesDOCDBNormalCollectorConfigToTerraform, true)(struct!.normalCollectorConfig),
  }
}


export function deviceGroupExtraServicesDOCDBToHclTerraform(struct?: DeviceGroupExtraServicesDOCDB | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    custom_n_s_p_schedule: {
      value: cdktf.stringToHclTerraform(struct!.customNSPSchedule),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    dead_operation: {
      value: cdktf.stringToHclTerraform(struct!.deadOperation),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    device_display_name_template: {
      value: cdktf.stringToHclTerraform(struct!.deviceDisplayNameTemplate),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    disable_stop_terminate_host_monitor: {
      value: cdktf.booleanToHclTerraform(struct!.disableStopTerminateHostMonitor),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    disable_terminated_host_alerting: {
      value: cdktf.booleanToHclTerraform(struct!.disableTerminatedHostAlerting),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    monitoring_region_infos: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.monitoringRegionInfos),
      isBlock: false,
      type: "set",
      storageClassType: "stringList",
    },
    monitoring_regions: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.monitoringRegions),
      isBlock: false,
      type: "set",
      storageClassType: "stringList",
    },
    name_filter: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.nameFilter),
      isBlock: false,
      type: "set",
      storageClassType: "stringList",
    },
    select_all: {
      value: cdktf.booleanToHclTerraform(struct!.selectAll),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    tags: {
      value: cdktf.listMapperHcl(deviceGroupExtraServicesDOCDBTagsToHclTerraform, false)(struct!.tags),
      isBlock: true,
      type: "list",
      storageClassType: "DeviceGroupExtraServicesDOCDBTagsList",
    },
    use_default: {
      value: cdktf.booleanToHclTerraform(struct!.useDefault),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    normal_collector_config: {
      value: cdktf.listMapperHcl(deviceGroupExtraServicesDOCDBNormalCollectorConfigToHclTerraform, true)(struct!.normalCollectorConfig),
      isBlock: true,
      type: "list",
      storageClassType: "DeviceGroupExtraServicesDOCDBNormalCollectorConfigList",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesDOCDBOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesDOCDB | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._customNSPSchedule !== undefined) {
      hasAnyValues = true;
      internalValueResult.customNSPSchedule = this._customNSPSchedule;
    }
    if (this._deadOperation !== undefined) {
      hasAnyValues = true;
      internalValueResult.deadOperation = this._deadOperation;
    }
    if (this._deviceDisplayNameTemplate !== undefined) {
      hasAnyValues = true;
      internalValueResult.deviceDisplayNameTemplate = this._deviceDisplayNameTemplate;
    }
    if (this._disableStopTerminateHostMonitor !== undefined) {
      hasAnyValues = true;
      internalValueResult.disableStopTerminateHostMonitor = this._disableStopTerminateHostMonitor;
    }
    if (this._disableTerminatedHostAlerting !== undefined) {
      hasAnyValues = true;
      internalValueResult.disableTerminatedHostAlerting = this._disableTerminatedHostAlerting;
    }
    if (this._monitoringRegionInfos !== undefined) {
      hasAnyValues = true;
      internalValueResult.monitoringRegionInfos = this._monitoringRegionInfos;
    }
    if (this._monitoringRegions !== undefined) {
      hasAnyValues = true;
      internalValueResult.monitoringRegions = this._monitoringRegions;
    }
    if (this._nameFilter !== undefined) {
      hasAnyValues = true;
      internalValueResult.nameFilter = this._nameFilter;
    }
    if (this._selectAll !== undefined) {
      hasAnyValues = true;
      internalValueResult.selectAll = this._selectAll;
    }
    if (this._tags?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.tags = this._tags?.internalValue;
    }
    if (this._useDefault !== undefined) {
      hasAnyValues = true;
      internalValueResult.useDefault = this._useDefault;
    }
    if (this._normalCollectorConfig?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.normalCollectorConfig = this._normalCollectorConfig?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesDOCDB | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._customNSPSchedule = undefined;
      this._deadOperation = undefined;
      this._deviceDisplayNameTemplate = undefined;
      this._disableStopTerminateHostMonitor = undefined;
      this._disableTerminatedHostAlerting = undefined;
      this._monitoringRegionInfos = undefined;
      this._monitoringRegions = undefined;
      this._nameFilter = undefined;
      this._selectAll = undefined;
      this._tags.internalValue = undefined;
      this._useDefault = undefined;
      this._normalCollectorConfig.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._customNSPSchedule = value.customNSPSchedule;
      this._deadOperation = value.deadOperation;
      this._deviceDisplayNameTemplate = value.deviceDisplayNameTemplate;
      this._disableStopTerminateHostMonitor = value.disableStopTerminateHostMonitor;
      this._disableTerminatedHostAlerting = value.disableTerminatedHostAlerting;
      this._monitoringRegionInfos = value.monitoringRegionInfos;
      this._monitoringRegions = value.monitoringRegions;
      this._nameFilter = value.nameFilter;
      this._selectAll = value.selectAll;
      this._tags.internalValue = value.tags;
      this._useDefault = value.useDefault;
      this._normalCollectorConfig.internalValue = value.normalCollectorConfig;
    }
  }

  // custom_n_s_p_schedule - computed: false, optional: true, required: false
  private _customNSPSchedule?: string; 
  public get customNSPSchedule() {
    return this.getStringAttribute('custom_n_s_p_schedule');
  }
  public set customNSPSchedule(value: string) {
    this._customNSPSchedule = value;
  }
  public resetCustomNSPSchedule() {
    this._customNSPSchedule = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get customNSPScheduleInput() {
    return this._customNSPSchedule;
  }

  // dead_operation - computed: false, optional: true, required: false
  private _deadOperation?: string; 
  public get deadOperation() {
    return this.getStringAttribute('dead_operation');
  }
  public set deadOperation(value: string) {
    this._deadOperation = value;
  }
  public resetDeadOperation() {
    this._deadOperation = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get deadOperationInput() {
    return this._deadOperation;
  }

  // device_display_name_template - computed: false, optional: true, required: false
  private _deviceDisplayNameTemplate?: string; 
  public get deviceDisplayNameTemplate() {
    return this.getStringAttribute('device_display_name_template');
  }
  public set deviceDisplayNameTemplate(value: string) {
    this._deviceDisplayNameTemplate = value;
  }
  public resetDeviceDisplayNameTemplate() {
    this._deviceDisplayNameTemplate = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get deviceDisplayNameTemplateInput() {
    return this._deviceDisplayNameTemplate;
  }

  // disable_stop_terminate_host_monitor - computed: false, optional: true, required: false
  private _disableStopTerminateHostMonitor?: boolean | cdktf.IResolvable; 
  public get disableStopTerminateHostMonitor() {
    return this.getBooleanAttribute('disable_stop_terminate_host_monitor');
  }
  public set disableStopTerminateHostMonitor(value: boolean | cdktf.IResolvable) {
    this._disableStopTerminateHostMonitor = value;
  }
  public resetDisableStopTerminateHostMonitor() {
    this._disableStopTerminateHostMonitor = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get disableStopTerminateHostMonitorInput() {
    return this._disableStopTerminateHostMonitor;
  }

  // disable_terminated_host_alerting - computed: false, optional: true, required: false
  private _disableTerminatedHostAlerting?: boolean | cdktf.IResolvable; 
  public get disableTerminatedHostAlerting() {
    return this.getBooleanAttribute('disable_terminated_host_alerting');
  }
  public set disableTerminatedHostAlerting(value: boolean | cdktf.IResolvable) {
    this._disableTerminatedHostAlerting = value;
  }
  public resetDisableTerminatedHostAlerting() {
    this._disableTerminatedHostAlerting = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get disableTerminatedHostAlertingInput() {
    return this._disableTerminatedHostAlerting;
  }

  // monitoring_region_infos - computed: false, optional: true, required: false
  private _monitoringRegionInfos?: string[]; 
  public get monitoringRegionInfos() {
    return cdktf.Fn.tolist(this.getListAttribute('monitoring_region_infos'));
  }
  public set monitoringRegionInfos(value: string[]) {
    this._monitoringRegionInfos = value;
  }
  public resetMonitoringRegionInfos() {
    this._monitoringRegionInfos = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get monitoringRegionInfosInput() {
    return this._monitoringRegionInfos;
  }

  // monitoring_regions - computed: false, optional: true, required: false
  private _monitoringRegions?: string[]; 
  public get monitoringRegions() {
    return cdktf.Fn.tolist(this.getListAttribute('monitoring_regions'));
  }
  public set monitoringRegions(value: string[]) {
    this._monitoringRegions = value;
  }
  public resetMonitoringRegions() {
    this._monitoringRegions = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get monitoringRegionsInput() {
    return this._monitoringRegions;
  }

  // name_filter - computed: false, optional: true, required: false
  private _nameFilter?: string[]; 
  public get nameFilter() {
    return cdktf.Fn.tolist(this.getListAttribute('name_filter'));
  }
  public set nameFilter(value: string[]) {
    this._nameFilter = value;
  }
  public resetNameFilter() {
    this._nameFilter = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get nameFilterInput() {
    return this._nameFilter;
  }

  // select_all - computed: false, optional: true, required: false
  private _selectAll?: boolean | cdktf.IResolvable; 
  public get selectAll() {
    return this.getBooleanAttribute('select_all');
  }
  public set selectAll(value: boolean | cdktf.IResolvable) {
    this._selectAll = value;
  }
  public resetSelectAll() {
    this._selectAll = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get selectAllInput() {
    return this._selectAll;
  }

  // tags - computed: false, optional: true, required: false
  private _tags = new DeviceGroupExtraServicesDOCDBTagsList(this, "tags", false);
  public get tags() {
    return this._tags;
  }
  public putTags(value: DeviceGroupExtraServicesDOCDBTags[] | cdktf.IResolvable) {
    this._tags.internalValue = value;
  }
  public resetTags() {
    this._tags.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get tagsInput() {
    return this._tags.internalValue;
  }

  // use_default - computed: false, optional: false, required: true
  private _useDefault?: boolean | cdktf.IResolvable; 
  public get useDefault() {
    return this.getBooleanAttribute('use_default');
  }
  public set useDefault(value: boolean | cdktf.IResolvable) {
    this._useDefault = value;
  }
  // Temporarily expose input value. Use with caution.
  public get useDefaultInput() {
    return this._useDefault;
  }

  // normal_collector_config - computed: false, optional: true, required: false
  private _normalCollectorConfig = new DeviceGroupExtraServicesDOCDBNormalCollectorConfigList(this, "normal_collector_config", false);
  public get normalCollectorConfig() {
    return this._normalCollectorConfig;
  }
  public putNormalCollectorConfig(value: DeviceGroupExtraServicesDOCDBNormalCollectorConfig[] | cdktf.IResolvable) {
    this._normalCollectorConfig.internalValue = value;
  }
  public resetNormalCollectorConfig() {
    this._normalCollectorConfig.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get normalCollectorConfigInput() {
    return this._normalCollectorConfig.internalValue;
  }
}

export class DeviceGroupExtraServicesDOCDBList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesDOCDB[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesDOCDBOutputReference {
    return new DeviceGroupExtraServicesDOCDBOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesDYNAMODBTags {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#name DeviceGroup#name}
  */
  readonly name?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#operation DeviceGroup#operation}
  */
  readonly operation?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#value DeviceGroup#value}
  */
  readonly value?: string;
}

export function deviceGroupExtraServicesDYNAMODBTagsToTerraform(struct?: DeviceGroupExtraServicesDYNAMODBTags | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    name: cdktf.stringToTerraform(struct!.name),
    operation: cdktf.stringToTerraform(struct!.operation),
    value: cdktf.stringToTerraform(struct!.value),
  }
}


export function deviceGroupExtraServicesDYNAMODBTagsToHclTerraform(struct?: DeviceGroupExtraServicesDYNAMODBTags | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    name: {
      value: cdktf.stringToHclTerraform(struct!.name),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    operation: {
      value: cdktf.stringToHclTerraform(struct!.operation),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    value: {
      value: cdktf.stringToHclTerraform(struct!.value),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesDYNAMODBTagsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesDYNAMODBTags | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._name !== undefined) {
      hasAnyValues = true;
      internalValueResult.name = this._name;
    }
    if (this._operation !== undefined) {
      hasAnyValues = true;
      internalValueResult.operation = this._operation;
    }
    if (this._value !== undefined) {
      hasAnyValues = true;
      internalValueResult.value = this._value;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesDYNAMODBTags | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._name = undefined;
      this._operation = undefined;
      this._value = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._name = value.name;
      this._operation = value.operation;
      this._value = value.value;
    }
  }

  // name - computed: false, optional: true, required: false
  private _name?: string; 
  public get name() {
    return this.getStringAttribute('name');
  }
  public set name(value: string) {
    this._name = value;
  }
  public resetName() {
    this._name = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get nameInput() {
    return this._name;
  }

  // operation - computed: false, optional: true, required: false
  private _operation?: string; 
  public get operation() {
    return this.getStringAttribute('operation');
  }
  public set operation(value: string) {
    this._operation = value;
  }
  public resetOperation() {
    this._operation = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get operationInput() {
    return this._operation;
  }

  // value - computed: false, optional: true, required: false
  private _value?: string; 
  public get value() {
    return this.getStringAttribute('value');
  }
  public set value(value: string) {
    this._value = value;
  }
  public resetValue() {
    this._value = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get valueInput() {
    return this._value;
  }
}

export class DeviceGroupExtraServicesDYNAMODBTagsList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesDYNAMODBTags[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesDYNAMODBTagsOutputReference {
    return new DeviceGroupExtraServicesDYNAMODBTagsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesDYNAMODBNormalCollectorConfigCollectors {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#applies_to DeviceGroup#applies_to}
  */
  readonly appliesTo?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#auto_balanced_collector_group_id DeviceGroup#auto_balanced_collector_group_id}
  */
  readonly autoBalancedCollectorGroupId?: number;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#collector_id DeviceGroup#collector_id}
  */
  readonly collectorId?: number;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#priority DeviceGroup#priority}
  */
  readonly priority?: number;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#use_public_ip DeviceGroup#use_public_ip}
  */
  readonly usePublicIp?: boolean | cdktf.IResolvable;
}

export function deviceGroupExtraServicesDYNAMODBNormalCollectorConfigCollectorsToTerraform(struct?: DeviceGroupExtraServicesDYNAMODBNormalCollectorConfigCollectors | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    applies_to: cdktf.stringToTerraform(struct!.appliesTo),
    auto_balanced_collector_group_id: cdktf.numberToTerraform(struct!.autoBalancedCollectorGroupId),
    collector_id: cdktf.numberToTerraform(struct!.collectorId),
    priority: cdktf.numberToTerraform(struct!.priority),
    use_public_ip: cdktf.booleanToTerraform(struct!.usePublicIp),
  }
}


export function deviceGroupExtraServicesDYNAMODBNormalCollectorConfigCollectorsToHclTerraform(struct?: DeviceGroupExtraServicesDYNAMODBNormalCollectorConfigCollectors | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    applies_to: {
      value: cdktf.stringToHclTerraform(struct!.appliesTo),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    auto_balanced_collector_group_id: {
      value: cdktf.numberToHclTerraform(struct!.autoBalancedCollectorGroupId),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    collector_id: {
      value: cdktf.numberToHclTerraform(struct!.collectorId),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    priority: {
      value: cdktf.numberToHclTerraform(struct!.priority),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    use_public_ip: {
      value: cdktf.booleanToHclTerraform(struct!.usePublicIp),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesDYNAMODBNormalCollectorConfigCollectorsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesDYNAMODBNormalCollectorConfigCollectors | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._appliesTo !== undefined) {
      hasAnyValues = true;
      internalValueResult.appliesTo = this._appliesTo;
    }
    if (this._autoBalancedCollectorGroupId !== undefined) {
      hasAnyValues = true;
      internalValueResult.autoBalancedCollectorGroupId = this._autoBalancedCollectorGroupId;
    }
    if (this._collectorId !== undefined) {
      hasAnyValues = true;
      internalValueResult.collectorId = this._collectorId;
    }
    if (this._priority !== undefined) {
      hasAnyValues = true;
      internalValueResult.priority = this._priority;
    }
    if (this._usePublicIp !== undefined) {
      hasAnyValues = true;
      internalValueResult.usePublicIp = this._usePublicIp;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesDYNAMODBNormalCollectorConfigCollectors | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._appliesTo = undefined;
      this._autoBalancedCollectorGroupId = undefined;
      this._collectorId = undefined;
      this._priority = undefined;
      this._usePublicIp = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._appliesTo = value.appliesTo;
      this._autoBalancedCollectorGroupId = value.autoBalancedCollectorGroupId;
      this._collectorId = value.collectorId;
      this._priority = value.priority;
      this._usePublicIp = value.usePublicIp;
    }
  }

  // applies_to - computed: false, optional: true, required: false
  private _appliesTo?: string; 
  public get appliesTo() {
    return this.getStringAttribute('applies_to');
  }
  public set appliesTo(value: string) {
    this._appliesTo = value;
  }
  public resetAppliesTo() {
    this._appliesTo = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get appliesToInput() {
    return this._appliesTo;
  }

  // auto_balanced_collector_group_id - computed: false, optional: true, required: false
  private _autoBalancedCollectorGroupId?: number; 
  public get autoBalancedCollectorGroupId() {
    return this.getNumberAttribute('auto_balanced_collector_group_id');
  }
  public set autoBalancedCollectorGroupId(value: number) {
    this._autoBalancedCollectorGroupId = value;
  }
  public resetAutoBalancedCollectorGroupId() {
    this._autoBalancedCollectorGroupId = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get autoBalancedCollectorGroupIdInput() {
    return this._autoBalancedCollectorGroupId;
  }

  // collector_id - computed: false, optional: true, required: false
  private _collectorId?: number; 
  public get collectorId() {
    return this.getNumberAttribute('collector_id');
  }
  public set collectorId(value: number) {
    this._collectorId = value;
  }
  public resetCollectorId() {
    this._collectorId = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get collectorIdInput() {
    return this._collectorId;
  }

  // priority - computed: false, optional: true, required: false
  private _priority?: number; 
  public get priority() {
    return this.getNumberAttribute('priority');
  }
  public set priority(value: number) {
    this._priority = value;
  }
  public resetPriority() {
    this._priority = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get priorityInput() {
    return this._priority;
  }

  // use_public_ip - computed: false, optional: true, required: false
  private _usePublicIp?: boolean | cdktf.IResolvable; 
  public get usePublicIp() {
    return this.getBooleanAttribute('use_public_ip');
  }
  public set usePublicIp(value: boolean | cdktf.IResolvable) {
    this._usePublicIp = value;
  }
  public resetUsePublicIp() {
    this._usePublicIp = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get usePublicIpInput() {
    return this._usePublicIp;
  }
}

export class DeviceGroupExtraServicesDYNAMODBNormalCollectorConfigCollectorsList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesDYNAMODBNormalCollectorConfigCollectors[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesDYNAMODBNormalCollectorConfigCollectorsOutputReference {
    return new DeviceGroupExtraServicesDYNAMODBNormalCollectorConfigCollectorsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesDYNAMODBNormalCollectorConfig {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#collectors DeviceGroup#collectors}
  */
  readonly collectors?: DeviceGroupExtraServicesDYNAMODBNormalCollectorConfigCollectors[] | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#enabled DeviceGroup#enabled}
  */
  readonly enabled: boolean | cdktf.IResolvable;
}

export function deviceGroupExtraServicesDYNAMODBNormalCollectorConfigToTerraform(struct?: DeviceGroupExtraServicesDYNAMODBNormalCollectorConfig | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    collectors: cdktf.listMapper(deviceGroupExtraServicesDYNAMODBNormalCollectorConfigCollectorsToTerraform, false)(struct!.collectors),
    enabled: cdktf.booleanToTerraform(struct!.enabled),
  }
}


export function deviceGroupExtraServicesDYNAMODBNormalCollectorConfigToHclTerraform(struct?: DeviceGroupExtraServicesDYNAMODBNormalCollectorConfig | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    collectors: {
      value: cdktf.listMapperHcl(deviceGroupExtraServicesDYNAMODBNormalCollectorConfigCollectorsToHclTerraform, false)(struct!.collectors),
      isBlock: true,
      type: "list",
      storageClassType: "DeviceGroupExtraServicesDYNAMODBNormalCollectorConfigCollectorsList",
    },
    enabled: {
      value: cdktf.booleanToHclTerraform(struct!.enabled),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesDYNAMODBNormalCollectorConfigOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesDYNAMODBNormalCollectorConfig | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._collectors?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.collectors = this._collectors?.internalValue;
    }
    if (this._enabled !== undefined) {
      hasAnyValues = true;
      internalValueResult.enabled = this._enabled;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesDYNAMODBNormalCollectorConfig | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._collectors.internalValue = undefined;
      this._enabled = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._collectors.internalValue = value.collectors;
      this._enabled = value.enabled;
    }
  }

  // collectors - computed: false, optional: true, required: false
  private _collectors = new DeviceGroupExtraServicesDYNAMODBNormalCollectorConfigCollectorsList(this, "collectors", false);
  public get collectors() {
    return this._collectors;
  }
  public putCollectors(value: DeviceGroupExtraServicesDYNAMODBNormalCollectorConfigCollectors[] | cdktf.IResolvable) {
    this._collectors.internalValue = value;
  }
  public resetCollectors() {
    this._collectors.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get collectorsInput() {
    return this._collectors.internalValue;
  }

  // enabled - computed: false, optional: false, required: true
  private _enabled?: boolean | cdktf.IResolvable; 
  public get enabled() {
    return this.getBooleanAttribute('enabled');
  }
  public set enabled(value: boolean | cdktf.IResolvable) {
    this._enabled = value;
  }
  // Temporarily expose input value. Use with caution.
  public get enabledInput() {
    return this._enabled;
  }
}

export class DeviceGroupExtraServicesDYNAMODBNormalCollectorConfigList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesDYNAMODBNormalCollectorConfig[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesDYNAMODBNormalCollectorConfigOutputReference {
    return new DeviceGroupExtraServicesDYNAMODBNormalCollectorConfigOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesDYNAMODB {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#custom_n_s_p_schedule DeviceGroup#custom_n_s_p_schedule}
  */
  readonly customNSPSchedule?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#dead_operation DeviceGroup#dead_operation}
  */
  readonly deadOperation?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#device_display_name_template DeviceGroup#device_display_name_template}
  */
  readonly deviceDisplayNameTemplate?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#disable_stop_terminate_host_monitor DeviceGroup#disable_stop_terminate_host_monitor}
  */
  readonly disableStopTerminateHostMonitor?: boolean | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#disable_terminated_host_alerting DeviceGroup#disable_terminated_host_alerting}
  */
  readonly disableTerminatedHostAlerting?: boolean | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#monitoring_region_infos DeviceGroup#monitoring_region_infos}
  */
  readonly monitoringRegionInfos?: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#monitoring_regions DeviceGroup#monitoring_regions}
  */
  readonly monitoringRegions?: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#name_filter DeviceGroup#name_filter}
  */
  readonly nameFilter?: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#select_all DeviceGroup#select_all}
  */
  readonly selectAll?: boolean | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#tags DeviceGroup#tags}
  */
  readonly tags?: DeviceGroupExtraServicesDYNAMODBTags[] | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#use_default DeviceGroup#use_default}
  */
  readonly useDefault: boolean | cdktf.IResolvable;
  /**
  * normal_collector_config block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#normal_collector_config DeviceGroup#normal_collector_config}
  */
  readonly normalCollectorConfig?: DeviceGroupExtraServicesDYNAMODBNormalCollectorConfig[] | cdktf.IResolvable;
}

export function deviceGroupExtraServicesDYNAMODBToTerraform(struct?: DeviceGroupExtraServicesDYNAMODB | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    custom_n_s_p_schedule: cdktf.stringToTerraform(struct!.customNSPSchedule),
    dead_operation: cdktf.stringToTerraform(struct!.deadOperation),
    device_display_name_template: cdktf.stringToTerraform(struct!.deviceDisplayNameTemplate),
    disable_stop_terminate_host_monitor: cdktf.booleanToTerraform(struct!.disableStopTerminateHostMonitor),
    disable_terminated_host_alerting: cdktf.booleanToTerraform(struct!.disableTerminatedHostAlerting),
    monitoring_region_infos: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.monitoringRegionInfos),
    monitoring_regions: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.monitoringRegions),
    name_filter: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.nameFilter),
    select_all: cdktf.booleanToTerraform(struct!.selectAll),
    tags: cdktf.listMapper(deviceGroupExtraServicesDYNAMODBTagsToTerraform, false)(struct!.tags),
    use_default: cdktf.booleanToTerraform(struct!.useDefault),
    normal_collector_config: cdktf.listMapper(deviceGroupExtraServicesDYNAMODBNormalCollectorConfigToTerraform, true)(struct!.normalCollectorConfig),
  }
}


export function deviceGroupExtraServicesDYNAMODBToHclTerraform(struct?: DeviceGroupExtraServicesDYNAMODB | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    custom_n_s_p_schedule: {
      value: cdktf.stringToHclTerraform(struct!.customNSPSchedule),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    dead_operation: {
      value: cdktf.stringToHclTerraform(struct!.deadOperation),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    device_display_name_template: {
      value: cdktf.stringToHclTerraform(struct!.deviceDisplayNameTemplate),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    disable_stop_terminate_host_monitor: {
      value: cdktf.booleanToHclTerraform(struct!.disableStopTerminateHostMonitor),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    disable_terminated_host_alerting: {
      value: cdktf.booleanToHclTerraform(struct!.disableTerminatedHostAlerting),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    monitoring_region_infos: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.monitoringRegionInfos),
      isBlock: false,
      type: "set",
      storageClassType: "stringList",
    },
    monitoring_regions: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.monitoringRegions),
      isBlock: false,
      type: "set",
      storageClassType: "stringList",
    },
    name_filter: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.nameFilter),
      isBlock: false,
      type: "set",
      storageClassType: "stringList",
    },
    select_all: {
      value: cdktf.booleanToHclTerraform(struct!.selectAll),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    tags: {
      value: cdktf.listMapperHcl(deviceGroupExtraServicesDYNAMODBTagsToHclTerraform, false)(struct!.tags),
      isBlock: true,
      type: "list",
      storageClassType: "DeviceGroupExtraServicesDYNAMODBTagsList",
    },
    use_default: {
      value: cdktf.booleanToHclTerraform(struct!.useDefault),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    normal_collector_config: {
      value: cdktf.listMapperHcl(deviceGroupExtraServicesDYNAMODBNormalCollectorConfigToHclTerraform, true)(struct!.normalCollectorConfig),
      isBlock: true,
      type: "list",
      storageClassType: "DeviceGroupExtraServicesDYNAMODBNormalCollectorConfigList",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesDYNAMODBOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesDYNAMODB | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._customNSPSchedule !== undefined) {
      hasAnyValues = true;
      internalValueResult.customNSPSchedule = this._customNSPSchedule;
    }
    if (this._deadOperation !== undefined) {
      hasAnyValues = true;
      internalValueResult.deadOperation = this._deadOperation;
    }
    if (this._deviceDisplayNameTemplate !== undefined) {
      hasAnyValues = true;
      internalValueResult.deviceDisplayNameTemplate = this._deviceDisplayNameTemplate;
    }
    if (this._disableStopTerminateHostMonitor !== undefined) {
      hasAnyValues = true;
      internalValueResult.disableStopTerminateHostMonitor = this._disableStopTerminateHostMonitor;
    }
    if (this._disableTerminatedHostAlerting !== undefined) {
      hasAnyValues = true;
      internalValueResult.disableTerminatedHostAlerting = this._disableTerminatedHostAlerting;
    }
    if (this._monitoringRegionInfos !== undefined) {
      hasAnyValues = true;
      internalValueResult.monitoringRegionInfos = this._monitoringRegionInfos;
    }
    if (this._monitoringRegions !== undefined) {
      hasAnyValues = true;
      internalValueResult.monitoringRegions = this._monitoringRegions;
    }
    if (this._nameFilter !== undefined) {
      hasAnyValues = true;
      internalValueResult.nameFilter = this._nameFilter;
    }
    if (this._selectAll !== undefined) {
      hasAnyValues = true;
      internalValueResult.selectAll = this._selectAll;
    }
    if (this._tags?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.tags = this._tags?.internalValue;
    }
    if (this._useDefault !== undefined) {
      hasAnyValues = true;
      internalValueResult.useDefault = this._useDefault;
    }
    if (this._normalCollectorConfig?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.normalCollectorConfig = this._normalCollectorConfig?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesDYNAMODB | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._customNSPSchedule = undefined;
      this._deadOperation = undefined;
      this._deviceDisplayNameTemplate = undefined;
      this._disableStopTerminateHostMonitor = undefined;
      this._disableTerminatedHostAlerting = undefined;
      this._monitoringRegionInfos = undefined;
      this._monitoringRegions = undefined;
      this._nameFilter = undefined;
      this._selectAll = undefined;
      this._tags.internalValue = undefined;
      this._useDefault = undefined;
      this._normalCollectorConfig.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._customNSPSchedule = value.customNSPSchedule;
      this._deadOperation = value.deadOperation;
      this._deviceDisplayNameTemplate = value.deviceDisplayNameTemplate;
      this._disableStopTerminateHostMonitor = value.disableStopTerminateHostMonitor;
      this._disableTerminatedHostAlerting = value.disableTerminatedHostAlerting;
      this._monitoringRegionInfos = value.monitoringRegionInfos;
      this._monitoringRegions = value.monitoringRegions;
      this._nameFilter = value.nameFilter;
      this._selectAll = value.selectAll;
      this._tags.internalValue = value.tags;
      this._useDefault = value.useDefault;
      this._normalCollectorConfig.internalValue = value.normalCollectorConfig;
    }
  }

  // custom_n_s_p_schedule - computed: false, optional: true, required: false
  private _customNSPSchedule?: string; 
  public get customNSPSchedule() {
    return this.getStringAttribute('custom_n_s_p_schedule');
  }
  public set customNSPSchedule(value: string) {
    this._customNSPSchedule = value;
  }
  public resetCustomNSPSchedule() {
    this._customNSPSchedule = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get customNSPScheduleInput() {
    return this._customNSPSchedule;
  }

  // dead_operation - computed: false, optional: true, required: false
  private _deadOperation?: string; 
  public get deadOperation() {
    return this.getStringAttribute('dead_operation');
  }
  public set deadOperation(value: string) {
    this._deadOperation = value;
  }
  public resetDeadOperation() {
    this._deadOperation = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get deadOperationInput() {
    return this._deadOperation;
  }

  // device_display_name_template - computed: false, optional: true, required: false
  private _deviceDisplayNameTemplate?: string; 
  public get deviceDisplayNameTemplate() {
    return this.getStringAttribute('device_display_name_template');
  }
  public set deviceDisplayNameTemplate(value: string) {
    this._deviceDisplayNameTemplate = value;
  }
  public resetDeviceDisplayNameTemplate() {
    this._deviceDisplayNameTemplate = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get deviceDisplayNameTemplateInput() {
    return this._deviceDisplayNameTemplate;
  }

  // disable_stop_terminate_host_monitor - computed: false, optional: true, required: false
  private _disableStopTerminateHostMonitor?: boolean | cdktf.IResolvable; 
  public get disableStopTerminateHostMonitor() {
    return this.getBooleanAttribute('disable_stop_terminate_host_monitor');
  }
  public set disableStopTerminateHostMonitor(value: boolean | cdktf.IResolvable) {
    this._disableStopTerminateHostMonitor = value;
  }
  public resetDisableStopTerminateHostMonitor() {
    this._disableStopTerminateHostMonitor = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get disableStopTerminateHostMonitorInput() {
    return this._disableStopTerminateHostMonitor;
  }

  // disable_terminated_host_alerting - computed: false, optional: true, required: false
  private _disableTerminatedHostAlerting?: boolean | cdktf.IResolvable; 
  public get disableTerminatedHostAlerting() {
    return this.getBooleanAttribute('disable_terminated_host_alerting');
  }
  public set disableTerminatedHostAlerting(value: boolean | cdktf.IResolvable) {
    this._disableTerminatedHostAlerting = value;
  }
  public resetDisableTerminatedHostAlerting() {
    this._disableTerminatedHostAlerting = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get disableTerminatedHostAlertingInput() {
    return this._disableTerminatedHostAlerting;
  }

  // monitoring_region_infos - computed: false, optional: true, required: false
  private _monitoringRegionInfos?: string[]; 
  public get monitoringRegionInfos() {
    return cdktf.Fn.tolist(this.getListAttribute('monitoring_region_infos'));
  }
  public set monitoringRegionInfos(value: string[]) {
    this._monitoringRegionInfos = value;
  }
  public resetMonitoringRegionInfos() {
    this._monitoringRegionInfos = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get monitoringRegionInfosInput() {
    return this._monitoringRegionInfos;
  }

  // monitoring_regions - computed: false, optional: true, required: false
  private _monitoringRegions?: string[]; 
  public get monitoringRegions() {
    return cdktf.Fn.tolist(this.getListAttribute('monitoring_regions'));
  }
  public set monitoringRegions(value: string[]) {
    this._monitoringRegions = value;
  }
  public resetMonitoringRegions() {
    this._monitoringRegions = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get monitoringRegionsInput() {
    return this._monitoringRegions;
  }

  // name_filter - computed: false, optional: true, required: false
  private _nameFilter?: string[]; 
  public get nameFilter() {
    return cdktf.Fn.tolist(this.getListAttribute('name_filter'));
  }
  public set nameFilter(value: string[]) {
    this._nameFilter = value;
  }
  public resetNameFilter() {
    this._nameFilter = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get nameFilterInput() {
    return this._nameFilter;
  }

  // select_all - computed: false, optional: true, required: false
  private _selectAll?: boolean | cdktf.IResolvable; 
  public get selectAll() {
    return this.getBooleanAttribute('select_all');
  }
  public set selectAll(value: boolean | cdktf.IResolvable) {
    this._selectAll = value;
  }
  public resetSelectAll() {
    this._selectAll = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get selectAllInput() {
    return this._selectAll;
  }

  // tags - computed: false, optional: true, required: false
  private _tags = new DeviceGroupExtraServicesDYNAMODBTagsList(this, "tags", false);
  public get tags() {
    return this._tags;
  }
  public putTags(value: DeviceGroupExtraServicesDYNAMODBTags[] | cdktf.IResolvable) {
    this._tags.internalValue = value;
  }
  public resetTags() {
    this._tags.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get tagsInput() {
    return this._tags.internalValue;
  }

  // use_default - computed: false, optional: false, required: true
  private _useDefault?: boolean | cdktf.IResolvable; 
  public get useDefault() {
    return this.getBooleanAttribute('use_default');
  }
  public set useDefault(value: boolean | cdktf.IResolvable) {
    this._useDefault = value;
  }
  // Temporarily expose input value. Use with caution.
  public get useDefaultInput() {
    return this._useDefault;
  }

  // normal_collector_config - computed: false, optional: true, required: false
  private _normalCollectorConfig = new DeviceGroupExtraServicesDYNAMODBNormalCollectorConfigList(this, "normal_collector_config", false);
  public get normalCollectorConfig() {
    return this._normalCollectorConfig;
  }
  public putNormalCollectorConfig(value: DeviceGroupExtraServicesDYNAMODBNormalCollectorConfig[] | cdktf.IResolvable) {
    this._normalCollectorConfig.internalValue = value;
  }
  public resetNormalCollectorConfig() {
    this._normalCollectorConfig.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get normalCollectorConfigInput() {
    return this._normalCollectorConfig.internalValue;
  }
}

export class DeviceGroupExtraServicesDYNAMODBList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesDYNAMODB[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesDYNAMODBOutputReference {
    return new DeviceGroupExtraServicesDYNAMODBOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesEBSTags {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#name DeviceGroup#name}
  */
  readonly name?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#operation DeviceGroup#operation}
  */
  readonly operation?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#value DeviceGroup#value}
  */
  readonly value?: string;
}

export function deviceGroupExtraServicesEBSTagsToTerraform(struct?: DeviceGroupExtraServicesEBSTags | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    name: cdktf.stringToTerraform(struct!.name),
    operation: cdktf.stringToTerraform(struct!.operation),
    value: cdktf.stringToTerraform(struct!.value),
  }
}


export function deviceGroupExtraServicesEBSTagsToHclTerraform(struct?: DeviceGroupExtraServicesEBSTags | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    name: {
      value: cdktf.stringToHclTerraform(struct!.name),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    operation: {
      value: cdktf.stringToHclTerraform(struct!.operation),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    value: {
      value: cdktf.stringToHclTerraform(struct!.value),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesEBSTagsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesEBSTags | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._name !== undefined) {
      hasAnyValues = true;
      internalValueResult.name = this._name;
    }
    if (this._operation !== undefined) {
      hasAnyValues = true;
      internalValueResult.operation = this._operation;
    }
    if (this._value !== undefined) {
      hasAnyValues = true;
      internalValueResult.value = this._value;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesEBSTags | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._name = undefined;
      this._operation = undefined;
      this._value = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._name = value.name;
      this._operation = value.operation;
      this._value = value.value;
    }
  }

  // name - computed: false, optional: true, required: false
  private _name?: string; 
  public get name() {
    return this.getStringAttribute('name');
  }
  public set name(value: string) {
    this._name = value;
  }
  public resetName() {
    this._name = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get nameInput() {
    return this._name;
  }

  // operation - computed: false, optional: true, required: false
  private _operation?: string; 
  public get operation() {
    return this.getStringAttribute('operation');
  }
  public set operation(value: string) {
    this._operation = value;
  }
  public resetOperation() {
    this._operation = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get operationInput() {
    return this._operation;
  }

  // value - computed: false, optional: true, required: false
  private _value?: string; 
  public get value() {
    return this.getStringAttribute('value');
  }
  public set value(value: string) {
    this._value = value;
  }
  public resetValue() {
    this._value = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get valueInput() {
    return this._value;
  }
}

export class DeviceGroupExtraServicesEBSTagsList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesEBSTags[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesEBSTagsOutputReference {
    return new DeviceGroupExtraServicesEBSTagsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesEBSNormalCollectorConfigCollectors {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#applies_to DeviceGroup#applies_to}
  */
  readonly appliesTo?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#auto_balanced_collector_group_id DeviceGroup#auto_balanced_collector_group_id}
  */
  readonly autoBalancedCollectorGroupId?: number;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#collector_id DeviceGroup#collector_id}
  */
  readonly collectorId?: number;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#priority DeviceGroup#priority}
  */
  readonly priority?: number;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#use_public_ip DeviceGroup#use_public_ip}
  */
  readonly usePublicIp?: boolean | cdktf.IResolvable;
}

export function deviceGroupExtraServicesEBSNormalCollectorConfigCollectorsToTerraform(struct?: DeviceGroupExtraServicesEBSNormalCollectorConfigCollectors | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    applies_to: cdktf.stringToTerraform(struct!.appliesTo),
    auto_balanced_collector_group_id: cdktf.numberToTerraform(struct!.autoBalancedCollectorGroupId),
    collector_id: cdktf.numberToTerraform(struct!.collectorId),
    priority: cdktf.numberToTerraform(struct!.priority),
    use_public_ip: cdktf.booleanToTerraform(struct!.usePublicIp),
  }
}


export function deviceGroupExtraServicesEBSNormalCollectorConfigCollectorsToHclTerraform(struct?: DeviceGroupExtraServicesEBSNormalCollectorConfigCollectors | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    applies_to: {
      value: cdktf.stringToHclTerraform(struct!.appliesTo),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    auto_balanced_collector_group_id: {
      value: cdktf.numberToHclTerraform(struct!.autoBalancedCollectorGroupId),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    collector_id: {
      value: cdktf.numberToHclTerraform(struct!.collectorId),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    priority: {
      value: cdktf.numberToHclTerraform(struct!.priority),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    use_public_ip: {
      value: cdktf.booleanToHclTerraform(struct!.usePublicIp),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesEBSNormalCollectorConfigCollectorsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesEBSNormalCollectorConfigCollectors | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._appliesTo !== undefined) {
      hasAnyValues = true;
      internalValueResult.appliesTo = this._appliesTo;
    }
    if (this._autoBalancedCollectorGroupId !== undefined) {
      hasAnyValues = true;
      internalValueResult.autoBalancedCollectorGroupId = this._autoBalancedCollectorGroupId;
    }
    if (this._collectorId !== undefined) {
      hasAnyValues = true;
      internalValueResult.collectorId = this._collectorId;
    }
    if (this._priority !== undefined) {
      hasAnyValues = true;
      internalValueResult.priority = this._priority;
    }
    if (this._usePublicIp !== undefined) {
      hasAnyValues = true;
      internalValueResult.usePublicIp = this._usePublicIp;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesEBSNormalCollectorConfigCollectors | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._appliesTo = undefined;
      this._autoBalancedCollectorGroupId = undefined;
      this._collectorId = undefined;
      this._priority = undefined;
      this._usePublicIp = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._appliesTo = value.appliesTo;
      this._autoBalancedCollectorGroupId = value.autoBalancedCollectorGroupId;
      this._collectorId = value.collectorId;
      this._priority = value.priority;
      this._usePublicIp = value.usePublicIp;
    }
  }

  // applies_to - computed: false, optional: true, required: false
  private _appliesTo?: string; 
  public get appliesTo() {
    return this.getStringAttribute('applies_to');
  }
  public set appliesTo(value: string) {
    this._appliesTo = value;
  }
  public resetAppliesTo() {
    this._appliesTo = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get appliesToInput() {
    return this._appliesTo;
  }

  // auto_balanced_collector_group_id - computed: false, optional: true, required: false
  private _autoBalancedCollectorGroupId?: number; 
  public get autoBalancedCollectorGroupId() {
    return this.getNumberAttribute('auto_balanced_collector_group_id');
  }
  public set autoBalancedCollectorGroupId(value: number) {
    this._autoBalancedCollectorGroupId = value;
  }
  public resetAutoBalancedCollectorGroupId() {
    this._autoBalancedCollectorGroupId = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get autoBalancedCollectorGroupIdInput() {
    return this._autoBalancedCollectorGroupId;
  }

  // collector_id - computed: false, optional: true, required: false
  private _collectorId?: number; 
  public get collectorId() {
    return this.getNumberAttribute('collector_id');
  }
  public set collectorId(value: number) {
    this._collectorId = value;
  }
  public resetCollectorId() {
    this._collectorId = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get collectorIdInput() {
    return this._collectorId;
  }

  // priority - computed: false, optional: true, required: false
  private _priority?: number; 
  public get priority() {
    return this.getNumberAttribute('priority');
  }
  public set priority(value: number) {
    this._priority = value;
  }
  public resetPriority() {
    this._priority = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get priorityInput() {
    return this._priority;
  }

  // use_public_ip - computed: false, optional: true, required: false
  private _usePublicIp?: boolean | cdktf.IResolvable; 
  public get usePublicIp() {
    return this.getBooleanAttribute('use_public_ip');
  }
  public set usePublicIp(value: boolean | cdktf.IResolvable) {
    this._usePublicIp = value;
  }
  public resetUsePublicIp() {
    this._usePublicIp = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get usePublicIpInput() {
    return this._usePublicIp;
  }
}

export class DeviceGroupExtraServicesEBSNormalCollectorConfigCollectorsList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesEBSNormalCollectorConfigCollectors[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesEBSNormalCollectorConfigCollectorsOutputReference {
    return new DeviceGroupExtraServicesEBSNormalCollectorConfigCollectorsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesEBSNormalCollectorConfig {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#collectors DeviceGroup#collectors}
  */
  readonly collectors?: DeviceGroupExtraServicesEBSNormalCollectorConfigCollectors[] | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#enabled DeviceGroup#enabled}
  */
  readonly enabled: boolean | cdktf.IResolvable;
}

export function deviceGroupExtraServicesEBSNormalCollectorConfigToTerraform(struct?: DeviceGroupExtraServicesEBSNormalCollectorConfig | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    collectors: cdktf.listMapper(deviceGroupExtraServicesEBSNormalCollectorConfigCollectorsToTerraform, false)(struct!.collectors),
    enabled: cdktf.booleanToTerraform(struct!.enabled),
  }
}


export function deviceGroupExtraServicesEBSNormalCollectorConfigToHclTerraform(struct?: DeviceGroupExtraServicesEBSNormalCollectorConfig | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    collectors: {
      value: cdktf.listMapperHcl(deviceGroupExtraServicesEBSNormalCollectorConfigCollectorsToHclTerraform, false)(struct!.collectors),
      isBlock: true,
      type: "list",
      storageClassType: "DeviceGroupExtraServicesEBSNormalCollectorConfigCollectorsList",
    },
    enabled: {
      value: cdktf.booleanToHclTerraform(struct!.enabled),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesEBSNormalCollectorConfigOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesEBSNormalCollectorConfig | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._collectors?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.collectors = this._collectors?.internalValue;
    }
    if (this._enabled !== undefined) {
      hasAnyValues = true;
      internalValueResult.enabled = this._enabled;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesEBSNormalCollectorConfig | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._collectors.internalValue = undefined;
      this._enabled = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._collectors.internalValue = value.collectors;
      this._enabled = value.enabled;
    }
  }

  // collectors - computed: false, optional: true, required: false
  private _collectors = new DeviceGroupExtraServicesEBSNormalCollectorConfigCollectorsList(this, "collectors", false);
  public get collectors() {
    return this._collectors;
  }
  public putCollectors(value: DeviceGroupExtraServicesEBSNormalCollectorConfigCollectors[] | cdktf.IResolvable) {
    this._collectors.internalValue = value;
  }
  public resetCollectors() {
    this._collectors.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get collectorsInput() {
    return this._collectors.internalValue;
  }

  // enabled - computed: false, optional: false, required: true
  private _enabled?: boolean | cdktf.IResolvable; 
  public get enabled() {
    return this.getBooleanAttribute('enabled');
  }
  public set enabled(value: boolean | cdktf.IResolvable) {
    this._enabled = value;
  }
  // Temporarily expose input value. Use with caution.
  public get enabledInput() {
    return this._enabled;
  }
}

export class DeviceGroupExtraServicesEBSNormalCollectorConfigList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesEBSNormalCollectorConfig[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesEBSNormalCollectorConfigOutputReference {
    return new DeviceGroupExtraServicesEBSNormalCollectorConfigOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesEBS {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#custom_n_s_p_schedule DeviceGroup#custom_n_s_p_schedule}
  */
  readonly customNSPSchedule?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#dead_operation DeviceGroup#dead_operation}
  */
  readonly deadOperation?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#device_display_name_template DeviceGroup#device_display_name_template}
  */
  readonly deviceDisplayNameTemplate?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#disable_stop_terminate_host_monitor DeviceGroup#disable_stop_terminate_host_monitor}
  */
  readonly disableStopTerminateHostMonitor?: boolean | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#disable_terminated_host_alerting DeviceGroup#disable_terminated_host_alerting}
  */
  readonly disableTerminatedHostAlerting?: boolean | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#monitoring_region_infos DeviceGroup#monitoring_region_infos}
  */
  readonly monitoringRegionInfos?: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#monitoring_regions DeviceGroup#monitoring_regions}
  */
  readonly monitoringRegions?: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#name_filter DeviceGroup#name_filter}
  */
  readonly nameFilter?: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#select_all DeviceGroup#select_all}
  */
  readonly selectAll?: boolean | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#tags DeviceGroup#tags}
  */
  readonly tags?: DeviceGroupExtraServicesEBSTags[] | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#use_default DeviceGroup#use_default}
  */
  readonly useDefault: boolean | cdktf.IResolvable;
  /**
  * normal_collector_config block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#normal_collector_config DeviceGroup#normal_collector_config}
  */
  readonly normalCollectorConfig?: DeviceGroupExtraServicesEBSNormalCollectorConfig[] | cdktf.IResolvable;
}

export function deviceGroupExtraServicesEBSToTerraform(struct?: DeviceGroupExtraServicesEBS | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    custom_n_s_p_schedule: cdktf.stringToTerraform(struct!.customNSPSchedule),
    dead_operation: cdktf.stringToTerraform(struct!.deadOperation),
    device_display_name_template: cdktf.stringToTerraform(struct!.deviceDisplayNameTemplate),
    disable_stop_terminate_host_monitor: cdktf.booleanToTerraform(struct!.disableStopTerminateHostMonitor),
    disable_terminated_host_alerting: cdktf.booleanToTerraform(struct!.disableTerminatedHostAlerting),
    monitoring_region_infos: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.monitoringRegionInfos),
    monitoring_regions: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.monitoringRegions),
    name_filter: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.nameFilter),
    select_all: cdktf.booleanToTerraform(struct!.selectAll),
    tags: cdktf.listMapper(deviceGroupExtraServicesEBSTagsToTerraform, false)(struct!.tags),
    use_default: cdktf.booleanToTerraform(struct!.useDefault),
    normal_collector_config: cdktf.listMapper(deviceGroupExtraServicesEBSNormalCollectorConfigToTerraform, true)(struct!.normalCollectorConfig),
  }
}


export function deviceGroupExtraServicesEBSToHclTerraform(struct?: DeviceGroupExtraServicesEBS | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    custom_n_s_p_schedule: {
      value: cdktf.stringToHclTerraform(struct!.customNSPSchedule),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    dead_operation: {
      value: cdktf.stringToHclTerraform(struct!.deadOperation),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    device_display_name_template: {
      value: cdktf.stringToHclTerraform(struct!.deviceDisplayNameTemplate),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    disable_stop_terminate_host_monitor: {
      value: cdktf.booleanToHclTerraform(struct!.disableStopTerminateHostMonitor),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    disable_terminated_host_alerting: {
      value: cdktf.booleanToHclTerraform(struct!.disableTerminatedHostAlerting),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    monitoring_region_infos: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.monitoringRegionInfos),
      isBlock: false,
      type: "set",
      storageClassType: "stringList",
    },
    monitoring_regions: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.monitoringRegions),
      isBlock: false,
      type: "set",
      storageClassType: "stringList",
    },
    name_filter: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.nameFilter),
      isBlock: false,
      type: "set",
      storageClassType: "stringList",
    },
    select_all: {
      value: cdktf.booleanToHclTerraform(struct!.selectAll),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    tags: {
      value: cdktf.listMapperHcl(deviceGroupExtraServicesEBSTagsToHclTerraform, false)(struct!.tags),
      isBlock: true,
      type: "list",
      storageClassType: "DeviceGroupExtraServicesEBSTagsList",
    },
    use_default: {
      value: cdktf.booleanToHclTerraform(struct!.useDefault),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    normal_collector_config: {
      value: cdktf.listMapperHcl(deviceGroupExtraServicesEBSNormalCollectorConfigToHclTerraform, true)(struct!.normalCollectorConfig),
      isBlock: true,
      type: "list",
      storageClassType: "DeviceGroupExtraServicesEBSNormalCollectorConfigList",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesEBSOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesEBS | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._customNSPSchedule !== undefined) {
      hasAnyValues = true;
      internalValueResult.customNSPSchedule = this._customNSPSchedule;
    }
    if (this._deadOperation !== undefined) {
      hasAnyValues = true;
      internalValueResult.deadOperation = this._deadOperation;
    }
    if (this._deviceDisplayNameTemplate !== undefined) {
      hasAnyValues = true;
      internalValueResult.deviceDisplayNameTemplate = this._deviceDisplayNameTemplate;
    }
    if (this._disableStopTerminateHostMonitor !== undefined) {
      hasAnyValues = true;
      internalValueResult.disableStopTerminateHostMonitor = this._disableStopTerminateHostMonitor;
    }
    if (this._disableTerminatedHostAlerting !== undefined) {
      hasAnyValues = true;
      internalValueResult.disableTerminatedHostAlerting = this._disableTerminatedHostAlerting;
    }
    if (this._monitoringRegionInfos !== undefined) {
      hasAnyValues = true;
      internalValueResult.monitoringRegionInfos = this._monitoringRegionInfos;
    }
    if (this._monitoringRegions !== undefined) {
      hasAnyValues = true;
      internalValueResult.monitoringRegions = this._monitoringRegions;
    }
    if (this._nameFilter !== undefined) {
      hasAnyValues = true;
      internalValueResult.nameFilter = this._nameFilter;
    }
    if (this._selectAll !== undefined) {
      hasAnyValues = true;
      internalValueResult.selectAll = this._selectAll;
    }
    if (this._tags?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.tags = this._tags?.internalValue;
    }
    if (this._useDefault !== undefined) {
      hasAnyValues = true;
      internalValueResult.useDefault = this._useDefault;
    }
    if (this._normalCollectorConfig?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.normalCollectorConfig = this._normalCollectorConfig?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesEBS | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._customNSPSchedule = undefined;
      this._deadOperation = undefined;
      this._deviceDisplayNameTemplate = undefined;
      this._disableStopTerminateHostMonitor = undefined;
      this._disableTerminatedHostAlerting = undefined;
      this._monitoringRegionInfos = undefined;
      this._monitoringRegions = undefined;
      this._nameFilter = undefined;
      this._selectAll = undefined;
      this._tags.internalValue = undefined;
      this._useDefault = undefined;
      this._normalCollectorConfig.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._customNSPSchedule = value.customNSPSchedule;
      this._deadOperation = value.deadOperation;
      this._deviceDisplayNameTemplate = value.deviceDisplayNameTemplate;
      this._disableStopTerminateHostMonitor = value.disableStopTerminateHostMonitor;
      this._disableTerminatedHostAlerting = value.disableTerminatedHostAlerting;
      this._monitoringRegionInfos = value.monitoringRegionInfos;
      this._monitoringRegions = value.monitoringRegions;
      this._nameFilter = value.nameFilter;
      this._selectAll = value.selectAll;
      this._tags.internalValue = value.tags;
      this._useDefault = value.useDefault;
      this._normalCollectorConfig.internalValue = value.normalCollectorConfig;
    }
  }

  // custom_n_s_p_schedule - computed: false, optional: true, required: false
  private _customNSPSchedule?: string; 
  public get customNSPSchedule() {
    return this.getStringAttribute('custom_n_s_p_schedule');
  }
  public set customNSPSchedule(value: string) {
    this._customNSPSchedule = value;
  }
  public resetCustomNSPSchedule() {
    this._customNSPSchedule = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get customNSPScheduleInput() {
    return this._customNSPSchedule;
  }

  // dead_operation - computed: false, optional: true, required: false
  private _deadOperation?: string; 
  public get deadOperation() {
    return this.getStringAttribute('dead_operation');
  }
  public set deadOperation(value: string) {
    this._deadOperation = value;
  }
  public resetDeadOperation() {
    this._deadOperation = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get deadOperationInput() {
    return this._deadOperation;
  }

  // device_display_name_template - computed: false, optional: true, required: false
  private _deviceDisplayNameTemplate?: string; 
  public get deviceDisplayNameTemplate() {
    return this.getStringAttribute('device_display_name_template');
  }
  public set deviceDisplayNameTemplate(value: string) {
    this._deviceDisplayNameTemplate = value;
  }
  public resetDeviceDisplayNameTemplate() {
    this._deviceDisplayNameTemplate = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get deviceDisplayNameTemplateInput() {
    return this._deviceDisplayNameTemplate;
  }

  // disable_stop_terminate_host_monitor - computed: false, optional: true, required: false
  private _disableStopTerminateHostMonitor?: boolean | cdktf.IResolvable; 
  public get disableStopTerminateHostMonitor() {
    return this.getBooleanAttribute('disable_stop_terminate_host_monitor');
  }
  public set disableStopTerminateHostMonitor(value: boolean | cdktf.IResolvable) {
    this._disableStopTerminateHostMonitor = value;
  }
  public resetDisableStopTerminateHostMonitor() {
    this._disableStopTerminateHostMonitor = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get disableStopTerminateHostMonitorInput() {
    return this._disableStopTerminateHostMonitor;
  }

  // disable_terminated_host_alerting - computed: false, optional: true, required: false
  private _disableTerminatedHostAlerting?: boolean | cdktf.IResolvable; 
  public get disableTerminatedHostAlerting() {
    return this.getBooleanAttribute('disable_terminated_host_alerting');
  }
  public set disableTerminatedHostAlerting(value: boolean | cdktf.IResolvable) {
    this._disableTerminatedHostAlerting = value;
  }
  public resetDisableTerminatedHostAlerting() {
    this._disableTerminatedHostAlerting = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get disableTerminatedHostAlertingInput() {
    return this._disableTerminatedHostAlerting;
  }

  // monitoring_region_infos - computed: false, optional: true, required: false
  private _monitoringRegionInfos?: string[]; 
  public get monitoringRegionInfos() {
    return cdktf.Fn.tolist(this.getListAttribute('monitoring_region_infos'));
  }
  public set monitoringRegionInfos(value: string[]) {
    this._monitoringRegionInfos = value;
  }
  public resetMonitoringRegionInfos() {
    this._monitoringRegionInfos = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get monitoringRegionInfosInput() {
    return this._monitoringRegionInfos;
  }

  // monitoring_regions - computed: false, optional: true, required: false
  private _monitoringRegions?: string[]; 
  public get monitoringRegions() {
    return cdktf.Fn.tolist(this.getListAttribute('monitoring_regions'));
  }
  public set monitoringRegions(value: string[]) {
    this._monitoringRegions = value;
  }
  public resetMonitoringRegions() {
    this._monitoringRegions = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get monitoringRegionsInput() {
    return this._monitoringRegions;
  }

  // name_filter - computed: false, optional: true, required: false
  private _nameFilter?: string[]; 
  public get nameFilter() {
    return cdktf.Fn.tolist(this.getListAttribute('name_filter'));
  }
  public set nameFilter(value: string[]) {
    this._nameFilter = value;
  }
  public resetNameFilter() {
    this._nameFilter = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get nameFilterInput() {
    return this._nameFilter;
  }

  // select_all - computed: false, optional: true, required: false
  private _selectAll?: boolean | cdktf.IResolvable; 
  public get selectAll() {
    return this.getBooleanAttribute('select_all');
  }
  public set selectAll(value: boolean | cdktf.IResolvable) {
    this._selectAll = value;
  }
  public resetSelectAll() {
    this._selectAll = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get selectAllInput() {
    return this._selectAll;
  }

  // tags - computed: false, optional: true, required: false
  private _tags = new DeviceGroupExtraServicesEBSTagsList(this, "tags", false);
  public get tags() {
    return this._tags;
  }
  public putTags(value: DeviceGroupExtraServicesEBSTags[] | cdktf.IResolvable) {
    this._tags.internalValue = value;
  }
  public resetTags() {
    this._tags.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get tagsInput() {
    return this._tags.internalValue;
  }

  // use_default - computed: false, optional: false, required: true
  private _useDefault?: boolean | cdktf.IResolvable; 
  public get useDefault() {
    return this.getBooleanAttribute('use_default');
  }
  public set useDefault(value: boolean | cdktf.IResolvable) {
    this._useDefault = value;
  }
  // Temporarily expose input value. Use with caution.
  public get useDefaultInput() {
    return this._useDefault;
  }

  // normal_collector_config - computed: false, optional: true, required: false
  private _normalCollectorConfig = new DeviceGroupExtraServicesEBSNormalCollectorConfigList(this, "normal_collector_config", false);
  public get normalCollectorConfig() {
    return this._normalCollectorConfig;
  }
  public putNormalCollectorConfig(value: DeviceGroupExtraServicesEBSNormalCollectorConfig[] | cdktf.IResolvable) {
    this._normalCollectorConfig.internalValue = value;
  }
  public resetNormalCollectorConfig() {
    this._normalCollectorConfig.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get normalCollectorConfigInput() {
    return this._normalCollectorConfig.internalValue;
  }
}

export class DeviceGroupExtraServicesEBSList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesEBS[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesEBSOutputReference {
    return new DeviceGroupExtraServicesEBSOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesEC2Tags {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#name DeviceGroup#name}
  */
  readonly name?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#operation DeviceGroup#operation}
  */
  readonly operation?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#value DeviceGroup#value}
  */
  readonly value?: string;
}

export function deviceGroupExtraServicesEC2TagsToTerraform(struct?: DeviceGroupExtraServicesEC2Tags | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    name: cdktf.stringToTerraform(struct!.name),
    operation: cdktf.stringToTerraform(struct!.operation),
    value: cdktf.stringToTerraform(struct!.value),
  }
}


export function deviceGroupExtraServicesEC2TagsToHclTerraform(struct?: DeviceGroupExtraServicesEC2Tags | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    name: {
      value: cdktf.stringToHclTerraform(struct!.name),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    operation: {
      value: cdktf.stringToHclTerraform(struct!.operation),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    value: {
      value: cdktf.stringToHclTerraform(struct!.value),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesEC2TagsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesEC2Tags | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._name !== undefined) {
      hasAnyValues = true;
      internalValueResult.name = this._name;
    }
    if (this._operation !== undefined) {
      hasAnyValues = true;
      internalValueResult.operation = this._operation;
    }
    if (this._value !== undefined) {
      hasAnyValues = true;
      internalValueResult.value = this._value;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesEC2Tags | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._name = undefined;
      this._operation = undefined;
      this._value = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._name = value.name;
      this._operation = value.operation;
      this._value = value.value;
    }
  }

  // name - computed: false, optional: true, required: false
  private _name?: string; 
  public get name() {
    return this.getStringAttribute('name');
  }
  public set name(value: string) {
    this._name = value;
  }
  public resetName() {
    this._name = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get nameInput() {
    return this._name;
  }

  // operation - computed: false, optional: true, required: false
  private _operation?: string; 
  public get operation() {
    return this.getStringAttribute('operation');
  }
  public set operation(value: string) {
    this._operation = value;
  }
  public resetOperation() {
    this._operation = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get operationInput() {
    return this._operation;
  }

  // value - computed: false, optional: true, required: false
  private _value?: string; 
  public get value() {
    return this.getStringAttribute('value');
  }
  public set value(value: string) {
    this._value = value;
  }
  public resetValue() {
    this._value = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get valueInput() {
    return this._value;
  }
}

export class DeviceGroupExtraServicesEC2TagsList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesEC2Tags[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesEC2TagsOutputReference {
    return new DeviceGroupExtraServicesEC2TagsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesEC2NormalCollectorConfigCollectors {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#applies_to DeviceGroup#applies_to}
  */
  readonly appliesTo?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#auto_balanced_collector_group_id DeviceGroup#auto_balanced_collector_group_id}
  */
  readonly autoBalancedCollectorGroupId?: number;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#collector_id DeviceGroup#collector_id}
  */
  readonly collectorId?: number;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#priority DeviceGroup#priority}
  */
  readonly priority?: number;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#use_public_ip DeviceGroup#use_public_ip}
  */
  readonly usePublicIp?: boolean | cdktf.IResolvable;
}

export function deviceGroupExtraServicesEC2NormalCollectorConfigCollectorsToTerraform(struct?: DeviceGroupExtraServicesEC2NormalCollectorConfigCollectors | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    applies_to: cdktf.stringToTerraform(struct!.appliesTo),
    auto_balanced_collector_group_id: cdktf.numberToTerraform(struct!.autoBalancedCollectorGroupId),
    collector_id: cdktf.numberToTerraform(struct!.collectorId),
    priority: cdktf.numberToTerraform(struct!.priority),
    use_public_ip: cdktf.booleanToTerraform(struct!.usePublicIp),
  }
}


export function deviceGroupExtraServicesEC2NormalCollectorConfigCollectorsToHclTerraform(struct?: DeviceGroupExtraServicesEC2NormalCollectorConfigCollectors | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    applies_to: {
      value: cdktf.stringToHclTerraform(struct!.appliesTo),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    auto_balanced_collector_group_id: {
      value: cdktf.numberToHclTerraform(struct!.autoBalancedCollectorGroupId),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    collector_id: {
      value: cdktf.numberToHclTerraform(struct!.collectorId),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    priority: {
      value: cdktf.numberToHclTerraform(struct!.priority),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    use_public_ip: {
      value: cdktf.booleanToHclTerraform(struct!.usePublicIp),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesEC2NormalCollectorConfigCollectorsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesEC2NormalCollectorConfigCollectors | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._appliesTo !== undefined) {
      hasAnyValues = true;
      internalValueResult.appliesTo = this._appliesTo;
    }
    if (this._autoBalancedCollectorGroupId !== undefined) {
      hasAnyValues = true;
      internalValueResult.autoBalancedCollectorGroupId = this._autoBalancedCollectorGroupId;
    }
    if (this._collectorId !== undefined) {
      hasAnyValues = true;
      internalValueResult.collectorId = this._collectorId;
    }
    if (this._priority !== undefined) {
      hasAnyValues = true;
      internalValueResult.priority = this._priority;
    }
    if (this._usePublicIp !== undefined) {
      hasAnyValues = true;
      internalValueResult.usePublicIp = this._usePublicIp;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesEC2NormalCollectorConfigCollectors | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._appliesTo = undefined;
      this._autoBalancedCollectorGroupId = undefined;
      this._collectorId = undefined;
      this._priority = undefined;
      this._usePublicIp = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._appliesTo = value.appliesTo;
      this._autoBalancedCollectorGroupId = value.autoBalancedCollectorGroupId;
      this._collectorId = value.collectorId;
      this._priority = value.priority;
      this._usePublicIp = value.usePublicIp;
    }
  }

  // applies_to - computed: false, optional: true, required: false
  private _appliesTo?: string; 
  public get appliesTo() {
    return this.getStringAttribute('applies_to');
  }
  public set appliesTo(value: string) {
    this._appliesTo = value;
  }
  public resetAppliesTo() {
    this._appliesTo = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get appliesToInput() {
    return this._appliesTo;
  }

  // auto_balanced_collector_group_id - computed: false, optional: true, required: false
  private _autoBalancedCollectorGroupId?: number; 
  public get autoBalancedCollectorGroupId() {
    return this.getNumberAttribute('auto_balanced_collector_group_id');
  }
  public set autoBalancedCollectorGroupId(value: number) {
    this._autoBalancedCollectorGroupId = value;
  }
  public resetAutoBalancedCollectorGroupId() {
    this._autoBalancedCollectorGroupId = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get autoBalancedCollectorGroupIdInput() {
    return this._autoBalancedCollectorGroupId;
  }

  // collector_id - computed: false, optional: true, required: false
  private _collectorId?: number; 
  public get collectorId() {
    return this.getNumberAttribute('collector_id');
  }
  public set collectorId(value: number) {
    this._collectorId = value;
  }
  public resetCollectorId() {
    this._collectorId = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get collectorIdInput() {
    return this._collectorId;
  }

  // priority - computed: false, optional: true, required: false
  private _priority?: number; 
  public get priority() {
    return this.getNumberAttribute('priority');
  }
  public set priority(value: number) {
    this._priority = value;
  }
  public resetPriority() {
    this._priority = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get priorityInput() {
    return this._priority;
  }

  // use_public_ip - computed: false, optional: true, required: false
  private _usePublicIp?: boolean | cdktf.IResolvable; 
  public get usePublicIp() {
    return this.getBooleanAttribute('use_public_ip');
  }
  public set usePublicIp(value: boolean | cdktf.IResolvable) {
    this._usePublicIp = value;
  }
  public resetUsePublicIp() {
    this._usePublicIp = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get usePublicIpInput() {
    return this._usePublicIp;
  }
}

export class DeviceGroupExtraServicesEC2NormalCollectorConfigCollectorsList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesEC2NormalCollectorConfigCollectors[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesEC2NormalCollectorConfigCollectorsOutputReference {
    return new DeviceGroupExtraServicesEC2NormalCollectorConfigCollectorsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesEC2NormalCollectorConfig {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#collectors DeviceGroup#collectors}
  */
  readonly collectors?: DeviceGroupExtraServicesEC2NormalCollectorConfigCollectors[] | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#enabled DeviceGroup#enabled}
  */
  readonly enabled: boolean | cdktf.IResolvable;
}

export function deviceGroupExtraServicesEC2NormalCollectorConfigToTerraform(struct?: DeviceGroupExtraServicesEC2NormalCollectorConfig | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    collectors: cdktf.listMapper(deviceGroupExtraServicesEC2NormalCollectorConfigCollectorsToTerraform, false)(struct!.collectors),
    enabled: cdktf.booleanToTerraform(struct!.enabled),
  }
}


export function deviceGroupExtraServicesEC2NormalCollectorConfigToHclTerraform(struct?: DeviceGroupExtraServicesEC2NormalCollectorConfig | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    collectors: {
      value: cdktf.listMapperHcl(deviceGroupExtraServicesEC2NormalCollectorConfigCollectorsToHclTerraform, false)(struct!.collectors),
      isBlock: true,
      type: "list",
      storageClassType: "DeviceGroupExtraServicesEC2NormalCollectorConfigCollectorsList",
    },
    enabled: {
      value: cdktf.booleanToHclTerraform(struct!.enabled),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesEC2NormalCollectorConfigOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesEC2NormalCollectorConfig | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._collectors?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.collectors = this._collectors?.internalValue;
    }
    if (this._enabled !== undefined) {
      hasAnyValues = true;
      internalValueResult.enabled = this._enabled;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesEC2NormalCollectorConfig | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._collectors.internalValue = undefined;
      this._enabled = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._collectors.internalValue = value.collectors;
      this._enabled = value.enabled;
    }
  }

  // collectors - computed: false, optional: true, required: false
  private _collectors = new DeviceGroupExtraServicesEC2NormalCollectorConfigCollectorsList(this, "collectors", false);
  public get collectors() {
    return this._collectors;
  }
  public putCollectors(value: DeviceGroupExtraServicesEC2NormalCollectorConfigCollectors[] | cdktf.IResolvable) {
    this._collectors.internalValue = value;
  }
  public resetCollectors() {
    this._collectors.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get collectorsInput() {
    return this._collectors.internalValue;
  }

  // enabled - computed: false, optional: false, required: true
  private _enabled?: boolean | cdktf.IResolvable; 
  public get enabled() {
    return this.getBooleanAttribute('enabled');
  }
  public set enabled(value: boolean | cdktf.IResolvable) {
    this._enabled = value;
  }
  // Temporarily expose input value. Use with caution.
  public get enabledInput() {
    return this._enabled;
  }
}

export class DeviceGroupExtraServicesEC2NormalCollectorConfigList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesEC2NormalCollectorConfig[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesEC2NormalCollectorConfigOutputReference {
    return new DeviceGroupExtraServicesEC2NormalCollectorConfigOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesEC2 {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#custom_n_s_p_schedule DeviceGroup#custom_n_s_p_schedule}
  */
  readonly customNSPSchedule?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#dead_operation DeviceGroup#dead_operation}
  */
  readonly deadOperation?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#device_display_name_template DeviceGroup#device_display_name_template}
  */
  readonly deviceDisplayNameTemplate?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#disable_stop_terminate_host_monitor DeviceGroup#disable_stop_terminate_host_monitor}
  */
  readonly disableStopTerminateHostMonitor?: boolean | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#disable_terminated_host_alerting DeviceGroup#disable_terminated_host_alerting}
  */
  readonly disableTerminatedHostAlerting?: boolean | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#monitoring_region_infos DeviceGroup#monitoring_region_infos}
  */
  readonly monitoringRegionInfos?: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#monitoring_regions DeviceGroup#monitoring_regions}
  */
  readonly monitoringRegions?: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#name_filter DeviceGroup#name_filter}
  */
  readonly nameFilter?: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#select_all DeviceGroup#select_all}
  */
  readonly selectAll?: boolean | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#tags DeviceGroup#tags}
  */
  readonly tags?: DeviceGroupExtraServicesEC2Tags[] | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#use_default DeviceGroup#use_default}
  */
  readonly useDefault: boolean | cdktf.IResolvable;
  /**
  * normal_collector_config block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#normal_collector_config DeviceGroup#normal_collector_config}
  */
  readonly normalCollectorConfig?: DeviceGroupExtraServicesEC2NormalCollectorConfig[] | cdktf.IResolvable;
}

export function deviceGroupExtraServicesEC2ToTerraform(struct?: DeviceGroupExtraServicesEC2 | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    custom_n_s_p_schedule: cdktf.stringToTerraform(struct!.customNSPSchedule),
    dead_operation: cdktf.stringToTerraform(struct!.deadOperation),
    device_display_name_template: cdktf.stringToTerraform(struct!.deviceDisplayNameTemplate),
    disable_stop_terminate_host_monitor: cdktf.booleanToTerraform(struct!.disableStopTerminateHostMonitor),
    disable_terminated_host_alerting: cdktf.booleanToTerraform(struct!.disableTerminatedHostAlerting),
    monitoring_region_infos: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.monitoringRegionInfos),
    monitoring_regions: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.monitoringRegions),
    name_filter: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.nameFilter),
    select_all: cdktf.booleanToTerraform(struct!.selectAll),
    tags: cdktf.listMapper(deviceGroupExtraServicesEC2TagsToTerraform, false)(struct!.tags),
    use_default: cdktf.booleanToTerraform(struct!.useDefault),
    normal_collector_config: cdktf.listMapper(deviceGroupExtraServicesEC2NormalCollectorConfigToTerraform, true)(struct!.normalCollectorConfig),
  }
}


export function deviceGroupExtraServicesEC2ToHclTerraform(struct?: DeviceGroupExtraServicesEC2 | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    custom_n_s_p_schedule: {
      value: cdktf.stringToHclTerraform(struct!.customNSPSchedule),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    dead_operation: {
      value: cdktf.stringToHclTerraform(struct!.deadOperation),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    device_display_name_template: {
      value: cdktf.stringToHclTerraform(struct!.deviceDisplayNameTemplate),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    disable_stop_terminate_host_monitor: {
      value: cdktf.booleanToHclTerraform(struct!.disableStopTerminateHostMonitor),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    disable_terminated_host_alerting: {
      value: cdktf.booleanToHclTerraform(struct!.disableTerminatedHostAlerting),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    monitoring_region_infos: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.monitoringRegionInfos),
      isBlock: false,
      type: "set",
      storageClassType: "stringList",
    },
    monitoring_regions: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.monitoringRegions),
      isBlock: false,
      type: "set",
      storageClassType: "stringList",
    },
    name_filter: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.nameFilter),
      isBlock: false,
      type: "set",
      storageClassType: "stringList",
    },
    select_all: {
      value: cdktf.booleanToHclTerraform(struct!.selectAll),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    tags: {
      value: cdktf.listMapperHcl(deviceGroupExtraServicesEC2TagsToHclTerraform, false)(struct!.tags),
      isBlock: true,
      type: "list",
      storageClassType: "DeviceGroupExtraServicesEC2TagsList",
    },
    use_default: {
      value: cdktf.booleanToHclTerraform(struct!.useDefault),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    normal_collector_config: {
      value: cdktf.listMapperHcl(deviceGroupExtraServicesEC2NormalCollectorConfigToHclTerraform, true)(struct!.normalCollectorConfig),
      isBlock: true,
      type: "list",
      storageClassType: "DeviceGroupExtraServicesEC2NormalCollectorConfigList",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesEC2OutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesEC2 | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._customNSPSchedule !== undefined) {
      hasAnyValues = true;
      internalValueResult.customNSPSchedule = this._customNSPSchedule;
    }
    if (this._deadOperation !== undefined) {
      hasAnyValues = true;
      internalValueResult.deadOperation = this._deadOperation;
    }
    if (this._deviceDisplayNameTemplate !== undefined) {
      hasAnyValues = true;
      internalValueResult.deviceDisplayNameTemplate = this._deviceDisplayNameTemplate;
    }
    if (this._disableStopTerminateHostMonitor !== undefined) {
      hasAnyValues = true;
      internalValueResult.disableStopTerminateHostMonitor = this._disableStopTerminateHostMonitor;
    }
    if (this._disableTerminatedHostAlerting !== undefined) {
      hasAnyValues = true;
      internalValueResult.disableTerminatedHostAlerting = this._disableTerminatedHostAlerting;
    }
    if (this._monitoringRegionInfos !== undefined) {
      hasAnyValues = true;
      internalValueResult.monitoringRegionInfos = this._monitoringRegionInfos;
    }
    if (this._monitoringRegions !== undefined) {
      hasAnyValues = true;
      internalValueResult.monitoringRegions = this._monitoringRegions;
    }
    if (this._nameFilter !== undefined) {
      hasAnyValues = true;
      internalValueResult.nameFilter = this._nameFilter;
    }
    if (this._selectAll !== undefined) {
      hasAnyValues = true;
      internalValueResult.selectAll = this._selectAll;
    }
    if (this._tags?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.tags = this._tags?.internalValue;
    }
    if (this._useDefault !== undefined) {
      hasAnyValues = true;
      internalValueResult.useDefault = this._useDefault;
    }
    if (this._normalCollectorConfig?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.normalCollectorConfig = this._normalCollectorConfig?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesEC2 | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._customNSPSchedule = undefined;
      this._deadOperation = undefined;
      this._deviceDisplayNameTemplate = undefined;
      this._disableStopTerminateHostMonitor = undefined;
      this._disableTerminatedHostAlerting = undefined;
      this._monitoringRegionInfos = undefined;
      this._monitoringRegions = undefined;
      this._nameFilter = undefined;
      this._selectAll = undefined;
      this._tags.internalValue = undefined;
      this._useDefault = undefined;
      this._normalCollectorConfig.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._customNSPSchedule = value.customNSPSchedule;
      this._deadOperation = value.deadOperation;
      this._deviceDisplayNameTemplate = value.deviceDisplayNameTemplate;
      this._disableStopTerminateHostMonitor = value.disableStopTerminateHostMonitor;
      this._disableTerminatedHostAlerting = value.disableTerminatedHostAlerting;
      this._monitoringRegionInfos = value.monitoringRegionInfos;
      this._monitoringRegions = value.monitoringRegions;
      this._nameFilter = value.nameFilter;
      this._selectAll = value.selectAll;
      this._tags.internalValue = value.tags;
      this._useDefault = value.useDefault;
      this._normalCollectorConfig.internalValue = value.normalCollectorConfig;
    }
  }

  // custom_n_s_p_schedule - computed: false, optional: true, required: false
  private _customNSPSchedule?: string; 
  public get customNSPSchedule() {
    return this.getStringAttribute('custom_n_s_p_schedule');
  }
  public set customNSPSchedule(value: string) {
    this._customNSPSchedule = value;
  }
  public resetCustomNSPSchedule() {
    this._customNSPSchedule = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get customNSPScheduleInput() {
    return this._customNSPSchedule;
  }

  // dead_operation - computed: false, optional: true, required: false
  private _deadOperation?: string; 
  public get deadOperation() {
    return this.getStringAttribute('dead_operation');
  }
  public set deadOperation(value: string) {
    this._deadOperation = value;
  }
  public resetDeadOperation() {
    this._deadOperation = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get deadOperationInput() {
    return this._deadOperation;
  }

  // device_display_name_template - computed: false, optional: true, required: false
  private _deviceDisplayNameTemplate?: string; 
  public get deviceDisplayNameTemplate() {
    return this.getStringAttribute('device_display_name_template');
  }
  public set deviceDisplayNameTemplate(value: string) {
    this._deviceDisplayNameTemplate = value;
  }
  public resetDeviceDisplayNameTemplate() {
    this._deviceDisplayNameTemplate = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get deviceDisplayNameTemplateInput() {
    return this._deviceDisplayNameTemplate;
  }

  // disable_stop_terminate_host_monitor - computed: false, optional: true, required: false
  private _disableStopTerminateHostMonitor?: boolean | cdktf.IResolvable; 
  public get disableStopTerminateHostMonitor() {
    return this.getBooleanAttribute('disable_stop_terminate_host_monitor');
  }
  public set disableStopTerminateHostMonitor(value: boolean | cdktf.IResolvable) {
    this._disableStopTerminateHostMonitor = value;
  }
  public resetDisableStopTerminateHostMonitor() {
    this._disableStopTerminateHostMonitor = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get disableStopTerminateHostMonitorInput() {
    return this._disableStopTerminateHostMonitor;
  }

  // disable_terminated_host_alerting - computed: false, optional: true, required: false
  private _disableTerminatedHostAlerting?: boolean | cdktf.IResolvable; 
  public get disableTerminatedHostAlerting() {
    return this.getBooleanAttribute('disable_terminated_host_alerting');
  }
  public set disableTerminatedHostAlerting(value: boolean | cdktf.IResolvable) {
    this._disableTerminatedHostAlerting = value;
  }
  public resetDisableTerminatedHostAlerting() {
    this._disableTerminatedHostAlerting = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get disableTerminatedHostAlertingInput() {
    return this._disableTerminatedHostAlerting;
  }

  // monitoring_region_infos - computed: false, optional: true, required: false
  private _monitoringRegionInfos?: string[]; 
  public get monitoringRegionInfos() {
    return cdktf.Fn.tolist(this.getListAttribute('monitoring_region_infos'));
  }
  public set monitoringRegionInfos(value: string[]) {
    this._monitoringRegionInfos = value;
  }
  public resetMonitoringRegionInfos() {
    this._monitoringRegionInfos = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get monitoringRegionInfosInput() {
    return this._monitoringRegionInfos;
  }

  // monitoring_regions - computed: false, optional: true, required: false
  private _monitoringRegions?: string[]; 
  public get monitoringRegions() {
    return cdktf.Fn.tolist(this.getListAttribute('monitoring_regions'));
  }
  public set monitoringRegions(value: string[]) {
    this._monitoringRegions = value;
  }
  public resetMonitoringRegions() {
    this._monitoringRegions = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get monitoringRegionsInput() {
    return this._monitoringRegions;
  }

  // name_filter - computed: false, optional: true, required: false
  private _nameFilter?: string[]; 
  public get nameFilter() {
    return cdktf.Fn.tolist(this.getListAttribute('name_filter'));
  }
  public set nameFilter(value: string[]) {
    this._nameFilter = value;
  }
  public resetNameFilter() {
    this._nameFilter = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get nameFilterInput() {
    return this._nameFilter;
  }

  // select_all - computed: false, optional: true, required: false
  private _selectAll?: boolean | cdktf.IResolvable; 
  public get selectAll() {
    return this.getBooleanAttribute('select_all');
  }
  public set selectAll(value: boolean | cdktf.IResolvable) {
    this._selectAll = value;
  }
  public resetSelectAll() {
    this._selectAll = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get selectAllInput() {
    return this._selectAll;
  }

  // tags - computed: false, optional: true, required: false
  private _tags = new DeviceGroupExtraServicesEC2TagsList(this, "tags", false);
  public get tags() {
    return this._tags;
  }
  public putTags(value: DeviceGroupExtraServicesEC2Tags[] | cdktf.IResolvable) {
    this._tags.internalValue = value;
  }
  public resetTags() {
    this._tags.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get tagsInput() {
    return this._tags.internalValue;
  }

  // use_default - computed: false, optional: false, required: true
  private _useDefault?: boolean | cdktf.IResolvable; 
  public get useDefault() {
    return this.getBooleanAttribute('use_default');
  }
  public set useDefault(value: boolean | cdktf.IResolvable) {
    this._useDefault = value;
  }
  // Temporarily expose input value. Use with caution.
  public get useDefaultInput() {
    return this._useDefault;
  }

  // normal_collector_config - computed: false, optional: true, required: false
  private _normalCollectorConfig = new DeviceGroupExtraServicesEC2NormalCollectorConfigList(this, "normal_collector_config", false);
  public get normalCollectorConfig() {
    return this._normalCollectorConfig;
  }
  public putNormalCollectorConfig(value: DeviceGroupExtraServicesEC2NormalCollectorConfig[] | cdktf.IResolvable) {
    this._normalCollectorConfig.internalValue = value;
  }
  public resetNormalCollectorConfig() {
    this._normalCollectorConfig.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get normalCollectorConfigInput() {
    return this._normalCollectorConfig.internalValue;
  }
}

export class DeviceGroupExtraServicesEC2List extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesEC2[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesEC2OutputReference {
    return new DeviceGroupExtraServicesEC2OutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesECSTags {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#name DeviceGroup#name}
  */
  readonly name?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#operation DeviceGroup#operation}
  */
  readonly operation?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#value DeviceGroup#value}
  */
  readonly value?: string;
}

export function deviceGroupExtraServicesECSTagsToTerraform(struct?: DeviceGroupExtraServicesECSTags | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    name: cdktf.stringToTerraform(struct!.name),
    operation: cdktf.stringToTerraform(struct!.operation),
    value: cdktf.stringToTerraform(struct!.value),
  }
}


export function deviceGroupExtraServicesECSTagsToHclTerraform(struct?: DeviceGroupExtraServicesECSTags | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    name: {
      value: cdktf.stringToHclTerraform(struct!.name),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    operation: {
      value: cdktf.stringToHclTerraform(struct!.operation),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    value: {
      value: cdktf.stringToHclTerraform(struct!.value),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesECSTagsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesECSTags | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._name !== undefined) {
      hasAnyValues = true;
      internalValueResult.name = this._name;
    }
    if (this._operation !== undefined) {
      hasAnyValues = true;
      internalValueResult.operation = this._operation;
    }
    if (this._value !== undefined) {
      hasAnyValues = true;
      internalValueResult.value = this._value;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesECSTags | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._name = undefined;
      this._operation = undefined;
      this._value = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._name = value.name;
      this._operation = value.operation;
      this._value = value.value;
    }
  }

  // name - computed: false, optional: true, required: false
  private _name?: string; 
  public get name() {
    return this.getStringAttribute('name');
  }
  public set name(value: string) {
    this._name = value;
  }
  public resetName() {
    this._name = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get nameInput() {
    return this._name;
  }

  // operation - computed: false, optional: true, required: false
  private _operation?: string; 
  public get operation() {
    return this.getStringAttribute('operation');
  }
  public set operation(value: string) {
    this._operation = value;
  }
  public resetOperation() {
    this._operation = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get operationInput() {
    return this._operation;
  }

  // value - computed: false, optional: true, required: false
  private _value?: string; 
  public get value() {
    return this.getStringAttribute('value');
  }
  public set value(value: string) {
    this._value = value;
  }
  public resetValue() {
    this._value = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get valueInput() {
    return this._value;
  }
}

export class DeviceGroupExtraServicesECSTagsList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesECSTags[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesECSTagsOutputReference {
    return new DeviceGroupExtraServicesECSTagsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesECSNormalCollectorConfigCollectors {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#applies_to DeviceGroup#applies_to}
  */
  readonly appliesTo?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#auto_balanced_collector_group_id DeviceGroup#auto_balanced_collector_group_id}
  */
  readonly autoBalancedCollectorGroupId?: number;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#collector_id DeviceGroup#collector_id}
  */
  readonly collectorId?: number;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#priority DeviceGroup#priority}
  */
  readonly priority?: number;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#use_public_ip DeviceGroup#use_public_ip}
  */
  readonly usePublicIp?: boolean | cdktf.IResolvable;
}

export function deviceGroupExtraServicesECSNormalCollectorConfigCollectorsToTerraform(struct?: DeviceGroupExtraServicesECSNormalCollectorConfigCollectors | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    applies_to: cdktf.stringToTerraform(struct!.appliesTo),
    auto_balanced_collector_group_id: cdktf.numberToTerraform(struct!.autoBalancedCollectorGroupId),
    collector_id: cdktf.numberToTerraform(struct!.collectorId),
    priority: cdktf.numberToTerraform(struct!.priority),
    use_public_ip: cdktf.booleanToTerraform(struct!.usePublicIp),
  }
}


export function deviceGroupExtraServicesECSNormalCollectorConfigCollectorsToHclTerraform(struct?: DeviceGroupExtraServicesECSNormalCollectorConfigCollectors | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    applies_to: {
      value: cdktf.stringToHclTerraform(struct!.appliesTo),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    auto_balanced_collector_group_id: {
      value: cdktf.numberToHclTerraform(struct!.autoBalancedCollectorGroupId),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    collector_id: {
      value: cdktf.numberToHclTerraform(struct!.collectorId),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    priority: {
      value: cdktf.numberToHclTerraform(struct!.priority),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    use_public_ip: {
      value: cdktf.booleanToHclTerraform(struct!.usePublicIp),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesECSNormalCollectorConfigCollectorsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesECSNormalCollectorConfigCollectors | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._appliesTo !== undefined) {
      hasAnyValues = true;
      internalValueResult.appliesTo = this._appliesTo;
    }
    if (this._autoBalancedCollectorGroupId !== undefined) {
      hasAnyValues = true;
      internalValueResult.autoBalancedCollectorGroupId = this._autoBalancedCollectorGroupId;
    }
    if (this._collectorId !== undefined) {
      hasAnyValues = true;
      internalValueResult.collectorId = this._collectorId;
    }
    if (this._priority !== undefined) {
      hasAnyValues = true;
      internalValueResult.priority = this._priority;
    }
    if (this._usePublicIp !== undefined) {
      hasAnyValues = true;
      internalValueResult.usePublicIp = this._usePublicIp;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesECSNormalCollectorConfigCollectors | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._appliesTo = undefined;
      this._autoBalancedCollectorGroupId = undefined;
      this._collectorId = undefined;
      this._priority = undefined;
      this._usePublicIp = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._appliesTo = value.appliesTo;
      this._autoBalancedCollectorGroupId = value.autoBalancedCollectorGroupId;
      this._collectorId = value.collectorId;
      this._priority = value.priority;
      this._usePublicIp = value.usePublicIp;
    }
  }

  // applies_to - computed: false, optional: true, required: false
  private _appliesTo?: string; 
  public get appliesTo() {
    return this.getStringAttribute('applies_to');
  }
  public set appliesTo(value: string) {
    this._appliesTo = value;
  }
  public resetAppliesTo() {
    this._appliesTo = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get appliesToInput() {
    return this._appliesTo;
  }

  // auto_balanced_collector_group_id - computed: false, optional: true, required: false
  private _autoBalancedCollectorGroupId?: number; 
  public get autoBalancedCollectorGroupId() {
    return this.getNumberAttribute('auto_balanced_collector_group_id');
  }
  public set autoBalancedCollectorGroupId(value: number) {
    this._autoBalancedCollectorGroupId = value;
  }
  public resetAutoBalancedCollectorGroupId() {
    this._autoBalancedCollectorGroupId = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get autoBalancedCollectorGroupIdInput() {
    return this._autoBalancedCollectorGroupId;
  }

  // collector_id - computed: false, optional: true, required: false
  private _collectorId?: number; 
  public get collectorId() {
    return this.getNumberAttribute('collector_id');
  }
  public set collectorId(value: number) {
    this._collectorId = value;
  }
  public resetCollectorId() {
    this._collectorId = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get collectorIdInput() {
    return this._collectorId;
  }

  // priority - computed: false, optional: true, required: false
  private _priority?: number; 
  public get priority() {
    return this.getNumberAttribute('priority');
  }
  public set priority(value: number) {
    this._priority = value;
  }
  public resetPriority() {
    this._priority = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get priorityInput() {
    return this._priority;
  }

  // use_public_ip - computed: false, optional: true, required: false
  private _usePublicIp?: boolean | cdktf.IResolvable; 
  public get usePublicIp() {
    return this.getBooleanAttribute('use_public_ip');
  }
  public set usePublicIp(value: boolean | cdktf.IResolvable) {
    this._usePublicIp = value;
  }
  public resetUsePublicIp() {
    this._usePublicIp = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get usePublicIpInput() {
    return this._usePublicIp;
  }
}

export class DeviceGroupExtraServicesECSNormalCollectorConfigCollectorsList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesECSNormalCollectorConfigCollectors[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesECSNormalCollectorConfigCollectorsOutputReference {
    return new DeviceGroupExtraServicesECSNormalCollectorConfigCollectorsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesECSNormalCollectorConfig {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#collectors DeviceGroup#collectors}
  */
  readonly collectors?: DeviceGroupExtraServicesECSNormalCollectorConfigCollectors[] | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#enabled DeviceGroup#enabled}
  */
  readonly enabled: boolean | cdktf.IResolvable;
}

export function deviceGroupExtraServicesECSNormalCollectorConfigToTerraform(struct?: DeviceGroupExtraServicesECSNormalCollectorConfig | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    collectors: cdktf.listMapper(deviceGroupExtraServicesECSNormalCollectorConfigCollectorsToTerraform, false)(struct!.collectors),
    enabled: cdktf.booleanToTerraform(struct!.enabled),
  }
}


export function deviceGroupExtraServicesECSNormalCollectorConfigToHclTerraform(struct?: DeviceGroupExtraServicesECSNormalCollectorConfig | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    collectors: {
      value: cdktf.listMapperHcl(deviceGroupExtraServicesECSNormalCollectorConfigCollectorsToHclTerraform, false)(struct!.collectors),
      isBlock: true,
      type: "list",
      storageClassType: "DeviceGroupExtraServicesECSNormalCollectorConfigCollectorsList",
    },
    enabled: {
      value: cdktf.booleanToHclTerraform(struct!.enabled),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesECSNormalCollectorConfigOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesECSNormalCollectorConfig | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._collectors?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.collectors = this._collectors?.internalValue;
    }
    if (this._enabled !== undefined) {
      hasAnyValues = true;
      internalValueResult.enabled = this._enabled;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesECSNormalCollectorConfig | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._collectors.internalValue = undefined;
      this._enabled = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._collectors.internalValue = value.collectors;
      this._enabled = value.enabled;
    }
  }

  // collectors - computed: false, optional: true, required: false
  private _collectors = new DeviceGroupExtraServicesECSNormalCollectorConfigCollectorsList(this, "collectors", false);
  public get collectors() {
    return this._collectors;
  }
  public putCollectors(value: DeviceGroupExtraServicesECSNormalCollectorConfigCollectors[] | cdktf.IResolvable) {
    this._collectors.internalValue = value;
  }
  public resetCollectors() {
    this._collectors.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get collectorsInput() {
    return this._collectors.internalValue;
  }

  // enabled - computed: false, optional: false, required: true
  private _enabled?: boolean | cdktf.IResolvable; 
  public get enabled() {
    return this.getBooleanAttribute('enabled');
  }
  public set enabled(value: boolean | cdktf.IResolvable) {
    this._enabled = value;
  }
  // Temporarily expose input value. Use with caution.
  public get enabledInput() {
    return this._enabled;
  }
}

export class DeviceGroupExtraServicesECSNormalCollectorConfigList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesECSNormalCollectorConfig[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesECSNormalCollectorConfigOutputReference {
    return new DeviceGroupExtraServicesECSNormalCollectorConfigOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesECS {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#custom_n_s_p_schedule DeviceGroup#custom_n_s_p_schedule}
  */
  readonly customNSPSchedule?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#dead_operation DeviceGroup#dead_operation}
  */
  readonly deadOperation?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#device_display_name_template DeviceGroup#device_display_name_template}
  */
  readonly deviceDisplayNameTemplate?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#disable_stop_terminate_host_monitor DeviceGroup#disable_stop_terminate_host_monitor}
  */
  readonly disableStopTerminateHostMonitor?: boolean | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#disable_terminated_host_alerting DeviceGroup#disable_terminated_host_alerting}
  */
  readonly disableTerminatedHostAlerting?: boolean | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#monitoring_region_infos DeviceGroup#monitoring_region_infos}
  */
  readonly monitoringRegionInfos?: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#monitoring_regions DeviceGroup#monitoring_regions}
  */
  readonly monitoringRegions?: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#name_filter DeviceGroup#name_filter}
  */
  readonly nameFilter?: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#select_all DeviceGroup#select_all}
  */
  readonly selectAll?: boolean | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#tags DeviceGroup#tags}
  */
  readonly tags?: DeviceGroupExtraServicesECSTags[] | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#use_default DeviceGroup#use_default}
  */
  readonly useDefault: boolean | cdktf.IResolvable;
  /**
  * normal_collector_config block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#normal_collector_config DeviceGroup#normal_collector_config}
  */
  readonly normalCollectorConfig?: DeviceGroupExtraServicesECSNormalCollectorConfig[] | cdktf.IResolvable;
}

export function deviceGroupExtraServicesECSToTerraform(struct?: DeviceGroupExtraServicesECS | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    custom_n_s_p_schedule: cdktf.stringToTerraform(struct!.customNSPSchedule),
    dead_operation: cdktf.stringToTerraform(struct!.deadOperation),
    device_display_name_template: cdktf.stringToTerraform(struct!.deviceDisplayNameTemplate),
    disable_stop_terminate_host_monitor: cdktf.booleanToTerraform(struct!.disableStopTerminateHostMonitor),
    disable_terminated_host_alerting: cdktf.booleanToTerraform(struct!.disableTerminatedHostAlerting),
    monitoring_region_infos: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.monitoringRegionInfos),
    monitoring_regions: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.monitoringRegions),
    name_filter: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.nameFilter),
    select_all: cdktf.booleanToTerraform(struct!.selectAll),
    tags: cdktf.listMapper(deviceGroupExtraServicesECSTagsToTerraform, false)(struct!.tags),
    use_default: cdktf.booleanToTerraform(struct!.useDefault),
    normal_collector_config: cdktf.listMapper(deviceGroupExtraServicesECSNormalCollectorConfigToTerraform, true)(struct!.normalCollectorConfig),
  }
}


export function deviceGroupExtraServicesECSToHclTerraform(struct?: DeviceGroupExtraServicesECS | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    custom_n_s_p_schedule: {
      value: cdktf.stringToHclTerraform(struct!.customNSPSchedule),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    dead_operation: {
      value: cdktf.stringToHclTerraform(struct!.deadOperation),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    device_display_name_template: {
      value: cdktf.stringToHclTerraform(struct!.deviceDisplayNameTemplate),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    disable_stop_terminate_host_monitor: {
      value: cdktf.booleanToHclTerraform(struct!.disableStopTerminateHostMonitor),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    disable_terminated_host_alerting: {
      value: cdktf.booleanToHclTerraform(struct!.disableTerminatedHostAlerting),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    monitoring_region_infos: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.monitoringRegionInfos),
      isBlock: false,
      type: "set",
      storageClassType: "stringList",
    },
    monitoring_regions: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.monitoringRegions),
      isBlock: false,
      type: "set",
      storageClassType: "stringList",
    },
    name_filter: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.nameFilter),
      isBlock: false,
      type: "set",
      storageClassType: "stringList",
    },
    select_all: {
      value: cdktf.booleanToHclTerraform(struct!.selectAll),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    tags: {
      value: cdktf.listMapperHcl(deviceGroupExtraServicesECSTagsToHclTerraform, false)(struct!.tags),
      isBlock: true,
      type: "list",
      storageClassType: "DeviceGroupExtraServicesECSTagsList",
    },
    use_default: {
      value: cdktf.booleanToHclTerraform(struct!.useDefault),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    normal_collector_config: {
      value: cdktf.listMapperHcl(deviceGroupExtraServicesECSNormalCollectorConfigToHclTerraform, true)(struct!.normalCollectorConfig),
      isBlock: true,
      type: "list",
      storageClassType: "DeviceGroupExtraServicesECSNormalCollectorConfigList",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesECSOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesECS | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._customNSPSchedule !== undefined) {
      hasAnyValues = true;
      internalValueResult.customNSPSchedule = this._customNSPSchedule;
    }
    if (this._deadOperation !== undefined) {
      hasAnyValues = true;
      internalValueResult.deadOperation = this._deadOperation;
    }
    if (this._deviceDisplayNameTemplate !== undefined) {
      hasAnyValues = true;
      internalValueResult.deviceDisplayNameTemplate = this._deviceDisplayNameTemplate;
    }
    if (this._disableStopTerminateHostMonitor !== undefined) {
      hasAnyValues = true;
      internalValueResult.disableStopTerminateHostMonitor = this._disableStopTerminateHostMonitor;
    }
    if (this._disableTerminatedHostAlerting !== undefined) {
      hasAnyValues = true;
      internalValueResult.disableTerminatedHostAlerting = this._disableTerminatedHostAlerting;
    }
    if (this._monitoringRegionInfos !== undefined) {
      hasAnyValues = true;
      internalValueResult.monitoringRegionInfos = this._monitoringRegionInfos;
    }
    if (this._monitoringRegions !== undefined) {
      hasAnyValues = true;
      internalValueResult.monitoringRegions = this._monitoringRegions;
    }
    if (this._nameFilter !== undefined) {
      hasAnyValues = true;
      internalValueResult.nameFilter = this._nameFilter;
    }
    if (this._selectAll !== undefined) {
      hasAnyValues = true;
      internalValueResult.selectAll = this._selectAll;
    }
    if (this._tags?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.tags = this._tags?.internalValue;
    }
    if (this._useDefault !== undefined) {
      hasAnyValues = true;
      internalValueResult.useDefault = this._useDefault;
    }
    if (this._normalCollectorConfig?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.normalCollectorConfig = this._normalCollectorConfig?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesECS | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._customNSPSchedule = undefined;
      this._deadOperation = undefined;
      this._deviceDisplayNameTemplate = undefined;
      this._disableStopTerminateHostMonitor = undefined;
      this._disableTerminatedHostAlerting = undefined;
      this._monitoringRegionInfos = undefined;
      this._monitoringRegions = undefined;
      this._nameFilter = undefined;
      this._selectAll = undefined;
      this._tags.internalValue = undefined;
      this._useDefault = undefined;
      this._normalCollectorConfig.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._customNSPSchedule = value.customNSPSchedule;
      this._deadOperation = value.deadOperation;
      this._deviceDisplayNameTemplate = value.deviceDisplayNameTemplate;
      this._disableStopTerminateHostMonitor = value.disableStopTerminateHostMonitor;
      this._disableTerminatedHostAlerting = value.disableTerminatedHostAlerting;
      this._monitoringRegionInfos = value.monitoringRegionInfos;
      this._monitoringRegions = value.monitoringRegions;
      this._nameFilter = value.nameFilter;
      this._selectAll = value.selectAll;
      this._tags.internalValue = value.tags;
      this._useDefault = value.useDefault;
      this._normalCollectorConfig.internalValue = value.normalCollectorConfig;
    }
  }

  // custom_n_s_p_schedule - computed: false, optional: true, required: false
  private _customNSPSchedule?: string; 
  public get customNSPSchedule() {
    return this.getStringAttribute('custom_n_s_p_schedule');
  }
  public set customNSPSchedule(value: string) {
    this._customNSPSchedule = value;
  }
  public resetCustomNSPSchedule() {
    this._customNSPSchedule = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get customNSPScheduleInput() {
    return this._customNSPSchedule;
  }

  // dead_operation - computed: false, optional: true, required: false
  private _deadOperation?: string; 
  public get deadOperation() {
    return this.getStringAttribute('dead_operation');
  }
  public set deadOperation(value: string) {
    this._deadOperation = value;
  }
  public resetDeadOperation() {
    this._deadOperation = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get deadOperationInput() {
    return this._deadOperation;
  }

  // device_display_name_template - computed: false, optional: true, required: false
  private _deviceDisplayNameTemplate?: string; 
  public get deviceDisplayNameTemplate() {
    return this.getStringAttribute('device_display_name_template');
  }
  public set deviceDisplayNameTemplate(value: string) {
    this._deviceDisplayNameTemplate = value;
  }
  public resetDeviceDisplayNameTemplate() {
    this._deviceDisplayNameTemplate = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get deviceDisplayNameTemplateInput() {
    return this._deviceDisplayNameTemplate;
  }

  // disable_stop_terminate_host_monitor - computed: false, optional: true, required: false
  private _disableStopTerminateHostMonitor?: boolean | cdktf.IResolvable; 
  public get disableStopTerminateHostMonitor() {
    return this.getBooleanAttribute('disable_stop_terminate_host_monitor');
  }
  public set disableStopTerminateHostMonitor(value: boolean | cdktf.IResolvable) {
    this._disableStopTerminateHostMonitor = value;
  }
  public resetDisableStopTerminateHostMonitor() {
    this._disableStopTerminateHostMonitor = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get disableStopTerminateHostMonitorInput() {
    return this._disableStopTerminateHostMonitor;
  }

  // disable_terminated_host_alerting - computed: false, optional: true, required: false
  private _disableTerminatedHostAlerting?: boolean | cdktf.IResolvable; 
  public get disableTerminatedHostAlerting() {
    return this.getBooleanAttribute('disable_terminated_host_alerting');
  }
  public set disableTerminatedHostAlerting(value: boolean | cdktf.IResolvable) {
    this._disableTerminatedHostAlerting = value;
  }
  public resetDisableTerminatedHostAlerting() {
    this._disableTerminatedHostAlerting = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get disableTerminatedHostAlertingInput() {
    return this._disableTerminatedHostAlerting;
  }

  // monitoring_region_infos - computed: false, optional: true, required: false
  private _monitoringRegionInfos?: string[]; 
  public get monitoringRegionInfos() {
    return cdktf.Fn.tolist(this.getListAttribute('monitoring_region_infos'));
  }
  public set monitoringRegionInfos(value: string[]) {
    this._monitoringRegionInfos = value;
  }
  public resetMonitoringRegionInfos() {
    this._monitoringRegionInfos = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get monitoringRegionInfosInput() {
    return this._monitoringRegionInfos;
  }

  // monitoring_regions - computed: false, optional: true, required: false
  private _monitoringRegions?: string[]; 
  public get monitoringRegions() {
    return cdktf.Fn.tolist(this.getListAttribute('monitoring_regions'));
  }
  public set monitoringRegions(value: string[]) {
    this._monitoringRegions = value;
  }
  public resetMonitoringRegions() {
    this._monitoringRegions = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get monitoringRegionsInput() {
    return this._monitoringRegions;
  }

  // name_filter - computed: false, optional: true, required: false
  private _nameFilter?: string[]; 
  public get nameFilter() {
    return cdktf.Fn.tolist(this.getListAttribute('name_filter'));
  }
  public set nameFilter(value: string[]) {
    this._nameFilter = value;
  }
  public resetNameFilter() {
    this._nameFilter = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get nameFilterInput() {
    return this._nameFilter;
  }

  // select_all - computed: false, optional: true, required: false
  private _selectAll?: boolean | cdktf.IResolvable; 
  public get selectAll() {
    return this.getBooleanAttribute('select_all');
  }
  public set selectAll(value: boolean | cdktf.IResolvable) {
    this._selectAll = value;
  }
  public resetSelectAll() {
    this._selectAll = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get selectAllInput() {
    return this._selectAll;
  }

  // tags - computed: false, optional: true, required: false
  private _tags = new DeviceGroupExtraServicesECSTagsList(this, "tags", false);
  public get tags() {
    return this._tags;
  }
  public putTags(value: DeviceGroupExtraServicesECSTags[] | cdktf.IResolvable) {
    this._tags.internalValue = value;
  }
  public resetTags() {
    this._tags.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get tagsInput() {
    return this._tags.internalValue;
  }

  // use_default - computed: false, optional: false, required: true
  private _useDefault?: boolean | cdktf.IResolvable; 
  public get useDefault() {
    return this.getBooleanAttribute('use_default');
  }
  public set useDefault(value: boolean | cdktf.IResolvable) {
    this._useDefault = value;
  }
  // Temporarily expose input value. Use with caution.
  public get useDefaultInput() {
    return this._useDefault;
  }

  // normal_collector_config - computed: false, optional: true, required: false
  private _normalCollectorConfig = new DeviceGroupExtraServicesECSNormalCollectorConfigList(this, "normal_collector_config", false);
  public get normalCollectorConfig() {
    return this._normalCollectorConfig;
  }
  public putNormalCollectorConfig(value: DeviceGroupExtraServicesECSNormalCollectorConfig[] | cdktf.IResolvable) {
    this._normalCollectorConfig.internalValue = value;
  }
  public resetNormalCollectorConfig() {
    this._normalCollectorConfig.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get normalCollectorConfigInput() {
    return this._normalCollectorConfig.internalValue;
  }
}

export class DeviceGroupExtraServicesECSList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesECS[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesECSOutputReference {
    return new DeviceGroupExtraServicesECSOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesEFSTags {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#name DeviceGroup#name}
  */
  readonly name?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#operation DeviceGroup#operation}
  */
  readonly operation?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#value DeviceGroup#value}
  */
  readonly value?: string;
}

export function deviceGroupExtraServicesEFSTagsToTerraform(struct?: DeviceGroupExtraServicesEFSTags | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    name: cdktf.stringToTerraform(struct!.name),
    operation: cdktf.stringToTerraform(struct!.operation),
    value: cdktf.stringToTerraform(struct!.value),
  }
}


export function deviceGroupExtraServicesEFSTagsToHclTerraform(struct?: DeviceGroupExtraServicesEFSTags | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    name: {
      value: cdktf.stringToHclTerraform(struct!.name),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    operation: {
      value: cdktf.stringToHclTerraform(struct!.operation),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    value: {
      value: cdktf.stringToHclTerraform(struct!.value),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesEFSTagsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesEFSTags | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._name !== undefined) {
      hasAnyValues = true;
      internalValueResult.name = this._name;
    }
    if (this._operation !== undefined) {
      hasAnyValues = true;
      internalValueResult.operation = this._operation;
    }
    if (this._value !== undefined) {
      hasAnyValues = true;
      internalValueResult.value = this._value;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesEFSTags | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._name = undefined;
      this._operation = undefined;
      this._value = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._name = value.name;
      this._operation = value.operation;
      this._value = value.value;
    }
  }

  // name - computed: false, optional: true, required: false
  private _name?: string; 
  public get name() {
    return this.getStringAttribute('name');
  }
  public set name(value: string) {
    this._name = value;
  }
  public resetName() {
    this._name = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get nameInput() {
    return this._name;
  }

  // operation - computed: false, optional: true, required: false
  private _operation?: string; 
  public get operation() {
    return this.getStringAttribute('operation');
  }
  public set operation(value: string) {
    this._operation = value;
  }
  public resetOperation() {
    this._operation = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get operationInput() {
    return this._operation;
  }

  // value - computed: false, optional: true, required: false
  private _value?: string; 
  public get value() {
    return this.getStringAttribute('value');
  }
  public set value(value: string) {
    this._value = value;
  }
  public resetValue() {
    this._value = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get valueInput() {
    return this._value;
  }
}

export class DeviceGroupExtraServicesEFSTagsList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesEFSTags[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesEFSTagsOutputReference {
    return new DeviceGroupExtraServicesEFSTagsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesEFSNormalCollectorConfigCollectors {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#applies_to DeviceGroup#applies_to}
  */
  readonly appliesTo?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#auto_balanced_collector_group_id DeviceGroup#auto_balanced_collector_group_id}
  */
  readonly autoBalancedCollectorGroupId?: number;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#collector_id DeviceGroup#collector_id}
  */
  readonly collectorId?: number;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#priority DeviceGroup#priority}
  */
  readonly priority?: number;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#use_public_ip DeviceGroup#use_public_ip}
  */
  readonly usePublicIp?: boolean | cdktf.IResolvable;
}

export function deviceGroupExtraServicesEFSNormalCollectorConfigCollectorsToTerraform(struct?: DeviceGroupExtraServicesEFSNormalCollectorConfigCollectors | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    applies_to: cdktf.stringToTerraform(struct!.appliesTo),
    auto_balanced_collector_group_id: cdktf.numberToTerraform(struct!.autoBalancedCollectorGroupId),
    collector_id: cdktf.numberToTerraform(struct!.collectorId),
    priority: cdktf.numberToTerraform(struct!.priority),
    use_public_ip: cdktf.booleanToTerraform(struct!.usePublicIp),
  }
}


export function deviceGroupExtraServicesEFSNormalCollectorConfigCollectorsToHclTerraform(struct?: DeviceGroupExtraServicesEFSNormalCollectorConfigCollectors | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    applies_to: {
      value: cdktf.stringToHclTerraform(struct!.appliesTo),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    auto_balanced_collector_group_id: {
      value: cdktf.numberToHclTerraform(struct!.autoBalancedCollectorGroupId),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    collector_id: {
      value: cdktf.numberToHclTerraform(struct!.collectorId),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    priority: {
      value: cdktf.numberToHclTerraform(struct!.priority),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    use_public_ip: {
      value: cdktf.booleanToHclTerraform(struct!.usePublicIp),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesEFSNormalCollectorConfigCollectorsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesEFSNormalCollectorConfigCollectors | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._appliesTo !== undefined) {
      hasAnyValues = true;
      internalValueResult.appliesTo = this._appliesTo;
    }
    if (this._autoBalancedCollectorGroupId !== undefined) {
      hasAnyValues = true;
      internalValueResult.autoBalancedCollectorGroupId = this._autoBalancedCollectorGroupId;
    }
    if (this._collectorId !== undefined) {
      hasAnyValues = true;
      internalValueResult.collectorId = this._collectorId;
    }
    if (this._priority !== undefined) {
      hasAnyValues = true;
      internalValueResult.priority = this._priority;
    }
    if (this._usePublicIp !== undefined) {
      hasAnyValues = true;
      internalValueResult.usePublicIp = this._usePublicIp;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesEFSNormalCollectorConfigCollectors | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._appliesTo = undefined;
      this._autoBalancedCollectorGroupId = undefined;
      this._collectorId = undefined;
      this._priority = undefined;
      this._usePublicIp = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._appliesTo = value.appliesTo;
      this._autoBalancedCollectorGroupId = value.autoBalancedCollectorGroupId;
      this._collectorId = value.collectorId;
      this._priority = value.priority;
      this._usePublicIp = value.usePublicIp;
    }
  }

  // applies_to - computed: false, optional: true, required: false
  private _appliesTo?: string; 
  public get appliesTo() {
    return this.getStringAttribute('applies_to');
  }
  public set appliesTo(value: string) {
    this._appliesTo = value;
  }
  public resetAppliesTo() {
    this._appliesTo = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get appliesToInput() {
    return this._appliesTo;
  }

  // auto_balanced_collector_group_id - computed: false, optional: true, required: false
  private _autoBalancedCollectorGroupId?: number; 
  public get autoBalancedCollectorGroupId() {
    return this.getNumberAttribute('auto_balanced_collector_group_id');
  }
  public set autoBalancedCollectorGroupId(value: number) {
    this._autoBalancedCollectorGroupId = value;
  }
  public resetAutoBalancedCollectorGroupId() {
    this._autoBalancedCollectorGroupId = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get autoBalancedCollectorGroupIdInput() {
    return this._autoBalancedCollectorGroupId;
  }

  // collector_id - computed: false, optional: true, required: false
  private _collectorId?: number; 
  public get collectorId() {
    return this.getNumberAttribute('collector_id');
  }
  public set collectorId(value: number) {
    this._collectorId = value;
  }
  public resetCollectorId() {
    this._collectorId = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get collectorIdInput() {
    return this._collectorId;
  }

  // priority - computed: false, optional: true, required: false
  private _priority?: number; 
  public get priority() {
    return this.getNumberAttribute('priority');
  }
  public set priority(value: number) {
    this._priority = value;
  }
  public resetPriority() {
    this._priority = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get priorityInput() {
    return this._priority;
  }

  // use_public_ip - computed: false, optional: true, required: false
  private _usePublicIp?: boolean | cdktf.IResolvable; 
  public get usePublicIp() {
    return this.getBooleanAttribute('use_public_ip');
  }
  public set usePublicIp(value: boolean | cdktf.IResolvable) {
    this._usePublicIp = value;
  }
  public resetUsePublicIp() {
    this._usePublicIp = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get usePublicIpInput() {
    return this._usePublicIp;
  }
}

export class DeviceGroupExtraServicesEFSNormalCollectorConfigCollectorsList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesEFSNormalCollectorConfigCollectors[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesEFSNormalCollectorConfigCollectorsOutputReference {
    return new DeviceGroupExtraServicesEFSNormalCollectorConfigCollectorsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesEFSNormalCollectorConfig {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#collectors DeviceGroup#collectors}
  */
  readonly collectors?: DeviceGroupExtraServicesEFSNormalCollectorConfigCollectors[] | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#enabled DeviceGroup#enabled}
  */
  readonly enabled: boolean | cdktf.IResolvable;
}

export function deviceGroupExtraServicesEFSNormalCollectorConfigToTerraform(struct?: DeviceGroupExtraServicesEFSNormalCollectorConfig | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    collectors: cdktf.listMapper(deviceGroupExtraServicesEFSNormalCollectorConfigCollectorsToTerraform, false)(struct!.collectors),
    enabled: cdktf.booleanToTerraform(struct!.enabled),
  }
}


export function deviceGroupExtraServicesEFSNormalCollectorConfigToHclTerraform(struct?: DeviceGroupExtraServicesEFSNormalCollectorConfig | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    collectors: {
      value: cdktf.listMapperHcl(deviceGroupExtraServicesEFSNormalCollectorConfigCollectorsToHclTerraform, false)(struct!.collectors),
      isBlock: true,
      type: "list",
      storageClassType: "DeviceGroupExtraServicesEFSNormalCollectorConfigCollectorsList",
    },
    enabled: {
      value: cdktf.booleanToHclTerraform(struct!.enabled),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesEFSNormalCollectorConfigOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesEFSNormalCollectorConfig | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._collectors?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.collectors = this._collectors?.internalValue;
    }
    if (this._enabled !== undefined) {
      hasAnyValues = true;
      internalValueResult.enabled = this._enabled;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesEFSNormalCollectorConfig | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._collectors.internalValue = undefined;
      this._enabled = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._collectors.internalValue = value.collectors;
      this._enabled = value.enabled;
    }
  }

  // collectors - computed: false, optional: true, required: false
  private _collectors = new DeviceGroupExtraServicesEFSNormalCollectorConfigCollectorsList(this, "collectors", false);
  public get collectors() {
    return this._collectors;
  }
  public putCollectors(value: DeviceGroupExtraServicesEFSNormalCollectorConfigCollectors[] | cdktf.IResolvable) {
    this._collectors.internalValue = value;
  }
  public resetCollectors() {
    this._collectors.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get collectorsInput() {
    return this._collectors.internalValue;
  }

  // enabled - computed: false, optional: false, required: true
  private _enabled?: boolean | cdktf.IResolvable; 
  public get enabled() {
    return this.getBooleanAttribute('enabled');
  }
  public set enabled(value: boolean | cdktf.IResolvable) {
    this._enabled = value;
  }
  // Temporarily expose input value. Use with caution.
  public get enabledInput() {
    return this._enabled;
  }
}

export class DeviceGroupExtraServicesEFSNormalCollectorConfigList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesEFSNormalCollectorConfig[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesEFSNormalCollectorConfigOutputReference {
    return new DeviceGroupExtraServicesEFSNormalCollectorConfigOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesEFS {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#custom_n_s_p_schedule DeviceGroup#custom_n_s_p_schedule}
  */
  readonly customNSPSchedule?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#dead_operation DeviceGroup#dead_operation}
  */
  readonly deadOperation?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#device_display_name_template DeviceGroup#device_display_name_template}
  */
  readonly deviceDisplayNameTemplate?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#disable_stop_terminate_host_monitor DeviceGroup#disable_stop_terminate_host_monitor}
  */
  readonly disableStopTerminateHostMonitor?: boolean | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#disable_terminated_host_alerting DeviceGroup#disable_terminated_host_alerting}
  */
  readonly disableTerminatedHostAlerting?: boolean | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#monitoring_region_infos DeviceGroup#monitoring_region_infos}
  */
  readonly monitoringRegionInfos?: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#monitoring_regions DeviceGroup#monitoring_regions}
  */
  readonly monitoringRegions?: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#name_filter DeviceGroup#name_filter}
  */
  readonly nameFilter?: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#select_all DeviceGroup#select_all}
  */
  readonly selectAll?: boolean | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#tags DeviceGroup#tags}
  */
  readonly tags?: DeviceGroupExtraServicesEFSTags[] | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#use_default DeviceGroup#use_default}
  */
  readonly useDefault: boolean | cdktf.IResolvable;
  /**
  * normal_collector_config block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#normal_collector_config DeviceGroup#normal_collector_config}
  */
  readonly normalCollectorConfig?: DeviceGroupExtraServicesEFSNormalCollectorConfig[] | cdktf.IResolvable;
}

export function deviceGroupExtraServicesEFSToTerraform(struct?: DeviceGroupExtraServicesEFS | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    custom_n_s_p_schedule: cdktf.stringToTerraform(struct!.customNSPSchedule),
    dead_operation: cdktf.stringToTerraform(struct!.deadOperation),
    device_display_name_template: cdktf.stringToTerraform(struct!.deviceDisplayNameTemplate),
    disable_stop_terminate_host_monitor: cdktf.booleanToTerraform(struct!.disableStopTerminateHostMonitor),
    disable_terminated_host_alerting: cdktf.booleanToTerraform(struct!.disableTerminatedHostAlerting),
    monitoring_region_infos: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.monitoringRegionInfos),
    monitoring_regions: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.monitoringRegions),
    name_filter: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.nameFilter),
    select_all: cdktf.booleanToTerraform(struct!.selectAll),
    tags: cdktf.listMapper(deviceGroupExtraServicesEFSTagsToTerraform, false)(struct!.tags),
    use_default: cdktf.booleanToTerraform(struct!.useDefault),
    normal_collector_config: cdktf.listMapper(deviceGroupExtraServicesEFSNormalCollectorConfigToTerraform, true)(struct!.normalCollectorConfig),
  }
}


export function deviceGroupExtraServicesEFSToHclTerraform(struct?: DeviceGroupExtraServicesEFS | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    custom_n_s_p_schedule: {
      value: cdktf.stringToHclTerraform(struct!.customNSPSchedule),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    dead_operation: {
      value: cdktf.stringToHclTerraform(struct!.deadOperation),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    device_display_name_template: {
      value: cdktf.stringToHclTerraform(struct!.deviceDisplayNameTemplate),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    disable_stop_terminate_host_monitor: {
      value: cdktf.booleanToHclTerraform(struct!.disableStopTerminateHostMonitor),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    disable_terminated_host_alerting: {
      value: cdktf.booleanToHclTerraform(struct!.disableTerminatedHostAlerting),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    monitoring_region_infos: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.monitoringRegionInfos),
      isBlock: false,
      type: "set",
      storageClassType: "stringList",
    },
    monitoring_regions: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.monitoringRegions),
      isBlock: false,
      type: "set",
      storageClassType: "stringList",
    },
    name_filter: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.nameFilter),
      isBlock: false,
      type: "set",
      storageClassType: "stringList",
    },
    select_all: {
      value: cdktf.booleanToHclTerraform(struct!.selectAll),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    tags: {
      value: cdktf.listMapperHcl(deviceGroupExtraServicesEFSTagsToHclTerraform, false)(struct!.tags),
      isBlock: true,
      type: "list",
      storageClassType: "DeviceGroupExtraServicesEFSTagsList",
    },
    use_default: {
      value: cdktf.booleanToHclTerraform(struct!.useDefault),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    normal_collector_config: {
      value: cdktf.listMapperHcl(deviceGroupExtraServicesEFSNormalCollectorConfigToHclTerraform, true)(struct!.normalCollectorConfig),
      isBlock: true,
      type: "list",
      storageClassType: "DeviceGroupExtraServicesEFSNormalCollectorConfigList",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesEFSOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesEFS | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._customNSPSchedule !== undefined) {
      hasAnyValues = true;
      internalValueResult.customNSPSchedule = this._customNSPSchedule;
    }
    if (this._deadOperation !== undefined) {
      hasAnyValues = true;
      internalValueResult.deadOperation = this._deadOperation;
    }
    if (this._deviceDisplayNameTemplate !== undefined) {
      hasAnyValues = true;
      internalValueResult.deviceDisplayNameTemplate = this._deviceDisplayNameTemplate;
    }
    if (this._disableStopTerminateHostMonitor !== undefined) {
      hasAnyValues = true;
      internalValueResult.disableStopTerminateHostMonitor = this._disableStopTerminateHostMonitor;
    }
    if (this._disableTerminatedHostAlerting !== undefined) {
      hasAnyValues = true;
      internalValueResult.disableTerminatedHostAlerting = this._disableTerminatedHostAlerting;
    }
    if (this._monitoringRegionInfos !== undefined) {
      hasAnyValues = true;
      internalValueResult.monitoringRegionInfos = this._monitoringRegionInfos;
    }
    if (this._monitoringRegions !== undefined) {
      hasAnyValues = true;
      internalValueResult.monitoringRegions = this._monitoringRegions;
    }
    if (this._nameFilter !== undefined) {
      hasAnyValues = true;
      internalValueResult.nameFilter = this._nameFilter;
    }
    if (this._selectAll !== undefined) {
      hasAnyValues = true;
      internalValueResult.selectAll = this._selectAll;
    }
    if (this._tags?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.tags = this._tags?.internalValue;
    }
    if (this._useDefault !== undefined) {
      hasAnyValues = true;
      internalValueResult.useDefault = this._useDefault;
    }
    if (this._normalCollectorConfig?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.normalCollectorConfig = this._normalCollectorConfig?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesEFS | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._customNSPSchedule = undefined;
      this._deadOperation = undefined;
      this._deviceDisplayNameTemplate = undefined;
      this._disableStopTerminateHostMonitor = undefined;
      this._disableTerminatedHostAlerting = undefined;
      this._monitoringRegionInfos = undefined;
      this._monitoringRegions = undefined;
      this._nameFilter = undefined;
      this._selectAll = undefined;
      this._tags.internalValue = undefined;
      this._useDefault = undefined;
      this._normalCollectorConfig.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._customNSPSchedule = value.customNSPSchedule;
      this._deadOperation = value.deadOperation;
      this._deviceDisplayNameTemplate = value.deviceDisplayNameTemplate;
      this._disableStopTerminateHostMonitor = value.disableStopTerminateHostMonitor;
      this._disableTerminatedHostAlerting = value.disableTerminatedHostAlerting;
      this._monitoringRegionInfos = value.monitoringRegionInfos;
      this._monitoringRegions = value.monitoringRegions;
      this._nameFilter = value.nameFilter;
      this._selectAll = value.selectAll;
      this._tags.internalValue = value.tags;
      this._useDefault = value.useDefault;
      this._normalCollectorConfig.internalValue = value.normalCollectorConfig;
    }
  }

  // custom_n_s_p_schedule - computed: false, optional: true, required: false
  private _customNSPSchedule?: string; 
  public get customNSPSchedule() {
    return this.getStringAttribute('custom_n_s_p_schedule');
  }
  public set customNSPSchedule(value: string) {
    this._customNSPSchedule = value;
  }
  public resetCustomNSPSchedule() {
    this._customNSPSchedule = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get customNSPScheduleInput() {
    return this._customNSPSchedule;
  }

  // dead_operation - computed: false, optional: true, required: false
  private _deadOperation?: string; 
  public get deadOperation() {
    return this.getStringAttribute('dead_operation');
  }
  public set deadOperation(value: string) {
    this._deadOperation = value;
  }
  public resetDeadOperation() {
    this._deadOperation = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get deadOperationInput() {
    return this._deadOperation;
  }

  // device_display_name_template - computed: false, optional: true, required: false
  private _deviceDisplayNameTemplate?: string; 
  public get deviceDisplayNameTemplate() {
    return this.getStringAttribute('device_display_name_template');
  }
  public set deviceDisplayNameTemplate(value: string) {
    this._deviceDisplayNameTemplate = value;
  }
  public resetDeviceDisplayNameTemplate() {
    this._deviceDisplayNameTemplate = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get deviceDisplayNameTemplateInput() {
    return this._deviceDisplayNameTemplate;
  }

  // disable_stop_terminate_host_monitor - computed: false, optional: true, required: false
  private _disableStopTerminateHostMonitor?: boolean | cdktf.IResolvable; 
  public get disableStopTerminateHostMonitor() {
    return this.getBooleanAttribute('disable_stop_terminate_host_monitor');
  }
  public set disableStopTerminateHostMonitor(value: boolean | cdktf.IResolvable) {
    this._disableStopTerminateHostMonitor = value;
  }
  public resetDisableStopTerminateHostMonitor() {
    this._disableStopTerminateHostMonitor = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get disableStopTerminateHostMonitorInput() {
    return this._disableStopTerminateHostMonitor;
  }

  // disable_terminated_host_alerting - computed: false, optional: true, required: false
  private _disableTerminatedHostAlerting?: boolean | cdktf.IResolvable; 
  public get disableTerminatedHostAlerting() {
    return this.getBooleanAttribute('disable_terminated_host_alerting');
  }
  public set disableTerminatedHostAlerting(value: boolean | cdktf.IResolvable) {
    this._disableTerminatedHostAlerting = value;
  }
  public resetDisableTerminatedHostAlerting() {
    this._disableTerminatedHostAlerting = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get disableTerminatedHostAlertingInput() {
    return this._disableTerminatedHostAlerting;
  }

  // monitoring_region_infos - computed: false, optional: true, required: false
  private _monitoringRegionInfos?: string[]; 
  public get monitoringRegionInfos() {
    return cdktf.Fn.tolist(this.getListAttribute('monitoring_region_infos'));
  }
  public set monitoringRegionInfos(value: string[]) {
    this._monitoringRegionInfos = value;
  }
  public resetMonitoringRegionInfos() {
    this._monitoringRegionInfos = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get monitoringRegionInfosInput() {
    return this._monitoringRegionInfos;
  }

  // monitoring_regions - computed: false, optional: true, required: false
  private _monitoringRegions?: string[]; 
  public get monitoringRegions() {
    return cdktf.Fn.tolist(this.getListAttribute('monitoring_regions'));
  }
  public set monitoringRegions(value: string[]) {
    this._monitoringRegions = value;
  }
  public resetMonitoringRegions() {
    this._monitoringRegions = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get monitoringRegionsInput() {
    return this._monitoringRegions;
  }

  // name_filter - computed: false, optional: true, required: false
  private _nameFilter?: string[]; 
  public get nameFilter() {
    return cdktf.Fn.tolist(this.getListAttribute('name_filter'));
  }
  public set nameFilter(value: string[]) {
    this._nameFilter = value;
  }
  public resetNameFilter() {
    this._nameFilter = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get nameFilterInput() {
    return this._nameFilter;
  }

  // select_all - computed: false, optional: true, required: false
  private _selectAll?: boolean | cdktf.IResolvable; 
  public get selectAll() {
    return this.getBooleanAttribute('select_all');
  }
  public set selectAll(value: boolean | cdktf.IResolvable) {
    this._selectAll = value;
  }
  public resetSelectAll() {
    this._selectAll = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get selectAllInput() {
    return this._selectAll;
  }

  // tags - computed: false, optional: true, required: false
  private _tags = new DeviceGroupExtraServicesEFSTagsList(this, "tags", false);
  public get tags() {
    return this._tags;
  }
  public putTags(value: DeviceGroupExtraServicesEFSTags[] | cdktf.IResolvable) {
    this._tags.internalValue = value;
  }
  public resetTags() {
    this._tags.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get tagsInput() {
    return this._tags.internalValue;
  }

  // use_default - computed: false, optional: false, required: true
  private _useDefault?: boolean | cdktf.IResolvable; 
  public get useDefault() {
    return this.getBooleanAttribute('use_default');
  }
  public set useDefault(value: boolean | cdktf.IResolvable) {
    this._useDefault = value;
  }
  // Temporarily expose input value. Use with caution.
  public get useDefaultInput() {
    return this._useDefault;
  }

  // normal_collector_config - computed: false, optional: true, required: false
  private _normalCollectorConfig = new DeviceGroupExtraServicesEFSNormalCollectorConfigList(this, "normal_collector_config", false);
  public get normalCollectorConfig() {
    return this._normalCollectorConfig;
  }
  public putNormalCollectorConfig(value: DeviceGroupExtraServicesEFSNormalCollectorConfig[] | cdktf.IResolvable) {
    this._normalCollectorConfig.internalValue = value;
  }
  public resetNormalCollectorConfig() {
    this._normalCollectorConfig.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get normalCollectorConfigInput() {
    return this._normalCollectorConfig.internalValue;
  }
}

export class DeviceGroupExtraServicesEFSList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesEFS[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesEFSOutputReference {
    return new DeviceGroupExtraServicesEFSOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesELASTICACHETags {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#name DeviceGroup#name}
  */
  readonly name?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#operation DeviceGroup#operation}
  */
  readonly operation?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#value DeviceGroup#value}
  */
  readonly value?: string;
}

export function deviceGroupExtraServicesELASTICACHETagsToTerraform(struct?: DeviceGroupExtraServicesELASTICACHETags | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    name: cdktf.stringToTerraform(struct!.name),
    operation: cdktf.stringToTerraform(struct!.operation),
    value: cdktf.stringToTerraform(struct!.value),
  }
}


export function deviceGroupExtraServicesELASTICACHETagsToHclTerraform(struct?: DeviceGroupExtraServicesELASTICACHETags | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    name: {
      value: cdktf.stringToHclTerraform(struct!.name),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    operation: {
      value: cdktf.stringToHclTerraform(struct!.operation),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    value: {
      value: cdktf.stringToHclTerraform(struct!.value),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesELASTICACHETagsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesELASTICACHETags | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._name !== undefined) {
      hasAnyValues = true;
      internalValueResult.name = this._name;
    }
    if (this._operation !== undefined) {
      hasAnyValues = true;
      internalValueResult.operation = this._operation;
    }
    if (this._value !== undefined) {
      hasAnyValues = true;
      internalValueResult.value = this._value;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesELASTICACHETags | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._name = undefined;
      this._operation = undefined;
      this._value = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._name = value.name;
      this._operation = value.operation;
      this._value = value.value;
    }
  }

  // name - computed: false, optional: true, required: false
  private _name?: string; 
  public get name() {
    return this.getStringAttribute('name');
  }
  public set name(value: string) {
    this._name = value;
  }
  public resetName() {
    this._name = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get nameInput() {
    return this._name;
  }

  // operation - computed: false, optional: true, required: false
  private _operation?: string; 
  public get operation() {
    return this.getStringAttribute('operation');
  }
  public set operation(value: string) {
    this._operation = value;
  }
  public resetOperation() {
    this._operation = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get operationInput() {
    return this._operation;
  }

  // value - computed: false, optional: true, required: false
  private _value?: string; 
  public get value() {
    return this.getStringAttribute('value');
  }
  public set value(value: string) {
    this._value = value;
  }
  public resetValue() {
    this._value = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get valueInput() {
    return this._value;
  }
}

export class DeviceGroupExtraServicesELASTICACHETagsList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesELASTICACHETags[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesELASTICACHETagsOutputReference {
    return new DeviceGroupExtraServicesELASTICACHETagsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesELASTICACHENormalCollectorConfigCollectors {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#applies_to DeviceGroup#applies_to}
  */
  readonly appliesTo?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#auto_balanced_collector_group_id DeviceGroup#auto_balanced_collector_group_id}
  */
  readonly autoBalancedCollectorGroupId?: number;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#collector_id DeviceGroup#collector_id}
  */
  readonly collectorId?: number;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#priority DeviceGroup#priority}
  */
  readonly priority?: number;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#use_public_ip DeviceGroup#use_public_ip}
  */
  readonly usePublicIp?: boolean | cdktf.IResolvable;
}

export function deviceGroupExtraServicesELASTICACHENormalCollectorConfigCollectorsToTerraform(struct?: DeviceGroupExtraServicesELASTICACHENormalCollectorConfigCollectors | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    applies_to: cdktf.stringToTerraform(struct!.appliesTo),
    auto_balanced_collector_group_id: cdktf.numberToTerraform(struct!.autoBalancedCollectorGroupId),
    collector_id: cdktf.numberToTerraform(struct!.collectorId),
    priority: cdktf.numberToTerraform(struct!.priority),
    use_public_ip: cdktf.booleanToTerraform(struct!.usePublicIp),
  }
}


export function deviceGroupExtraServicesELASTICACHENormalCollectorConfigCollectorsToHclTerraform(struct?: DeviceGroupExtraServicesELASTICACHENormalCollectorConfigCollectors | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    applies_to: {
      value: cdktf.stringToHclTerraform(struct!.appliesTo),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    auto_balanced_collector_group_id: {
      value: cdktf.numberToHclTerraform(struct!.autoBalancedCollectorGroupId),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    collector_id: {
      value: cdktf.numberToHclTerraform(struct!.collectorId),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    priority: {
      value: cdktf.numberToHclTerraform(struct!.priority),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    use_public_ip: {
      value: cdktf.booleanToHclTerraform(struct!.usePublicIp),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesELASTICACHENormalCollectorConfigCollectorsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesELASTICACHENormalCollectorConfigCollectors | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._appliesTo !== undefined) {
      hasAnyValues = true;
      internalValueResult.appliesTo = this._appliesTo;
    }
    if (this._autoBalancedCollectorGroupId !== undefined) {
      hasAnyValues = true;
      internalValueResult.autoBalancedCollectorGroupId = this._autoBalancedCollectorGroupId;
    }
    if (this._collectorId !== undefined) {
      hasAnyValues = true;
      internalValueResult.collectorId = this._collectorId;
    }
    if (this._priority !== undefined) {
      hasAnyValues = true;
      internalValueResult.priority = this._priority;
    }
    if (this._usePublicIp !== undefined) {
      hasAnyValues = true;
      internalValueResult.usePublicIp = this._usePublicIp;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesELASTICACHENormalCollectorConfigCollectors | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._appliesTo = undefined;
      this._autoBalancedCollectorGroupId = undefined;
      this._collectorId = undefined;
      this._priority = undefined;
      this._usePublicIp = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._appliesTo = value.appliesTo;
      this._autoBalancedCollectorGroupId = value.autoBalancedCollectorGroupId;
      this._collectorId = value.collectorId;
      this._priority = value.priority;
      this._usePublicIp = value.usePublicIp;
    }
  }

  // applies_to - computed: false, optional: true, required: false
  private _appliesTo?: string; 
  public get appliesTo() {
    return this.getStringAttribute('applies_to');
  }
  public set appliesTo(value: string) {
    this._appliesTo = value;
  }
  public resetAppliesTo() {
    this._appliesTo = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get appliesToInput() {
    return this._appliesTo;
  }

  // auto_balanced_collector_group_id - computed: false, optional: true, required: false
  private _autoBalancedCollectorGroupId?: number; 
  public get autoBalancedCollectorGroupId() {
    return this.getNumberAttribute('auto_balanced_collector_group_id');
  }
  public set autoBalancedCollectorGroupId(value: number) {
    this._autoBalancedCollectorGroupId = value;
  }
  public resetAutoBalancedCollectorGroupId() {
    this._autoBalancedCollectorGroupId = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get autoBalancedCollectorGroupIdInput() {
    return this._autoBalancedCollectorGroupId;
  }

  // collector_id - computed: false, optional: true, required: false
  private _collectorId?: number; 
  public get collectorId() {
    return this.getNumberAttribute('collector_id');
  }
  public set collectorId(value: number) {
    this._collectorId = value;
  }
  public resetCollectorId() {
    this._collectorId = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get collectorIdInput() {
    return this._collectorId;
  }

  // priority - computed: false, optional: true, required: false
  private _priority?: number; 
  public get priority() {
    return this.getNumberAttribute('priority');
  }
  public set priority(value: number) {
    this._priority = value;
  }
  public resetPriority() {
    this._priority = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get priorityInput() {
    return this._priority;
  }

  // use_public_ip - computed: false, optional: true, required: false
  private _usePublicIp?: boolean | cdktf.IResolvable; 
  public get usePublicIp() {
    return this.getBooleanAttribute('use_public_ip');
  }
  public set usePublicIp(value: boolean | cdktf.IResolvable) {
    this._usePublicIp = value;
  }
  public resetUsePublicIp() {
    this._usePublicIp = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get usePublicIpInput() {
    return this._usePublicIp;
  }
}

export class DeviceGroupExtraServicesELASTICACHENormalCollectorConfigCollectorsList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesELASTICACHENormalCollectorConfigCollectors[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesELASTICACHENormalCollectorConfigCollectorsOutputReference {
    return new DeviceGroupExtraServicesELASTICACHENormalCollectorConfigCollectorsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesELASTICACHENormalCollectorConfig {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#collectors DeviceGroup#collectors}
  */
  readonly collectors?: DeviceGroupExtraServicesELASTICACHENormalCollectorConfigCollectors[] | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#enabled DeviceGroup#enabled}
  */
  readonly enabled: boolean | cdktf.IResolvable;
}

export function deviceGroupExtraServicesELASTICACHENormalCollectorConfigToTerraform(struct?: DeviceGroupExtraServicesELASTICACHENormalCollectorConfig | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    collectors: cdktf.listMapper(deviceGroupExtraServicesELASTICACHENormalCollectorConfigCollectorsToTerraform, false)(struct!.collectors),
    enabled: cdktf.booleanToTerraform(struct!.enabled),
  }
}


export function deviceGroupExtraServicesELASTICACHENormalCollectorConfigToHclTerraform(struct?: DeviceGroupExtraServicesELASTICACHENormalCollectorConfig | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    collectors: {
      value: cdktf.listMapperHcl(deviceGroupExtraServicesELASTICACHENormalCollectorConfigCollectorsToHclTerraform, false)(struct!.collectors),
      isBlock: true,
      type: "list",
      storageClassType: "DeviceGroupExtraServicesELASTICACHENormalCollectorConfigCollectorsList",
    },
    enabled: {
      value: cdktf.booleanToHclTerraform(struct!.enabled),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesELASTICACHENormalCollectorConfigOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesELASTICACHENormalCollectorConfig | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._collectors?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.collectors = this._collectors?.internalValue;
    }
    if (this._enabled !== undefined) {
      hasAnyValues = true;
      internalValueResult.enabled = this._enabled;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesELASTICACHENormalCollectorConfig | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._collectors.internalValue = undefined;
      this._enabled = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._collectors.internalValue = value.collectors;
      this._enabled = value.enabled;
    }
  }

  // collectors - computed: false, optional: true, required: false
  private _collectors = new DeviceGroupExtraServicesELASTICACHENormalCollectorConfigCollectorsList(this, "collectors", false);
  public get collectors() {
    return this._collectors;
  }
  public putCollectors(value: DeviceGroupExtraServicesELASTICACHENormalCollectorConfigCollectors[] | cdktf.IResolvable) {
    this._collectors.internalValue = value;
  }
  public resetCollectors() {
    this._collectors.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get collectorsInput() {
    return this._collectors.internalValue;
  }

  // enabled - computed: false, optional: false, required: true
  private _enabled?: boolean | cdktf.IResolvable; 
  public get enabled() {
    return this.getBooleanAttribute('enabled');
  }
  public set enabled(value: boolean | cdktf.IResolvable) {
    this._enabled = value;
  }
  // Temporarily expose input value. Use with caution.
  public get enabledInput() {
    return this._enabled;
  }
}

export class DeviceGroupExtraServicesELASTICACHENormalCollectorConfigList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesELASTICACHENormalCollectorConfig[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesELASTICACHENormalCollectorConfigOutputReference {
    return new DeviceGroupExtraServicesELASTICACHENormalCollectorConfigOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesELASTICACHE {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#custom_n_s_p_schedule DeviceGroup#custom_n_s_p_schedule}
  */
  readonly customNSPSchedule?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#dead_operation DeviceGroup#dead_operation}
  */
  readonly deadOperation?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#device_display_name_template DeviceGroup#device_display_name_template}
  */
  readonly deviceDisplayNameTemplate?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#disable_stop_terminate_host_monitor DeviceGroup#disable_stop_terminate_host_monitor}
  */
  readonly disableStopTerminateHostMonitor?: boolean | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#disable_terminated_host_alerting DeviceGroup#disable_terminated_host_alerting}
  */
  readonly disableTerminatedHostAlerting?: boolean | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#monitoring_region_infos DeviceGroup#monitoring_region_infos}
  */
  readonly monitoringRegionInfos?: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#monitoring_regions DeviceGroup#monitoring_regions}
  */
  readonly monitoringRegions?: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#name_filter DeviceGroup#name_filter}
  */
  readonly nameFilter?: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#select_all DeviceGroup#select_all}
  */
  readonly selectAll?: boolean | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#tags DeviceGroup#tags}
  */
  readonly tags?: DeviceGroupExtraServicesELASTICACHETags[] | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#use_default DeviceGroup#use_default}
  */
  readonly useDefault: boolean | cdktf.IResolvable;
  /**
  * normal_collector_config block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#normal_collector_config DeviceGroup#normal_collector_config}
  */
  readonly normalCollectorConfig?: DeviceGroupExtraServicesELASTICACHENormalCollectorConfig[] | cdktf.IResolvable;
}

export function deviceGroupExtraServicesELASTICACHEToTerraform(struct?: DeviceGroupExtraServicesELASTICACHE | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    custom_n_s_p_schedule: cdktf.stringToTerraform(struct!.customNSPSchedule),
    dead_operation: cdktf.stringToTerraform(struct!.deadOperation),
    device_display_name_template: cdktf.stringToTerraform(struct!.deviceDisplayNameTemplate),
    disable_stop_terminate_host_monitor: cdktf.booleanToTerraform(struct!.disableStopTerminateHostMonitor),
    disable_terminated_host_alerting: cdktf.booleanToTerraform(struct!.disableTerminatedHostAlerting),
    monitoring_region_infos: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.monitoringRegionInfos),
    monitoring_regions: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.monitoringRegions),
    name_filter: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.nameFilter),
    select_all: cdktf.booleanToTerraform(struct!.selectAll),
    tags: cdktf.listMapper(deviceGroupExtraServicesELASTICACHETagsToTerraform, false)(struct!.tags),
    use_default: cdktf.booleanToTerraform(struct!.useDefault),
    normal_collector_config: cdktf.listMapper(deviceGroupExtraServicesELASTICACHENormalCollectorConfigToTerraform, true)(struct!.normalCollectorConfig),
  }
}


export function deviceGroupExtraServicesELASTICACHEToHclTerraform(struct?: DeviceGroupExtraServicesELASTICACHE | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    custom_n_s_p_schedule: {
      value: cdktf.stringToHclTerraform(struct!.customNSPSchedule),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    dead_operation: {
      value: cdktf.stringToHclTerraform(struct!.deadOperation),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    device_display_name_template: {
      value: cdktf.stringToHclTerraform(struct!.deviceDisplayNameTemplate),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    disable_stop_terminate_host_monitor: {
      value: cdktf.booleanToHclTerraform(struct!.disableStopTerminateHostMonitor),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    disable_terminated_host_alerting: {
      value: cdktf.booleanToHclTerraform(struct!.disableTerminatedHostAlerting),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    monitoring_region_infos: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.monitoringRegionInfos),
      isBlock: false,
      type: "set",
      storageClassType: "stringList",
    },
    monitoring_regions: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.monitoringRegions),
      isBlock: false,
      type: "set",
      storageClassType: "stringList",
    },
    name_filter: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.nameFilter),
      isBlock: false,
      type: "set",
      storageClassType: "stringList",
    },
    select_all: {
      value: cdktf.booleanToHclTerraform(struct!.selectAll),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    tags: {
      value: cdktf.listMapperHcl(deviceGroupExtraServicesELASTICACHETagsToHclTerraform, false)(struct!.tags),
      isBlock: true,
      type: "list",
      storageClassType: "DeviceGroupExtraServicesELASTICACHETagsList",
    },
    use_default: {
      value: cdktf.booleanToHclTerraform(struct!.useDefault),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    normal_collector_config: {
      value: cdktf.listMapperHcl(deviceGroupExtraServicesELASTICACHENormalCollectorConfigToHclTerraform, true)(struct!.normalCollectorConfig),
      isBlock: true,
      type: "list",
      storageClassType: "DeviceGroupExtraServicesELASTICACHENormalCollectorConfigList",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesELASTICACHEOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesELASTICACHE | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._customNSPSchedule !== undefined) {
      hasAnyValues = true;
      internalValueResult.customNSPSchedule = this._customNSPSchedule;
    }
    if (this._deadOperation !== undefined) {
      hasAnyValues = true;
      internalValueResult.deadOperation = this._deadOperation;
    }
    if (this._deviceDisplayNameTemplate !== undefined) {
      hasAnyValues = true;
      internalValueResult.deviceDisplayNameTemplate = this._deviceDisplayNameTemplate;
    }
    if (this._disableStopTerminateHostMonitor !== undefined) {
      hasAnyValues = true;
      internalValueResult.disableStopTerminateHostMonitor = this._disableStopTerminateHostMonitor;
    }
    if (this._disableTerminatedHostAlerting !== undefined) {
      hasAnyValues = true;
      internalValueResult.disableTerminatedHostAlerting = this._disableTerminatedHostAlerting;
    }
    if (this._monitoringRegionInfos !== undefined) {
      hasAnyValues = true;
      internalValueResult.monitoringRegionInfos = this._monitoringRegionInfos;
    }
    if (this._monitoringRegions !== undefined) {
      hasAnyValues = true;
      internalValueResult.monitoringRegions = this._monitoringRegions;
    }
    if (this._nameFilter !== undefined) {
      hasAnyValues = true;
      internalValueResult.nameFilter = this._nameFilter;
    }
    if (this._selectAll !== undefined) {
      hasAnyValues = true;
      internalValueResult.selectAll = this._selectAll;
    }
    if (this._tags?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.tags = this._tags?.internalValue;
    }
    if (this._useDefault !== undefined) {
      hasAnyValues = true;
      internalValueResult.useDefault = this._useDefault;
    }
    if (this._normalCollectorConfig?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.normalCollectorConfig = this._normalCollectorConfig?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesELASTICACHE | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._customNSPSchedule = undefined;
      this._deadOperation = undefined;
      this._deviceDisplayNameTemplate = undefined;
      this._disableStopTerminateHostMonitor = undefined;
      this._disableTerminatedHostAlerting = undefined;
      this._monitoringRegionInfos = undefined;
      this._monitoringRegions = undefined;
      this._nameFilter = undefined;
      this._selectAll = undefined;
      this._tags.internalValue = undefined;
      this._useDefault = undefined;
      this._normalCollectorConfig.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._customNSPSchedule = value.customNSPSchedule;
      this._deadOperation = value.deadOperation;
      this._deviceDisplayNameTemplate = value.deviceDisplayNameTemplate;
      this._disableStopTerminateHostMonitor = value.disableStopTerminateHostMonitor;
      this._disableTerminatedHostAlerting = value.disableTerminatedHostAlerting;
      this._monitoringRegionInfos = value.monitoringRegionInfos;
      this._monitoringRegions = value.monitoringRegions;
      this._nameFilter = value.nameFilter;
      this._selectAll = value.selectAll;
      this._tags.internalValue = value.tags;
      this._useDefault = value.useDefault;
      this._normalCollectorConfig.internalValue = value.normalCollectorConfig;
    }
  }

  // custom_n_s_p_schedule - computed: false, optional: true, required: false
  private _customNSPSchedule?: string; 
  public get customNSPSchedule() {
    return this.getStringAttribute('custom_n_s_p_schedule');
  }
  public set customNSPSchedule(value: string) {
    this._customNSPSchedule = value;
  }
  public resetCustomNSPSchedule() {
    this._customNSPSchedule = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get customNSPScheduleInput() {
    return this._customNSPSchedule;
  }

  // dead_operation - computed: false, optional: true, required: false
  private _deadOperation?: string; 
  public get deadOperation() {
    return this.getStringAttribute('dead_operation');
  }
  public set deadOperation(value: string) {
    this._deadOperation = value;
  }
  public resetDeadOperation() {
    this._deadOperation = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get deadOperationInput() {
    return this._deadOperation;
  }

  // device_display_name_template - computed: false, optional: true, required: false
  private _deviceDisplayNameTemplate?: string; 
  public get deviceDisplayNameTemplate() {
    return this.getStringAttribute('device_display_name_template');
  }
  public set deviceDisplayNameTemplate(value: string) {
    this._deviceDisplayNameTemplate = value;
  }
  public resetDeviceDisplayNameTemplate() {
    this._deviceDisplayNameTemplate = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get deviceDisplayNameTemplateInput() {
    return this._deviceDisplayNameTemplate;
  }

  // disable_stop_terminate_host_monitor - computed: false, optional: true, required: false
  private _disableStopTerminateHostMonitor?: boolean | cdktf.IResolvable; 
  public get disableStopTerminateHostMonitor() {
    return this.getBooleanAttribute('disable_stop_terminate_host_monitor');
  }
  public set disableStopTerminateHostMonitor(value: boolean | cdktf.IResolvable) {
    this._disableStopTerminateHostMonitor = value;
  }
  public resetDisableStopTerminateHostMonitor() {
    this._disableStopTerminateHostMonitor = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get disableStopTerminateHostMonitorInput() {
    return this._disableStopTerminateHostMonitor;
  }

  // disable_terminated_host_alerting - computed: false, optional: true, required: false
  private _disableTerminatedHostAlerting?: boolean | cdktf.IResolvable; 
  public get disableTerminatedHostAlerting() {
    return this.getBooleanAttribute('disable_terminated_host_alerting');
  }
  public set disableTerminatedHostAlerting(value: boolean | cdktf.IResolvable) {
    this._disableTerminatedHostAlerting = value;
  }
  public resetDisableTerminatedHostAlerting() {
    this._disableTerminatedHostAlerting = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get disableTerminatedHostAlertingInput() {
    return this._disableTerminatedHostAlerting;
  }

  // monitoring_region_infos - computed: false, optional: true, required: false
  private _monitoringRegionInfos?: string[]; 
  public get monitoringRegionInfos() {
    return cdktf.Fn.tolist(this.getListAttribute('monitoring_region_infos'));
  }
  public set monitoringRegionInfos(value: string[]) {
    this._monitoringRegionInfos = value;
  }
  public resetMonitoringRegionInfos() {
    this._monitoringRegionInfos = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get monitoringRegionInfosInput() {
    return this._monitoringRegionInfos;
  }

  // monitoring_regions - computed: false, optional: true, required: false
  private _monitoringRegions?: string[]; 
  public get monitoringRegions() {
    return cdktf.Fn.tolist(this.getListAttribute('monitoring_regions'));
  }
  public set monitoringRegions(value: string[]) {
    this._monitoringRegions = value;
  }
  public resetMonitoringRegions() {
    this._monitoringRegions = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get monitoringRegionsInput() {
    return this._monitoringRegions;
  }

  // name_filter - computed: false, optional: true, required: false
  private _nameFilter?: string[]; 
  public get nameFilter() {
    return cdktf.Fn.tolist(this.getListAttribute('name_filter'));
  }
  public set nameFilter(value: string[]) {
    this._nameFilter = value;
  }
  public resetNameFilter() {
    this._nameFilter = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get nameFilterInput() {
    return this._nameFilter;
  }

  // select_all - computed: false, optional: true, required: false
  private _selectAll?: boolean | cdktf.IResolvable; 
  public get selectAll() {
    return this.getBooleanAttribute('select_all');
  }
  public set selectAll(value: boolean | cdktf.IResolvable) {
    this._selectAll = value;
  }
  public resetSelectAll() {
    this._selectAll = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get selectAllInput() {
    return this._selectAll;
  }

  // tags - computed: false, optional: true, required: false
  private _tags = new DeviceGroupExtraServicesELASTICACHETagsList(this, "tags", false);
  public get tags() {
    return this._tags;
  }
  public putTags(value: DeviceGroupExtraServicesELASTICACHETags[] | cdktf.IResolvable) {
    this._tags.internalValue = value;
  }
  public resetTags() {
    this._tags.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get tagsInput() {
    return this._tags.internalValue;
  }

  // use_default - computed: false, optional: false, required: true
  private _useDefault?: boolean | cdktf.IResolvable; 
  public get useDefault() {
    return this.getBooleanAttribute('use_default');
  }
  public set useDefault(value: boolean | cdktf.IResolvable) {
    this._useDefault = value;
  }
  // Temporarily expose input value. Use with caution.
  public get useDefaultInput() {
    return this._useDefault;
  }

  // normal_collector_config - computed: false, optional: true, required: false
  private _normalCollectorConfig = new DeviceGroupExtraServicesELASTICACHENormalCollectorConfigList(this, "normal_collector_config", false);
  public get normalCollectorConfig() {
    return this._normalCollectorConfig;
  }
  public putNormalCollectorConfig(value: DeviceGroupExtraServicesELASTICACHENormalCollectorConfig[] | cdktf.IResolvable) {
    this._normalCollectorConfig.internalValue = value;
  }
  public resetNormalCollectorConfig() {
    this._normalCollectorConfig.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get normalCollectorConfigInput() {
    return this._normalCollectorConfig.internalValue;
  }
}

export class DeviceGroupExtraServicesELASTICACHEList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesELASTICACHE[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesELASTICACHEOutputReference {
    return new DeviceGroupExtraServicesELASTICACHEOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesELASTICBEANSTALKTags {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#name DeviceGroup#name}
  */
  readonly name?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#operation DeviceGroup#operation}
  */
  readonly operation?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#value DeviceGroup#value}
  */
  readonly value?: string;
}

export function deviceGroupExtraServicesELASTICBEANSTALKTagsToTerraform(struct?: DeviceGroupExtraServicesELASTICBEANSTALKTags | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    name: cdktf.stringToTerraform(struct!.name),
    operation: cdktf.stringToTerraform(struct!.operation),
    value: cdktf.stringToTerraform(struct!.value),
  }
}


export function deviceGroupExtraServicesELASTICBEANSTALKTagsToHclTerraform(struct?: DeviceGroupExtraServicesELASTICBEANSTALKTags | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    name: {
      value: cdktf.stringToHclTerraform(struct!.name),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    operation: {
      value: cdktf.stringToHclTerraform(struct!.operation),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    value: {
      value: cdktf.stringToHclTerraform(struct!.value),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesELASTICBEANSTALKTagsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesELASTICBEANSTALKTags | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._name !== undefined) {
      hasAnyValues = true;
      internalValueResult.name = this._name;
    }
    if (this._operation !== undefined) {
      hasAnyValues = true;
      internalValueResult.operation = this._operation;
    }
    if (this._value !== undefined) {
      hasAnyValues = true;
      internalValueResult.value = this._value;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesELASTICBEANSTALKTags | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._name = undefined;
      this._operation = undefined;
      this._value = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._name = value.name;
      this._operation = value.operation;
      this._value = value.value;
    }
  }

  // name - computed: false, optional: true, required: false
  private _name?: string; 
  public get name() {
    return this.getStringAttribute('name');
  }
  public set name(value: string) {
    this._name = value;
  }
  public resetName() {
    this._name = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get nameInput() {
    return this._name;
  }

  // operation - computed: false, optional: true, required: false
  private _operation?: string; 
  public get operation() {
    return this.getStringAttribute('operation');
  }
  public set operation(value: string) {
    this._operation = value;
  }
  public resetOperation() {
    this._operation = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get operationInput() {
    return this._operation;
  }

  // value - computed: false, optional: true, required: false
  private _value?: string; 
  public get value() {
    return this.getStringAttribute('value');
  }
  public set value(value: string) {
    this._value = value;
  }
  public resetValue() {
    this._value = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get valueInput() {
    return this._value;
  }
}

export class DeviceGroupExtraServicesELASTICBEANSTALKTagsList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesELASTICBEANSTALKTags[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesELASTICBEANSTALKTagsOutputReference {
    return new DeviceGroupExtraServicesELASTICBEANSTALKTagsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesELASTICBEANSTALKNormalCollectorConfigCollectors {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#applies_to DeviceGroup#applies_to}
  */
  readonly appliesTo?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#auto_balanced_collector_group_id DeviceGroup#auto_balanced_collector_group_id}
  */
  readonly autoBalancedCollectorGroupId?: number;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#collector_id DeviceGroup#collector_id}
  */
  readonly collectorId?: number;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#priority DeviceGroup#priority}
  */
  readonly priority?: number;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#use_public_ip DeviceGroup#use_public_ip}
  */
  readonly usePublicIp?: boolean | cdktf.IResolvable;
}

export function deviceGroupExtraServicesELASTICBEANSTALKNormalCollectorConfigCollectorsToTerraform(struct?: DeviceGroupExtraServicesELASTICBEANSTALKNormalCollectorConfigCollectors | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    applies_to: cdktf.stringToTerraform(struct!.appliesTo),
    auto_balanced_collector_group_id: cdktf.numberToTerraform(struct!.autoBalancedCollectorGroupId),
    collector_id: cdktf.numberToTerraform(struct!.collectorId),
    priority: cdktf.numberToTerraform(struct!.priority),
    use_public_ip: cdktf.booleanToTerraform(struct!.usePublicIp),
  }
}


export function deviceGroupExtraServicesELASTICBEANSTALKNormalCollectorConfigCollectorsToHclTerraform(struct?: DeviceGroupExtraServicesELASTICBEANSTALKNormalCollectorConfigCollectors | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    applies_to: {
      value: cdktf.stringToHclTerraform(struct!.appliesTo),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    auto_balanced_collector_group_id: {
      value: cdktf.numberToHclTerraform(struct!.autoBalancedCollectorGroupId),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    collector_id: {
      value: cdktf.numberToHclTerraform(struct!.collectorId),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    priority: {
      value: cdktf.numberToHclTerraform(struct!.priority),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    use_public_ip: {
      value: cdktf.booleanToHclTerraform(struct!.usePublicIp),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesELASTICBEANSTALKNormalCollectorConfigCollectorsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesELASTICBEANSTALKNormalCollectorConfigCollectors | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._appliesTo !== undefined) {
      hasAnyValues = true;
      internalValueResult.appliesTo = this._appliesTo;
    }
    if (this._autoBalancedCollectorGroupId !== undefined) {
      hasAnyValues = true;
      internalValueResult.autoBalancedCollectorGroupId = this._autoBalancedCollectorGroupId;
    }
    if (this._collectorId !== undefined) {
      hasAnyValues = true;
      internalValueResult.collectorId = this._collectorId;
    }
    if (this._priority !== undefined) {
      hasAnyValues = true;
      internalValueResult.priority = this._priority;
    }
    if (this._usePublicIp !== undefined) {
      hasAnyValues = true;
      internalValueResult.usePublicIp = this._usePublicIp;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesELASTICBEANSTALKNormalCollectorConfigCollectors | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._appliesTo = undefined;
      this._autoBalancedCollectorGroupId = undefined;
      this._collectorId = undefined;
      this._priority = undefined;
      this._usePublicIp = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._appliesTo = value.appliesTo;
      this._autoBalancedCollectorGroupId = value.autoBalancedCollectorGroupId;
      this._collectorId = value.collectorId;
      this._priority = value.priority;
      this._usePublicIp = value.usePublicIp;
    }
  }

  // applies_to - computed: false, optional: true, required: false
  private _appliesTo?: string; 
  public get appliesTo() {
    return this.getStringAttribute('applies_to');
  }
  public set appliesTo(value: string) {
    this._appliesTo = value;
  }
  public resetAppliesTo() {
    this._appliesTo = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get appliesToInput() {
    return this._appliesTo;
  }

  // auto_balanced_collector_group_id - computed: false, optional: true, required: false
  private _autoBalancedCollectorGroupId?: number; 
  public get autoBalancedCollectorGroupId() {
    return this.getNumberAttribute('auto_balanced_collector_group_id');
  }
  public set autoBalancedCollectorGroupId(value: number) {
    this._autoBalancedCollectorGroupId = value;
  }
  public resetAutoBalancedCollectorGroupId() {
    this._autoBalancedCollectorGroupId = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get autoBalancedCollectorGroupIdInput() {
    return this._autoBalancedCollectorGroupId;
  }

  // collector_id - computed: false, optional: true, required: false
  private _collectorId?: number; 
  public get collectorId() {
    return this.getNumberAttribute('collector_id');
  }
  public set collectorId(value: number) {
    this._collectorId = value;
  }
  public resetCollectorId() {
    this._collectorId = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get collectorIdInput() {
    return this._collectorId;
  }

  // priority - computed: false, optional: true, required: false
  private _priority?: number; 
  public get priority() {
    return this.getNumberAttribute('priority');
  }
  public set priority(value: number) {
    this._priority = value;
  }
  public resetPriority() {
    this._priority = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get priorityInput() {
    return this._priority;
  }

  // use_public_ip - computed: false, optional: true, required: false
  private _usePublicIp?: boolean | cdktf.IResolvable; 
  public get usePublicIp() {
    return this.getBooleanAttribute('use_public_ip');
  }
  public set usePublicIp(value: boolean | cdktf.IResolvable) {
    this._usePublicIp = value;
  }
  public resetUsePublicIp() {
    this._usePublicIp = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get usePublicIpInput() {
    return this._usePublicIp;
  }
}

export class DeviceGroupExtraServicesELASTICBEANSTALKNormalCollectorConfigCollectorsList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesELASTICBEANSTALKNormalCollectorConfigCollectors[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesELASTICBEANSTALKNormalCollectorConfigCollectorsOutputReference {
    return new DeviceGroupExtraServicesELASTICBEANSTALKNormalCollectorConfigCollectorsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesELASTICBEANSTALKNormalCollectorConfig {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#collectors DeviceGroup#collectors}
  */
  readonly collectors?: DeviceGroupExtraServicesELASTICBEANSTALKNormalCollectorConfigCollectors[] | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#enabled DeviceGroup#enabled}
  */
  readonly enabled: boolean | cdktf.IResolvable;
}

export function deviceGroupExtraServicesELASTICBEANSTALKNormalCollectorConfigToTerraform(struct?: DeviceGroupExtraServicesELASTICBEANSTALKNormalCollectorConfig | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    collectors: cdktf.listMapper(deviceGroupExtraServicesELASTICBEANSTALKNormalCollectorConfigCollectorsToTerraform, false)(struct!.collectors),
    enabled: cdktf.booleanToTerraform(struct!.enabled),
  }
}


export function deviceGroupExtraServicesELASTICBEANSTALKNormalCollectorConfigToHclTerraform(struct?: DeviceGroupExtraServicesELASTICBEANSTALKNormalCollectorConfig | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    collectors: {
      value: cdktf.listMapperHcl(deviceGroupExtraServicesELASTICBEANSTALKNormalCollectorConfigCollectorsToHclTerraform, false)(struct!.collectors),
      isBlock: true,
      type: "list",
      storageClassType: "DeviceGroupExtraServicesELASTICBEANSTALKNormalCollectorConfigCollectorsList",
    },
    enabled: {
      value: cdktf.booleanToHclTerraform(struct!.enabled),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesELASTICBEANSTALKNormalCollectorConfigOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesELASTICBEANSTALKNormalCollectorConfig | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._collectors?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.collectors = this._collectors?.internalValue;
    }
    if (this._enabled !== undefined) {
      hasAnyValues = true;
      internalValueResult.enabled = this._enabled;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesELASTICBEANSTALKNormalCollectorConfig | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._collectors.internalValue = undefined;
      this._enabled = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._collectors.internalValue = value.collectors;
      this._enabled = value.enabled;
    }
  }

  // collectors - computed: false, optional: true, required: false
  private _collectors = new DeviceGroupExtraServicesELASTICBEANSTALKNormalCollectorConfigCollectorsList(this, "collectors", false);
  public get collectors() {
    return this._collectors;
  }
  public putCollectors(value: DeviceGroupExtraServicesELASTICBEANSTALKNormalCollectorConfigCollectors[] | cdktf.IResolvable) {
    this._collectors.internalValue = value;
  }
  public resetCollectors() {
    this._collectors.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get collectorsInput() {
    return this._collectors.internalValue;
  }

  // enabled - computed: false, optional: false, required: true
  private _enabled?: boolean | cdktf.IResolvable; 
  public get enabled() {
    return this.getBooleanAttribute('enabled');
  }
  public set enabled(value: boolean | cdktf.IResolvable) {
    this._enabled = value;
  }
  // Temporarily expose input value. Use with caution.
  public get enabledInput() {
    return this._enabled;
  }
}

export class DeviceGroupExtraServicesELASTICBEANSTALKNormalCollectorConfigList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesELASTICBEANSTALKNormalCollectorConfig[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesELASTICBEANSTALKNormalCollectorConfigOutputReference {
    return new DeviceGroupExtraServicesELASTICBEANSTALKNormalCollectorConfigOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesELASTICBEANSTALK {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#custom_n_s_p_schedule DeviceGroup#custom_n_s_p_schedule}
  */
  readonly customNSPSchedule?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#dead_operation DeviceGroup#dead_operation}
  */
  readonly deadOperation?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#device_display_name_template DeviceGroup#device_display_name_template}
  */
  readonly deviceDisplayNameTemplate?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#disable_stop_terminate_host_monitor DeviceGroup#disable_stop_terminate_host_monitor}
  */
  readonly disableStopTerminateHostMonitor?: boolean | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#disable_terminated_host_alerting DeviceGroup#disable_terminated_host_alerting}
  */
  readonly disableTerminatedHostAlerting?: boolean | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#monitoring_region_infos DeviceGroup#monitoring_region_infos}
  */
  readonly monitoringRegionInfos?: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#monitoring_regions DeviceGroup#monitoring_regions}
  */
  readonly monitoringRegions?: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#name_filter DeviceGroup#name_filter}
  */
  readonly nameFilter?: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#select_all DeviceGroup#select_all}
  */
  readonly selectAll?: boolean | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#tags DeviceGroup#tags}
  */
  readonly tags?: DeviceGroupExtraServicesELASTICBEANSTALKTags[] | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#use_default DeviceGroup#use_default}
  */
  readonly useDefault: boolean | cdktf.IResolvable;
  /**
  * normal_collector_config block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#normal_collector_config DeviceGroup#normal_collector_config}
  */
  readonly normalCollectorConfig?: DeviceGroupExtraServicesELASTICBEANSTALKNormalCollectorConfig[] | cdktf.IResolvable;
}

export function deviceGroupExtraServicesELASTICBEANSTALKToTerraform(struct?: DeviceGroupExtraServicesELASTICBEANSTALK | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    custom_n_s_p_schedule: cdktf.stringToTerraform(struct!.customNSPSchedule),
    dead_operation: cdktf.stringToTerraform(struct!.deadOperation),
    device_display_name_template: cdktf.stringToTerraform(struct!.deviceDisplayNameTemplate),
    disable_stop_terminate_host_monitor: cdktf.booleanToTerraform(struct!.disableStopTerminateHostMonitor),
    disable_terminated_host_alerting: cdktf.booleanToTerraform(struct!.disableTerminatedHostAlerting),
    monitoring_region_infos: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.monitoringRegionInfos),
    monitoring_regions: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.monitoringRegions),
    name_filter: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.nameFilter),
    select_all: cdktf.booleanToTerraform(struct!.selectAll),
    tags: cdktf.listMapper(deviceGroupExtraServicesELASTICBEANSTALKTagsToTerraform, false)(struct!.tags),
    use_default: cdktf.booleanToTerraform(struct!.useDefault),
    normal_collector_config: cdktf.listMapper(deviceGroupExtraServicesELASTICBEANSTALKNormalCollectorConfigToTerraform, true)(struct!.normalCollectorConfig),
  }
}


export function deviceGroupExtraServicesELASTICBEANSTALKToHclTerraform(struct?: DeviceGroupExtraServicesELASTICBEANSTALK | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    custom_n_s_p_schedule: {
      value: cdktf.stringToHclTerraform(struct!.customNSPSchedule),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    dead_operation: {
      value: cdktf.stringToHclTerraform(struct!.deadOperation),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    device_display_name_template: {
      value: cdktf.stringToHclTerraform(struct!.deviceDisplayNameTemplate),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    disable_stop_terminate_host_monitor: {
      value: cdktf.booleanToHclTerraform(struct!.disableStopTerminateHostMonitor),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    disable_terminated_host_alerting: {
      value: cdktf.booleanToHclTerraform(struct!.disableTerminatedHostAlerting),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    monitoring_region_infos: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.monitoringRegionInfos),
      isBlock: false,
      type: "set",
      storageClassType: "stringList",
    },
    monitoring_regions: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.monitoringRegions),
      isBlock: false,
      type: "set",
      storageClassType: "stringList",
    },
    name_filter: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.nameFilter),
      isBlock: false,
      type: "set",
      storageClassType: "stringList",
    },
    select_all: {
      value: cdktf.booleanToHclTerraform(struct!.selectAll),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    tags: {
      value: cdktf.listMapperHcl(deviceGroupExtraServicesELASTICBEANSTALKTagsToHclTerraform, false)(struct!.tags),
      isBlock: true,
      type: "list",
      storageClassType: "DeviceGroupExtraServicesELASTICBEANSTALKTagsList",
    },
    use_default: {
      value: cdktf.booleanToHclTerraform(struct!.useDefault),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    normal_collector_config: {
      value: cdktf.listMapperHcl(deviceGroupExtraServicesELASTICBEANSTALKNormalCollectorConfigToHclTerraform, true)(struct!.normalCollectorConfig),
      isBlock: true,
      type: "list",
      storageClassType: "DeviceGroupExtraServicesELASTICBEANSTALKNormalCollectorConfigList",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesELASTICBEANSTALKOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesELASTICBEANSTALK | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._customNSPSchedule !== undefined) {
      hasAnyValues = true;
      internalValueResult.customNSPSchedule = this._customNSPSchedule;
    }
    if (this._deadOperation !== undefined) {
      hasAnyValues = true;
      internalValueResult.deadOperation = this._deadOperation;
    }
    if (this._deviceDisplayNameTemplate !== undefined) {
      hasAnyValues = true;
      internalValueResult.deviceDisplayNameTemplate = this._deviceDisplayNameTemplate;
    }
    if (this._disableStopTerminateHostMonitor !== undefined) {
      hasAnyValues = true;
      internalValueResult.disableStopTerminateHostMonitor = this._disableStopTerminateHostMonitor;
    }
    if (this._disableTerminatedHostAlerting !== undefined) {
      hasAnyValues = true;
      internalValueResult.disableTerminatedHostAlerting = this._disableTerminatedHostAlerting;
    }
    if (this._monitoringRegionInfos !== undefined) {
      hasAnyValues = true;
      internalValueResult.monitoringRegionInfos = this._monitoringRegionInfos;
    }
    if (this._monitoringRegions !== undefined) {
      hasAnyValues = true;
      internalValueResult.monitoringRegions = this._monitoringRegions;
    }
    if (this._nameFilter !== undefined) {
      hasAnyValues = true;
      internalValueResult.nameFilter = this._nameFilter;
    }
    if (this._selectAll !== undefined) {
      hasAnyValues = true;
      internalValueResult.selectAll = this._selectAll;
    }
    if (this._tags?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.tags = this._tags?.internalValue;
    }
    if (this._useDefault !== undefined) {
      hasAnyValues = true;
      internalValueResult.useDefault = this._useDefault;
    }
    if (this._normalCollectorConfig?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.normalCollectorConfig = this._normalCollectorConfig?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesELASTICBEANSTALK | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._customNSPSchedule = undefined;
      this._deadOperation = undefined;
      this._deviceDisplayNameTemplate = undefined;
      this._disableStopTerminateHostMonitor = undefined;
      this._disableTerminatedHostAlerting = undefined;
      this._monitoringRegionInfos = undefined;
      this._monitoringRegions = undefined;
      this._nameFilter = undefined;
      this._selectAll = undefined;
      this._tags.internalValue = undefined;
      this._useDefault = undefined;
      this._normalCollectorConfig.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._customNSPSchedule = value.customNSPSchedule;
      this._deadOperation = value.deadOperation;
      this._deviceDisplayNameTemplate = value.deviceDisplayNameTemplate;
      this._disableStopTerminateHostMonitor = value.disableStopTerminateHostMonitor;
      this._disableTerminatedHostAlerting = value.disableTerminatedHostAlerting;
      this._monitoringRegionInfos = value.monitoringRegionInfos;
      this._monitoringRegions = value.monitoringRegions;
      this._nameFilter = value.nameFilter;
      this._selectAll = value.selectAll;
      this._tags.internalValue = value.tags;
      this._useDefault = value.useDefault;
      this._normalCollectorConfig.internalValue = value.normalCollectorConfig;
    }
  }

  // custom_n_s_p_schedule - computed: false, optional: true, required: false
  private _customNSPSchedule?: string; 
  public get customNSPSchedule() {
    return this.getStringAttribute('custom_n_s_p_schedule');
  }
  public set customNSPSchedule(value: string) {
    this._customNSPSchedule = value;
  }
  public resetCustomNSPSchedule() {
    this._customNSPSchedule = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get customNSPScheduleInput() {
    return this._customNSPSchedule;
  }

  // dead_operation - computed: false, optional: true, required: false
  private _deadOperation?: string; 
  public get deadOperation() {
    return this.getStringAttribute('dead_operation');
  }
  public set deadOperation(value: string) {
    this._deadOperation = value;
  }
  public resetDeadOperation() {
    this._deadOperation = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get deadOperationInput() {
    return this._deadOperation;
  }

  // device_display_name_template - computed: false, optional: true, required: false
  private _deviceDisplayNameTemplate?: string; 
  public get deviceDisplayNameTemplate() {
    return this.getStringAttribute('device_display_name_template');
  }
  public set deviceDisplayNameTemplate(value: string) {
    this._deviceDisplayNameTemplate = value;
  }
  public resetDeviceDisplayNameTemplate() {
    this._deviceDisplayNameTemplate = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get deviceDisplayNameTemplateInput() {
    return this._deviceDisplayNameTemplate;
  }

  // disable_stop_terminate_host_monitor - computed: false, optional: true, required: false
  private _disableStopTerminateHostMonitor?: boolean | cdktf.IResolvable; 
  public get disableStopTerminateHostMonitor() {
    return this.getBooleanAttribute('disable_stop_terminate_host_monitor');
  }
  public set disableStopTerminateHostMonitor(value: boolean | cdktf.IResolvable) {
    this._disableStopTerminateHostMonitor = value;
  }
  public resetDisableStopTerminateHostMonitor() {
    this._disableStopTerminateHostMonitor = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get disableStopTerminateHostMonitorInput() {
    return this._disableStopTerminateHostMonitor;
  }

  // disable_terminated_host_alerting - computed: false, optional: true, required: false
  private _disableTerminatedHostAlerting?: boolean | cdktf.IResolvable; 
  public get disableTerminatedHostAlerting() {
    return this.getBooleanAttribute('disable_terminated_host_alerting');
  }
  public set disableTerminatedHostAlerting(value: boolean | cdktf.IResolvable) {
    this._disableTerminatedHostAlerting = value;
  }
  public resetDisableTerminatedHostAlerting() {
    this._disableTerminatedHostAlerting = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get disableTerminatedHostAlertingInput() {
    return this._disableTerminatedHostAlerting;
  }

  // monitoring_region_infos - computed: false, optional: true, required: false
  private _monitoringRegionInfos?: string[]; 
  public get monitoringRegionInfos() {
    return cdktf.Fn.tolist(this.getListAttribute('monitoring_region_infos'));
  }
  public set monitoringRegionInfos(value: string[]) {
    this._monitoringRegionInfos = value;
  }
  public resetMonitoringRegionInfos() {
    this._monitoringRegionInfos = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get monitoringRegionInfosInput() {
    return this._monitoringRegionInfos;
  }

  // monitoring_regions - computed: false, optional: true, required: false
  private _monitoringRegions?: string[]; 
  public get monitoringRegions() {
    return cdktf.Fn.tolist(this.getListAttribute('monitoring_regions'));
  }
  public set monitoringRegions(value: string[]) {
    this._monitoringRegions = value;
  }
  public resetMonitoringRegions() {
    this._monitoringRegions = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get monitoringRegionsInput() {
    return this._monitoringRegions;
  }

  // name_filter - computed: false, optional: true, required: false
  private _nameFilter?: string[]; 
  public get nameFilter() {
    return cdktf.Fn.tolist(this.getListAttribute('name_filter'));
  }
  public set nameFilter(value: string[]) {
    this._nameFilter = value;
  }
  public resetNameFilter() {
    this._nameFilter = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get nameFilterInput() {
    return this._nameFilter;
  }

  // select_all - computed: false, optional: true, required: false
  private _selectAll?: boolean | cdktf.IResolvable; 
  public get selectAll() {
    return this.getBooleanAttribute('select_all');
  }
  public set selectAll(value: boolean | cdktf.IResolvable) {
    this._selectAll = value;
  }
  public resetSelectAll() {
    this._selectAll = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get selectAllInput() {
    return this._selectAll;
  }

  // tags - computed: false, optional: true, required: false
  private _tags = new DeviceGroupExtraServicesELASTICBEANSTALKTagsList(this, "tags", false);
  public get tags() {
    return this._tags;
  }
  public putTags(value: DeviceGroupExtraServicesELASTICBEANSTALKTags[] | cdktf.IResolvable) {
    this._tags.internalValue = value;
  }
  public resetTags() {
    this._tags.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get tagsInput() {
    return this._tags.internalValue;
  }

  // use_default - computed: false, optional: false, required: true
  private _useDefault?: boolean | cdktf.IResolvable; 
  public get useDefault() {
    return this.getBooleanAttribute('use_default');
  }
  public set useDefault(value: boolean | cdktf.IResolvable) {
    this._useDefault = value;
  }
  // Temporarily expose input value. Use with caution.
  public get useDefaultInput() {
    return this._useDefault;
  }

  // normal_collector_config - computed: false, optional: true, required: false
  private _normalCollectorConfig = new DeviceGroupExtraServicesELASTICBEANSTALKNormalCollectorConfigList(this, "normal_collector_config", false);
  public get normalCollectorConfig() {
    return this._normalCollectorConfig;
  }
  public putNormalCollectorConfig(value: DeviceGroupExtraServicesELASTICBEANSTALKNormalCollectorConfig[] | cdktf.IResolvable) {
    this._normalCollectorConfig.internalValue = value;
  }
  public resetNormalCollectorConfig() {
    this._normalCollectorConfig.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get normalCollectorConfigInput() {
    return this._normalCollectorConfig.internalValue;
  }
}

export class DeviceGroupExtraServicesELASTICBEANSTALKList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesELASTICBEANSTALK[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesELASTICBEANSTALKOutputReference {
    return new DeviceGroupExtraServicesELASTICBEANSTALKOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesELASTICSEARCHTags {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#name DeviceGroup#name}
  */
  readonly name?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#operation DeviceGroup#operation}
  */
  readonly operation?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#value DeviceGroup#value}
  */
  readonly value?: string;
}

export function deviceGroupExtraServicesELASTICSEARCHTagsToTerraform(struct?: DeviceGroupExtraServicesELASTICSEARCHTags | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    name: cdktf.stringToTerraform(struct!.name),
    operation: cdktf.stringToTerraform(struct!.operation),
    value: cdktf.stringToTerraform(struct!.value),
  }
}


export function deviceGroupExtraServicesELASTICSEARCHTagsToHclTerraform(struct?: DeviceGroupExtraServicesELASTICSEARCHTags | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    name: {
      value: cdktf.stringToHclTerraform(struct!.name),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    operation: {
      value: cdktf.stringToHclTerraform(struct!.operation),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    value: {
      value: cdktf.stringToHclTerraform(struct!.value),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesELASTICSEARCHTagsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesELASTICSEARCHTags | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._name !== undefined) {
      hasAnyValues = true;
      internalValueResult.name = this._name;
    }
    if (this._operation !== undefined) {
      hasAnyValues = true;
      internalValueResult.operation = this._operation;
    }
    if (this._value !== undefined) {
      hasAnyValues = true;
      internalValueResult.value = this._value;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesELASTICSEARCHTags | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._name = undefined;
      this._operation = undefined;
      this._value = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._name = value.name;
      this._operation = value.operation;
      this._value = value.value;
    }
  }

  // name - computed: false, optional: true, required: false
  private _name?: string; 
  public get name() {
    return this.getStringAttribute('name');
  }
  public set name(value: string) {
    this._name = value;
  }
  public resetName() {
    this._name = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get nameInput() {
    return this._name;
  }

  // operation - computed: false, optional: true, required: false
  private _operation?: string; 
  public get operation() {
    return this.getStringAttribute('operation');
  }
  public set operation(value: string) {
    this._operation = value;
  }
  public resetOperation() {
    this._operation = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get operationInput() {
    return this._operation;
  }

  // value - computed: false, optional: true, required: false
  private _value?: string; 
  public get value() {
    return this.getStringAttribute('value');
  }
  public set value(value: string) {
    this._value = value;
  }
  public resetValue() {
    this._value = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get valueInput() {
    return this._value;
  }
}

export class DeviceGroupExtraServicesELASTICSEARCHTagsList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesELASTICSEARCHTags[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesELASTICSEARCHTagsOutputReference {
    return new DeviceGroupExtraServicesELASTICSEARCHTagsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesELASTICSEARCHNormalCollectorConfigCollectors {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#applies_to DeviceGroup#applies_to}
  */
  readonly appliesTo?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#auto_balanced_collector_group_id DeviceGroup#auto_balanced_collector_group_id}
  */
  readonly autoBalancedCollectorGroupId?: number;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#collector_id DeviceGroup#collector_id}
  */
  readonly collectorId?: number;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#priority DeviceGroup#priority}
  */
  readonly priority?: number;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#use_public_ip DeviceGroup#use_public_ip}
  */
  readonly usePublicIp?: boolean | cdktf.IResolvable;
}

export function deviceGroupExtraServicesELASTICSEARCHNormalCollectorConfigCollectorsToTerraform(struct?: DeviceGroupExtraServicesELASTICSEARCHNormalCollectorConfigCollectors | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    applies_to: cdktf.stringToTerraform(struct!.appliesTo),
    auto_balanced_collector_group_id: cdktf.numberToTerraform(struct!.autoBalancedCollectorGroupId),
    collector_id: cdktf.numberToTerraform(struct!.collectorId),
    priority: cdktf.numberToTerraform(struct!.priority),
    use_public_ip: cdktf.booleanToTerraform(struct!.usePublicIp),
  }
}


export function deviceGroupExtraServicesELASTICSEARCHNormalCollectorConfigCollectorsToHclTerraform(struct?: DeviceGroupExtraServicesELASTICSEARCHNormalCollectorConfigCollectors | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    applies_to: {
      value: cdktf.stringToHclTerraform(struct!.appliesTo),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    auto_balanced_collector_group_id: {
      value: cdktf.numberToHclTerraform(struct!.autoBalancedCollectorGroupId),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    collector_id: {
      value: cdktf.numberToHclTerraform(struct!.collectorId),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    priority: {
      value: cdktf.numberToHclTerraform(struct!.priority),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    use_public_ip: {
      value: cdktf.booleanToHclTerraform(struct!.usePublicIp),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesELASTICSEARCHNormalCollectorConfigCollectorsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesELASTICSEARCHNormalCollectorConfigCollectors | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._appliesTo !== undefined) {
      hasAnyValues = true;
      internalValueResult.appliesTo = this._appliesTo;
    }
    if (this._autoBalancedCollectorGroupId !== undefined) {
      hasAnyValues = true;
      internalValueResult.autoBalancedCollectorGroupId = this._autoBalancedCollectorGroupId;
    }
    if (this._collectorId !== undefined) {
      hasAnyValues = true;
      internalValueResult.collectorId = this._collectorId;
    }
    if (this._priority !== undefined) {
      hasAnyValues = true;
      internalValueResult.priority = this._priority;
    }
    if (this._usePublicIp !== undefined) {
      hasAnyValues = true;
      internalValueResult.usePublicIp = this._usePublicIp;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesELASTICSEARCHNormalCollectorConfigCollectors | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._appliesTo = undefined;
      this._autoBalancedCollectorGroupId = undefined;
      this._collectorId = undefined;
      this._priority = undefined;
      this._usePublicIp = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._appliesTo = value.appliesTo;
      this._autoBalancedCollectorGroupId = value.autoBalancedCollectorGroupId;
      this._collectorId = value.collectorId;
      this._priority = value.priority;
      this._usePublicIp = value.usePublicIp;
    }
  }

  // applies_to - computed: false, optional: true, required: false
  private _appliesTo?: string; 
  public get appliesTo() {
    return this.getStringAttribute('applies_to');
  }
  public set appliesTo(value: string) {
    this._appliesTo = value;
  }
  public resetAppliesTo() {
    this._appliesTo = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get appliesToInput() {
    return this._appliesTo;
  }

  // auto_balanced_collector_group_id - computed: false, optional: true, required: false
  private _autoBalancedCollectorGroupId?: number; 
  public get autoBalancedCollectorGroupId() {
    return this.getNumberAttribute('auto_balanced_collector_group_id');
  }
  public set autoBalancedCollectorGroupId(value: number) {
    this._autoBalancedCollectorGroupId = value;
  }
  public resetAutoBalancedCollectorGroupId() {
    this._autoBalancedCollectorGroupId = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get autoBalancedCollectorGroupIdInput() {
    return this._autoBalancedCollectorGroupId;
  }

  // collector_id - computed: false, optional: true, required: false
  private _collectorId?: number; 
  public get collectorId() {
    return this.getNumberAttribute('collector_id');
  }
  public set collectorId(value: number) {
    this._collectorId = value;
  }
  public resetCollectorId() {
    this._collectorId = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get collectorIdInput() {
    return this._collectorId;
  }

  // priority - computed: false, optional: true, required: false
  private _priority?: number; 
  public get priority() {
    return this.getNumberAttribute('priority');
  }
  public set priority(value: number) {
    this._priority = value;
  }
  public resetPriority() {
    this._priority = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get priorityInput() {
    return this._priority;
  }

  // use_public_ip - computed: false, optional: true, required: false
  private _usePublicIp?: boolean | cdktf.IResolvable; 
  public get usePublicIp() {
    return this.getBooleanAttribute('use_public_ip');
  }
  public set usePublicIp(value: boolean | cdktf.IResolvable) {
    this._usePublicIp = value;
  }
  public resetUsePublicIp() {
    this._usePublicIp = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get usePublicIpInput() {
    return this._usePublicIp;
  }
}

export class DeviceGroupExtraServicesELASTICSEARCHNormalCollectorConfigCollectorsList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesELASTICSEARCHNormalCollectorConfigCollectors[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesELASTICSEARCHNormalCollectorConfigCollectorsOutputReference {
    return new DeviceGroupExtraServicesELASTICSEARCHNormalCollectorConfigCollectorsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesELASTICSEARCHNormalCollectorConfig {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#collectors DeviceGroup#collectors}
  */
  readonly collectors?: DeviceGroupExtraServicesELASTICSEARCHNormalCollectorConfigCollectors[] | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#enabled DeviceGroup#enabled}
  */
  readonly enabled: boolean | cdktf.IResolvable;
}

export function deviceGroupExtraServicesELASTICSEARCHNormalCollectorConfigToTerraform(struct?: DeviceGroupExtraServicesELASTICSEARCHNormalCollectorConfig | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    collectors: cdktf.listMapper(deviceGroupExtraServicesELASTICSEARCHNormalCollectorConfigCollectorsToTerraform, false)(struct!.collectors),
    enabled: cdktf.booleanToTerraform(struct!.enabled),
  }
}


export function deviceGroupExtraServicesELASTICSEARCHNormalCollectorConfigToHclTerraform(struct?: DeviceGroupExtraServicesELASTICSEARCHNormalCollectorConfig | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    collectors: {
      value: cdktf.listMapperHcl(deviceGroupExtraServicesELASTICSEARCHNormalCollectorConfigCollectorsToHclTerraform, false)(struct!.collectors),
      isBlock: true,
      type: "list",
      storageClassType: "DeviceGroupExtraServicesELASTICSEARCHNormalCollectorConfigCollectorsList",
    },
    enabled: {
      value: cdktf.booleanToHclTerraform(struct!.enabled),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesELASTICSEARCHNormalCollectorConfigOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesELASTICSEARCHNormalCollectorConfig | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._collectors?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.collectors = this._collectors?.internalValue;
    }
    if (this._enabled !== undefined) {
      hasAnyValues = true;
      internalValueResult.enabled = this._enabled;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesELASTICSEARCHNormalCollectorConfig | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._collectors.internalValue = undefined;
      this._enabled = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._collectors.internalValue = value.collectors;
      this._enabled = value.enabled;
    }
  }

  // collectors - computed: false, optional: true, required: false
  private _collectors = new DeviceGroupExtraServicesELASTICSEARCHNormalCollectorConfigCollectorsList(this, "collectors", false);
  public get collectors() {
    return this._collectors;
  }
  public putCollectors(value: DeviceGroupExtraServicesELASTICSEARCHNormalCollectorConfigCollectors[] | cdktf.IResolvable) {
    this._collectors.internalValue = value;
  }
  public resetCollectors() {
    this._collectors.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get collectorsInput() {
    return this._collectors.internalValue;
  }

  // enabled - computed: false, optional: false, required: true
  private _enabled?: boolean | cdktf.IResolvable; 
  public get enabled() {
    return this.getBooleanAttribute('enabled');
  }
  public set enabled(value: boolean | cdktf.IResolvable) {
    this._enabled = value;
  }
  // Temporarily expose input value. Use with caution.
  public get enabledInput() {
    return this._enabled;
  }
}

export class DeviceGroupExtraServicesELASTICSEARCHNormalCollectorConfigList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesELASTICSEARCHNormalCollectorConfig[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesELASTICSEARCHNormalCollectorConfigOutputReference {
    return new DeviceGroupExtraServicesELASTICSEARCHNormalCollectorConfigOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesELASTICSEARCH {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#custom_n_s_p_schedule DeviceGroup#custom_n_s_p_schedule}
  */
  readonly customNSPSchedule?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#dead_operation DeviceGroup#dead_operation}
  */
  readonly deadOperation?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#device_display_name_template DeviceGroup#device_display_name_template}
  */
  readonly deviceDisplayNameTemplate?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#disable_stop_terminate_host_monitor DeviceGroup#disable_stop_terminate_host_monitor}
  */
  readonly disableStopTerminateHostMonitor?: boolean | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#disable_terminated_host_alerting DeviceGroup#disable_terminated_host_alerting}
  */
  readonly disableTerminatedHostAlerting?: boolean | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#monitoring_region_infos DeviceGroup#monitoring_region_infos}
  */
  readonly monitoringRegionInfos?: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#monitoring_regions DeviceGroup#monitoring_regions}
  */
  readonly monitoringRegions?: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#name_filter DeviceGroup#name_filter}
  */
  readonly nameFilter?: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#select_all DeviceGroup#select_all}
  */
  readonly selectAll?: boolean | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#tags DeviceGroup#tags}
  */
  readonly tags?: DeviceGroupExtraServicesELASTICSEARCHTags[] | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#use_default DeviceGroup#use_default}
  */
  readonly useDefault: boolean | cdktf.IResolvable;
  /**
  * normal_collector_config block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#normal_collector_config DeviceGroup#normal_collector_config}
  */
  readonly normalCollectorConfig?: DeviceGroupExtraServicesELASTICSEARCHNormalCollectorConfig[] | cdktf.IResolvable;
}

export function deviceGroupExtraServicesELASTICSEARCHToTerraform(struct?: DeviceGroupExtraServicesELASTICSEARCH | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    custom_n_s_p_schedule: cdktf.stringToTerraform(struct!.customNSPSchedule),
    dead_operation: cdktf.stringToTerraform(struct!.deadOperation),
    device_display_name_template: cdktf.stringToTerraform(struct!.deviceDisplayNameTemplate),
    disable_stop_terminate_host_monitor: cdktf.booleanToTerraform(struct!.disableStopTerminateHostMonitor),
    disable_terminated_host_alerting: cdktf.booleanToTerraform(struct!.disableTerminatedHostAlerting),
    monitoring_region_infos: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.monitoringRegionInfos),
    monitoring_regions: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.monitoringRegions),
    name_filter: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.nameFilter),
    select_all: cdktf.booleanToTerraform(struct!.selectAll),
    tags: cdktf.listMapper(deviceGroupExtraServicesELASTICSEARCHTagsToTerraform, false)(struct!.tags),
    use_default: cdktf.booleanToTerraform(struct!.useDefault),
    normal_collector_config: cdktf.listMapper(deviceGroupExtraServicesELASTICSEARCHNormalCollectorConfigToTerraform, true)(struct!.normalCollectorConfig),
  }
}


export function deviceGroupExtraServicesELASTICSEARCHToHclTerraform(struct?: DeviceGroupExtraServicesELASTICSEARCH | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    custom_n_s_p_schedule: {
      value: cdktf.stringToHclTerraform(struct!.customNSPSchedule),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    dead_operation: {
      value: cdktf.stringToHclTerraform(struct!.deadOperation),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    device_display_name_template: {
      value: cdktf.stringToHclTerraform(struct!.deviceDisplayNameTemplate),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    disable_stop_terminate_host_monitor: {
      value: cdktf.booleanToHclTerraform(struct!.disableStopTerminateHostMonitor),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    disable_terminated_host_alerting: {
      value: cdktf.booleanToHclTerraform(struct!.disableTerminatedHostAlerting),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    monitoring_region_infos: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.monitoringRegionInfos),
      isBlock: false,
      type: "set",
      storageClassType: "stringList",
    },
    monitoring_regions: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.monitoringRegions),
      isBlock: false,
      type: "set",
      storageClassType: "stringList",
    },
    name_filter: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.nameFilter),
      isBlock: false,
      type: "set",
      storageClassType: "stringList",
    },
    select_all: {
      value: cdktf.booleanToHclTerraform(struct!.selectAll),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    tags: {
      value: cdktf.listMapperHcl(deviceGroupExtraServicesELASTICSEARCHTagsToHclTerraform, false)(struct!.tags),
      isBlock: true,
      type: "list",
      storageClassType: "DeviceGroupExtraServicesELASTICSEARCHTagsList",
    },
    use_default: {
      value: cdktf.booleanToHclTerraform(struct!.useDefault),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    normal_collector_config: {
      value: cdktf.listMapperHcl(deviceGroupExtraServicesELASTICSEARCHNormalCollectorConfigToHclTerraform, true)(struct!.normalCollectorConfig),
      isBlock: true,
      type: "list",
      storageClassType: "DeviceGroupExtraServicesELASTICSEARCHNormalCollectorConfigList",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesELASTICSEARCHOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesELASTICSEARCH | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._customNSPSchedule !== undefined) {
      hasAnyValues = true;
      internalValueResult.customNSPSchedule = this._customNSPSchedule;
    }
    if (this._deadOperation !== undefined) {
      hasAnyValues = true;
      internalValueResult.deadOperation = this._deadOperation;
    }
    if (this._deviceDisplayNameTemplate !== undefined) {
      hasAnyValues = true;
      internalValueResult.deviceDisplayNameTemplate = this._deviceDisplayNameTemplate;
    }
    if (this._disableStopTerminateHostMonitor !== undefined) {
      hasAnyValues = true;
      internalValueResult.disableStopTerminateHostMonitor = this._disableStopTerminateHostMonitor;
    }
    if (this._disableTerminatedHostAlerting !== undefined) {
      hasAnyValues = true;
      internalValueResult.disableTerminatedHostAlerting = this._disableTerminatedHostAlerting;
    }
    if (this._monitoringRegionInfos !== undefined) {
      hasAnyValues = true;
      internalValueResult.monitoringRegionInfos = this._monitoringRegionInfos;
    }
    if (this._monitoringRegions !== undefined) {
      hasAnyValues = true;
      internalValueResult.monitoringRegions = this._monitoringRegions;
    }
    if (this._nameFilter !== undefined) {
      hasAnyValues = true;
      internalValueResult.nameFilter = this._nameFilter;
    }
    if (this._selectAll !== undefined) {
      hasAnyValues = true;
      internalValueResult.selectAll = this._selectAll;
    }
    if (this._tags?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.tags = this._tags?.internalValue;
    }
    if (this._useDefault !== undefined) {
      hasAnyValues = true;
      internalValueResult.useDefault = this._useDefault;
    }
    if (this._normalCollectorConfig?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.normalCollectorConfig = this._normalCollectorConfig?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesELASTICSEARCH | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._customNSPSchedule = undefined;
      this._deadOperation = undefined;
      this._deviceDisplayNameTemplate = undefined;
      this._disableStopTerminateHostMonitor = undefined;
      this._disableTerminatedHostAlerting = undefined;
      this._monitoringRegionInfos = undefined;
      this._monitoringRegions = undefined;
      this._nameFilter = undefined;
      this._selectAll = undefined;
      this._tags.internalValue = undefined;
      this._useDefault = undefined;
      this._normalCollectorConfig.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._customNSPSchedule = value.customNSPSchedule;
      this._deadOperation = value.deadOperation;
      this._deviceDisplayNameTemplate = value.deviceDisplayNameTemplate;
      this._disableStopTerminateHostMonitor = value.disableStopTerminateHostMonitor;
      this._disableTerminatedHostAlerting = value.disableTerminatedHostAlerting;
      this._monitoringRegionInfos = value.monitoringRegionInfos;
      this._monitoringRegions = value.monitoringRegions;
      this._nameFilter = value.nameFilter;
      this._selectAll = value.selectAll;
      this._tags.internalValue = value.tags;
      this._useDefault = value.useDefault;
      this._normalCollectorConfig.internalValue = value.normalCollectorConfig;
    }
  }

  // custom_n_s_p_schedule - computed: false, optional: true, required: false
  private _customNSPSchedule?: string; 
  public get customNSPSchedule() {
    return this.getStringAttribute('custom_n_s_p_schedule');
  }
  public set customNSPSchedule(value: string) {
    this._customNSPSchedule = value;
  }
  public resetCustomNSPSchedule() {
    this._customNSPSchedule = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get customNSPScheduleInput() {
    return this._customNSPSchedule;
  }

  // dead_operation - computed: false, optional: true, required: false
  private _deadOperation?: string; 
  public get deadOperation() {
    return this.getStringAttribute('dead_operation');
  }
  public set deadOperation(value: string) {
    this._deadOperation = value;
  }
  public resetDeadOperation() {
    this._deadOperation = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get deadOperationInput() {
    return this._deadOperation;
  }

  // device_display_name_template - computed: false, optional: true, required: false
  private _deviceDisplayNameTemplate?: string; 
  public get deviceDisplayNameTemplate() {
    return this.getStringAttribute('device_display_name_template');
  }
  public set deviceDisplayNameTemplate(value: string) {
    this._deviceDisplayNameTemplate = value;
  }
  public resetDeviceDisplayNameTemplate() {
    this._deviceDisplayNameTemplate = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get deviceDisplayNameTemplateInput() {
    return this._deviceDisplayNameTemplate;
  }

  // disable_stop_terminate_host_monitor - computed: false, optional: true, required: false
  private _disableStopTerminateHostMonitor?: boolean | cdktf.IResolvable; 
  public get disableStopTerminateHostMonitor() {
    return this.getBooleanAttribute('disable_stop_terminate_host_monitor');
  }
  public set disableStopTerminateHostMonitor(value: boolean | cdktf.IResolvable) {
    this._disableStopTerminateHostMonitor = value;
  }
  public resetDisableStopTerminateHostMonitor() {
    this._disableStopTerminateHostMonitor = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get disableStopTerminateHostMonitorInput() {
    return this._disableStopTerminateHostMonitor;
  }

  // disable_terminated_host_alerting - computed: false, optional: true, required: false
  private _disableTerminatedHostAlerting?: boolean | cdktf.IResolvable; 
  public get disableTerminatedHostAlerting() {
    return this.getBooleanAttribute('disable_terminated_host_alerting');
  }
  public set disableTerminatedHostAlerting(value: boolean | cdktf.IResolvable) {
    this._disableTerminatedHostAlerting = value;
  }
  public resetDisableTerminatedHostAlerting() {
    this._disableTerminatedHostAlerting = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get disableTerminatedHostAlertingInput() {
    return this._disableTerminatedHostAlerting;
  }

  // monitoring_region_infos - computed: false, optional: true, required: false
  private _monitoringRegionInfos?: string[]; 
  public get monitoringRegionInfos() {
    return cdktf.Fn.tolist(this.getListAttribute('monitoring_region_infos'));
  }
  public set monitoringRegionInfos(value: string[]) {
    this._monitoringRegionInfos = value;
  }
  public resetMonitoringRegionInfos() {
    this._monitoringRegionInfos = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get monitoringRegionInfosInput() {
    return this._monitoringRegionInfos;
  }

  // monitoring_regions - computed: false, optional: true, required: false
  private _monitoringRegions?: string[]; 
  public get monitoringRegions() {
    return cdktf.Fn.tolist(this.getListAttribute('monitoring_regions'));
  }
  public set monitoringRegions(value: string[]) {
    this._monitoringRegions = value;
  }
  public resetMonitoringRegions() {
    this._monitoringRegions = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get monitoringRegionsInput() {
    return this._monitoringRegions;
  }

  // name_filter - computed: false, optional: true, required: false
  private _nameFilter?: string[]; 
  public get nameFilter() {
    return cdktf.Fn.tolist(this.getListAttribute('name_filter'));
  }
  public set nameFilter(value: string[]) {
    this._nameFilter = value;
  }
  public resetNameFilter() {
    this._nameFilter = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get nameFilterInput() {
    return this._nameFilter;
  }

  // select_all - computed: false, optional: true, required: false
  private _selectAll?: boolean | cdktf.IResolvable; 
  public get selectAll() {
    return this.getBooleanAttribute('select_all');
  }
  public set selectAll(value: boolean | cdktf.IResolvable) {
    this._selectAll = value;
  }
  public resetSelectAll() {
    this._selectAll = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get selectAllInput() {
    return this._selectAll;
  }

  // tags - computed: false, optional: true, required: false
  private _tags = new DeviceGroupExtraServicesELASTICSEARCHTagsList(this, "tags", false);
  public get tags() {
    return this._tags;
  }
  public putTags(value: DeviceGroupExtraServicesELASTICSEARCHTags[] | cdktf.IResolvable) {
    this._tags.internalValue = value;
  }
  public resetTags() {
    this._tags.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get tagsInput() {
    return this._tags.internalValue;
  }

  // use_default - computed: false, optional: false, required: true
  private _useDefault?: boolean | cdktf.IResolvable; 
  public get useDefault() {
    return this.getBooleanAttribute('use_default');
  }
  public set useDefault(value: boolean | cdktf.IResolvable) {
    this._useDefault = value;
  }
  // Temporarily expose input value. Use with caution.
  public get useDefaultInput() {
    return this._useDefault;
  }

  // normal_collector_config - computed: false, optional: true, required: false
  private _normalCollectorConfig = new DeviceGroupExtraServicesELASTICSEARCHNormalCollectorConfigList(this, "normal_collector_config", false);
  public get normalCollectorConfig() {
    return this._normalCollectorConfig;
  }
  public putNormalCollectorConfig(value: DeviceGroupExtraServicesELASTICSEARCHNormalCollectorConfig[] | cdktf.IResolvable) {
    this._normalCollectorConfig.internalValue = value;
  }
  public resetNormalCollectorConfig() {
    this._normalCollectorConfig.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get normalCollectorConfigInput() {
    return this._normalCollectorConfig.internalValue;
  }
}

export class DeviceGroupExtraServicesELASTICSEARCHList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesELASTICSEARCH[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesELASTICSEARCHOutputReference {
    return new DeviceGroupExtraServicesELASTICSEARCHOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesELASTICTRANSCODERTags {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#name DeviceGroup#name}
  */
  readonly name?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#operation DeviceGroup#operation}
  */
  readonly operation?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#value DeviceGroup#value}
  */
  readonly value?: string;
}

export function deviceGroupExtraServicesELASTICTRANSCODERTagsToTerraform(struct?: DeviceGroupExtraServicesELASTICTRANSCODERTags | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    name: cdktf.stringToTerraform(struct!.name),
    operation: cdktf.stringToTerraform(struct!.operation),
    value: cdktf.stringToTerraform(struct!.value),
  }
}


export function deviceGroupExtraServicesELASTICTRANSCODERTagsToHclTerraform(struct?: DeviceGroupExtraServicesELASTICTRANSCODERTags | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    name: {
      value: cdktf.stringToHclTerraform(struct!.name),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    operation: {
      value: cdktf.stringToHclTerraform(struct!.operation),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    value: {
      value: cdktf.stringToHclTerraform(struct!.value),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesELASTICTRANSCODERTagsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesELASTICTRANSCODERTags | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._name !== undefined) {
      hasAnyValues = true;
      internalValueResult.name = this._name;
    }
    if (this._operation !== undefined) {
      hasAnyValues = true;
      internalValueResult.operation = this._operation;
    }
    if (this._value !== undefined) {
      hasAnyValues = true;
      internalValueResult.value = this._value;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesELASTICTRANSCODERTags | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._name = undefined;
      this._operation = undefined;
      this._value = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._name = value.name;
      this._operation = value.operation;
      this._value = value.value;
    }
  }

  // name - computed: false, optional: true, required: false
  private _name?: string; 
  public get name() {
    return this.getStringAttribute('name');
  }
  public set name(value: string) {
    this._name = value;
  }
  public resetName() {
    this._name = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get nameInput() {
    return this._name;
  }

  // operation - computed: false, optional: true, required: false
  private _operation?: string; 
  public get operation() {
    return this.getStringAttribute('operation');
  }
  public set operation(value: string) {
    this._operation = value;
  }
  public resetOperation() {
    this._operation = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get operationInput() {
    return this._operation;
  }

  // value - computed: false, optional: true, required: false
  private _value?: string; 
  public get value() {
    return this.getStringAttribute('value');
  }
  public set value(value: string) {
    this._value = value;
  }
  public resetValue() {
    this._value = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get valueInput() {
    return this._value;
  }
}

export class DeviceGroupExtraServicesELASTICTRANSCODERTagsList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesELASTICTRANSCODERTags[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesELASTICTRANSCODERTagsOutputReference {
    return new DeviceGroupExtraServicesELASTICTRANSCODERTagsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesELASTICTRANSCODERNormalCollectorConfigCollectors {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#applies_to DeviceGroup#applies_to}
  */
  readonly appliesTo?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#auto_balanced_collector_group_id DeviceGroup#auto_balanced_collector_group_id}
  */
  readonly autoBalancedCollectorGroupId?: number;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#collector_id DeviceGroup#collector_id}
  */
  readonly collectorId?: number;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#priority DeviceGroup#priority}
  */
  readonly priority?: number;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#use_public_ip DeviceGroup#use_public_ip}
  */
  readonly usePublicIp?: boolean | cdktf.IResolvable;
}

export function deviceGroupExtraServicesELASTICTRANSCODERNormalCollectorConfigCollectorsToTerraform(struct?: DeviceGroupExtraServicesELASTICTRANSCODERNormalCollectorConfigCollectors | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    applies_to: cdktf.stringToTerraform(struct!.appliesTo),
    auto_balanced_collector_group_id: cdktf.numberToTerraform(struct!.autoBalancedCollectorGroupId),
    collector_id: cdktf.numberToTerraform(struct!.collectorId),
    priority: cdktf.numberToTerraform(struct!.priority),
    use_public_ip: cdktf.booleanToTerraform(struct!.usePublicIp),
  }
}


export function deviceGroupExtraServicesELASTICTRANSCODERNormalCollectorConfigCollectorsToHclTerraform(struct?: DeviceGroupExtraServicesELASTICTRANSCODERNormalCollectorConfigCollectors | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    applies_to: {
      value: cdktf.stringToHclTerraform(struct!.appliesTo),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    auto_balanced_collector_group_id: {
      value: cdktf.numberToHclTerraform(struct!.autoBalancedCollectorGroupId),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    collector_id: {
      value: cdktf.numberToHclTerraform(struct!.collectorId),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    priority: {
      value: cdktf.numberToHclTerraform(struct!.priority),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    use_public_ip: {
      value: cdktf.booleanToHclTerraform(struct!.usePublicIp),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesELASTICTRANSCODERNormalCollectorConfigCollectorsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesELASTICTRANSCODERNormalCollectorConfigCollectors | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._appliesTo !== undefined) {
      hasAnyValues = true;
      internalValueResult.appliesTo = this._appliesTo;
    }
    if (this._autoBalancedCollectorGroupId !== undefined) {
      hasAnyValues = true;
      internalValueResult.autoBalancedCollectorGroupId = this._autoBalancedCollectorGroupId;
    }
    if (this._collectorId !== undefined) {
      hasAnyValues = true;
      internalValueResult.collectorId = this._collectorId;
    }
    if (this._priority !== undefined) {
      hasAnyValues = true;
      internalValueResult.priority = this._priority;
    }
    if (this._usePublicIp !== undefined) {
      hasAnyValues = true;
      internalValueResult.usePublicIp = this._usePublicIp;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesELASTICTRANSCODERNormalCollectorConfigCollectors | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._appliesTo = undefined;
      this._autoBalancedCollectorGroupId = undefined;
      this._collectorId = undefined;
      this._priority = undefined;
      this._usePublicIp = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._appliesTo = value.appliesTo;
      this._autoBalancedCollectorGroupId = value.autoBalancedCollectorGroupId;
      this._collectorId = value.collectorId;
      this._priority = value.priority;
      this._usePublicIp = value.usePublicIp;
    }
  }

  // applies_to - computed: false, optional: true, required: false
  private _appliesTo?: string; 
  public get appliesTo() {
    return this.getStringAttribute('applies_to');
  }
  public set appliesTo(value: string) {
    this._appliesTo = value;
  }
  public resetAppliesTo() {
    this._appliesTo = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get appliesToInput() {
    return this._appliesTo;
  }

  // auto_balanced_collector_group_id - computed: false, optional: true, required: false
  private _autoBalancedCollectorGroupId?: number; 
  public get autoBalancedCollectorGroupId() {
    return this.getNumberAttribute('auto_balanced_collector_group_id');
  }
  public set autoBalancedCollectorGroupId(value: number) {
    this._autoBalancedCollectorGroupId = value;
  }
  public resetAutoBalancedCollectorGroupId() {
    this._autoBalancedCollectorGroupId = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get autoBalancedCollectorGroupIdInput() {
    return this._autoBalancedCollectorGroupId;
  }

  // collector_id - computed: false, optional: true, required: false
  private _collectorId?: number; 
  public get collectorId() {
    return this.getNumberAttribute('collector_id');
  }
  public set collectorId(value: number) {
    this._collectorId = value;
  }
  public resetCollectorId() {
    this._collectorId = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get collectorIdInput() {
    return this._collectorId;
  }

  // priority - computed: false, optional: true, required: false
  private _priority?: number; 
  public get priority() {
    return this.getNumberAttribute('priority');
  }
  public set priority(value: number) {
    this._priority = value;
  }
  public resetPriority() {
    this._priority = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get priorityInput() {
    return this._priority;
  }

  // use_public_ip - computed: false, optional: true, required: false
  private _usePublicIp?: boolean | cdktf.IResolvable; 
  public get usePublicIp() {
    return this.getBooleanAttribute('use_public_ip');
  }
  public set usePublicIp(value: boolean | cdktf.IResolvable) {
    this._usePublicIp = value;
  }
  public resetUsePublicIp() {
    this._usePublicIp = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get usePublicIpInput() {
    return this._usePublicIp;
  }
}

export class DeviceGroupExtraServicesELASTICTRANSCODERNormalCollectorConfigCollectorsList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesELASTICTRANSCODERNormalCollectorConfigCollectors[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesELASTICTRANSCODERNormalCollectorConfigCollectorsOutputReference {
    return new DeviceGroupExtraServicesELASTICTRANSCODERNormalCollectorConfigCollectorsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesELASTICTRANSCODERNormalCollectorConfig {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#collectors DeviceGroup#collectors}
  */
  readonly collectors?: DeviceGroupExtraServicesELASTICTRANSCODERNormalCollectorConfigCollectors[] | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#enabled DeviceGroup#enabled}
  */
  readonly enabled: boolean | cdktf.IResolvable;
}

export function deviceGroupExtraServicesELASTICTRANSCODERNormalCollectorConfigToTerraform(struct?: DeviceGroupExtraServicesELASTICTRANSCODERNormalCollectorConfig | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    collectors: cdktf.listMapper(deviceGroupExtraServicesELASTICTRANSCODERNormalCollectorConfigCollectorsToTerraform, false)(struct!.collectors),
    enabled: cdktf.booleanToTerraform(struct!.enabled),
  }
}


export function deviceGroupExtraServicesELASTICTRANSCODERNormalCollectorConfigToHclTerraform(struct?: DeviceGroupExtraServicesELASTICTRANSCODERNormalCollectorConfig | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    collectors: {
      value: cdktf.listMapperHcl(deviceGroupExtraServicesELASTICTRANSCODERNormalCollectorConfigCollectorsToHclTerraform, false)(struct!.collectors),
      isBlock: true,
      type: "list",
      storageClassType: "DeviceGroupExtraServicesELASTICTRANSCODERNormalCollectorConfigCollectorsList",
    },
    enabled: {
      value: cdktf.booleanToHclTerraform(struct!.enabled),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesELASTICTRANSCODERNormalCollectorConfigOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesELASTICTRANSCODERNormalCollectorConfig | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._collectors?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.collectors = this._collectors?.internalValue;
    }
    if (this._enabled !== undefined) {
      hasAnyValues = true;
      internalValueResult.enabled = this._enabled;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesELASTICTRANSCODERNormalCollectorConfig | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._collectors.internalValue = undefined;
      this._enabled = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._collectors.internalValue = value.collectors;
      this._enabled = value.enabled;
    }
  }

  // collectors - computed: false, optional: true, required: false
  private _collectors = new DeviceGroupExtraServicesELASTICTRANSCODERNormalCollectorConfigCollectorsList(this, "collectors", false);
  public get collectors() {
    return this._collectors;
  }
  public putCollectors(value: DeviceGroupExtraServicesELASTICTRANSCODERNormalCollectorConfigCollectors[] | cdktf.IResolvable) {
    this._collectors.internalValue = value;
  }
  public resetCollectors() {
    this._collectors.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get collectorsInput() {
    return this._collectors.internalValue;
  }

  // enabled - computed: false, optional: false, required: true
  private _enabled?: boolean | cdktf.IResolvable; 
  public get enabled() {
    return this.getBooleanAttribute('enabled');
  }
  public set enabled(value: boolean | cdktf.IResolvable) {
    this._enabled = value;
  }
  // Temporarily expose input value. Use with caution.
  public get enabledInput() {
    return this._enabled;
  }
}

export class DeviceGroupExtraServicesELASTICTRANSCODERNormalCollectorConfigList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesELASTICTRANSCODERNormalCollectorConfig[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesELASTICTRANSCODERNormalCollectorConfigOutputReference {
    return new DeviceGroupExtraServicesELASTICTRANSCODERNormalCollectorConfigOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesELASTICTRANSCODER {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#custom_n_s_p_schedule DeviceGroup#custom_n_s_p_schedule}
  */
  readonly customNSPSchedule?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#dead_operation DeviceGroup#dead_operation}
  */
  readonly deadOperation?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#device_display_name_template DeviceGroup#device_display_name_template}
  */
  readonly deviceDisplayNameTemplate?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#disable_stop_terminate_host_monitor DeviceGroup#disable_stop_terminate_host_monitor}
  */
  readonly disableStopTerminateHostMonitor?: boolean | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#disable_terminated_host_alerting DeviceGroup#disable_terminated_host_alerting}
  */
  readonly disableTerminatedHostAlerting?: boolean | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#monitoring_region_infos DeviceGroup#monitoring_region_infos}
  */
  readonly monitoringRegionInfos?: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#monitoring_regions DeviceGroup#monitoring_regions}
  */
  readonly monitoringRegions?: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#name_filter DeviceGroup#name_filter}
  */
  readonly nameFilter?: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#select_all DeviceGroup#select_all}
  */
  readonly selectAll?: boolean | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#tags DeviceGroup#tags}
  */
  readonly tags?: DeviceGroupExtraServicesELASTICTRANSCODERTags[] | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#use_default DeviceGroup#use_default}
  */
  readonly useDefault: boolean | cdktf.IResolvable;
  /**
  * normal_collector_config block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#normal_collector_config DeviceGroup#normal_collector_config}
  */
  readonly normalCollectorConfig?: DeviceGroupExtraServicesELASTICTRANSCODERNormalCollectorConfig[] | cdktf.IResolvable;
}

export function deviceGroupExtraServicesELASTICTRANSCODERToTerraform(struct?: DeviceGroupExtraServicesELASTICTRANSCODER | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    custom_n_s_p_schedule: cdktf.stringToTerraform(struct!.customNSPSchedule),
    dead_operation: cdktf.stringToTerraform(struct!.deadOperation),
    device_display_name_template: cdktf.stringToTerraform(struct!.deviceDisplayNameTemplate),
    disable_stop_terminate_host_monitor: cdktf.booleanToTerraform(struct!.disableStopTerminateHostMonitor),
    disable_terminated_host_alerting: cdktf.booleanToTerraform(struct!.disableTerminatedHostAlerting),
    monitoring_region_infos: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.monitoringRegionInfos),
    monitoring_regions: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.monitoringRegions),
    name_filter: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.nameFilter),
    select_all: cdktf.booleanToTerraform(struct!.selectAll),
    tags: cdktf.listMapper(deviceGroupExtraServicesELASTICTRANSCODERTagsToTerraform, false)(struct!.tags),
    use_default: cdktf.booleanToTerraform(struct!.useDefault),
    normal_collector_config: cdktf.listMapper(deviceGroupExtraServicesELASTICTRANSCODERNormalCollectorConfigToTerraform, true)(struct!.normalCollectorConfig),
  }
}


export function deviceGroupExtraServicesELASTICTRANSCODERToHclTerraform(struct?: DeviceGroupExtraServicesELASTICTRANSCODER | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    custom_n_s_p_schedule: {
      value: cdktf.stringToHclTerraform(struct!.customNSPSchedule),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    dead_operation: {
      value: cdktf.stringToHclTerraform(struct!.deadOperation),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    device_display_name_template: {
      value: cdktf.stringToHclTerraform(struct!.deviceDisplayNameTemplate),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    disable_stop_terminate_host_monitor: {
      value: cdktf.booleanToHclTerraform(struct!.disableStopTerminateHostMonitor),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    disable_terminated_host_alerting: {
      value: cdktf.booleanToHclTerraform(struct!.disableTerminatedHostAlerting),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    monitoring_region_infos: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.monitoringRegionInfos),
      isBlock: false,
      type: "set",
      storageClassType: "stringList",
    },
    monitoring_regions: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.monitoringRegions),
      isBlock: false,
      type: "set",
      storageClassType: "stringList",
    },
    name_filter: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.nameFilter),
      isBlock: false,
      type: "set",
      storageClassType: "stringList",
    },
    select_all: {
      value: cdktf.booleanToHclTerraform(struct!.selectAll),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    tags: {
      value: cdktf.listMapperHcl(deviceGroupExtraServicesELASTICTRANSCODERTagsToHclTerraform, false)(struct!.tags),
      isBlock: true,
      type: "list",
      storageClassType: "DeviceGroupExtraServicesELASTICTRANSCODERTagsList",
    },
    use_default: {
      value: cdktf.booleanToHclTerraform(struct!.useDefault),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    normal_collector_config: {
      value: cdktf.listMapperHcl(deviceGroupExtraServicesELASTICTRANSCODERNormalCollectorConfigToHclTerraform, true)(struct!.normalCollectorConfig),
      isBlock: true,
      type: "list",
      storageClassType: "DeviceGroupExtraServicesELASTICTRANSCODERNormalCollectorConfigList",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesELASTICTRANSCODEROutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesELASTICTRANSCODER | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._customNSPSchedule !== undefined) {
      hasAnyValues = true;
      internalValueResult.customNSPSchedule = this._customNSPSchedule;
    }
    if (this._deadOperation !== undefined) {
      hasAnyValues = true;
      internalValueResult.deadOperation = this._deadOperation;
    }
    if (this._deviceDisplayNameTemplate !== undefined) {
      hasAnyValues = true;
      internalValueResult.deviceDisplayNameTemplate = this._deviceDisplayNameTemplate;
    }
    if (this._disableStopTerminateHostMonitor !== undefined) {
      hasAnyValues = true;
      internalValueResult.disableStopTerminateHostMonitor = this._disableStopTerminateHostMonitor;
    }
    if (this._disableTerminatedHostAlerting !== undefined) {
      hasAnyValues = true;
      internalValueResult.disableTerminatedHostAlerting = this._disableTerminatedHostAlerting;
    }
    if (this._monitoringRegionInfos !== undefined) {
      hasAnyValues = true;
      internalValueResult.monitoringRegionInfos = this._monitoringRegionInfos;
    }
    if (this._monitoringRegions !== undefined) {
      hasAnyValues = true;
      internalValueResult.monitoringRegions = this._monitoringRegions;
    }
    if (this._nameFilter !== undefined) {
      hasAnyValues = true;
      internalValueResult.nameFilter = this._nameFilter;
    }
    if (this._selectAll !== undefined) {
      hasAnyValues = true;
      internalValueResult.selectAll = this._selectAll;
    }
    if (this._tags?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.tags = this._tags?.internalValue;
    }
    if (this._useDefault !== undefined) {
      hasAnyValues = true;
      internalValueResult.useDefault = this._useDefault;
    }
    if (this._normalCollectorConfig?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.normalCollectorConfig = this._normalCollectorConfig?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesELASTICTRANSCODER | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._customNSPSchedule = undefined;
      this._deadOperation = undefined;
      this._deviceDisplayNameTemplate = undefined;
      this._disableStopTerminateHostMonitor = undefined;
      this._disableTerminatedHostAlerting = undefined;
      this._monitoringRegionInfos = undefined;
      this._monitoringRegions = undefined;
      this._nameFilter = undefined;
      this._selectAll = undefined;
      this._tags.internalValue = undefined;
      this._useDefault = undefined;
      this._normalCollectorConfig.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._customNSPSchedule = value.customNSPSchedule;
      this._deadOperation = value.deadOperation;
      this._deviceDisplayNameTemplate = value.deviceDisplayNameTemplate;
      this._disableStopTerminateHostMonitor = value.disableStopTerminateHostMonitor;
      this._disableTerminatedHostAlerting = value.disableTerminatedHostAlerting;
      this._monitoringRegionInfos = value.monitoringRegionInfos;
      this._monitoringRegions = value.monitoringRegions;
      this._nameFilter = value.nameFilter;
      this._selectAll = value.selectAll;
      this._tags.internalValue = value.tags;
      this._useDefault = value.useDefault;
      this._normalCollectorConfig.internalValue = value.normalCollectorConfig;
    }
  }

  // custom_n_s_p_schedule - computed: false, optional: true, required: false
  private _customNSPSchedule?: string; 
  public get customNSPSchedule() {
    return this.getStringAttribute('custom_n_s_p_schedule');
  }
  public set customNSPSchedule(value: string) {
    this._customNSPSchedule = value;
  }
  public resetCustomNSPSchedule() {
    this._customNSPSchedule = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get customNSPScheduleInput() {
    return this._customNSPSchedule;
  }

  // dead_operation - computed: false, optional: true, required: false
  private _deadOperation?: string; 
  public get deadOperation() {
    return this.getStringAttribute('dead_operation');
  }
  public set deadOperation(value: string) {
    this._deadOperation = value;
  }
  public resetDeadOperation() {
    this._deadOperation = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get deadOperationInput() {
    return this._deadOperation;
  }

  // device_display_name_template - computed: false, optional: true, required: false
  private _deviceDisplayNameTemplate?: string; 
  public get deviceDisplayNameTemplate() {
    return this.getStringAttribute('device_display_name_template');
  }
  public set deviceDisplayNameTemplate(value: string) {
    this._deviceDisplayNameTemplate = value;
  }
  public resetDeviceDisplayNameTemplate() {
    this._deviceDisplayNameTemplate = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get deviceDisplayNameTemplateInput() {
    return this._deviceDisplayNameTemplate;
  }

  // disable_stop_terminate_host_monitor - computed: false, optional: true, required: false
  private _disableStopTerminateHostMonitor?: boolean | cdktf.IResolvable; 
  public get disableStopTerminateHostMonitor() {
    return this.getBooleanAttribute('disable_stop_terminate_host_monitor');
  }
  public set disableStopTerminateHostMonitor(value: boolean | cdktf.IResolvable) {
    this._disableStopTerminateHostMonitor = value;
  }
  public resetDisableStopTerminateHostMonitor() {
    this._disableStopTerminateHostMonitor = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get disableStopTerminateHostMonitorInput() {
    return this._disableStopTerminateHostMonitor;
  }

  // disable_terminated_host_alerting - computed: false, optional: true, required: false
  private _disableTerminatedHostAlerting?: boolean | cdktf.IResolvable; 
  public get disableTerminatedHostAlerting() {
    return this.getBooleanAttribute('disable_terminated_host_alerting');
  }
  public set disableTerminatedHostAlerting(value: boolean | cdktf.IResolvable) {
    this._disableTerminatedHostAlerting = value;
  }
  public resetDisableTerminatedHostAlerting() {
    this._disableTerminatedHostAlerting = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get disableTerminatedHostAlertingInput() {
    return this._disableTerminatedHostAlerting;
  }

  // monitoring_region_infos - computed: false, optional: true, required: false
  private _monitoringRegionInfos?: string[]; 
  public get monitoringRegionInfos() {
    return cdktf.Fn.tolist(this.getListAttribute('monitoring_region_infos'));
  }
  public set monitoringRegionInfos(value: string[]) {
    this._monitoringRegionInfos = value;
  }
  public resetMonitoringRegionInfos() {
    this._monitoringRegionInfos = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get monitoringRegionInfosInput() {
    return this._monitoringRegionInfos;
  }

  // monitoring_regions - computed: false, optional: true, required: false
  private _monitoringRegions?: string[]; 
  public get monitoringRegions() {
    return cdktf.Fn.tolist(this.getListAttribute('monitoring_regions'));
  }
  public set monitoringRegions(value: string[]) {
    this._monitoringRegions = value;
  }
  public resetMonitoringRegions() {
    this._monitoringRegions = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get monitoringRegionsInput() {
    return this._monitoringRegions;
  }

  // name_filter - computed: false, optional: true, required: false
  private _nameFilter?: string[]; 
  public get nameFilter() {
    return cdktf.Fn.tolist(this.getListAttribute('name_filter'));
  }
  public set nameFilter(value: string[]) {
    this._nameFilter = value;
  }
  public resetNameFilter() {
    this._nameFilter = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get nameFilterInput() {
    return this._nameFilter;
  }

  // select_all - computed: false, optional: true, required: false
  private _selectAll?: boolean | cdktf.IResolvable; 
  public get selectAll() {
    return this.getBooleanAttribute('select_all');
  }
  public set selectAll(value: boolean | cdktf.IResolvable) {
    this._selectAll = value;
  }
  public resetSelectAll() {
    this._selectAll = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get selectAllInput() {
    return this._selectAll;
  }

  // tags - computed: false, optional: true, required: false
  private _tags = new DeviceGroupExtraServicesELASTICTRANSCODERTagsList(this, "tags", false);
  public get tags() {
    return this._tags;
  }
  public putTags(value: DeviceGroupExtraServicesELASTICTRANSCODERTags[] | cdktf.IResolvable) {
    this._tags.internalValue = value;
  }
  public resetTags() {
    this._tags.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get tagsInput() {
    return this._tags.internalValue;
  }

  // use_default - computed: false, optional: false, required: true
  private _useDefault?: boolean | cdktf.IResolvable; 
  public get useDefault() {
    return this.getBooleanAttribute('use_default');
  }
  public set useDefault(value: boolean | cdktf.IResolvable) {
    this._useDefault = value;
  }
  // Temporarily expose input value. Use with caution.
  public get useDefaultInput() {
    return this._useDefault;
  }

  // normal_collector_config - computed: false, optional: true, required: false
  private _normalCollectorConfig = new DeviceGroupExtraServicesELASTICTRANSCODERNormalCollectorConfigList(this, "normal_collector_config", false);
  public get normalCollectorConfig() {
    return this._normalCollectorConfig;
  }
  public putNormalCollectorConfig(value: DeviceGroupExtraServicesELASTICTRANSCODERNormalCollectorConfig[] | cdktf.IResolvable) {
    this._normalCollectorConfig.internalValue = value;
  }
  public resetNormalCollectorConfig() {
    this._normalCollectorConfig.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get normalCollectorConfigInput() {
    return this._normalCollectorConfig.internalValue;
  }
}

export class DeviceGroupExtraServicesELASTICTRANSCODERList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesELASTICTRANSCODER[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesELASTICTRANSCODEROutputReference {
    return new DeviceGroupExtraServicesELASTICTRANSCODEROutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesELBTags {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#name DeviceGroup#name}
  */
  readonly name?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#operation DeviceGroup#operation}
  */
  readonly operation?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#value DeviceGroup#value}
  */
  readonly value?: string;
}

export function deviceGroupExtraServicesELBTagsToTerraform(struct?: DeviceGroupExtraServicesELBTags | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    name: cdktf.stringToTerraform(struct!.name),
    operation: cdktf.stringToTerraform(struct!.operation),
    value: cdktf.stringToTerraform(struct!.value),
  }
}


export function deviceGroupExtraServicesELBTagsToHclTerraform(struct?: DeviceGroupExtraServicesELBTags | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    name: {
      value: cdktf.stringToHclTerraform(struct!.name),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    operation: {
      value: cdktf.stringToHclTerraform(struct!.operation),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    value: {
      value: cdktf.stringToHclTerraform(struct!.value),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesELBTagsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesELBTags | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._name !== undefined) {
      hasAnyValues = true;
      internalValueResult.name = this._name;
    }
    if (this._operation !== undefined) {
      hasAnyValues = true;
      internalValueResult.operation = this._operation;
    }
    if (this._value !== undefined) {
      hasAnyValues = true;
      internalValueResult.value = this._value;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesELBTags | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._name = undefined;
      this._operation = undefined;
      this._value = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._name = value.name;
      this._operation = value.operation;
      this._value = value.value;
    }
  }

  // name - computed: false, optional: true, required: false
  private _name?: string; 
  public get name() {
    return this.getStringAttribute('name');
  }
  public set name(value: string) {
    this._name = value;
  }
  public resetName() {
    this._name = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get nameInput() {
    return this._name;
  }

  // operation - computed: false, optional: true, required: false
  private _operation?: string; 
  public get operation() {
    return this.getStringAttribute('operation');
  }
  public set operation(value: string) {
    this._operation = value;
  }
  public resetOperation() {
    this._operation = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get operationInput() {
    return this._operation;
  }

  // value - computed: false, optional: true, required: false
  private _value?: string; 
  public get value() {
    return this.getStringAttribute('value');
  }
  public set value(value: string) {
    this._value = value;
  }
  public resetValue() {
    this._value = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get valueInput() {
    return this._value;
  }
}

export class DeviceGroupExtraServicesELBTagsList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesELBTags[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesELBTagsOutputReference {
    return new DeviceGroupExtraServicesELBTagsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesELBNormalCollectorConfigCollectors {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#applies_to DeviceGroup#applies_to}
  */
  readonly appliesTo?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#auto_balanced_collector_group_id DeviceGroup#auto_balanced_collector_group_id}
  */
  readonly autoBalancedCollectorGroupId?: number;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#collector_id DeviceGroup#collector_id}
  */
  readonly collectorId?: number;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#priority DeviceGroup#priority}
  */
  readonly priority?: number;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#use_public_ip DeviceGroup#use_public_ip}
  */
  readonly usePublicIp?: boolean | cdktf.IResolvable;
}

export function deviceGroupExtraServicesELBNormalCollectorConfigCollectorsToTerraform(struct?: DeviceGroupExtraServicesELBNormalCollectorConfigCollectors | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    applies_to: cdktf.stringToTerraform(struct!.appliesTo),
    auto_balanced_collector_group_id: cdktf.numberToTerraform(struct!.autoBalancedCollectorGroupId),
    collector_id: cdktf.numberToTerraform(struct!.collectorId),
    priority: cdktf.numberToTerraform(struct!.priority),
    use_public_ip: cdktf.booleanToTerraform(struct!.usePublicIp),
  }
}


export function deviceGroupExtraServicesELBNormalCollectorConfigCollectorsToHclTerraform(struct?: DeviceGroupExtraServicesELBNormalCollectorConfigCollectors | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    applies_to: {
      value: cdktf.stringToHclTerraform(struct!.appliesTo),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    auto_balanced_collector_group_id: {
      value: cdktf.numberToHclTerraform(struct!.autoBalancedCollectorGroupId),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    collector_id: {
      value: cdktf.numberToHclTerraform(struct!.collectorId),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    priority: {
      value: cdktf.numberToHclTerraform(struct!.priority),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    use_public_ip: {
      value: cdktf.booleanToHclTerraform(struct!.usePublicIp),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesELBNormalCollectorConfigCollectorsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesELBNormalCollectorConfigCollectors | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._appliesTo !== undefined) {
      hasAnyValues = true;
      internalValueResult.appliesTo = this._appliesTo;
    }
    if (this._autoBalancedCollectorGroupId !== undefined) {
      hasAnyValues = true;
      internalValueResult.autoBalancedCollectorGroupId = this._autoBalancedCollectorGroupId;
    }
    if (this._collectorId !== undefined) {
      hasAnyValues = true;
      internalValueResult.collectorId = this._collectorId;
    }
    if (this._priority !== undefined) {
      hasAnyValues = true;
      internalValueResult.priority = this._priority;
    }
    if (this._usePublicIp !== undefined) {
      hasAnyValues = true;
      internalValueResult.usePublicIp = this._usePublicIp;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesELBNormalCollectorConfigCollectors | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._appliesTo = undefined;
      this._autoBalancedCollectorGroupId = undefined;
      this._collectorId = undefined;
      this._priority = undefined;
      this._usePublicIp = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._appliesTo = value.appliesTo;
      this._autoBalancedCollectorGroupId = value.autoBalancedCollectorGroupId;
      this._collectorId = value.collectorId;
      this._priority = value.priority;
      this._usePublicIp = value.usePublicIp;
    }
  }

  // applies_to - computed: false, optional: true, required: false
  private _appliesTo?: string; 
  public get appliesTo() {
    return this.getStringAttribute('applies_to');
  }
  public set appliesTo(value: string) {
    this._appliesTo = value;
  }
  public resetAppliesTo() {
    this._appliesTo = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get appliesToInput() {
    return this._appliesTo;
  }

  // auto_balanced_collector_group_id - computed: false, optional: true, required: false
  private _autoBalancedCollectorGroupId?: number; 
  public get autoBalancedCollectorGroupId() {
    return this.getNumberAttribute('auto_balanced_collector_group_id');
  }
  public set autoBalancedCollectorGroupId(value: number) {
    this._autoBalancedCollectorGroupId = value;
  }
  public resetAutoBalancedCollectorGroupId() {
    this._autoBalancedCollectorGroupId = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get autoBalancedCollectorGroupIdInput() {
    return this._autoBalancedCollectorGroupId;
  }

  // collector_id - computed: false, optional: true, required: false
  private _collectorId?: number; 
  public get collectorId() {
    return this.getNumberAttribute('collector_id');
  }
  public set collectorId(value: number) {
    this._collectorId = value;
  }
  public resetCollectorId() {
    this._collectorId = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get collectorIdInput() {
    return this._collectorId;
  }

  // priority - computed: false, optional: true, required: false
  private _priority?: number; 
  public get priority() {
    return this.getNumberAttribute('priority');
  }
  public set priority(value: number) {
    this._priority = value;
  }
  public resetPriority() {
    this._priority = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get priorityInput() {
    return this._priority;
  }

  // use_public_ip - computed: false, optional: true, required: false
  private _usePublicIp?: boolean | cdktf.IResolvable; 
  public get usePublicIp() {
    return this.getBooleanAttribute('use_public_ip');
  }
  public set usePublicIp(value: boolean | cdktf.IResolvable) {
    this._usePublicIp = value;
  }
  public resetUsePublicIp() {
    this._usePublicIp = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get usePublicIpInput() {
    return this._usePublicIp;
  }
}

export class DeviceGroupExtraServicesELBNormalCollectorConfigCollectorsList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesELBNormalCollectorConfigCollectors[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesELBNormalCollectorConfigCollectorsOutputReference {
    return new DeviceGroupExtraServicesELBNormalCollectorConfigCollectorsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesELBNormalCollectorConfig {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#collectors DeviceGroup#collectors}
  */
  readonly collectors?: DeviceGroupExtraServicesELBNormalCollectorConfigCollectors[] | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#enabled DeviceGroup#enabled}
  */
  readonly enabled: boolean | cdktf.IResolvable;
}

export function deviceGroupExtraServicesELBNormalCollectorConfigToTerraform(struct?: DeviceGroupExtraServicesELBNormalCollectorConfig | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    collectors: cdktf.listMapper(deviceGroupExtraServicesELBNormalCollectorConfigCollectorsToTerraform, false)(struct!.collectors),
    enabled: cdktf.booleanToTerraform(struct!.enabled),
  }
}


export function deviceGroupExtraServicesELBNormalCollectorConfigToHclTerraform(struct?: DeviceGroupExtraServicesELBNormalCollectorConfig | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    collectors: {
      value: cdktf.listMapperHcl(deviceGroupExtraServicesELBNormalCollectorConfigCollectorsToHclTerraform, false)(struct!.collectors),
      isBlock: true,
      type: "list",
      storageClassType: "DeviceGroupExtraServicesELBNormalCollectorConfigCollectorsList",
    },
    enabled: {
      value: cdktf.booleanToHclTerraform(struct!.enabled),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesELBNormalCollectorConfigOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesELBNormalCollectorConfig | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._collectors?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.collectors = this._collectors?.internalValue;
    }
    if (this._enabled !== undefined) {
      hasAnyValues = true;
      internalValueResult.enabled = this._enabled;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesELBNormalCollectorConfig | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._collectors.internalValue = undefined;
      this._enabled = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._collectors.internalValue = value.collectors;
      this._enabled = value.enabled;
    }
  }

  // collectors - computed: false, optional: true, required: false
  private _collectors = new DeviceGroupExtraServicesELBNormalCollectorConfigCollectorsList(this, "collectors", false);
  public get collectors() {
    return this._collectors;
  }
  public putCollectors(value: DeviceGroupExtraServicesELBNormalCollectorConfigCollectors[] | cdktf.IResolvable) {
    this._collectors.internalValue = value;
  }
  public resetCollectors() {
    this._collectors.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get collectorsInput() {
    return this._collectors.internalValue;
  }

  // enabled - computed: false, optional: false, required: true
  private _enabled?: boolean | cdktf.IResolvable; 
  public get enabled() {
    return this.getBooleanAttribute('enabled');
  }
  public set enabled(value: boolean | cdktf.IResolvable) {
    this._enabled = value;
  }
  // Temporarily expose input value. Use with caution.
  public get enabledInput() {
    return this._enabled;
  }
}

export class DeviceGroupExtraServicesELBNormalCollectorConfigList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesELBNormalCollectorConfig[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesELBNormalCollectorConfigOutputReference {
    return new DeviceGroupExtraServicesELBNormalCollectorConfigOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesELB {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#custom_n_s_p_schedule DeviceGroup#custom_n_s_p_schedule}
  */
  readonly customNSPSchedule?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#dead_operation DeviceGroup#dead_operation}
  */
  readonly deadOperation?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#device_display_name_template DeviceGroup#device_display_name_template}
  */
  readonly deviceDisplayNameTemplate?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#disable_stop_terminate_host_monitor DeviceGroup#disable_stop_terminate_host_monitor}
  */
  readonly disableStopTerminateHostMonitor?: boolean | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#disable_terminated_host_alerting DeviceGroup#disable_terminated_host_alerting}
  */
  readonly disableTerminatedHostAlerting?: boolean | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#monitoring_region_infos DeviceGroup#monitoring_region_infos}
  */
  readonly monitoringRegionInfos?: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#monitoring_regions DeviceGroup#monitoring_regions}
  */
  readonly monitoringRegions?: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#name_filter DeviceGroup#name_filter}
  */
  readonly nameFilter?: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#select_all DeviceGroup#select_all}
  */
  readonly selectAll?: boolean | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#tags DeviceGroup#tags}
  */
  readonly tags?: DeviceGroupExtraServicesELBTags[] | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#use_default DeviceGroup#use_default}
  */
  readonly useDefault: boolean | cdktf.IResolvable;
  /**
  * normal_collector_config block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#normal_collector_config DeviceGroup#normal_collector_config}
  */
  readonly normalCollectorConfig?: DeviceGroupExtraServicesELBNormalCollectorConfig[] | cdktf.IResolvable;
}

export function deviceGroupExtraServicesELBToTerraform(struct?: DeviceGroupExtraServicesELB | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    custom_n_s_p_schedule: cdktf.stringToTerraform(struct!.customNSPSchedule),
    dead_operation: cdktf.stringToTerraform(struct!.deadOperation),
    device_display_name_template: cdktf.stringToTerraform(struct!.deviceDisplayNameTemplate),
    disable_stop_terminate_host_monitor: cdktf.booleanToTerraform(struct!.disableStopTerminateHostMonitor),
    disable_terminated_host_alerting: cdktf.booleanToTerraform(struct!.disableTerminatedHostAlerting),
    monitoring_region_infos: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.monitoringRegionInfos),
    monitoring_regions: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.monitoringRegions),
    name_filter: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.nameFilter),
    select_all: cdktf.booleanToTerraform(struct!.selectAll),
    tags: cdktf.listMapper(deviceGroupExtraServicesELBTagsToTerraform, false)(struct!.tags),
    use_default: cdktf.booleanToTerraform(struct!.useDefault),
    normal_collector_config: cdktf.listMapper(deviceGroupExtraServicesELBNormalCollectorConfigToTerraform, true)(struct!.normalCollectorConfig),
  }
}


export function deviceGroupExtraServicesELBToHclTerraform(struct?: DeviceGroupExtraServicesELB | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    custom_n_s_p_schedule: {
      value: cdktf.stringToHclTerraform(struct!.customNSPSchedule),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    dead_operation: {
      value: cdktf.stringToHclTerraform(struct!.deadOperation),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    device_display_name_template: {
      value: cdktf.stringToHclTerraform(struct!.deviceDisplayNameTemplate),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    disable_stop_terminate_host_monitor: {
      value: cdktf.booleanToHclTerraform(struct!.disableStopTerminateHostMonitor),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    disable_terminated_host_alerting: {
      value: cdktf.booleanToHclTerraform(struct!.disableTerminatedHostAlerting),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    monitoring_region_infos: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.monitoringRegionInfos),
      isBlock: false,
      type: "set",
      storageClassType: "stringList",
    },
    monitoring_regions: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.monitoringRegions),
      isBlock: false,
      type: "set",
      storageClassType: "stringList",
    },
    name_filter: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.nameFilter),
      isBlock: false,
      type: "set",
      storageClassType: "stringList",
    },
    select_all: {
      value: cdktf.booleanToHclTerraform(struct!.selectAll),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    tags: {
      value: cdktf.listMapperHcl(deviceGroupExtraServicesELBTagsToHclTerraform, false)(struct!.tags),
      isBlock: true,
      type: "list",
      storageClassType: "DeviceGroupExtraServicesELBTagsList",
    },
    use_default: {
      value: cdktf.booleanToHclTerraform(struct!.useDefault),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    normal_collector_config: {
      value: cdktf.listMapperHcl(deviceGroupExtraServicesELBNormalCollectorConfigToHclTerraform, true)(struct!.normalCollectorConfig),
      isBlock: true,
      type: "list",
      storageClassType: "DeviceGroupExtraServicesELBNormalCollectorConfigList",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesELBOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesELB | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._customNSPSchedule !== undefined) {
      hasAnyValues = true;
      internalValueResult.customNSPSchedule = this._customNSPSchedule;
    }
    if (this._deadOperation !== undefined) {
      hasAnyValues = true;
      internalValueResult.deadOperation = this._deadOperation;
    }
    if (this._deviceDisplayNameTemplate !== undefined) {
      hasAnyValues = true;
      internalValueResult.deviceDisplayNameTemplate = this._deviceDisplayNameTemplate;
    }
    if (this._disableStopTerminateHostMonitor !== undefined) {
      hasAnyValues = true;
      internalValueResult.disableStopTerminateHostMonitor = this._disableStopTerminateHostMonitor;
    }
    if (this._disableTerminatedHostAlerting !== undefined) {
      hasAnyValues = true;
      internalValueResult.disableTerminatedHostAlerting = this._disableTerminatedHostAlerting;
    }
    if (this._monitoringRegionInfos !== undefined) {
      hasAnyValues = true;
      internalValueResult.monitoringRegionInfos = this._monitoringRegionInfos;
    }
    if (this._monitoringRegions !== undefined) {
      hasAnyValues = true;
      internalValueResult.monitoringRegions = this._monitoringRegions;
    }
    if (this._nameFilter !== undefined) {
      hasAnyValues = true;
      internalValueResult.nameFilter = this._nameFilter;
    }
    if (this._selectAll !== undefined) {
      hasAnyValues = true;
      internalValueResult.selectAll = this._selectAll;
    }
    if (this._tags?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.tags = this._tags?.internalValue;
    }
    if (this._useDefault !== undefined) {
      hasAnyValues = true;
      internalValueResult.useDefault = this._useDefault;
    }
    if (this._normalCollectorConfig?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.normalCollectorConfig = this._normalCollectorConfig?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesELB | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._customNSPSchedule = undefined;
      this._deadOperation = undefined;
      this._deviceDisplayNameTemplate = undefined;
      this._disableStopTerminateHostMonitor = undefined;
      this._disableTerminatedHostAlerting = undefined;
      this._monitoringRegionInfos = undefined;
      this._monitoringRegions = undefined;
      this._nameFilter = undefined;
      this._selectAll = undefined;
      this._tags.internalValue = undefined;
      this._useDefault = undefined;
      this._normalCollectorConfig.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._customNSPSchedule = value.customNSPSchedule;
      this._deadOperation = value.deadOperation;
      this._deviceDisplayNameTemplate = value.deviceDisplayNameTemplate;
      this._disableStopTerminateHostMonitor = value.disableStopTerminateHostMonitor;
      this._disableTerminatedHostAlerting = value.disableTerminatedHostAlerting;
      this._monitoringRegionInfos = value.monitoringRegionInfos;
      this._monitoringRegions = value.monitoringRegions;
      this._nameFilter = value.nameFilter;
      this._selectAll = value.selectAll;
      this._tags.internalValue = value.tags;
      this._useDefault = value.useDefault;
      this._normalCollectorConfig.internalValue = value.normalCollectorConfig;
    }
  }

  // custom_n_s_p_schedule - computed: false, optional: true, required: false
  private _customNSPSchedule?: string; 
  public get customNSPSchedule() {
    return this.getStringAttribute('custom_n_s_p_schedule');
  }
  public set customNSPSchedule(value: string) {
    this._customNSPSchedule = value;
  }
  public resetCustomNSPSchedule() {
    this._customNSPSchedule = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get customNSPScheduleInput() {
    return this._customNSPSchedule;
  }

  // dead_operation - computed: false, optional: true, required: false
  private _deadOperation?: string; 
  public get deadOperation() {
    return this.getStringAttribute('dead_operation');
  }
  public set deadOperation(value: string) {
    this._deadOperation = value;
  }
  public resetDeadOperation() {
    this._deadOperation = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get deadOperationInput() {
    return this._deadOperation;
  }

  // device_display_name_template - computed: false, optional: true, required: false
  private _deviceDisplayNameTemplate?: string; 
  public get deviceDisplayNameTemplate() {
    return this.getStringAttribute('device_display_name_template');
  }
  public set deviceDisplayNameTemplate(value: string) {
    this._deviceDisplayNameTemplate = value;
  }
  public resetDeviceDisplayNameTemplate() {
    this._deviceDisplayNameTemplate = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get deviceDisplayNameTemplateInput() {
    return this._deviceDisplayNameTemplate;
  }

  // disable_stop_terminate_host_monitor - computed: false, optional: true, required: false
  private _disableStopTerminateHostMonitor?: boolean | cdktf.IResolvable; 
  public get disableStopTerminateHostMonitor() {
    return this.getBooleanAttribute('disable_stop_terminate_host_monitor');
  }
  public set disableStopTerminateHostMonitor(value: boolean | cdktf.IResolvable) {
    this._disableStopTerminateHostMonitor = value;
  }
  public resetDisableStopTerminateHostMonitor() {
    this._disableStopTerminateHostMonitor = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get disableStopTerminateHostMonitorInput() {
    return this._disableStopTerminateHostMonitor;
  }

  // disable_terminated_host_alerting - computed: false, optional: true, required: false
  private _disableTerminatedHostAlerting?: boolean | cdktf.IResolvable; 
  public get disableTerminatedHostAlerting() {
    return this.getBooleanAttribute('disable_terminated_host_alerting');
  }
  public set disableTerminatedHostAlerting(value: boolean | cdktf.IResolvable) {
    this._disableTerminatedHostAlerting = value;
  }
  public resetDisableTerminatedHostAlerting() {
    this._disableTerminatedHostAlerting = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get disableTerminatedHostAlertingInput() {
    return this._disableTerminatedHostAlerting;
  }

  // monitoring_region_infos - computed: false, optional: true, required: false
  private _monitoringRegionInfos?: string[]; 
  public get monitoringRegionInfos() {
    return cdktf.Fn.tolist(this.getListAttribute('monitoring_region_infos'));
  }
  public set monitoringRegionInfos(value: string[]) {
    this._monitoringRegionInfos = value;
  }
  public resetMonitoringRegionInfos() {
    this._monitoringRegionInfos = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get monitoringRegionInfosInput() {
    return this._monitoringRegionInfos;
  }

  // monitoring_regions - computed: false, optional: true, required: false
  private _monitoringRegions?: string[]; 
  public get monitoringRegions() {
    return cdktf.Fn.tolist(this.getListAttribute('monitoring_regions'));
  }
  public set monitoringRegions(value: string[]) {
    this._monitoringRegions = value;
  }
  public resetMonitoringRegions() {
    this._monitoringRegions = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get monitoringRegionsInput() {
    return this._monitoringRegions;
  }

  // name_filter - computed: false, optional: true, required: false
  private _nameFilter?: string[]; 
  public get nameFilter() {
    return cdktf.Fn.tolist(this.getListAttribute('name_filter'));
  }
  public set nameFilter(value: string[]) {
    this._nameFilter = value;
  }
  public resetNameFilter() {
    this._nameFilter = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get nameFilterInput() {
    return this._nameFilter;
  }

  // select_all - computed: false, optional: true, required: false
  private _selectAll?: boolean | cdktf.IResolvable; 
  public get selectAll() {
    return this.getBooleanAttribute('select_all');
  }
  public set selectAll(value: boolean | cdktf.IResolvable) {
    this._selectAll = value;
  }
  public resetSelectAll() {
    this._selectAll = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get selectAllInput() {
    return this._selectAll;
  }

  // tags - computed: false, optional: true, required: false
  private _tags = new DeviceGroupExtraServicesELBTagsList(this, "tags", false);
  public get tags() {
    return this._tags;
  }
  public putTags(value: DeviceGroupExtraServicesELBTags[] | cdktf.IResolvable) {
    this._tags.internalValue = value;
  }
  public resetTags() {
    this._tags.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get tagsInput() {
    return this._tags.internalValue;
  }

  // use_default - computed: false, optional: false, required: true
  private _useDefault?: boolean | cdktf.IResolvable; 
  public get useDefault() {
    return this.getBooleanAttribute('use_default');
  }
  public set useDefault(value: boolean | cdktf.IResolvable) {
    this._useDefault = value;
  }
  // Temporarily expose input value. Use with caution.
  public get useDefaultInput() {
    return this._useDefault;
  }

  // normal_collector_config - computed: false, optional: true, required: false
  private _normalCollectorConfig = new DeviceGroupExtraServicesELBNormalCollectorConfigList(this, "normal_collector_config", false);
  public get normalCollectorConfig() {
    return this._normalCollectorConfig;
  }
  public putNormalCollectorConfig(value: DeviceGroupExtraServicesELBNormalCollectorConfig[] | cdktf.IResolvable) {
    this._normalCollectorConfig.internalValue = value;
  }
  public resetNormalCollectorConfig() {
    this._normalCollectorConfig.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get normalCollectorConfigInput() {
    return this._normalCollectorConfig.internalValue;
  }
}

export class DeviceGroupExtraServicesELBList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesELB[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesELBOutputReference {
    return new DeviceGroupExtraServicesELBOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesEMRTags {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#name DeviceGroup#name}
  */
  readonly name?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#operation DeviceGroup#operation}
  */
  readonly operation?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#value DeviceGroup#value}
  */
  readonly value?: string;
}

export function deviceGroupExtraServicesEMRTagsToTerraform(struct?: DeviceGroupExtraServicesEMRTags | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    name: cdktf.stringToTerraform(struct!.name),
    operation: cdktf.stringToTerraform(struct!.operation),
    value: cdktf.stringToTerraform(struct!.value),
  }
}


export function deviceGroupExtraServicesEMRTagsToHclTerraform(struct?: DeviceGroupExtraServicesEMRTags | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    name: {
      value: cdktf.stringToHclTerraform(struct!.name),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    operation: {
      value: cdktf.stringToHclTerraform(struct!.operation),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    value: {
      value: cdktf.stringToHclTerraform(struct!.value),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesEMRTagsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesEMRTags | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._name !== undefined) {
      hasAnyValues = true;
      internalValueResult.name = this._name;
    }
    if (this._operation !== undefined) {
      hasAnyValues = true;
      internalValueResult.operation = this._operation;
    }
    if (this._value !== undefined) {
      hasAnyValues = true;
      internalValueResult.value = this._value;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesEMRTags | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._name = undefined;
      this._operation = undefined;
      this._value = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._name = value.name;
      this._operation = value.operation;
      this._value = value.value;
    }
  }

  // name - computed: false, optional: true, required: false
  private _name?: string; 
  public get name() {
    return this.getStringAttribute('name');
  }
  public set name(value: string) {
    this._name = value;
  }
  public resetName() {
    this._name = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get nameInput() {
    return this._name;
  }

  // operation - computed: false, optional: true, required: false
  private _operation?: string; 
  public get operation() {
    return this.getStringAttribute('operation');
  }
  public set operation(value: string) {
    this._operation = value;
  }
  public resetOperation() {
    this._operation = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get operationInput() {
    return this._operation;
  }

  // value - computed: false, optional: true, required: false
  private _value?: string; 
  public get value() {
    return this.getStringAttribute('value');
  }
  public set value(value: string) {
    this._value = value;
  }
  public resetValue() {
    this._value = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get valueInput() {
    return this._value;
  }
}

export class DeviceGroupExtraServicesEMRTagsList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesEMRTags[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesEMRTagsOutputReference {
    return new DeviceGroupExtraServicesEMRTagsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesEMRNormalCollectorConfigCollectors {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#applies_to DeviceGroup#applies_to}
  */
  readonly appliesTo?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#auto_balanced_collector_group_id DeviceGroup#auto_balanced_collector_group_id}
  */
  readonly autoBalancedCollectorGroupId?: number;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#collector_id DeviceGroup#collector_id}
  */
  readonly collectorId?: number;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#priority DeviceGroup#priority}
  */
  readonly priority?: number;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#use_public_ip DeviceGroup#use_public_ip}
  */
  readonly usePublicIp?: boolean | cdktf.IResolvable;
}

export function deviceGroupExtraServicesEMRNormalCollectorConfigCollectorsToTerraform(struct?: DeviceGroupExtraServicesEMRNormalCollectorConfigCollectors | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    applies_to: cdktf.stringToTerraform(struct!.appliesTo),
    auto_balanced_collector_group_id: cdktf.numberToTerraform(struct!.autoBalancedCollectorGroupId),
    collector_id: cdktf.numberToTerraform(struct!.collectorId),
    priority: cdktf.numberToTerraform(struct!.priority),
    use_public_ip: cdktf.booleanToTerraform(struct!.usePublicIp),
  }
}


export function deviceGroupExtraServicesEMRNormalCollectorConfigCollectorsToHclTerraform(struct?: DeviceGroupExtraServicesEMRNormalCollectorConfigCollectors | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    applies_to: {
      value: cdktf.stringToHclTerraform(struct!.appliesTo),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    auto_balanced_collector_group_id: {
      value: cdktf.numberToHclTerraform(struct!.autoBalancedCollectorGroupId),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    collector_id: {
      value: cdktf.numberToHclTerraform(struct!.collectorId),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    priority: {
      value: cdktf.numberToHclTerraform(struct!.priority),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    use_public_ip: {
      value: cdktf.booleanToHclTerraform(struct!.usePublicIp),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesEMRNormalCollectorConfigCollectorsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesEMRNormalCollectorConfigCollectors | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._appliesTo !== undefined) {
      hasAnyValues = true;
      internalValueResult.appliesTo = this._appliesTo;
    }
    if (this._autoBalancedCollectorGroupId !== undefined) {
      hasAnyValues = true;
      internalValueResult.autoBalancedCollectorGroupId = this._autoBalancedCollectorGroupId;
    }
    if (this._collectorId !== undefined) {
      hasAnyValues = true;
      internalValueResult.collectorId = this._collectorId;
    }
    if (this._priority !== undefined) {
      hasAnyValues = true;
      internalValueResult.priority = this._priority;
    }
    if (this._usePublicIp !== undefined) {
      hasAnyValues = true;
      internalValueResult.usePublicIp = this._usePublicIp;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesEMRNormalCollectorConfigCollectors | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._appliesTo = undefined;
      this._autoBalancedCollectorGroupId = undefined;
      this._collectorId = undefined;
      this._priority = undefined;
      this._usePublicIp = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._appliesTo = value.appliesTo;
      this._autoBalancedCollectorGroupId = value.autoBalancedCollectorGroupId;
      this._collectorId = value.collectorId;
      this._priority = value.priority;
      this._usePublicIp = value.usePublicIp;
    }
  }

  // applies_to - computed: false, optional: true, required: false
  private _appliesTo?: string; 
  public get appliesTo() {
    return this.getStringAttribute('applies_to');
  }
  public set appliesTo(value: string) {
    this._appliesTo = value;
  }
  public resetAppliesTo() {
    this._appliesTo = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get appliesToInput() {
    return this._appliesTo;
  }

  // auto_balanced_collector_group_id - computed: false, optional: true, required: false
  private _autoBalancedCollectorGroupId?: number; 
  public get autoBalancedCollectorGroupId() {
    return this.getNumberAttribute('auto_balanced_collector_group_id');
  }
  public set autoBalancedCollectorGroupId(value: number) {
    this._autoBalancedCollectorGroupId = value;
  }
  public resetAutoBalancedCollectorGroupId() {
    this._autoBalancedCollectorGroupId = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get autoBalancedCollectorGroupIdInput() {
    return this._autoBalancedCollectorGroupId;
  }

  // collector_id - computed: false, optional: true, required: false
  private _collectorId?: number; 
  public get collectorId() {
    return this.getNumberAttribute('collector_id');
  }
  public set collectorId(value: number) {
    this._collectorId = value;
  }
  public resetCollectorId() {
    this._collectorId = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get collectorIdInput() {
    return this._collectorId;
  }

  // priority - computed: false, optional: true, required: false
  private _priority?: number; 
  public get priority() {
    return this.getNumberAttribute('priority');
  }
  public set priority(value: number) {
    this._priority = value;
  }
  public resetPriority() {
    this._priority = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get priorityInput() {
    return this._priority;
  }

  // use_public_ip - computed: false, optional: true, required: false
  private _usePublicIp?: boolean | cdktf.IResolvable; 
  public get usePublicIp() {
    return this.getBooleanAttribute('use_public_ip');
  }
  public set usePublicIp(value: boolean | cdktf.IResolvable) {
    this._usePublicIp = value;
  }
  public resetUsePublicIp() {
    this._usePublicIp = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get usePublicIpInput() {
    return this._usePublicIp;
  }
}

export class DeviceGroupExtraServicesEMRNormalCollectorConfigCollectorsList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesEMRNormalCollectorConfigCollectors[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesEMRNormalCollectorConfigCollectorsOutputReference {
    return new DeviceGroupExtraServicesEMRNormalCollectorConfigCollectorsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesEMRNormalCollectorConfig {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#collectors DeviceGroup#collectors}
  */
  readonly collectors?: DeviceGroupExtraServicesEMRNormalCollectorConfigCollectors[] | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#enabled DeviceGroup#enabled}
  */
  readonly enabled: boolean | cdktf.IResolvable;
}

export function deviceGroupExtraServicesEMRNormalCollectorConfigToTerraform(struct?: DeviceGroupExtraServicesEMRNormalCollectorConfig | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    collectors: cdktf.listMapper(deviceGroupExtraServicesEMRNormalCollectorConfigCollectorsToTerraform, false)(struct!.collectors),
    enabled: cdktf.booleanToTerraform(struct!.enabled),
  }
}


export function deviceGroupExtraServicesEMRNormalCollectorConfigToHclTerraform(struct?: DeviceGroupExtraServicesEMRNormalCollectorConfig | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    collectors: {
      value: cdktf.listMapperHcl(deviceGroupExtraServicesEMRNormalCollectorConfigCollectorsToHclTerraform, false)(struct!.collectors),
      isBlock: true,
      type: "list",
      storageClassType: "DeviceGroupExtraServicesEMRNormalCollectorConfigCollectorsList",
    },
    enabled: {
      value: cdktf.booleanToHclTerraform(struct!.enabled),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesEMRNormalCollectorConfigOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesEMRNormalCollectorConfig | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._collectors?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.collectors = this._collectors?.internalValue;
    }
    if (this._enabled !== undefined) {
      hasAnyValues = true;
      internalValueResult.enabled = this._enabled;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesEMRNormalCollectorConfig | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._collectors.internalValue = undefined;
      this._enabled = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._collectors.internalValue = value.collectors;
      this._enabled = value.enabled;
    }
  }

  // collectors - computed: false, optional: true, required: false
  private _collectors = new DeviceGroupExtraServicesEMRNormalCollectorConfigCollectorsList(this, "collectors", false);
  public get collectors() {
    return this._collectors;
  }
  public putCollectors(value: DeviceGroupExtraServicesEMRNormalCollectorConfigCollectors[] | cdktf.IResolvable) {
    this._collectors.internalValue = value;
  }
  public resetCollectors() {
    this._collectors.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get collectorsInput() {
    return this._collectors.internalValue;
  }

  // enabled - computed: false, optional: false, required: true
  private _enabled?: boolean | cdktf.IResolvable; 
  public get enabled() {
    return this.getBooleanAttribute('enabled');
  }
  public set enabled(value: boolean | cdktf.IResolvable) {
    this._enabled = value;
  }
  // Temporarily expose input value. Use with caution.
  public get enabledInput() {
    return this._enabled;
  }
}

export class DeviceGroupExtraServicesEMRNormalCollectorConfigList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesEMRNormalCollectorConfig[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesEMRNormalCollectorConfigOutputReference {
    return new DeviceGroupExtraServicesEMRNormalCollectorConfigOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesEMR {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#custom_n_s_p_schedule DeviceGroup#custom_n_s_p_schedule}
  */
  readonly customNSPSchedule?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#dead_operation DeviceGroup#dead_operation}
  */
  readonly deadOperation?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#device_display_name_template DeviceGroup#device_display_name_template}
  */
  readonly deviceDisplayNameTemplate?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#disable_stop_terminate_host_monitor DeviceGroup#disable_stop_terminate_host_monitor}
  */
  readonly disableStopTerminateHostMonitor?: boolean | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#disable_terminated_host_alerting DeviceGroup#disable_terminated_host_alerting}
  */
  readonly disableTerminatedHostAlerting?: boolean | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#monitoring_region_infos DeviceGroup#monitoring_region_infos}
  */
  readonly monitoringRegionInfos?: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#monitoring_regions DeviceGroup#monitoring_regions}
  */
  readonly monitoringRegions?: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#name_filter DeviceGroup#name_filter}
  */
  readonly nameFilter?: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#select_all DeviceGroup#select_all}
  */
  readonly selectAll?: boolean | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#tags DeviceGroup#tags}
  */
  readonly tags?: DeviceGroupExtraServicesEMRTags[] | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#use_default DeviceGroup#use_default}
  */
  readonly useDefault: boolean | cdktf.IResolvable;
  /**
  * normal_collector_config block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#normal_collector_config DeviceGroup#normal_collector_config}
  */
  readonly normalCollectorConfig?: DeviceGroupExtraServicesEMRNormalCollectorConfig[] | cdktf.IResolvable;
}

export function deviceGroupExtraServicesEMRToTerraform(struct?: DeviceGroupExtraServicesEMR | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    custom_n_s_p_schedule: cdktf.stringToTerraform(struct!.customNSPSchedule),
    dead_operation: cdktf.stringToTerraform(struct!.deadOperation),
    device_display_name_template: cdktf.stringToTerraform(struct!.deviceDisplayNameTemplate),
    disable_stop_terminate_host_monitor: cdktf.booleanToTerraform(struct!.disableStopTerminateHostMonitor),
    disable_terminated_host_alerting: cdktf.booleanToTerraform(struct!.disableTerminatedHostAlerting),
    monitoring_region_infos: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.monitoringRegionInfos),
    monitoring_regions: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.monitoringRegions),
    name_filter: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.nameFilter),
    select_all: cdktf.booleanToTerraform(struct!.selectAll),
    tags: cdktf.listMapper(deviceGroupExtraServicesEMRTagsToTerraform, false)(struct!.tags),
    use_default: cdktf.booleanToTerraform(struct!.useDefault),
    normal_collector_config: cdktf.listMapper(deviceGroupExtraServicesEMRNormalCollectorConfigToTerraform, true)(struct!.normalCollectorConfig),
  }
}


export function deviceGroupExtraServicesEMRToHclTerraform(struct?: DeviceGroupExtraServicesEMR | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    custom_n_s_p_schedule: {
      value: cdktf.stringToHclTerraform(struct!.customNSPSchedule),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    dead_operation: {
      value: cdktf.stringToHclTerraform(struct!.deadOperation),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    device_display_name_template: {
      value: cdktf.stringToHclTerraform(struct!.deviceDisplayNameTemplate),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    disable_stop_terminate_host_monitor: {
      value: cdktf.booleanToHclTerraform(struct!.disableStopTerminateHostMonitor),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    disable_terminated_host_alerting: {
      value: cdktf.booleanToHclTerraform(struct!.disableTerminatedHostAlerting),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    monitoring_region_infos: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.monitoringRegionInfos),
      isBlock: false,
      type: "set",
      storageClassType: "stringList",
    },
    monitoring_regions: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.monitoringRegions),
      isBlock: false,
      type: "set",
      storageClassType: "stringList",
    },
    name_filter: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.nameFilter),
      isBlock: false,
      type: "set",
      storageClassType: "stringList",
    },
    select_all: {
      value: cdktf.booleanToHclTerraform(struct!.selectAll),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    tags: {
      value: cdktf.listMapperHcl(deviceGroupExtraServicesEMRTagsToHclTerraform, false)(struct!.tags),
      isBlock: true,
      type: "list",
      storageClassType: "DeviceGroupExtraServicesEMRTagsList",
    },
    use_default: {
      value: cdktf.booleanToHclTerraform(struct!.useDefault),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    normal_collector_config: {
      value: cdktf.listMapperHcl(deviceGroupExtraServicesEMRNormalCollectorConfigToHclTerraform, true)(struct!.normalCollectorConfig),
      isBlock: true,
      type: "list",
      storageClassType: "DeviceGroupExtraServicesEMRNormalCollectorConfigList",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesEMROutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesEMR | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._customNSPSchedule !== undefined) {
      hasAnyValues = true;
      internalValueResult.customNSPSchedule = this._customNSPSchedule;
    }
    if (this._deadOperation !== undefined) {
      hasAnyValues = true;
      internalValueResult.deadOperation = this._deadOperation;
    }
    if (this._deviceDisplayNameTemplate !== undefined) {
      hasAnyValues = true;
      internalValueResult.deviceDisplayNameTemplate = this._deviceDisplayNameTemplate;
    }
    if (this._disableStopTerminateHostMonitor !== undefined) {
      hasAnyValues = true;
      internalValueResult.disableStopTerminateHostMonitor = this._disableStopTerminateHostMonitor;
    }
    if (this._disableTerminatedHostAlerting !== undefined) {
      hasAnyValues = true;
      internalValueResult.disableTerminatedHostAlerting = this._disableTerminatedHostAlerting;
    }
    if (this._monitoringRegionInfos !== undefined) {
      hasAnyValues = true;
      internalValueResult.monitoringRegionInfos = this._monitoringRegionInfos;
    }
    if (this._monitoringRegions !== undefined) {
      hasAnyValues = true;
      internalValueResult.monitoringRegions = this._monitoringRegions;
    }
    if (this._nameFilter !== undefined) {
      hasAnyValues = true;
      internalValueResult.nameFilter = this._nameFilter;
    }
    if (this._selectAll !== undefined) {
      hasAnyValues = true;
      internalValueResult.selectAll = this._selectAll;
    }
    if (this._tags?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.tags = this._tags?.internalValue;
    }
    if (this._useDefault !== undefined) {
      hasAnyValues = true;
      internalValueResult.useDefault = this._useDefault;
    }
    if (this._normalCollectorConfig?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.normalCollectorConfig = this._normalCollectorConfig?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesEMR | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._customNSPSchedule = undefined;
      this._deadOperation = undefined;
      this._deviceDisplayNameTemplate = undefined;
      this._disableStopTerminateHostMonitor = undefined;
      this._disableTerminatedHostAlerting = undefined;
      this._monitoringRegionInfos = undefined;
      this._monitoringRegions = undefined;
      this._nameFilter = undefined;
      this._selectAll = undefined;
      this._tags.internalValue = undefined;
      this._useDefault = undefined;
      this._normalCollectorConfig.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._customNSPSchedule = value.customNSPSchedule;
      this._deadOperation = value.deadOperation;
      this._deviceDisplayNameTemplate = value.deviceDisplayNameTemplate;
      this._disableStopTerminateHostMonitor = value.disableStopTerminateHostMonitor;
      this._disableTerminatedHostAlerting = value.disableTerminatedHostAlerting;
      this._monitoringRegionInfos = value.monitoringRegionInfos;
      this._monitoringRegions = value.monitoringRegions;
      this._nameFilter = value.nameFilter;
      this._selectAll = value.selectAll;
      this._tags.internalValue = value.tags;
      this._useDefault = value.useDefault;
      this._normalCollectorConfig.internalValue = value.normalCollectorConfig;
    }
  }

  // custom_n_s_p_schedule - computed: false, optional: true, required: false
  private _customNSPSchedule?: string; 
  public get customNSPSchedule() {
    return this.getStringAttribute('custom_n_s_p_schedule');
  }
  public set customNSPSchedule(value: string) {
    this._customNSPSchedule = value;
  }
  public resetCustomNSPSchedule() {
    this._customNSPSchedule = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get customNSPScheduleInput() {
    return this._customNSPSchedule;
  }

  // dead_operation - computed: false, optional: true, required: false
  private _deadOperation?: string; 
  public get deadOperation() {
    return this.getStringAttribute('dead_operation');
  }
  public set deadOperation(value: string) {
    this._deadOperation = value;
  }
  public resetDeadOperation() {
    this._deadOperation = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get deadOperationInput() {
    return this._deadOperation;
  }

  // device_display_name_template - computed: false, optional: true, required: false
  private _deviceDisplayNameTemplate?: string; 
  public get deviceDisplayNameTemplate() {
    return this.getStringAttribute('device_display_name_template');
  }
  public set deviceDisplayNameTemplate(value: string) {
    this._deviceDisplayNameTemplate = value;
  }
  public resetDeviceDisplayNameTemplate() {
    this._deviceDisplayNameTemplate = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get deviceDisplayNameTemplateInput() {
    return this._deviceDisplayNameTemplate;
  }

  // disable_stop_terminate_host_monitor - computed: false, optional: true, required: false
  private _disableStopTerminateHostMonitor?: boolean | cdktf.IResolvable; 
  public get disableStopTerminateHostMonitor() {
    return this.getBooleanAttribute('disable_stop_terminate_host_monitor');
  }
  public set disableStopTerminateHostMonitor(value: boolean | cdktf.IResolvable) {
    this._disableStopTerminateHostMonitor = value;
  }
  public resetDisableStopTerminateHostMonitor() {
    this._disableStopTerminateHostMonitor = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get disableStopTerminateHostMonitorInput() {
    return this._disableStopTerminateHostMonitor;
  }

  // disable_terminated_host_alerting - computed: false, optional: true, required: false
  private _disableTerminatedHostAlerting?: boolean | cdktf.IResolvable; 
  public get disableTerminatedHostAlerting() {
    return this.getBooleanAttribute('disable_terminated_host_alerting');
  }
  public set disableTerminatedHostAlerting(value: boolean | cdktf.IResolvable) {
    this._disableTerminatedHostAlerting = value;
  }
  public resetDisableTerminatedHostAlerting() {
    this._disableTerminatedHostAlerting = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get disableTerminatedHostAlertingInput() {
    return this._disableTerminatedHostAlerting;
  }

  // monitoring_region_infos - computed: false, optional: true, required: false
  private _monitoringRegionInfos?: string[]; 
  public get monitoringRegionInfos() {
    return cdktf.Fn.tolist(this.getListAttribute('monitoring_region_infos'));
  }
  public set monitoringRegionInfos(value: string[]) {
    this._monitoringRegionInfos = value;
  }
  public resetMonitoringRegionInfos() {
    this._monitoringRegionInfos = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get monitoringRegionInfosInput() {
    return this._monitoringRegionInfos;
  }

  // monitoring_regions - computed: false, optional: true, required: false
  private _monitoringRegions?: string[]; 
  public get monitoringRegions() {
    return cdktf.Fn.tolist(this.getListAttribute('monitoring_regions'));
  }
  public set monitoringRegions(value: string[]) {
    this._monitoringRegions = value;
  }
  public resetMonitoringRegions() {
    this._monitoringRegions = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get monitoringRegionsInput() {
    return this._monitoringRegions;
  }

  // name_filter - computed: false, optional: true, required: false
  private _nameFilter?: string[]; 
  public get nameFilter() {
    return cdktf.Fn.tolist(this.getListAttribute('name_filter'));
  }
  public set nameFilter(value: string[]) {
    this._nameFilter = value;
  }
  public resetNameFilter() {
    this._nameFilter = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get nameFilterInput() {
    return this._nameFilter;
  }

  // select_all - computed: false, optional: true, required: false
  private _selectAll?: boolean | cdktf.IResolvable; 
  public get selectAll() {
    return this.getBooleanAttribute('select_all');
  }
  public set selectAll(value: boolean | cdktf.IResolvable) {
    this._selectAll = value;
  }
  public resetSelectAll() {
    this._selectAll = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get selectAllInput() {
    return this._selectAll;
  }

  // tags - computed: false, optional: true, required: false
  private _tags = new DeviceGroupExtraServicesEMRTagsList(this, "tags", false);
  public get tags() {
    return this._tags;
  }
  public putTags(value: DeviceGroupExtraServicesEMRTags[] | cdktf.IResolvable) {
    this._tags.internalValue = value;
  }
  public resetTags() {
    this._tags.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get tagsInput() {
    return this._tags.internalValue;
  }

  // use_default - computed: false, optional: false, required: true
  private _useDefault?: boolean | cdktf.IResolvable; 
  public get useDefault() {
    return this.getBooleanAttribute('use_default');
  }
  public set useDefault(value: boolean | cdktf.IResolvable) {
    this._useDefault = value;
  }
  // Temporarily expose input value. Use with caution.
  public get useDefaultInput() {
    return this._useDefault;
  }

  // normal_collector_config - computed: false, optional: true, required: false
  private _normalCollectorConfig = new DeviceGroupExtraServicesEMRNormalCollectorConfigList(this, "normal_collector_config", false);
  public get normalCollectorConfig() {
    return this._normalCollectorConfig;
  }
  public putNormalCollectorConfig(value: DeviceGroupExtraServicesEMRNormalCollectorConfig[] | cdktf.IResolvable) {
    this._normalCollectorConfig.internalValue = value;
  }
  public resetNormalCollectorConfig() {
    this._normalCollectorConfig.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get normalCollectorConfigInput() {
    return this._normalCollectorConfig.internalValue;
  }
}

export class DeviceGroupExtraServicesEMRList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesEMR[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesEMROutputReference {
    return new DeviceGroupExtraServicesEMROutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesEVENTBRIdGETags {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#name DeviceGroup#name}
  */
  readonly name?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#operation DeviceGroup#operation}
  */
  readonly operation?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#value DeviceGroup#value}
  */
  readonly value?: string;
}

export function deviceGroupExtraServicesEVENTBRIdGETagsToTerraform(struct?: DeviceGroupExtraServicesEVENTBRIdGETags | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    name: cdktf.stringToTerraform(struct!.name),
    operation: cdktf.stringToTerraform(struct!.operation),
    value: cdktf.stringToTerraform(struct!.value),
  }
}


export function deviceGroupExtraServicesEVENTBRIdGETagsToHclTerraform(struct?: DeviceGroupExtraServicesEVENTBRIdGETags | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    name: {
      value: cdktf.stringToHclTerraform(struct!.name),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    operation: {
      value: cdktf.stringToHclTerraform(struct!.operation),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    value: {
      value: cdktf.stringToHclTerraform(struct!.value),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesEVENTBRIdGETagsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesEVENTBRIdGETags | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._name !== undefined) {
      hasAnyValues = true;
      internalValueResult.name = this._name;
    }
    if (this._operation !== undefined) {
      hasAnyValues = true;
      internalValueResult.operation = this._operation;
    }
    if (this._value !== undefined) {
      hasAnyValues = true;
      internalValueResult.value = this._value;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesEVENTBRIdGETags | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._name = undefined;
      this._operation = undefined;
      this._value = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._name = value.name;
      this._operation = value.operation;
      this._value = value.value;
    }
  }

  // name - computed: false, optional: true, required: false
  private _name?: string; 
  public get name() {
    return this.getStringAttribute('name');
  }
  public set name(value: string) {
    this._name = value;
  }
  public resetName() {
    this._name = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get nameInput() {
    return this._name;
  }

  // operation - computed: false, optional: true, required: false
  private _operation?: string; 
  public get operation() {
    return this.getStringAttribute('operation');
  }
  public set operation(value: string) {
    this._operation = value;
  }
  public resetOperation() {
    this._operation = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get operationInput() {
    return this._operation;
  }

  // value - computed: false, optional: true, required: false
  private _value?: string; 
  public get value() {
    return this.getStringAttribute('value');
  }
  public set value(value: string) {
    this._value = value;
  }
  public resetValue() {
    this._value = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get valueInput() {
    return this._value;
  }
}

export class DeviceGroupExtraServicesEVENTBRIdGETagsList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesEVENTBRIdGETags[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesEVENTBRIdGETagsOutputReference {
    return new DeviceGroupExtraServicesEVENTBRIdGETagsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesEVENTBRIdGENormalCollectorConfigCollectors {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#applies_to DeviceGroup#applies_to}
  */
  readonly appliesTo?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#auto_balanced_collector_group_id DeviceGroup#auto_balanced_collector_group_id}
  */
  readonly autoBalancedCollectorGroupId?: number;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#collector_id DeviceGroup#collector_id}
  */
  readonly collectorId?: number;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#priority DeviceGroup#priority}
  */
  readonly priority?: number;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#use_public_ip DeviceGroup#use_public_ip}
  */
  readonly usePublicIp?: boolean | cdktf.IResolvable;
}

export function deviceGroupExtraServicesEVENTBRIdGENormalCollectorConfigCollectorsToTerraform(struct?: DeviceGroupExtraServicesEVENTBRIdGENormalCollectorConfigCollectors | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    applies_to: cdktf.stringToTerraform(struct!.appliesTo),
    auto_balanced_collector_group_id: cdktf.numberToTerraform(struct!.autoBalancedCollectorGroupId),
    collector_id: cdktf.numberToTerraform(struct!.collectorId),
    priority: cdktf.numberToTerraform(struct!.priority),
    use_public_ip: cdktf.booleanToTerraform(struct!.usePublicIp),
  }
}


export function deviceGroupExtraServicesEVENTBRIdGENormalCollectorConfigCollectorsToHclTerraform(struct?: DeviceGroupExtraServicesEVENTBRIdGENormalCollectorConfigCollectors | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    applies_to: {
      value: cdktf.stringToHclTerraform(struct!.appliesTo),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    auto_balanced_collector_group_id: {
      value: cdktf.numberToHclTerraform(struct!.autoBalancedCollectorGroupId),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    collector_id: {
      value: cdktf.numberToHclTerraform(struct!.collectorId),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    priority: {
      value: cdktf.numberToHclTerraform(struct!.priority),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    use_public_ip: {
      value: cdktf.booleanToHclTerraform(struct!.usePublicIp),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesEVENTBRIdGENormalCollectorConfigCollectorsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesEVENTBRIdGENormalCollectorConfigCollectors | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._appliesTo !== undefined) {
      hasAnyValues = true;
      internalValueResult.appliesTo = this._appliesTo;
    }
    if (this._autoBalancedCollectorGroupId !== undefined) {
      hasAnyValues = true;
      internalValueResult.autoBalancedCollectorGroupId = this._autoBalancedCollectorGroupId;
    }
    if (this._collectorId !== undefined) {
      hasAnyValues = true;
      internalValueResult.collectorId = this._collectorId;
    }
    if (this._priority !== undefined) {
      hasAnyValues = true;
      internalValueResult.priority = this._priority;
    }
    if (this._usePublicIp !== undefined) {
      hasAnyValues = true;
      internalValueResult.usePublicIp = this._usePublicIp;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesEVENTBRIdGENormalCollectorConfigCollectors | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._appliesTo = undefined;
      this._autoBalancedCollectorGroupId = undefined;
      this._collectorId = undefined;
      this._priority = undefined;
      this._usePublicIp = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._appliesTo = value.appliesTo;
      this._autoBalancedCollectorGroupId = value.autoBalancedCollectorGroupId;
      this._collectorId = value.collectorId;
      this._priority = value.priority;
      this._usePublicIp = value.usePublicIp;
    }
  }

  // applies_to - computed: false, optional: true, required: false
  private _appliesTo?: string; 
  public get appliesTo() {
    return this.getStringAttribute('applies_to');
  }
  public set appliesTo(value: string) {
    this._appliesTo = value;
  }
  public resetAppliesTo() {
    this._appliesTo = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get appliesToInput() {
    return this._appliesTo;
  }

  // auto_balanced_collector_group_id - computed: false, optional: true, required: false
  private _autoBalancedCollectorGroupId?: number; 
  public get autoBalancedCollectorGroupId() {
    return this.getNumberAttribute('auto_balanced_collector_group_id');
  }
  public set autoBalancedCollectorGroupId(value: number) {
    this._autoBalancedCollectorGroupId = value;
  }
  public resetAutoBalancedCollectorGroupId() {
    this._autoBalancedCollectorGroupId = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get autoBalancedCollectorGroupIdInput() {
    return this._autoBalancedCollectorGroupId;
  }

  // collector_id - computed: false, optional: true, required: false
  private _collectorId?: number; 
  public get collectorId() {
    return this.getNumberAttribute('collector_id');
  }
  public set collectorId(value: number) {
    this._collectorId = value;
  }
  public resetCollectorId() {
    this._collectorId = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get collectorIdInput() {
    return this._collectorId;
  }

  // priority - computed: false, optional: true, required: false
  private _priority?: number; 
  public get priority() {
    return this.getNumberAttribute('priority');
  }
  public set priority(value: number) {
    this._priority = value;
  }
  public resetPriority() {
    this._priority = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get priorityInput() {
    return this._priority;
  }

  // use_public_ip - computed: false, optional: true, required: false
  private _usePublicIp?: boolean | cdktf.IResolvable; 
  public get usePublicIp() {
    return this.getBooleanAttribute('use_public_ip');
  }
  public set usePublicIp(value: boolean | cdktf.IResolvable) {
    this._usePublicIp = value;
  }
  public resetUsePublicIp() {
    this._usePublicIp = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get usePublicIpInput() {
    return this._usePublicIp;
  }
}

export class DeviceGroupExtraServicesEVENTBRIdGENormalCollectorConfigCollectorsList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesEVENTBRIdGENormalCollectorConfigCollectors[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesEVENTBRIdGENormalCollectorConfigCollectorsOutputReference {
    return new DeviceGroupExtraServicesEVENTBRIdGENormalCollectorConfigCollectorsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesEVENTBRIdGENormalCollectorConfig {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#collectors DeviceGroup#collectors}
  */
  readonly collectors?: DeviceGroupExtraServicesEVENTBRIdGENormalCollectorConfigCollectors[] | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#enabled DeviceGroup#enabled}
  */
  readonly enabled: boolean | cdktf.IResolvable;
}

export function deviceGroupExtraServicesEVENTBRIdGENormalCollectorConfigToTerraform(struct?: DeviceGroupExtraServicesEVENTBRIdGENormalCollectorConfig | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    collectors: cdktf.listMapper(deviceGroupExtraServicesEVENTBRIdGENormalCollectorConfigCollectorsToTerraform, false)(struct!.collectors),
    enabled: cdktf.booleanToTerraform(struct!.enabled),
  }
}


export function deviceGroupExtraServicesEVENTBRIdGENormalCollectorConfigToHclTerraform(struct?: DeviceGroupExtraServicesEVENTBRIdGENormalCollectorConfig | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    collectors: {
      value: cdktf.listMapperHcl(deviceGroupExtraServicesEVENTBRIdGENormalCollectorConfigCollectorsToHclTerraform, false)(struct!.collectors),
      isBlock: true,
      type: "list",
      storageClassType: "DeviceGroupExtraServicesEVENTBRIdGENormalCollectorConfigCollectorsList",
    },
    enabled: {
      value: cdktf.booleanToHclTerraform(struct!.enabled),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesEVENTBRIdGENormalCollectorConfigOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesEVENTBRIdGENormalCollectorConfig | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._collectors?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.collectors = this._collectors?.internalValue;
    }
    if (this._enabled !== undefined) {
      hasAnyValues = true;
      internalValueResult.enabled = this._enabled;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesEVENTBRIdGENormalCollectorConfig | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._collectors.internalValue = undefined;
      this._enabled = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._collectors.internalValue = value.collectors;
      this._enabled = value.enabled;
    }
  }

  // collectors - computed: false, optional: true, required: false
  private _collectors = new DeviceGroupExtraServicesEVENTBRIdGENormalCollectorConfigCollectorsList(this, "collectors", false);
  public get collectors() {
    return this._collectors;
  }
  public putCollectors(value: DeviceGroupExtraServicesEVENTBRIdGENormalCollectorConfigCollectors[] | cdktf.IResolvable) {
    this._collectors.internalValue = value;
  }
  public resetCollectors() {
    this._collectors.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get collectorsInput() {
    return this._collectors.internalValue;
  }

  // enabled - computed: false, optional: false, required: true
  private _enabled?: boolean | cdktf.IResolvable; 
  public get enabled() {
    return this.getBooleanAttribute('enabled');
  }
  public set enabled(value: boolean | cdktf.IResolvable) {
    this._enabled = value;
  }
  // Temporarily expose input value. Use with caution.
  public get enabledInput() {
    return this._enabled;
  }
}

export class DeviceGroupExtraServicesEVENTBRIdGENormalCollectorConfigList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesEVENTBRIdGENormalCollectorConfig[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesEVENTBRIdGENormalCollectorConfigOutputReference {
    return new DeviceGroupExtraServicesEVENTBRIdGENormalCollectorConfigOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesEVENTBRIdGE {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#custom_n_s_p_schedule DeviceGroup#custom_n_s_p_schedule}
  */
  readonly customNSPSchedule?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#dead_operation DeviceGroup#dead_operation}
  */
  readonly deadOperation?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#device_display_name_template DeviceGroup#device_display_name_template}
  */
  readonly deviceDisplayNameTemplate?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#disable_stop_terminate_host_monitor DeviceGroup#disable_stop_terminate_host_monitor}
  */
  readonly disableStopTerminateHostMonitor?: boolean | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#disable_terminated_host_alerting DeviceGroup#disable_terminated_host_alerting}
  */
  readonly disableTerminatedHostAlerting?: boolean | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#monitoring_region_infos DeviceGroup#monitoring_region_infos}
  */
  readonly monitoringRegionInfos?: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#monitoring_regions DeviceGroup#monitoring_regions}
  */
  readonly monitoringRegions?: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#name_filter DeviceGroup#name_filter}
  */
  readonly nameFilter?: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#select_all DeviceGroup#select_all}
  */
  readonly selectAll?: boolean | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#tags DeviceGroup#tags}
  */
  readonly tags?: DeviceGroupExtraServicesEVENTBRIdGETags[] | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#use_default DeviceGroup#use_default}
  */
  readonly useDefault: boolean | cdktf.IResolvable;
  /**
  * normal_collector_config block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#normal_collector_config DeviceGroup#normal_collector_config}
  */
  readonly normalCollectorConfig?: DeviceGroupExtraServicesEVENTBRIdGENormalCollectorConfig[] | cdktf.IResolvable;
}

export function deviceGroupExtraServicesEVENTBRIdGEToTerraform(struct?: DeviceGroupExtraServicesEVENTBRIdGE | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    custom_n_s_p_schedule: cdktf.stringToTerraform(struct!.customNSPSchedule),
    dead_operation: cdktf.stringToTerraform(struct!.deadOperation),
    device_display_name_template: cdktf.stringToTerraform(struct!.deviceDisplayNameTemplate),
    disable_stop_terminate_host_monitor: cdktf.booleanToTerraform(struct!.disableStopTerminateHostMonitor),
    disable_terminated_host_alerting: cdktf.booleanToTerraform(struct!.disableTerminatedHostAlerting),
    monitoring_region_infos: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.monitoringRegionInfos),
    monitoring_regions: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.monitoringRegions),
    name_filter: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.nameFilter),
    select_all: cdktf.booleanToTerraform(struct!.selectAll),
    tags: cdktf.listMapper(deviceGroupExtraServicesEVENTBRIdGETagsToTerraform, false)(struct!.tags),
    use_default: cdktf.booleanToTerraform(struct!.useDefault),
    normal_collector_config: cdktf.listMapper(deviceGroupExtraServicesEVENTBRIdGENormalCollectorConfigToTerraform, true)(struct!.normalCollectorConfig),
  }
}


export function deviceGroupExtraServicesEVENTBRIdGEToHclTerraform(struct?: DeviceGroupExtraServicesEVENTBRIdGE | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    custom_n_s_p_schedule: {
      value: cdktf.stringToHclTerraform(struct!.customNSPSchedule),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    dead_operation: {
      value: cdktf.stringToHclTerraform(struct!.deadOperation),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    device_display_name_template: {
      value: cdktf.stringToHclTerraform(struct!.deviceDisplayNameTemplate),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    disable_stop_terminate_host_monitor: {
      value: cdktf.booleanToHclTerraform(struct!.disableStopTerminateHostMonitor),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    disable_terminated_host_alerting: {
      value: cdktf.booleanToHclTerraform(struct!.disableTerminatedHostAlerting),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    monitoring_region_infos: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.monitoringRegionInfos),
      isBlock: false,
      type: "set",
      storageClassType: "stringList",
    },
    monitoring_regions: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.monitoringRegions),
      isBlock: false,
      type: "set",
      storageClassType: "stringList",
    },
    name_filter: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.nameFilter),
      isBlock: false,
      type: "set",
      storageClassType: "stringList",
    },
    select_all: {
      value: cdktf.booleanToHclTerraform(struct!.selectAll),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    tags: {
      value: cdktf.listMapperHcl(deviceGroupExtraServicesEVENTBRIdGETagsToHclTerraform, false)(struct!.tags),
      isBlock: true,
      type: "list",
      storageClassType: "DeviceGroupExtraServicesEVENTBRIdGETagsList",
    },
    use_default: {
      value: cdktf.booleanToHclTerraform(struct!.useDefault),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    normal_collector_config: {
      value: cdktf.listMapperHcl(deviceGroupExtraServicesEVENTBRIdGENormalCollectorConfigToHclTerraform, true)(struct!.normalCollectorConfig),
      isBlock: true,
      type: "list",
      storageClassType: "DeviceGroupExtraServicesEVENTBRIdGENormalCollectorConfigList",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesEVENTBRIdGEOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesEVENTBRIdGE | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._customNSPSchedule !== undefined) {
      hasAnyValues = true;
      internalValueResult.customNSPSchedule = this._customNSPSchedule;
    }
    if (this._deadOperation !== undefined) {
      hasAnyValues = true;
      internalValueResult.deadOperation = this._deadOperation;
    }
    if (this._deviceDisplayNameTemplate !== undefined) {
      hasAnyValues = true;
      internalValueResult.deviceDisplayNameTemplate = this._deviceDisplayNameTemplate;
    }
    if (this._disableStopTerminateHostMonitor !== undefined) {
      hasAnyValues = true;
      internalValueResult.disableStopTerminateHostMonitor = this._disableStopTerminateHostMonitor;
    }
    if (this._disableTerminatedHostAlerting !== undefined) {
      hasAnyValues = true;
      internalValueResult.disableTerminatedHostAlerting = this._disableTerminatedHostAlerting;
    }
    if (this._monitoringRegionInfos !== undefined) {
      hasAnyValues = true;
      internalValueResult.monitoringRegionInfos = this._monitoringRegionInfos;
    }
    if (this._monitoringRegions !== undefined) {
      hasAnyValues = true;
      internalValueResult.monitoringRegions = this._monitoringRegions;
    }
    if (this._nameFilter !== undefined) {
      hasAnyValues = true;
      internalValueResult.nameFilter = this._nameFilter;
    }
    if (this._selectAll !== undefined) {
      hasAnyValues = true;
      internalValueResult.selectAll = this._selectAll;
    }
    if (this._tags?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.tags = this._tags?.internalValue;
    }
    if (this._useDefault !== undefined) {
      hasAnyValues = true;
      internalValueResult.useDefault = this._useDefault;
    }
    if (this._normalCollectorConfig?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.normalCollectorConfig = this._normalCollectorConfig?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesEVENTBRIdGE | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._customNSPSchedule = undefined;
      this._deadOperation = undefined;
      this._deviceDisplayNameTemplate = undefined;
      this._disableStopTerminateHostMonitor = undefined;
      this._disableTerminatedHostAlerting = undefined;
      this._monitoringRegionInfos = undefined;
      this._monitoringRegions = undefined;
      this._nameFilter = undefined;
      this._selectAll = undefined;
      this._tags.internalValue = undefined;
      this._useDefault = undefined;
      this._normalCollectorConfig.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._customNSPSchedule = value.customNSPSchedule;
      this._deadOperation = value.deadOperation;
      this._deviceDisplayNameTemplate = value.deviceDisplayNameTemplate;
      this._disableStopTerminateHostMonitor = value.disableStopTerminateHostMonitor;
      this._disableTerminatedHostAlerting = value.disableTerminatedHostAlerting;
      this._monitoringRegionInfos = value.monitoringRegionInfos;
      this._monitoringRegions = value.monitoringRegions;
      this._nameFilter = value.nameFilter;
      this._selectAll = value.selectAll;
      this._tags.internalValue = value.tags;
      this._useDefault = value.useDefault;
      this._normalCollectorConfig.internalValue = value.normalCollectorConfig;
    }
  }

  // custom_n_s_p_schedule - computed: false, optional: true, required: false
  private _customNSPSchedule?: string; 
  public get customNSPSchedule() {
    return this.getStringAttribute('custom_n_s_p_schedule');
  }
  public set customNSPSchedule(value: string) {
    this._customNSPSchedule = value;
  }
  public resetCustomNSPSchedule() {
    this._customNSPSchedule = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get customNSPScheduleInput() {
    return this._customNSPSchedule;
  }

  // dead_operation - computed: false, optional: true, required: false
  private _deadOperation?: string; 
  public get deadOperation() {
    return this.getStringAttribute('dead_operation');
  }
  public set deadOperation(value: string) {
    this._deadOperation = value;
  }
  public resetDeadOperation() {
    this._deadOperation = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get deadOperationInput() {
    return this._deadOperation;
  }

  // device_display_name_template - computed: false, optional: true, required: false
  private _deviceDisplayNameTemplate?: string; 
  public get deviceDisplayNameTemplate() {
    return this.getStringAttribute('device_display_name_template');
  }
  public set deviceDisplayNameTemplate(value: string) {
    this._deviceDisplayNameTemplate = value;
  }
  public resetDeviceDisplayNameTemplate() {
    this._deviceDisplayNameTemplate = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get deviceDisplayNameTemplateInput() {
    return this._deviceDisplayNameTemplate;
  }

  // disable_stop_terminate_host_monitor - computed: false, optional: true, required: false
  private _disableStopTerminateHostMonitor?: boolean | cdktf.IResolvable; 
  public get disableStopTerminateHostMonitor() {
    return this.getBooleanAttribute('disable_stop_terminate_host_monitor');
  }
  public set disableStopTerminateHostMonitor(value: boolean | cdktf.IResolvable) {
    this._disableStopTerminateHostMonitor = value;
  }
  public resetDisableStopTerminateHostMonitor() {
    this._disableStopTerminateHostMonitor = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get disableStopTerminateHostMonitorInput() {
    return this._disableStopTerminateHostMonitor;
  }

  // disable_terminated_host_alerting - computed: false, optional: true, required: false
  private _disableTerminatedHostAlerting?: boolean | cdktf.IResolvable; 
  public get disableTerminatedHostAlerting() {
    return this.getBooleanAttribute('disable_terminated_host_alerting');
  }
  public set disableTerminatedHostAlerting(value: boolean | cdktf.IResolvable) {
    this._disableTerminatedHostAlerting = value;
  }
  public resetDisableTerminatedHostAlerting() {
    this._disableTerminatedHostAlerting = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get disableTerminatedHostAlertingInput() {
    return this._disableTerminatedHostAlerting;
  }

  // monitoring_region_infos - computed: false, optional: true, required: false
  private _monitoringRegionInfos?: string[]; 
  public get monitoringRegionInfos() {
    return cdktf.Fn.tolist(this.getListAttribute('monitoring_region_infos'));
  }
  public set monitoringRegionInfos(value: string[]) {
    this._monitoringRegionInfos = value;
  }
  public resetMonitoringRegionInfos() {
    this._monitoringRegionInfos = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get monitoringRegionInfosInput() {
    return this._monitoringRegionInfos;
  }

  // monitoring_regions - computed: false, optional: true, required: false
  private _monitoringRegions?: string[]; 
  public get monitoringRegions() {
    return cdktf.Fn.tolist(this.getListAttribute('monitoring_regions'));
  }
  public set monitoringRegions(value: string[]) {
    this._monitoringRegions = value;
  }
  public resetMonitoringRegions() {
    this._monitoringRegions = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get monitoringRegionsInput() {
    return this._monitoringRegions;
  }

  // name_filter - computed: false, optional: true, required: false
  private _nameFilter?: string[]; 
  public get nameFilter() {
    return cdktf.Fn.tolist(this.getListAttribute('name_filter'));
  }
  public set nameFilter(value: string[]) {
    this._nameFilter = value;
  }
  public resetNameFilter() {
    this._nameFilter = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get nameFilterInput() {
    return this._nameFilter;
  }

  // select_all - computed: false, optional: true, required: false
  private _selectAll?: boolean | cdktf.IResolvable; 
  public get selectAll() {
    return this.getBooleanAttribute('select_all');
  }
  public set selectAll(value: boolean | cdktf.IResolvable) {
    this._selectAll = value;
  }
  public resetSelectAll() {
    this._selectAll = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get selectAllInput() {
    return this._selectAll;
  }

  // tags - computed: false, optional: true, required: false
  private _tags = new DeviceGroupExtraServicesEVENTBRIdGETagsList(this, "tags", false);
  public get tags() {
    return this._tags;
  }
  public putTags(value: DeviceGroupExtraServicesEVENTBRIdGETags[] | cdktf.IResolvable) {
    this._tags.internalValue = value;
  }
  public resetTags() {
    this._tags.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get tagsInput() {
    return this._tags.internalValue;
  }

  // use_default - computed: false, optional: false, required: true
  private _useDefault?: boolean | cdktf.IResolvable; 
  public get useDefault() {
    return this.getBooleanAttribute('use_default');
  }
  public set useDefault(value: boolean | cdktf.IResolvable) {
    this._useDefault = value;
  }
  // Temporarily expose input value. Use with caution.
  public get useDefaultInput() {
    return this._useDefault;
  }

  // normal_collector_config - computed: false, optional: true, required: false
  private _normalCollectorConfig = new DeviceGroupExtraServicesEVENTBRIdGENormalCollectorConfigList(this, "normal_collector_config", false);
  public get normalCollectorConfig() {
    return this._normalCollectorConfig;
  }
  public putNormalCollectorConfig(value: DeviceGroupExtraServicesEVENTBRIdGENormalCollectorConfig[] | cdktf.IResolvable) {
    this._normalCollectorConfig.internalValue = value;
  }
  public resetNormalCollectorConfig() {
    this._normalCollectorConfig.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get normalCollectorConfigInput() {
    return this._normalCollectorConfig.internalValue;
  }
}

export class DeviceGroupExtraServicesEVENTBRIdGEList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesEVENTBRIdGE[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesEVENTBRIdGEOutputReference {
    return new DeviceGroupExtraServicesEVENTBRIdGEOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesEVENTHUBTags {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#name DeviceGroup#name}
  */
  readonly name?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#operation DeviceGroup#operation}
  */
  readonly operation?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#value DeviceGroup#value}
  */
  readonly value?: string;
}

export function deviceGroupExtraServicesEVENTHUBTagsToTerraform(struct?: DeviceGroupExtraServicesEVENTHUBTags | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    name: cdktf.stringToTerraform(struct!.name),
    operation: cdktf.stringToTerraform(struct!.operation),
    value: cdktf.stringToTerraform(struct!.value),
  }
}


export function deviceGroupExtraServicesEVENTHUBTagsToHclTerraform(struct?: DeviceGroupExtraServicesEVENTHUBTags | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    name: {
      value: cdktf.stringToHclTerraform(struct!.name),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    operation: {
      value: cdktf.stringToHclTerraform(struct!.operation),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    value: {
      value: cdktf.stringToHclTerraform(struct!.value),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesEVENTHUBTagsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesEVENTHUBTags | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._name !== undefined) {
      hasAnyValues = true;
      internalValueResult.name = this._name;
    }
    if (this._operation !== undefined) {
      hasAnyValues = true;
      internalValueResult.operation = this._operation;
    }
    if (this._value !== undefined) {
      hasAnyValues = true;
      internalValueResult.value = this._value;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesEVENTHUBTags | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._name = undefined;
      this._operation = undefined;
      this._value = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._name = value.name;
      this._operation = value.operation;
      this._value = value.value;
    }
  }

  // name - computed: false, optional: true, required: false
  private _name?: string; 
  public get name() {
    return this.getStringAttribute('name');
  }
  public set name(value: string) {
    this._name = value;
  }
  public resetName() {
    this._name = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get nameInput() {
    return this._name;
  }

  // operation - computed: false, optional: true, required: false
  private _operation?: string; 
  public get operation() {
    return this.getStringAttribute('operation');
  }
  public set operation(value: string) {
    this._operation = value;
  }
  public resetOperation() {
    this._operation = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get operationInput() {
    return this._operation;
  }

  // value - computed: false, optional: true, required: false
  private _value?: string; 
  public get value() {
    return this.getStringAttribute('value');
  }
  public set value(value: string) {
    this._value = value;
  }
  public resetValue() {
    this._value = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get valueInput() {
    return this._value;
  }
}

export class DeviceGroupExtraServicesEVENTHUBTagsList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesEVENTHUBTags[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesEVENTHUBTagsOutputReference {
    return new DeviceGroupExtraServicesEVENTHUBTagsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesEVENTHUBNormalCollectorConfigCollectors {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#applies_to DeviceGroup#applies_to}
  */
  readonly appliesTo?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#auto_balanced_collector_group_id DeviceGroup#auto_balanced_collector_group_id}
  */
  readonly autoBalancedCollectorGroupId?: number;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#collector_id DeviceGroup#collector_id}
  */
  readonly collectorId?: number;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#priority DeviceGroup#priority}
  */
  readonly priority?: number;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#use_public_ip DeviceGroup#use_public_ip}
  */
  readonly usePublicIp?: boolean | cdktf.IResolvable;
}

export function deviceGroupExtraServicesEVENTHUBNormalCollectorConfigCollectorsToTerraform(struct?: DeviceGroupExtraServicesEVENTHUBNormalCollectorConfigCollectors | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    applies_to: cdktf.stringToTerraform(struct!.appliesTo),
    auto_balanced_collector_group_id: cdktf.numberToTerraform(struct!.autoBalancedCollectorGroupId),
    collector_id: cdktf.numberToTerraform(struct!.collectorId),
    priority: cdktf.numberToTerraform(struct!.priority),
    use_public_ip: cdktf.booleanToTerraform(struct!.usePublicIp),
  }
}


export function deviceGroupExtraServicesEVENTHUBNormalCollectorConfigCollectorsToHclTerraform(struct?: DeviceGroupExtraServicesEVENTHUBNormalCollectorConfigCollectors | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    applies_to: {
      value: cdktf.stringToHclTerraform(struct!.appliesTo),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    auto_balanced_collector_group_id: {
      value: cdktf.numberToHclTerraform(struct!.autoBalancedCollectorGroupId),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    collector_id: {
      value: cdktf.numberToHclTerraform(struct!.collectorId),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    priority: {
      value: cdktf.numberToHclTerraform(struct!.priority),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    use_public_ip: {
      value: cdktf.booleanToHclTerraform(struct!.usePublicIp),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesEVENTHUBNormalCollectorConfigCollectorsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesEVENTHUBNormalCollectorConfigCollectors | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._appliesTo !== undefined) {
      hasAnyValues = true;
      internalValueResult.appliesTo = this._appliesTo;
    }
    if (this._autoBalancedCollectorGroupId !== undefined) {
      hasAnyValues = true;
      internalValueResult.autoBalancedCollectorGroupId = this._autoBalancedCollectorGroupId;
    }
    if (this._collectorId !== undefined) {
      hasAnyValues = true;
      internalValueResult.collectorId = this._collectorId;
    }
    if (this._priority !== undefined) {
      hasAnyValues = true;
      internalValueResult.priority = this._priority;
    }
    if (this._usePublicIp !== undefined) {
      hasAnyValues = true;
      internalValueResult.usePublicIp = this._usePublicIp;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesEVENTHUBNormalCollectorConfigCollectors | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._appliesTo = undefined;
      this._autoBalancedCollectorGroupId = undefined;
      this._collectorId = undefined;
      this._priority = undefined;
      this._usePublicIp = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._appliesTo = value.appliesTo;
      this._autoBalancedCollectorGroupId = value.autoBalancedCollectorGroupId;
      this._collectorId = value.collectorId;
      this._priority = value.priority;
      this._usePublicIp = value.usePublicIp;
    }
  }

  // applies_to - computed: false, optional: true, required: false
  private _appliesTo?: string; 
  public get appliesTo() {
    return this.getStringAttribute('applies_to');
  }
  public set appliesTo(value: string) {
    this._appliesTo = value;
  }
  public resetAppliesTo() {
    this._appliesTo = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get appliesToInput() {
    return this._appliesTo;
  }

  // auto_balanced_collector_group_id - computed: false, optional: true, required: false
  private _autoBalancedCollectorGroupId?: number; 
  public get autoBalancedCollectorGroupId() {
    return this.getNumberAttribute('auto_balanced_collector_group_id');
  }
  public set autoBalancedCollectorGroupId(value: number) {
    this._autoBalancedCollectorGroupId = value;
  }
  public resetAutoBalancedCollectorGroupId() {
    this._autoBalancedCollectorGroupId = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get autoBalancedCollectorGroupIdInput() {
    return this._autoBalancedCollectorGroupId;
  }

  // collector_id - computed: false, optional: true, required: false
  private _collectorId?: number; 
  public get collectorId() {
    return this.getNumberAttribute('collector_id');
  }
  public set collectorId(value: number) {
    this._collectorId = value;
  }
  public resetCollectorId() {
    this._collectorId = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get collectorIdInput() {
    return this._collectorId;
  }

  // priority - computed: false, optional: true, required: false
  private _priority?: number; 
  public get priority() {
    return this.getNumberAttribute('priority');
  }
  public set priority(value: number) {
    this._priority = value;
  }
  public resetPriority() {
    this._priority = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get priorityInput() {
    return this._priority;
  }

  // use_public_ip - computed: false, optional: true, required: false
  private _usePublicIp?: boolean | cdktf.IResolvable; 
  public get usePublicIp() {
    return this.getBooleanAttribute('use_public_ip');
  }
  public set usePublicIp(value: boolean | cdktf.IResolvable) {
    this._usePublicIp = value;
  }
  public resetUsePublicIp() {
    this._usePublicIp = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get usePublicIpInput() {
    return this._usePublicIp;
  }
}

export class DeviceGroupExtraServicesEVENTHUBNormalCollectorConfigCollectorsList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesEVENTHUBNormalCollectorConfigCollectors[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesEVENTHUBNormalCollectorConfigCollectorsOutputReference {
    return new DeviceGroupExtraServicesEVENTHUBNormalCollectorConfigCollectorsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesEVENTHUBNormalCollectorConfig {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#collectors DeviceGroup#collectors}
  */
  readonly collectors?: DeviceGroupExtraServicesEVENTHUBNormalCollectorConfigCollectors[] | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#enabled DeviceGroup#enabled}
  */
  readonly enabled: boolean | cdktf.IResolvable;
}

export function deviceGroupExtraServicesEVENTHUBNormalCollectorConfigToTerraform(struct?: DeviceGroupExtraServicesEVENTHUBNormalCollectorConfig | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    collectors: cdktf.listMapper(deviceGroupExtraServicesEVENTHUBNormalCollectorConfigCollectorsToTerraform, false)(struct!.collectors),
    enabled: cdktf.booleanToTerraform(struct!.enabled),
  }
}


export function deviceGroupExtraServicesEVENTHUBNormalCollectorConfigToHclTerraform(struct?: DeviceGroupExtraServicesEVENTHUBNormalCollectorConfig | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    collectors: {
      value: cdktf.listMapperHcl(deviceGroupExtraServicesEVENTHUBNormalCollectorConfigCollectorsToHclTerraform, false)(struct!.collectors),
      isBlock: true,
      type: "list",
      storageClassType: "DeviceGroupExtraServicesEVENTHUBNormalCollectorConfigCollectorsList",
    },
    enabled: {
      value: cdktf.booleanToHclTerraform(struct!.enabled),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesEVENTHUBNormalCollectorConfigOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesEVENTHUBNormalCollectorConfig | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._collectors?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.collectors = this._collectors?.internalValue;
    }
    if (this._enabled !== undefined) {
      hasAnyValues = true;
      internalValueResult.enabled = this._enabled;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesEVENTHUBNormalCollectorConfig | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._collectors.internalValue = undefined;
      this._enabled = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._collectors.internalValue = value.collectors;
      this._enabled = value.enabled;
    }
  }

  // collectors - computed: false, optional: true, required: false
  private _collectors = new DeviceGroupExtraServicesEVENTHUBNormalCollectorConfigCollectorsList(this, "collectors", false);
  public get collectors() {
    return this._collectors;
  }
  public putCollectors(value: DeviceGroupExtraServicesEVENTHUBNormalCollectorConfigCollectors[] | cdktf.IResolvable) {
    this._collectors.internalValue = value;
  }
  public resetCollectors() {
    this._collectors.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get collectorsInput() {
    return this._collectors.internalValue;
  }

  // enabled - computed: false, optional: false, required: true
  private _enabled?: boolean | cdktf.IResolvable; 
  public get enabled() {
    return this.getBooleanAttribute('enabled');
  }
  public set enabled(value: boolean | cdktf.IResolvable) {
    this._enabled = value;
  }
  // Temporarily expose input value. Use with caution.
  public get enabledInput() {
    return this._enabled;
  }
}

export class DeviceGroupExtraServicesEVENTHUBNormalCollectorConfigList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesEVENTHUBNormalCollectorConfig[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesEVENTHUBNormalCollectorConfigOutputReference {
    return new DeviceGroupExtraServicesEVENTHUBNormalCollectorConfigOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesEVENTHUB {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#custom_n_s_p_schedule DeviceGroup#custom_n_s_p_schedule}
  */
  readonly customNSPSchedule?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#dead_operation DeviceGroup#dead_operation}
  */
  readonly deadOperation?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#device_display_name_template DeviceGroup#device_display_name_template}
  */
  readonly deviceDisplayNameTemplate?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#disable_stop_terminate_host_monitor DeviceGroup#disable_stop_terminate_host_monitor}
  */
  readonly disableStopTerminateHostMonitor?: boolean | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#disable_terminated_host_alerting DeviceGroup#disable_terminated_host_alerting}
  */
  readonly disableTerminatedHostAlerting?: boolean | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#monitoring_region_infos DeviceGroup#monitoring_region_infos}
  */
  readonly monitoringRegionInfos?: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#monitoring_regions DeviceGroup#monitoring_regions}
  */
  readonly monitoringRegions?: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#name_filter DeviceGroup#name_filter}
  */
  readonly nameFilter?: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#select_all DeviceGroup#select_all}
  */
  readonly selectAll?: boolean | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#tags DeviceGroup#tags}
  */
  readonly tags?: DeviceGroupExtraServicesEVENTHUBTags[] | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#use_default DeviceGroup#use_default}
  */
  readonly useDefault: boolean | cdktf.IResolvable;
  /**
  * normal_collector_config block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#normal_collector_config DeviceGroup#normal_collector_config}
  */
  readonly normalCollectorConfig?: DeviceGroupExtraServicesEVENTHUBNormalCollectorConfig[] | cdktf.IResolvable;
}

export function deviceGroupExtraServicesEVENTHUBToTerraform(struct?: DeviceGroupExtraServicesEVENTHUB | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    custom_n_s_p_schedule: cdktf.stringToTerraform(struct!.customNSPSchedule),
    dead_operation: cdktf.stringToTerraform(struct!.deadOperation),
    device_display_name_template: cdktf.stringToTerraform(struct!.deviceDisplayNameTemplate),
    disable_stop_terminate_host_monitor: cdktf.booleanToTerraform(struct!.disableStopTerminateHostMonitor),
    disable_terminated_host_alerting: cdktf.booleanToTerraform(struct!.disableTerminatedHostAlerting),
    monitoring_region_infos: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.monitoringRegionInfos),
    monitoring_regions: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.monitoringRegions),
    name_filter: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.nameFilter),
    select_all: cdktf.booleanToTerraform(struct!.selectAll),
    tags: cdktf.listMapper(deviceGroupExtraServicesEVENTHUBTagsToTerraform, false)(struct!.tags),
    use_default: cdktf.booleanToTerraform(struct!.useDefault),
    normal_collector_config: cdktf.listMapper(deviceGroupExtraServicesEVENTHUBNormalCollectorConfigToTerraform, true)(struct!.normalCollectorConfig),
  }
}


export function deviceGroupExtraServicesEVENTHUBToHclTerraform(struct?: DeviceGroupExtraServicesEVENTHUB | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    custom_n_s_p_schedule: {
      value: cdktf.stringToHclTerraform(struct!.customNSPSchedule),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    dead_operation: {
      value: cdktf.stringToHclTerraform(struct!.deadOperation),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    device_display_name_template: {
      value: cdktf.stringToHclTerraform(struct!.deviceDisplayNameTemplate),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    disable_stop_terminate_host_monitor: {
      value: cdktf.booleanToHclTerraform(struct!.disableStopTerminateHostMonitor),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    disable_terminated_host_alerting: {
      value: cdktf.booleanToHclTerraform(struct!.disableTerminatedHostAlerting),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    monitoring_region_infos: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.monitoringRegionInfos),
      isBlock: false,
      type: "set",
      storageClassType: "stringList",
    },
    monitoring_regions: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.monitoringRegions),
      isBlock: false,
      type: "set",
      storageClassType: "stringList",
    },
    name_filter: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.nameFilter),
      isBlock: false,
      type: "set",
      storageClassType: "stringList",
    },
    select_all: {
      value: cdktf.booleanToHclTerraform(struct!.selectAll),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    tags: {
      value: cdktf.listMapperHcl(deviceGroupExtraServicesEVENTHUBTagsToHclTerraform, false)(struct!.tags),
      isBlock: true,
      type: "list",
      storageClassType: "DeviceGroupExtraServicesEVENTHUBTagsList",
    },
    use_default: {
      value: cdktf.booleanToHclTerraform(struct!.useDefault),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    normal_collector_config: {
      value: cdktf.listMapperHcl(deviceGroupExtraServicesEVENTHUBNormalCollectorConfigToHclTerraform, true)(struct!.normalCollectorConfig),
      isBlock: true,
      type: "list",
      storageClassType: "DeviceGroupExtraServicesEVENTHUBNormalCollectorConfigList",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesEVENTHUBOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesEVENTHUB | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._customNSPSchedule !== undefined) {
      hasAnyValues = true;
      internalValueResult.customNSPSchedule = this._customNSPSchedule;
    }
    if (this._deadOperation !== undefined) {
      hasAnyValues = true;
      internalValueResult.deadOperation = this._deadOperation;
    }
    if (this._deviceDisplayNameTemplate !== undefined) {
      hasAnyValues = true;
      internalValueResult.deviceDisplayNameTemplate = this._deviceDisplayNameTemplate;
    }
    if (this._disableStopTerminateHostMonitor !== undefined) {
      hasAnyValues = true;
      internalValueResult.disableStopTerminateHostMonitor = this._disableStopTerminateHostMonitor;
    }
    if (this._disableTerminatedHostAlerting !== undefined) {
      hasAnyValues = true;
      internalValueResult.disableTerminatedHostAlerting = this._disableTerminatedHostAlerting;
    }
    if (this._monitoringRegionInfos !== undefined) {
      hasAnyValues = true;
      internalValueResult.monitoringRegionInfos = this._monitoringRegionInfos;
    }
    if (this._monitoringRegions !== undefined) {
      hasAnyValues = true;
      internalValueResult.monitoringRegions = this._monitoringRegions;
    }
    if (this._nameFilter !== undefined) {
      hasAnyValues = true;
      internalValueResult.nameFilter = this._nameFilter;
    }
    if (this._selectAll !== undefined) {
      hasAnyValues = true;
      internalValueResult.selectAll = this._selectAll;
    }
    if (this._tags?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.tags = this._tags?.internalValue;
    }
    if (this._useDefault !== undefined) {
      hasAnyValues = true;
      internalValueResult.useDefault = this._useDefault;
    }
    if (this._normalCollectorConfig?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.normalCollectorConfig = this._normalCollectorConfig?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesEVENTHUB | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._customNSPSchedule = undefined;
      this._deadOperation = undefined;
      this._deviceDisplayNameTemplate = undefined;
      this._disableStopTerminateHostMonitor = undefined;
      this._disableTerminatedHostAlerting = undefined;
      this._monitoringRegionInfos = undefined;
      this._monitoringRegions = undefined;
      this._nameFilter = undefined;
      this._selectAll = undefined;
      this._tags.internalValue = undefined;
      this._useDefault = undefined;
      this._normalCollectorConfig.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._customNSPSchedule = value.customNSPSchedule;
      this._deadOperation = value.deadOperation;
      this._deviceDisplayNameTemplate = value.deviceDisplayNameTemplate;
      this._disableStopTerminateHostMonitor = value.disableStopTerminateHostMonitor;
      this._disableTerminatedHostAlerting = value.disableTerminatedHostAlerting;
      this._monitoringRegionInfos = value.monitoringRegionInfos;
      this._monitoringRegions = value.monitoringRegions;
      this._nameFilter = value.nameFilter;
      this._selectAll = value.selectAll;
      this._tags.internalValue = value.tags;
      this._useDefault = value.useDefault;
      this._normalCollectorConfig.internalValue = value.normalCollectorConfig;
    }
  }

  // custom_n_s_p_schedule - computed: false, optional: true, required: false
  private _customNSPSchedule?: string; 
  public get customNSPSchedule() {
    return this.getStringAttribute('custom_n_s_p_schedule');
  }
  public set customNSPSchedule(value: string) {
    this._customNSPSchedule = value;
  }
  public resetCustomNSPSchedule() {
    this._customNSPSchedule = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get customNSPScheduleInput() {
    return this._customNSPSchedule;
  }

  // dead_operation - computed: false, optional: true, required: false
  private _deadOperation?: string; 
  public get deadOperation() {
    return this.getStringAttribute('dead_operation');
  }
  public set deadOperation(value: string) {
    this._deadOperation = value;
  }
  public resetDeadOperation() {
    this._deadOperation = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get deadOperationInput() {
    return this._deadOperation;
  }

  // device_display_name_template - computed: false, optional: true, required: false
  private _deviceDisplayNameTemplate?: string; 
  public get deviceDisplayNameTemplate() {
    return this.getStringAttribute('device_display_name_template');
  }
  public set deviceDisplayNameTemplate(value: string) {
    this._deviceDisplayNameTemplate = value;
  }
  public resetDeviceDisplayNameTemplate() {
    this._deviceDisplayNameTemplate = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get deviceDisplayNameTemplateInput() {
    return this._deviceDisplayNameTemplate;
  }

  // disable_stop_terminate_host_monitor - computed: false, optional: true, required: false
  private _disableStopTerminateHostMonitor?: boolean | cdktf.IResolvable; 
  public get disableStopTerminateHostMonitor() {
    return this.getBooleanAttribute('disable_stop_terminate_host_monitor');
  }
  public set disableStopTerminateHostMonitor(value: boolean | cdktf.IResolvable) {
    this._disableStopTerminateHostMonitor = value;
  }
  public resetDisableStopTerminateHostMonitor() {
    this._disableStopTerminateHostMonitor = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get disableStopTerminateHostMonitorInput() {
    return this._disableStopTerminateHostMonitor;
  }

  // disable_terminated_host_alerting - computed: false, optional: true, required: false
  private _disableTerminatedHostAlerting?: boolean | cdktf.IResolvable; 
  public get disableTerminatedHostAlerting() {
    return this.getBooleanAttribute('disable_terminated_host_alerting');
  }
  public set disableTerminatedHostAlerting(value: boolean | cdktf.IResolvable) {
    this._disableTerminatedHostAlerting = value;
  }
  public resetDisableTerminatedHostAlerting() {
    this._disableTerminatedHostAlerting = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get disableTerminatedHostAlertingInput() {
    return this._disableTerminatedHostAlerting;
  }

  // monitoring_region_infos - computed: false, optional: true, required: false
  private _monitoringRegionInfos?: string[]; 
  public get monitoringRegionInfos() {
    return cdktf.Fn.tolist(this.getListAttribute('monitoring_region_infos'));
  }
  public set monitoringRegionInfos(value: string[]) {
    this._monitoringRegionInfos = value;
  }
  public resetMonitoringRegionInfos() {
    this._monitoringRegionInfos = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get monitoringRegionInfosInput() {
    return this._monitoringRegionInfos;
  }

  // monitoring_regions - computed: false, optional: true, required: false
  private _monitoringRegions?: string[]; 
  public get monitoringRegions() {
    return cdktf.Fn.tolist(this.getListAttribute('monitoring_regions'));
  }
  public set monitoringRegions(value: string[]) {
    this._monitoringRegions = value;
  }
  public resetMonitoringRegions() {
    this._monitoringRegions = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get monitoringRegionsInput() {
    return this._monitoringRegions;
  }

  // name_filter - computed: false, optional: true, required: false
  private _nameFilter?: string[]; 
  public get nameFilter() {
    return cdktf.Fn.tolist(this.getListAttribute('name_filter'));
  }
  public set nameFilter(value: string[]) {
    this._nameFilter = value;
  }
  public resetNameFilter() {
    this._nameFilter = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get nameFilterInput() {
    return this._nameFilter;
  }

  // select_all - computed: false, optional: true, required: false
  private _selectAll?: boolean | cdktf.IResolvable; 
  public get selectAll() {
    return this.getBooleanAttribute('select_all');
  }
  public set selectAll(value: boolean | cdktf.IResolvable) {
    this._selectAll = value;
  }
  public resetSelectAll() {
    this._selectAll = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get selectAllInput() {
    return this._selectAll;
  }

  // tags - computed: false, optional: true, required: false
  private _tags = new DeviceGroupExtraServicesEVENTHUBTagsList(this, "tags", false);
  public get tags() {
    return this._tags;
  }
  public putTags(value: DeviceGroupExtraServicesEVENTHUBTags[] | cdktf.IResolvable) {
    this._tags.internalValue = value;
  }
  public resetTags() {
    this._tags.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get tagsInput() {
    return this._tags.internalValue;
  }

  // use_default - computed: false, optional: false, required: true
  private _useDefault?: boolean | cdktf.IResolvable; 
  public get useDefault() {
    return this.getBooleanAttribute('use_default');
  }
  public set useDefault(value: boolean | cdktf.IResolvable) {
    this._useDefault = value;
  }
  // Temporarily expose input value. Use with caution.
  public get useDefaultInput() {
    return this._useDefault;
  }

  // normal_collector_config - computed: false, optional: true, required: false
  private _normalCollectorConfig = new DeviceGroupExtraServicesEVENTHUBNormalCollectorConfigList(this, "normal_collector_config", false);
  public get normalCollectorConfig() {
    return this._normalCollectorConfig;
  }
  public putNormalCollectorConfig(value: DeviceGroupExtraServicesEVENTHUBNormalCollectorConfig[] | cdktf.IResolvable) {
    this._normalCollectorConfig.internalValue = value;
  }
  public resetNormalCollectorConfig() {
    this._normalCollectorConfig.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get normalCollectorConfigInput() {
    return this._normalCollectorConfig.internalValue;
  }
}

export class DeviceGroupExtraServicesEVENTHUBList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesEVENTHUB[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesEVENTHUBOutputReference {
    return new DeviceGroupExtraServicesEVENTHUBOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesEXPRESSROUTECIRCUiTTags {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#name DeviceGroup#name}
  */
  readonly name?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#operation DeviceGroup#operation}
  */
  readonly operation?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#value DeviceGroup#value}
  */
  readonly value?: string;
}

export function deviceGroupExtraServicesEXPRESSROUTECIRCUiTTagsToTerraform(struct?: DeviceGroupExtraServicesEXPRESSROUTECIRCUiTTags | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    name: cdktf.stringToTerraform(struct!.name),
    operation: cdktf.stringToTerraform(struct!.operation),
    value: cdktf.stringToTerraform(struct!.value),
  }
}


export function deviceGroupExtraServicesEXPRESSROUTECIRCUiTTagsToHclTerraform(struct?: DeviceGroupExtraServicesEXPRESSROUTECIRCUiTTags | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    name: {
      value: cdktf.stringToHclTerraform(struct!.name),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    operation: {
      value: cdktf.stringToHclTerraform(struct!.operation),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    value: {
      value: cdktf.stringToHclTerraform(struct!.value),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesEXPRESSROUTECIRCUiTTagsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesEXPRESSROUTECIRCUiTTags | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._name !== undefined) {
      hasAnyValues = true;
      internalValueResult.name = this._name;
    }
    if (this._operation !== undefined) {
      hasAnyValues = true;
      internalValueResult.operation = this._operation;
    }
    if (this._value !== undefined) {
      hasAnyValues = true;
      internalValueResult.value = this._value;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesEXPRESSROUTECIRCUiTTags | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._name = undefined;
      this._operation = undefined;
      this._value = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._name = value.name;
      this._operation = value.operation;
      this._value = value.value;
    }
  }

  // name - computed: false, optional: true, required: false
  private _name?: string; 
  public get name() {
    return this.getStringAttribute('name');
  }
  public set name(value: string) {
    this._name = value;
  }
  public resetName() {
    this._name = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get nameInput() {
    return this._name;
  }

  // operation - computed: false, optional: true, required: false
  private _operation?: string; 
  public get operation() {
    return this.getStringAttribute('operation');
  }
  public set operation(value: string) {
    this._operation = value;
  }
  public resetOperation() {
    this._operation = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get operationInput() {
    return this._operation;
  }

  // value - computed: false, optional: true, required: false
  private _value?: string; 
  public get value() {
    return this.getStringAttribute('value');
  }
  public set value(value: string) {
    this._value = value;
  }
  public resetValue() {
    this._value = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get valueInput() {
    return this._value;
  }
}

export class DeviceGroupExtraServicesEXPRESSROUTECIRCUiTTagsList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesEXPRESSROUTECIRCUiTTags[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesEXPRESSROUTECIRCUiTTagsOutputReference {
    return new DeviceGroupExtraServicesEXPRESSROUTECIRCUiTTagsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesEXPRESSROUTECIRCUiTNormalCollectorConfigCollectors {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#applies_to DeviceGroup#applies_to}
  */
  readonly appliesTo?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#auto_balanced_collector_group_id DeviceGroup#auto_balanced_collector_group_id}
  */
  readonly autoBalancedCollectorGroupId?: number;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#collector_id DeviceGroup#collector_id}
  */
  readonly collectorId?: number;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#priority DeviceGroup#priority}
  */
  readonly priority?: number;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#use_public_ip DeviceGroup#use_public_ip}
  */
  readonly usePublicIp?: boolean | cdktf.IResolvable;
}

export function deviceGroupExtraServicesEXPRESSROUTECIRCUiTNormalCollectorConfigCollectorsToTerraform(struct?: DeviceGroupExtraServicesEXPRESSROUTECIRCUiTNormalCollectorConfigCollectors | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    applies_to: cdktf.stringToTerraform(struct!.appliesTo),
    auto_balanced_collector_group_id: cdktf.numberToTerraform(struct!.autoBalancedCollectorGroupId),
    collector_id: cdktf.numberToTerraform(struct!.collectorId),
    priority: cdktf.numberToTerraform(struct!.priority),
    use_public_ip: cdktf.booleanToTerraform(struct!.usePublicIp),
  }
}


export function deviceGroupExtraServicesEXPRESSROUTECIRCUiTNormalCollectorConfigCollectorsToHclTerraform(struct?: DeviceGroupExtraServicesEXPRESSROUTECIRCUiTNormalCollectorConfigCollectors | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    applies_to: {
      value: cdktf.stringToHclTerraform(struct!.appliesTo),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    auto_balanced_collector_group_id: {
      value: cdktf.numberToHclTerraform(struct!.autoBalancedCollectorGroupId),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    collector_id: {
      value: cdktf.numberToHclTerraform(struct!.collectorId),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    priority: {
      value: cdktf.numberToHclTerraform(struct!.priority),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    use_public_ip: {
      value: cdktf.booleanToHclTerraform(struct!.usePublicIp),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesEXPRESSROUTECIRCUiTNormalCollectorConfigCollectorsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesEXPRESSROUTECIRCUiTNormalCollectorConfigCollectors | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._appliesTo !== undefined) {
      hasAnyValues = true;
      internalValueResult.appliesTo = this._appliesTo;
    }
    if (this._autoBalancedCollectorGroupId !== undefined) {
      hasAnyValues = true;
      internalValueResult.autoBalancedCollectorGroupId = this._autoBalancedCollectorGroupId;
    }
    if (this._collectorId !== undefined) {
      hasAnyValues = true;
      internalValueResult.collectorId = this._collectorId;
    }
    if (this._priority !== undefined) {
      hasAnyValues = true;
      internalValueResult.priority = this._priority;
    }
    if (this._usePublicIp !== undefined) {
      hasAnyValues = true;
      internalValueResult.usePublicIp = this._usePublicIp;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesEXPRESSROUTECIRCUiTNormalCollectorConfigCollectors | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._appliesTo = undefined;
      this._autoBalancedCollectorGroupId = undefined;
      this._collectorId = undefined;
      this._priority = undefined;
      this._usePublicIp = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._appliesTo = value.appliesTo;
      this._autoBalancedCollectorGroupId = value.autoBalancedCollectorGroupId;
      this._collectorId = value.collectorId;
      this._priority = value.priority;
      this._usePublicIp = value.usePublicIp;
    }
  }

  // applies_to - computed: false, optional: true, required: false
  private _appliesTo?: string; 
  public get appliesTo() {
    return this.getStringAttribute('applies_to');
  }
  public set appliesTo(value: string) {
    this._appliesTo = value;
  }
  public resetAppliesTo() {
    this._appliesTo = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get appliesToInput() {
    return this._appliesTo;
  }

  // auto_balanced_collector_group_id - computed: false, optional: true, required: false
  private _autoBalancedCollectorGroupId?: number; 
  public get autoBalancedCollectorGroupId() {
    return this.getNumberAttribute('auto_balanced_collector_group_id');
  }
  public set autoBalancedCollectorGroupId(value: number) {
    this._autoBalancedCollectorGroupId = value;
  }
  public resetAutoBalancedCollectorGroupId() {
    this._autoBalancedCollectorGroupId = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get autoBalancedCollectorGroupIdInput() {
    return this._autoBalancedCollectorGroupId;
  }

  // collector_id - computed: false, optional: true, required: false
  private _collectorId?: number; 
  public get collectorId() {
    return this.getNumberAttribute('collector_id');
  }
  public set collectorId(value: number) {
    this._collectorId = value;
  }
  public resetCollectorId() {
    this._collectorId = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get collectorIdInput() {
    return this._collectorId;
  }

  // priority - computed: false, optional: true, required: false
  private _priority?: number; 
  public get priority() {
    return this.getNumberAttribute('priority');
  }
  public set priority(value: number) {
    this._priority = value;
  }
  public resetPriority() {
    this._priority = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get priorityInput() {
    return this._priority;
  }

  // use_public_ip - computed: false, optional: true, required: false
  private _usePublicIp?: boolean | cdktf.IResolvable; 
  public get usePublicIp() {
    return this.getBooleanAttribute('use_public_ip');
  }
  public set usePublicIp(value: boolean | cdktf.IResolvable) {
    this._usePublicIp = value;
  }
  public resetUsePublicIp() {
    this._usePublicIp = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get usePublicIpInput() {
    return this._usePublicIp;
  }
}

export class DeviceGroupExtraServicesEXPRESSROUTECIRCUiTNormalCollectorConfigCollectorsList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesEXPRESSROUTECIRCUiTNormalCollectorConfigCollectors[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesEXPRESSROUTECIRCUiTNormalCollectorConfigCollectorsOutputReference {
    return new DeviceGroupExtraServicesEXPRESSROUTECIRCUiTNormalCollectorConfigCollectorsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesEXPRESSROUTECIRCUiTNormalCollectorConfig {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#collectors DeviceGroup#collectors}
  */
  readonly collectors?: DeviceGroupExtraServicesEXPRESSROUTECIRCUiTNormalCollectorConfigCollectors[] | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#enabled DeviceGroup#enabled}
  */
  readonly enabled: boolean | cdktf.IResolvable;
}

export function deviceGroupExtraServicesEXPRESSROUTECIRCUiTNormalCollectorConfigToTerraform(struct?: DeviceGroupExtraServicesEXPRESSROUTECIRCUiTNormalCollectorConfig | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    collectors: cdktf.listMapper(deviceGroupExtraServicesEXPRESSROUTECIRCUiTNormalCollectorConfigCollectorsToTerraform, false)(struct!.collectors),
    enabled: cdktf.booleanToTerraform(struct!.enabled),
  }
}


export function deviceGroupExtraServicesEXPRESSROUTECIRCUiTNormalCollectorConfigToHclTerraform(struct?: DeviceGroupExtraServicesEXPRESSROUTECIRCUiTNormalCollectorConfig | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    collectors: {
      value: cdktf.listMapperHcl(deviceGroupExtraServicesEXPRESSROUTECIRCUiTNormalCollectorConfigCollectorsToHclTerraform, false)(struct!.collectors),
      isBlock: true,
      type: "list",
      storageClassType: "DeviceGroupExtraServicesEXPRESSROUTECIRCUiTNormalCollectorConfigCollectorsList",
    },
    enabled: {
      value: cdktf.booleanToHclTerraform(struct!.enabled),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesEXPRESSROUTECIRCUiTNormalCollectorConfigOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesEXPRESSROUTECIRCUiTNormalCollectorConfig | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._collectors?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.collectors = this._collectors?.internalValue;
    }
    if (this._enabled !== undefined) {
      hasAnyValues = true;
      internalValueResult.enabled = this._enabled;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesEXPRESSROUTECIRCUiTNormalCollectorConfig | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._collectors.internalValue = undefined;
      this._enabled = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._collectors.internalValue = value.collectors;
      this._enabled = value.enabled;
    }
  }

  // collectors - computed: false, optional: true, required: false
  private _collectors = new DeviceGroupExtraServicesEXPRESSROUTECIRCUiTNormalCollectorConfigCollectorsList(this, "collectors", false);
  public get collectors() {
    return this._collectors;
  }
  public putCollectors(value: DeviceGroupExtraServicesEXPRESSROUTECIRCUiTNormalCollectorConfigCollectors[] | cdktf.IResolvable) {
    this._collectors.internalValue = value;
  }
  public resetCollectors() {
    this._collectors.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get collectorsInput() {
    return this._collectors.internalValue;
  }

  // enabled - computed: false, optional: false, required: true
  private _enabled?: boolean | cdktf.IResolvable; 
  public get enabled() {
    return this.getBooleanAttribute('enabled');
  }
  public set enabled(value: boolean | cdktf.IResolvable) {
    this._enabled = value;
  }
  // Temporarily expose input value. Use with caution.
  public get enabledInput() {
    return this._enabled;
  }
}

export class DeviceGroupExtraServicesEXPRESSROUTECIRCUiTNormalCollectorConfigList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesEXPRESSROUTECIRCUiTNormalCollectorConfig[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesEXPRESSROUTECIRCUiTNormalCollectorConfigOutputReference {
    return new DeviceGroupExtraServicesEXPRESSROUTECIRCUiTNormalCollectorConfigOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesEXPRESSROUTECIRCUiT {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#custom_n_s_p_schedule DeviceGroup#custom_n_s_p_schedule}
  */
  readonly customNSPSchedule?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#dead_operation DeviceGroup#dead_operation}
  */
  readonly deadOperation?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#device_display_name_template DeviceGroup#device_display_name_template}
  */
  readonly deviceDisplayNameTemplate?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#disable_stop_terminate_host_monitor DeviceGroup#disable_stop_terminate_host_monitor}
  */
  readonly disableStopTerminateHostMonitor?: boolean | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#disable_terminated_host_alerting DeviceGroup#disable_terminated_host_alerting}
  */
  readonly disableTerminatedHostAlerting?: boolean | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#monitoring_region_infos DeviceGroup#monitoring_region_infos}
  */
  readonly monitoringRegionInfos?: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#monitoring_regions DeviceGroup#monitoring_regions}
  */
  readonly monitoringRegions?: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#name_filter DeviceGroup#name_filter}
  */
  readonly nameFilter?: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#select_all DeviceGroup#select_all}
  */
  readonly selectAll?: boolean | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#tags DeviceGroup#tags}
  */
  readonly tags?: DeviceGroupExtraServicesEXPRESSROUTECIRCUiTTags[] | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#use_default DeviceGroup#use_default}
  */
  readonly useDefault: boolean | cdktf.IResolvable;
  /**
  * normal_collector_config block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#normal_collector_config DeviceGroup#normal_collector_config}
  */
  readonly normalCollectorConfig?: DeviceGroupExtraServicesEXPRESSROUTECIRCUiTNormalCollectorConfig[] | cdktf.IResolvable;
}

export function deviceGroupExtraServicesEXPRESSROUTECIRCUiTToTerraform(struct?: DeviceGroupExtraServicesEXPRESSROUTECIRCUiT | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    custom_n_s_p_schedule: cdktf.stringToTerraform(struct!.customNSPSchedule),
    dead_operation: cdktf.stringToTerraform(struct!.deadOperation),
    device_display_name_template: cdktf.stringToTerraform(struct!.deviceDisplayNameTemplate),
    disable_stop_terminate_host_monitor: cdktf.booleanToTerraform(struct!.disableStopTerminateHostMonitor),
    disable_terminated_host_alerting: cdktf.booleanToTerraform(struct!.disableTerminatedHostAlerting),
    monitoring_region_infos: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.monitoringRegionInfos),
    monitoring_regions: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.monitoringRegions),
    name_filter: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.nameFilter),
    select_all: cdktf.booleanToTerraform(struct!.selectAll),
    tags: cdktf.listMapper(deviceGroupExtraServicesEXPRESSROUTECIRCUiTTagsToTerraform, false)(struct!.tags),
    use_default: cdktf.booleanToTerraform(struct!.useDefault),
    normal_collector_config: cdktf.listMapper(deviceGroupExtraServicesEXPRESSROUTECIRCUiTNormalCollectorConfigToTerraform, true)(struct!.normalCollectorConfig),
  }
}


export function deviceGroupExtraServicesEXPRESSROUTECIRCUiTToHclTerraform(struct?: DeviceGroupExtraServicesEXPRESSROUTECIRCUiT | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    custom_n_s_p_schedule: {
      value: cdktf.stringToHclTerraform(struct!.customNSPSchedule),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    dead_operation: {
      value: cdktf.stringToHclTerraform(struct!.deadOperation),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    device_display_name_template: {
      value: cdktf.stringToHclTerraform(struct!.deviceDisplayNameTemplate),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    disable_stop_terminate_host_monitor: {
      value: cdktf.booleanToHclTerraform(struct!.disableStopTerminateHostMonitor),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    disable_terminated_host_alerting: {
      value: cdktf.booleanToHclTerraform(struct!.disableTerminatedHostAlerting),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    monitoring_region_infos: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.monitoringRegionInfos),
      isBlock: false,
      type: "set",
      storageClassType: "stringList",
    },
    monitoring_regions: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.monitoringRegions),
      isBlock: false,
      type: "set",
      storageClassType: "stringList",
    },
    name_filter: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.nameFilter),
      isBlock: false,
      type: "set",
      storageClassType: "stringList",
    },
    select_all: {
      value: cdktf.booleanToHclTerraform(struct!.selectAll),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    tags: {
      value: cdktf.listMapperHcl(deviceGroupExtraServicesEXPRESSROUTECIRCUiTTagsToHclTerraform, false)(struct!.tags),
      isBlock: true,
      type: "list",
      storageClassType: "DeviceGroupExtraServicesEXPRESSROUTECIRCUiTTagsList",
    },
    use_default: {
      value: cdktf.booleanToHclTerraform(struct!.useDefault),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    normal_collector_config: {
      value: cdktf.listMapperHcl(deviceGroupExtraServicesEXPRESSROUTECIRCUiTNormalCollectorConfigToHclTerraform, true)(struct!.normalCollectorConfig),
      isBlock: true,
      type: "list",
      storageClassType: "DeviceGroupExtraServicesEXPRESSROUTECIRCUiTNormalCollectorConfigList",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesEXPRESSROUTECIRCUiTOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesEXPRESSROUTECIRCUiT | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._customNSPSchedule !== undefined) {
      hasAnyValues = true;
      internalValueResult.customNSPSchedule = this._customNSPSchedule;
    }
    if (this._deadOperation !== undefined) {
      hasAnyValues = true;
      internalValueResult.deadOperation = this._deadOperation;
    }
    if (this._deviceDisplayNameTemplate !== undefined) {
      hasAnyValues = true;
      internalValueResult.deviceDisplayNameTemplate = this._deviceDisplayNameTemplate;
    }
    if (this._disableStopTerminateHostMonitor !== undefined) {
      hasAnyValues = true;
      internalValueResult.disableStopTerminateHostMonitor = this._disableStopTerminateHostMonitor;
    }
    if (this._disableTerminatedHostAlerting !== undefined) {
      hasAnyValues = true;
      internalValueResult.disableTerminatedHostAlerting = this._disableTerminatedHostAlerting;
    }
    if (this._monitoringRegionInfos !== undefined) {
      hasAnyValues = true;
      internalValueResult.monitoringRegionInfos = this._monitoringRegionInfos;
    }
    if (this._monitoringRegions !== undefined) {
      hasAnyValues = true;
      internalValueResult.monitoringRegions = this._monitoringRegions;
    }
    if (this._nameFilter !== undefined) {
      hasAnyValues = true;
      internalValueResult.nameFilter = this._nameFilter;
    }
    if (this._selectAll !== undefined) {
      hasAnyValues = true;
      internalValueResult.selectAll = this._selectAll;
    }
    if (this._tags?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.tags = this._tags?.internalValue;
    }
    if (this._useDefault !== undefined) {
      hasAnyValues = true;
      internalValueResult.useDefault = this._useDefault;
    }
    if (this._normalCollectorConfig?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.normalCollectorConfig = this._normalCollectorConfig?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesEXPRESSROUTECIRCUiT | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._customNSPSchedule = undefined;
      this._deadOperation = undefined;
      this._deviceDisplayNameTemplate = undefined;
      this._disableStopTerminateHostMonitor = undefined;
      this._disableTerminatedHostAlerting = undefined;
      this._monitoringRegionInfos = undefined;
      this._monitoringRegions = undefined;
      this._nameFilter = undefined;
      this._selectAll = undefined;
      this._tags.internalValue = undefined;
      this._useDefault = undefined;
      this._normalCollectorConfig.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._customNSPSchedule = value.customNSPSchedule;
      this._deadOperation = value.deadOperation;
      this._deviceDisplayNameTemplate = value.deviceDisplayNameTemplate;
      this._disableStopTerminateHostMonitor = value.disableStopTerminateHostMonitor;
      this._disableTerminatedHostAlerting = value.disableTerminatedHostAlerting;
      this._monitoringRegionInfos = value.monitoringRegionInfos;
      this._monitoringRegions = value.monitoringRegions;
      this._nameFilter = value.nameFilter;
      this._selectAll = value.selectAll;
      this._tags.internalValue = value.tags;
      this._useDefault = value.useDefault;
      this._normalCollectorConfig.internalValue = value.normalCollectorConfig;
    }
  }

  // custom_n_s_p_schedule - computed: false, optional: true, required: false
  private _customNSPSchedule?: string; 
  public get customNSPSchedule() {
    return this.getStringAttribute('custom_n_s_p_schedule');
  }
  public set customNSPSchedule(value: string) {
    this._customNSPSchedule = value;
  }
  public resetCustomNSPSchedule() {
    this._customNSPSchedule = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get customNSPScheduleInput() {
    return this._customNSPSchedule;
  }

  // dead_operation - computed: false, optional: true, required: false
  private _deadOperation?: string; 
  public get deadOperation() {
    return this.getStringAttribute('dead_operation');
  }
  public set deadOperation(value: string) {
    this._deadOperation = value;
  }
  public resetDeadOperation() {
    this._deadOperation = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get deadOperationInput() {
    return this._deadOperation;
  }

  // device_display_name_template - computed: false, optional: true, required: false
  private _deviceDisplayNameTemplate?: string; 
  public get deviceDisplayNameTemplate() {
    return this.getStringAttribute('device_display_name_template');
  }
  public set deviceDisplayNameTemplate(value: string) {
    this._deviceDisplayNameTemplate = value;
  }
  public resetDeviceDisplayNameTemplate() {
    this._deviceDisplayNameTemplate = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get deviceDisplayNameTemplateInput() {
    return this._deviceDisplayNameTemplate;
  }

  // disable_stop_terminate_host_monitor - computed: false, optional: true, required: false
  private _disableStopTerminateHostMonitor?: boolean | cdktf.IResolvable; 
  public get disableStopTerminateHostMonitor() {
    return this.getBooleanAttribute('disable_stop_terminate_host_monitor');
  }
  public set disableStopTerminateHostMonitor(value: boolean | cdktf.IResolvable) {
    this._disableStopTerminateHostMonitor = value;
  }
  public resetDisableStopTerminateHostMonitor() {
    this._disableStopTerminateHostMonitor = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get disableStopTerminateHostMonitorInput() {
    return this._disableStopTerminateHostMonitor;
  }

  // disable_terminated_host_alerting - computed: false, optional: true, required: false
  private _disableTerminatedHostAlerting?: boolean | cdktf.IResolvable; 
  public get disableTerminatedHostAlerting() {
    return this.getBooleanAttribute('disable_terminated_host_alerting');
  }
  public set disableTerminatedHostAlerting(value: boolean | cdktf.IResolvable) {
    this._disableTerminatedHostAlerting = value;
  }
  public resetDisableTerminatedHostAlerting() {
    this._disableTerminatedHostAlerting = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get disableTerminatedHostAlertingInput() {
    return this._disableTerminatedHostAlerting;
  }

  // monitoring_region_infos - computed: false, optional: true, required: false
  private _monitoringRegionInfos?: string[]; 
  public get monitoringRegionInfos() {
    return cdktf.Fn.tolist(this.getListAttribute('monitoring_region_infos'));
  }
  public set monitoringRegionInfos(value: string[]) {
    this._monitoringRegionInfos = value;
  }
  public resetMonitoringRegionInfos() {
    this._monitoringRegionInfos = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get monitoringRegionInfosInput() {
    return this._monitoringRegionInfos;
  }

  // monitoring_regions - computed: false, optional: true, required: false
  private _monitoringRegions?: string[]; 
  public get monitoringRegions() {
    return cdktf.Fn.tolist(this.getListAttribute('monitoring_regions'));
  }
  public set monitoringRegions(value: string[]) {
    this._monitoringRegions = value;
  }
  public resetMonitoringRegions() {
    this._monitoringRegions = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get monitoringRegionsInput() {
    return this._monitoringRegions;
  }

  // name_filter - computed: false, optional: true, required: false
  private _nameFilter?: string[]; 
  public get nameFilter() {
    return cdktf.Fn.tolist(this.getListAttribute('name_filter'));
  }
  public set nameFilter(value: string[]) {
    this._nameFilter = value;
  }
  public resetNameFilter() {
    this._nameFilter = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get nameFilterInput() {
    return this._nameFilter;
  }

  // select_all - computed: false, optional: true, required: false
  private _selectAll?: boolean | cdktf.IResolvable; 
  public get selectAll() {
    return this.getBooleanAttribute('select_all');
  }
  public set selectAll(value: boolean | cdktf.IResolvable) {
    this._selectAll = value;
  }
  public resetSelectAll() {
    this._selectAll = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get selectAllInput() {
    return this._selectAll;
  }

  // tags - computed: false, optional: true, required: false
  private _tags = new DeviceGroupExtraServicesEXPRESSROUTECIRCUiTTagsList(this, "tags", false);
  public get tags() {
    return this._tags;
  }
  public putTags(value: DeviceGroupExtraServicesEXPRESSROUTECIRCUiTTags[] | cdktf.IResolvable) {
    this._tags.internalValue = value;
  }
  public resetTags() {
    this._tags.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get tagsInput() {
    return this._tags.internalValue;
  }

  // use_default - computed: false, optional: false, required: true
  private _useDefault?: boolean | cdktf.IResolvable; 
  public get useDefault() {
    return this.getBooleanAttribute('use_default');
  }
  public set useDefault(value: boolean | cdktf.IResolvable) {
    this._useDefault = value;
  }
  // Temporarily expose input value. Use with caution.
  public get useDefaultInput() {
    return this._useDefault;
  }

  // normal_collector_config - computed: false, optional: true, required: false
  private _normalCollectorConfig = new DeviceGroupExtraServicesEXPRESSROUTECIRCUiTNormalCollectorConfigList(this, "normal_collector_config", false);
  public get normalCollectorConfig() {
    return this._normalCollectorConfig;
  }
  public putNormalCollectorConfig(value: DeviceGroupExtraServicesEXPRESSROUTECIRCUiTNormalCollectorConfig[] | cdktf.IResolvable) {
    this._normalCollectorConfig.internalValue = value;
  }
  public resetNormalCollectorConfig() {
    this._normalCollectorConfig.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get normalCollectorConfigInput() {
    return this._normalCollectorConfig.internalValue;
  }
}

export class DeviceGroupExtraServicesEXPRESSROUTECIRCUiTList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesEXPRESSROUTECIRCUiT[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesEXPRESSROUTECIRCUiTOutputReference {
    return new DeviceGroupExtraServicesEXPRESSROUTECIRCUiTOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesFILESTORAGETags {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#name DeviceGroup#name}
  */
  readonly name?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#operation DeviceGroup#operation}
  */
  readonly operation?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#value DeviceGroup#value}
  */
  readonly value?: string;
}

export function deviceGroupExtraServicesFILESTORAGETagsToTerraform(struct?: DeviceGroupExtraServicesFILESTORAGETags | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    name: cdktf.stringToTerraform(struct!.name),
    operation: cdktf.stringToTerraform(struct!.operation),
    value: cdktf.stringToTerraform(struct!.value),
  }
}


export function deviceGroupExtraServicesFILESTORAGETagsToHclTerraform(struct?: DeviceGroupExtraServicesFILESTORAGETags | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    name: {
      value: cdktf.stringToHclTerraform(struct!.name),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    operation: {
      value: cdktf.stringToHclTerraform(struct!.operation),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    value: {
      value: cdktf.stringToHclTerraform(struct!.value),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesFILESTORAGETagsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesFILESTORAGETags | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._name !== undefined) {
      hasAnyValues = true;
      internalValueResult.name = this._name;
    }
    if (this._operation !== undefined) {
      hasAnyValues = true;
      internalValueResult.operation = this._operation;
    }
    if (this._value !== undefined) {
      hasAnyValues = true;
      internalValueResult.value = this._value;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesFILESTORAGETags | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._name = undefined;
      this._operation = undefined;
      this._value = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._name = value.name;
      this._operation = value.operation;
      this._value = value.value;
    }
  }

  // name - computed: false, optional: true, required: false
  private _name?: string; 
  public get name() {
    return this.getStringAttribute('name');
  }
  public set name(value: string) {
    this._name = value;
  }
  public resetName() {
    this._name = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get nameInput() {
    return this._name;
  }

  // operation - computed: false, optional: true, required: false
  private _operation?: string; 
  public get operation() {
    return this.getStringAttribute('operation');
  }
  public set operation(value: string) {
    this._operation = value;
  }
  public resetOperation() {
    this._operation = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get operationInput() {
    return this._operation;
  }

  // value - computed: false, optional: true, required: false
  private _value?: string; 
  public get value() {
    return this.getStringAttribute('value');
  }
  public set value(value: string) {
    this._value = value;
  }
  public resetValue() {
    this._value = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get valueInput() {
    return this._value;
  }
}

export class DeviceGroupExtraServicesFILESTORAGETagsList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesFILESTORAGETags[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesFILESTORAGETagsOutputReference {
    return new DeviceGroupExtraServicesFILESTORAGETagsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesFILESTORAGENormalCollectorConfigCollectors {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#applies_to DeviceGroup#applies_to}
  */
  readonly appliesTo?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#auto_balanced_collector_group_id DeviceGroup#auto_balanced_collector_group_id}
  */
  readonly autoBalancedCollectorGroupId?: number;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#collector_id DeviceGroup#collector_id}
  */
  readonly collectorId?: number;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#priority DeviceGroup#priority}
  */
  readonly priority?: number;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#use_public_ip DeviceGroup#use_public_ip}
  */
  readonly usePublicIp?: boolean | cdktf.IResolvable;
}

export function deviceGroupExtraServicesFILESTORAGENormalCollectorConfigCollectorsToTerraform(struct?: DeviceGroupExtraServicesFILESTORAGENormalCollectorConfigCollectors | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    applies_to: cdktf.stringToTerraform(struct!.appliesTo),
    auto_balanced_collector_group_id: cdktf.numberToTerraform(struct!.autoBalancedCollectorGroupId),
    collector_id: cdktf.numberToTerraform(struct!.collectorId),
    priority: cdktf.numberToTerraform(struct!.priority),
    use_public_ip: cdktf.booleanToTerraform(struct!.usePublicIp),
  }
}


export function deviceGroupExtraServicesFILESTORAGENormalCollectorConfigCollectorsToHclTerraform(struct?: DeviceGroupExtraServicesFILESTORAGENormalCollectorConfigCollectors | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    applies_to: {
      value: cdktf.stringToHclTerraform(struct!.appliesTo),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    auto_balanced_collector_group_id: {
      value: cdktf.numberToHclTerraform(struct!.autoBalancedCollectorGroupId),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    collector_id: {
      value: cdktf.numberToHclTerraform(struct!.collectorId),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    priority: {
      value: cdktf.numberToHclTerraform(struct!.priority),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    use_public_ip: {
      value: cdktf.booleanToHclTerraform(struct!.usePublicIp),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesFILESTORAGENormalCollectorConfigCollectorsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesFILESTORAGENormalCollectorConfigCollectors | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._appliesTo !== undefined) {
      hasAnyValues = true;
      internalValueResult.appliesTo = this._appliesTo;
    }
    if (this._autoBalancedCollectorGroupId !== undefined) {
      hasAnyValues = true;
      internalValueResult.autoBalancedCollectorGroupId = this._autoBalancedCollectorGroupId;
    }
    if (this._collectorId !== undefined) {
      hasAnyValues = true;
      internalValueResult.collectorId = this._collectorId;
    }
    if (this._priority !== undefined) {
      hasAnyValues = true;
      internalValueResult.priority = this._priority;
    }
    if (this._usePublicIp !== undefined) {
      hasAnyValues = true;
      internalValueResult.usePublicIp = this._usePublicIp;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesFILESTORAGENormalCollectorConfigCollectors | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._appliesTo = undefined;
      this._autoBalancedCollectorGroupId = undefined;
      this._collectorId = undefined;
      this._priority = undefined;
      this._usePublicIp = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._appliesTo = value.appliesTo;
      this._autoBalancedCollectorGroupId = value.autoBalancedCollectorGroupId;
      this._collectorId = value.collectorId;
      this._priority = value.priority;
      this._usePublicIp = value.usePublicIp;
    }
  }

  // applies_to - computed: false, optional: true, required: false
  private _appliesTo?: string; 
  public get appliesTo() {
    return this.getStringAttribute('applies_to');
  }
  public set appliesTo(value: string) {
    this._appliesTo = value;
  }
  public resetAppliesTo() {
    this._appliesTo = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get appliesToInput() {
    return this._appliesTo;
  }

  // auto_balanced_collector_group_id - computed: false, optional: true, required: false
  private _autoBalancedCollectorGroupId?: number; 
  public get autoBalancedCollectorGroupId() {
    return this.getNumberAttribute('auto_balanced_collector_group_id');
  }
  public set autoBalancedCollectorGroupId(value: number) {
    this._autoBalancedCollectorGroupId = value;
  }
  public resetAutoBalancedCollectorGroupId() {
    this._autoBalancedCollectorGroupId = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get autoBalancedCollectorGroupIdInput() {
    return this._autoBalancedCollectorGroupId;
  }

  // collector_id - computed: false, optional: true, required: false
  private _collectorId?: number; 
  public get collectorId() {
    return this.getNumberAttribute('collector_id');
  }
  public set collectorId(value: number) {
    this._collectorId = value;
  }
  public resetCollectorId() {
    this._collectorId = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get collectorIdInput() {
    return this._collectorId;
  }

  // priority - computed: false, optional: true, required: false
  private _priority?: number; 
  public get priority() {
    return this.getNumberAttribute('priority');
  }
  public set priority(value: number) {
    this._priority = value;
  }
  public resetPriority() {
    this._priority = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get priorityInput() {
    return this._priority;
  }

  // use_public_ip - computed: false, optional: true, required: false
  private _usePublicIp?: boolean | cdktf.IResolvable; 
  public get usePublicIp() {
    return this.getBooleanAttribute('use_public_ip');
  }
  public set usePublicIp(value: boolean | cdktf.IResolvable) {
    this._usePublicIp = value;
  }
  public resetUsePublicIp() {
    this._usePublicIp = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get usePublicIpInput() {
    return this._usePublicIp;
  }
}

export class DeviceGroupExtraServicesFILESTORAGENormalCollectorConfigCollectorsList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesFILESTORAGENormalCollectorConfigCollectors[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesFILESTORAGENormalCollectorConfigCollectorsOutputReference {
    return new DeviceGroupExtraServicesFILESTORAGENormalCollectorConfigCollectorsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesFILESTORAGENormalCollectorConfig {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#collectors DeviceGroup#collectors}
  */
  readonly collectors?: DeviceGroupExtraServicesFILESTORAGENormalCollectorConfigCollectors[] | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#enabled DeviceGroup#enabled}
  */
  readonly enabled: boolean | cdktf.IResolvable;
}

export function deviceGroupExtraServicesFILESTORAGENormalCollectorConfigToTerraform(struct?: DeviceGroupExtraServicesFILESTORAGENormalCollectorConfig | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    collectors: cdktf.listMapper(deviceGroupExtraServicesFILESTORAGENormalCollectorConfigCollectorsToTerraform, false)(struct!.collectors),
    enabled: cdktf.booleanToTerraform(struct!.enabled),
  }
}


export function deviceGroupExtraServicesFILESTORAGENormalCollectorConfigToHclTerraform(struct?: DeviceGroupExtraServicesFILESTORAGENormalCollectorConfig | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    collectors: {
      value: cdktf.listMapperHcl(deviceGroupExtraServicesFILESTORAGENormalCollectorConfigCollectorsToHclTerraform, false)(struct!.collectors),
      isBlock: true,
      type: "list",
      storageClassType: "DeviceGroupExtraServicesFILESTORAGENormalCollectorConfigCollectorsList",
    },
    enabled: {
      value: cdktf.booleanToHclTerraform(struct!.enabled),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesFILESTORAGENormalCollectorConfigOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesFILESTORAGENormalCollectorConfig | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._collectors?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.collectors = this._collectors?.internalValue;
    }
    if (this._enabled !== undefined) {
      hasAnyValues = true;
      internalValueResult.enabled = this._enabled;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesFILESTORAGENormalCollectorConfig | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._collectors.internalValue = undefined;
      this._enabled = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._collectors.internalValue = value.collectors;
      this._enabled = value.enabled;
    }
  }

  // collectors - computed: false, optional: true, required: false
  private _collectors = new DeviceGroupExtraServicesFILESTORAGENormalCollectorConfigCollectorsList(this, "collectors", false);
  public get collectors() {
    return this._collectors;
  }
  public putCollectors(value: DeviceGroupExtraServicesFILESTORAGENormalCollectorConfigCollectors[] | cdktf.IResolvable) {
    this._collectors.internalValue = value;
  }
  public resetCollectors() {
    this._collectors.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get collectorsInput() {
    return this._collectors.internalValue;
  }

  // enabled - computed: false, optional: false, required: true
  private _enabled?: boolean | cdktf.IResolvable; 
  public get enabled() {
    return this.getBooleanAttribute('enabled');
  }
  public set enabled(value: boolean | cdktf.IResolvable) {
    this._enabled = value;
  }
  // Temporarily expose input value. Use with caution.
  public get enabledInput() {
    return this._enabled;
  }
}

export class DeviceGroupExtraServicesFILESTORAGENormalCollectorConfigList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesFILESTORAGENormalCollectorConfig[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesFILESTORAGENormalCollectorConfigOutputReference {
    return new DeviceGroupExtraServicesFILESTORAGENormalCollectorConfigOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesFILESTORAGE {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#custom_n_s_p_schedule DeviceGroup#custom_n_s_p_schedule}
  */
  readonly customNSPSchedule?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#dead_operation DeviceGroup#dead_operation}
  */
  readonly deadOperation?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#device_display_name_template DeviceGroup#device_display_name_template}
  */
  readonly deviceDisplayNameTemplate?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#disable_stop_terminate_host_monitor DeviceGroup#disable_stop_terminate_host_monitor}
  */
  readonly disableStopTerminateHostMonitor?: boolean | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#disable_terminated_host_alerting DeviceGroup#disable_terminated_host_alerting}
  */
  readonly disableTerminatedHostAlerting?: boolean | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#monitoring_region_infos DeviceGroup#monitoring_region_infos}
  */
  readonly monitoringRegionInfos?: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#monitoring_regions DeviceGroup#monitoring_regions}
  */
  readonly monitoringRegions?: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#name_filter DeviceGroup#name_filter}
  */
  readonly nameFilter?: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#select_all DeviceGroup#select_all}
  */
  readonly selectAll?: boolean | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#tags DeviceGroup#tags}
  */
  readonly tags?: DeviceGroupExtraServicesFILESTORAGETags[] | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#use_default DeviceGroup#use_default}
  */
  readonly useDefault: boolean | cdktf.IResolvable;
  /**
  * normal_collector_config block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#normal_collector_config DeviceGroup#normal_collector_config}
  */
  readonly normalCollectorConfig?: DeviceGroupExtraServicesFILESTORAGENormalCollectorConfig[] | cdktf.IResolvable;
}

export function deviceGroupExtraServicesFILESTORAGEToTerraform(struct?: DeviceGroupExtraServicesFILESTORAGE | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    custom_n_s_p_schedule: cdktf.stringToTerraform(struct!.customNSPSchedule),
    dead_operation: cdktf.stringToTerraform(struct!.deadOperation),
    device_display_name_template: cdktf.stringToTerraform(struct!.deviceDisplayNameTemplate),
    disable_stop_terminate_host_monitor: cdktf.booleanToTerraform(struct!.disableStopTerminateHostMonitor),
    disable_terminated_host_alerting: cdktf.booleanToTerraform(struct!.disableTerminatedHostAlerting),
    monitoring_region_infos: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.monitoringRegionInfos),
    monitoring_regions: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.monitoringRegions),
    name_filter: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.nameFilter),
    select_all: cdktf.booleanToTerraform(struct!.selectAll),
    tags: cdktf.listMapper(deviceGroupExtraServicesFILESTORAGETagsToTerraform, false)(struct!.tags),
    use_default: cdktf.booleanToTerraform(struct!.useDefault),
    normal_collector_config: cdktf.listMapper(deviceGroupExtraServicesFILESTORAGENormalCollectorConfigToTerraform, true)(struct!.normalCollectorConfig),
  }
}


export function deviceGroupExtraServicesFILESTORAGEToHclTerraform(struct?: DeviceGroupExtraServicesFILESTORAGE | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    custom_n_s_p_schedule: {
      value: cdktf.stringToHclTerraform(struct!.customNSPSchedule),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    dead_operation: {
      value: cdktf.stringToHclTerraform(struct!.deadOperation),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    device_display_name_template: {
      value: cdktf.stringToHclTerraform(struct!.deviceDisplayNameTemplate),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    disable_stop_terminate_host_monitor: {
      value: cdktf.booleanToHclTerraform(struct!.disableStopTerminateHostMonitor),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    disable_terminated_host_alerting: {
      value: cdktf.booleanToHclTerraform(struct!.disableTerminatedHostAlerting),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    monitoring_region_infos: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.monitoringRegionInfos),
      isBlock: false,
      type: "set",
      storageClassType: "stringList",
    },
    monitoring_regions: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.monitoringRegions),
      isBlock: false,
      type: "set",
      storageClassType: "stringList",
    },
    name_filter: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.nameFilter),
      isBlock: false,
      type: "set",
      storageClassType: "stringList",
    },
    select_all: {
      value: cdktf.booleanToHclTerraform(struct!.selectAll),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    tags: {
      value: cdktf.listMapperHcl(deviceGroupExtraServicesFILESTORAGETagsToHclTerraform, false)(struct!.tags),
      isBlock: true,
      type: "list",
      storageClassType: "DeviceGroupExtraServicesFILESTORAGETagsList",
    },
    use_default: {
      value: cdktf.booleanToHclTerraform(struct!.useDefault),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    normal_collector_config: {
      value: cdktf.listMapperHcl(deviceGroupExtraServicesFILESTORAGENormalCollectorConfigToHclTerraform, true)(struct!.normalCollectorConfig),
      isBlock: true,
      type: "list",
      storageClassType: "DeviceGroupExtraServicesFILESTORAGENormalCollectorConfigList",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesFILESTORAGEOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesFILESTORAGE | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._customNSPSchedule !== undefined) {
      hasAnyValues = true;
      internalValueResult.customNSPSchedule = this._customNSPSchedule;
    }
    if (this._deadOperation !== undefined) {
      hasAnyValues = true;
      internalValueResult.deadOperation = this._deadOperation;
    }
    if (this._deviceDisplayNameTemplate !== undefined) {
      hasAnyValues = true;
      internalValueResult.deviceDisplayNameTemplate = this._deviceDisplayNameTemplate;
    }
    if (this._disableStopTerminateHostMonitor !== undefined) {
      hasAnyValues = true;
      internalValueResult.disableStopTerminateHostMonitor = this._disableStopTerminateHostMonitor;
    }
    if (this._disableTerminatedHostAlerting !== undefined) {
      hasAnyValues = true;
      internalValueResult.disableTerminatedHostAlerting = this._disableTerminatedHostAlerting;
    }
    if (this._monitoringRegionInfos !== undefined) {
      hasAnyValues = true;
      internalValueResult.monitoringRegionInfos = this._monitoringRegionInfos;
    }
    if (this._monitoringRegions !== undefined) {
      hasAnyValues = true;
      internalValueResult.monitoringRegions = this._monitoringRegions;
    }
    if (this._nameFilter !== undefined) {
      hasAnyValues = true;
      internalValueResult.nameFilter = this._nameFilter;
    }
    if (this._selectAll !== undefined) {
      hasAnyValues = true;
      internalValueResult.selectAll = this._selectAll;
    }
    if (this._tags?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.tags = this._tags?.internalValue;
    }
    if (this._useDefault !== undefined) {
      hasAnyValues = true;
      internalValueResult.useDefault = this._useDefault;
    }
    if (this._normalCollectorConfig?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.normalCollectorConfig = this._normalCollectorConfig?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesFILESTORAGE | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._customNSPSchedule = undefined;
      this._deadOperation = undefined;
      this._deviceDisplayNameTemplate = undefined;
      this._disableStopTerminateHostMonitor = undefined;
      this._disableTerminatedHostAlerting = undefined;
      this._monitoringRegionInfos = undefined;
      this._monitoringRegions = undefined;
      this._nameFilter = undefined;
      this._selectAll = undefined;
      this._tags.internalValue = undefined;
      this._useDefault = undefined;
      this._normalCollectorConfig.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._customNSPSchedule = value.customNSPSchedule;
      this._deadOperation = value.deadOperation;
      this._deviceDisplayNameTemplate = value.deviceDisplayNameTemplate;
      this._disableStopTerminateHostMonitor = value.disableStopTerminateHostMonitor;
      this._disableTerminatedHostAlerting = value.disableTerminatedHostAlerting;
      this._monitoringRegionInfos = value.monitoringRegionInfos;
      this._monitoringRegions = value.monitoringRegions;
      this._nameFilter = value.nameFilter;
      this._selectAll = value.selectAll;
      this._tags.internalValue = value.tags;
      this._useDefault = value.useDefault;
      this._normalCollectorConfig.internalValue = value.normalCollectorConfig;
    }
  }

  // custom_n_s_p_schedule - computed: false, optional: true, required: false
  private _customNSPSchedule?: string; 
  public get customNSPSchedule() {
    return this.getStringAttribute('custom_n_s_p_schedule');
  }
  public set customNSPSchedule(value: string) {
    this._customNSPSchedule = value;
  }
  public resetCustomNSPSchedule() {
    this._customNSPSchedule = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get customNSPScheduleInput() {
    return this._customNSPSchedule;
  }

  // dead_operation - computed: false, optional: true, required: false
  private _deadOperation?: string; 
  public get deadOperation() {
    return this.getStringAttribute('dead_operation');
  }
  public set deadOperation(value: string) {
    this._deadOperation = value;
  }
  public resetDeadOperation() {
    this._deadOperation = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get deadOperationInput() {
    return this._deadOperation;
  }

  // device_display_name_template - computed: false, optional: true, required: false
  private _deviceDisplayNameTemplate?: string; 
  public get deviceDisplayNameTemplate() {
    return this.getStringAttribute('device_display_name_template');
  }
  public set deviceDisplayNameTemplate(value: string) {
    this._deviceDisplayNameTemplate = value;
  }
  public resetDeviceDisplayNameTemplate() {
    this._deviceDisplayNameTemplate = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get deviceDisplayNameTemplateInput() {
    return this._deviceDisplayNameTemplate;
  }

  // disable_stop_terminate_host_monitor - computed: false, optional: true, required: false
  private _disableStopTerminateHostMonitor?: boolean | cdktf.IResolvable; 
  public get disableStopTerminateHostMonitor() {
    return this.getBooleanAttribute('disable_stop_terminate_host_monitor');
  }
  public set disableStopTerminateHostMonitor(value: boolean | cdktf.IResolvable) {
    this._disableStopTerminateHostMonitor = value;
  }
  public resetDisableStopTerminateHostMonitor() {
    this._disableStopTerminateHostMonitor = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get disableStopTerminateHostMonitorInput() {
    return this._disableStopTerminateHostMonitor;
  }

  // disable_terminated_host_alerting - computed: false, optional: true, required: false
  private _disableTerminatedHostAlerting?: boolean | cdktf.IResolvable; 
  public get disableTerminatedHostAlerting() {
    return this.getBooleanAttribute('disable_terminated_host_alerting');
  }
  public set disableTerminatedHostAlerting(value: boolean | cdktf.IResolvable) {
    this._disableTerminatedHostAlerting = value;
  }
  public resetDisableTerminatedHostAlerting() {
    this._disableTerminatedHostAlerting = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get disableTerminatedHostAlertingInput() {
    return this._disableTerminatedHostAlerting;
  }

  // monitoring_region_infos - computed: false, optional: true, required: false
  private _monitoringRegionInfos?: string[]; 
  public get monitoringRegionInfos() {
    return cdktf.Fn.tolist(this.getListAttribute('monitoring_region_infos'));
  }
  public set monitoringRegionInfos(value: string[]) {
    this._monitoringRegionInfos = value;
  }
  public resetMonitoringRegionInfos() {
    this._monitoringRegionInfos = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get monitoringRegionInfosInput() {
    return this._monitoringRegionInfos;
  }

  // monitoring_regions - computed: false, optional: true, required: false
  private _monitoringRegions?: string[]; 
  public get monitoringRegions() {
    return cdktf.Fn.tolist(this.getListAttribute('monitoring_regions'));
  }
  public set monitoringRegions(value: string[]) {
    this._monitoringRegions = value;
  }
  public resetMonitoringRegions() {
    this._monitoringRegions = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get monitoringRegionsInput() {
    return this._monitoringRegions;
  }

  // name_filter - computed: false, optional: true, required: false
  private _nameFilter?: string[]; 
  public get nameFilter() {
    return cdktf.Fn.tolist(this.getListAttribute('name_filter'));
  }
  public set nameFilter(value: string[]) {
    this._nameFilter = value;
  }
  public resetNameFilter() {
    this._nameFilter = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get nameFilterInput() {
    return this._nameFilter;
  }

  // select_all - computed: false, optional: true, required: false
  private _selectAll?: boolean | cdktf.IResolvable; 
  public get selectAll() {
    return this.getBooleanAttribute('select_all');
  }
  public set selectAll(value: boolean | cdktf.IResolvable) {
    this._selectAll = value;
  }
  public resetSelectAll() {
    this._selectAll = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get selectAllInput() {
    return this._selectAll;
  }

  // tags - computed: false, optional: true, required: false
  private _tags = new DeviceGroupExtraServicesFILESTORAGETagsList(this, "tags", false);
  public get tags() {
    return this._tags;
  }
  public putTags(value: DeviceGroupExtraServicesFILESTORAGETags[] | cdktf.IResolvable) {
    this._tags.internalValue = value;
  }
  public resetTags() {
    this._tags.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get tagsInput() {
    return this._tags.internalValue;
  }

  // use_default - computed: false, optional: false, required: true
  private _useDefault?: boolean | cdktf.IResolvable; 
  public get useDefault() {
    return this.getBooleanAttribute('use_default');
  }
  public set useDefault(value: boolean | cdktf.IResolvable) {
    this._useDefault = value;
  }
  // Temporarily expose input value. Use with caution.
  public get useDefaultInput() {
    return this._useDefault;
  }

  // normal_collector_config - computed: false, optional: true, required: false
  private _normalCollectorConfig = new DeviceGroupExtraServicesFILESTORAGENormalCollectorConfigList(this, "normal_collector_config", false);
  public get normalCollectorConfig() {
    return this._normalCollectorConfig;
  }
  public putNormalCollectorConfig(value: DeviceGroupExtraServicesFILESTORAGENormalCollectorConfig[] | cdktf.IResolvable) {
    this._normalCollectorConfig.internalValue = value;
  }
  public resetNormalCollectorConfig() {
    this._normalCollectorConfig.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get normalCollectorConfigInput() {
    return this._normalCollectorConfig.internalValue;
  }
}

export class DeviceGroupExtraServicesFILESTORAGEList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesFILESTORAGE[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesFILESTORAGEOutputReference {
    return new DeviceGroupExtraServicesFILESTORAGEOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesFIREHOSETags {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#name DeviceGroup#name}
  */
  readonly name?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#operation DeviceGroup#operation}
  */
  readonly operation?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#value DeviceGroup#value}
  */
  readonly value?: string;
}

export function deviceGroupExtraServicesFIREHOSETagsToTerraform(struct?: DeviceGroupExtraServicesFIREHOSETags | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    name: cdktf.stringToTerraform(struct!.name),
    operation: cdktf.stringToTerraform(struct!.operation),
    value: cdktf.stringToTerraform(struct!.value),
  }
}


export function deviceGroupExtraServicesFIREHOSETagsToHclTerraform(struct?: DeviceGroupExtraServicesFIREHOSETags | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    name: {
      value: cdktf.stringToHclTerraform(struct!.name),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    operation: {
      value: cdktf.stringToHclTerraform(struct!.operation),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    value: {
      value: cdktf.stringToHclTerraform(struct!.value),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesFIREHOSETagsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesFIREHOSETags | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._name !== undefined) {
      hasAnyValues = true;
      internalValueResult.name = this._name;
    }
    if (this._operation !== undefined) {
      hasAnyValues = true;
      internalValueResult.operation = this._operation;
    }
    if (this._value !== undefined) {
      hasAnyValues = true;
      internalValueResult.value = this._value;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesFIREHOSETags | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._name = undefined;
      this._operation = undefined;
      this._value = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._name = value.name;
      this._operation = value.operation;
      this._value = value.value;
    }
  }

  // name - computed: false, optional: true, required: false
  private _name?: string; 
  public get name() {
    return this.getStringAttribute('name');
  }
  public set name(value: string) {
    this._name = value;
  }
  public resetName() {
    this._name = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get nameInput() {
    return this._name;
  }

  // operation - computed: false, optional: true, required: false
  private _operation?: string; 
  public get operation() {
    return this.getStringAttribute('operation');
  }
  public set operation(value: string) {
    this._operation = value;
  }
  public resetOperation() {
    this._operation = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get operationInput() {
    return this._operation;
  }

  // value - computed: false, optional: true, required: false
  private _value?: string; 
  public get value() {
    return this.getStringAttribute('value');
  }
  public set value(value: string) {
    this._value = value;
  }
  public resetValue() {
    this._value = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get valueInput() {
    return this._value;
  }
}

export class DeviceGroupExtraServicesFIREHOSETagsList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesFIREHOSETags[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesFIREHOSETagsOutputReference {
    return new DeviceGroupExtraServicesFIREHOSETagsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesFIREHOSENormalCollectorConfigCollectors {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#applies_to DeviceGroup#applies_to}
  */
  readonly appliesTo?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#auto_balanced_collector_group_id DeviceGroup#auto_balanced_collector_group_id}
  */
  readonly autoBalancedCollectorGroupId?: number;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#collector_id DeviceGroup#collector_id}
  */
  readonly collectorId?: number;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#priority DeviceGroup#priority}
  */
  readonly priority?: number;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#use_public_ip DeviceGroup#use_public_ip}
  */
  readonly usePublicIp?: boolean | cdktf.IResolvable;
}

export function deviceGroupExtraServicesFIREHOSENormalCollectorConfigCollectorsToTerraform(struct?: DeviceGroupExtraServicesFIREHOSENormalCollectorConfigCollectors | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    applies_to: cdktf.stringToTerraform(struct!.appliesTo),
    auto_balanced_collector_group_id: cdktf.numberToTerraform(struct!.autoBalancedCollectorGroupId),
    collector_id: cdktf.numberToTerraform(struct!.collectorId),
    priority: cdktf.numberToTerraform(struct!.priority),
    use_public_ip: cdktf.booleanToTerraform(struct!.usePublicIp),
  }
}


export function deviceGroupExtraServicesFIREHOSENormalCollectorConfigCollectorsToHclTerraform(struct?: DeviceGroupExtraServicesFIREHOSENormalCollectorConfigCollectors | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    applies_to: {
      value: cdktf.stringToHclTerraform(struct!.appliesTo),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    auto_balanced_collector_group_id: {
      value: cdktf.numberToHclTerraform(struct!.autoBalancedCollectorGroupId),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    collector_id: {
      value: cdktf.numberToHclTerraform(struct!.collectorId),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    priority: {
      value: cdktf.numberToHclTerraform(struct!.priority),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    use_public_ip: {
      value: cdktf.booleanToHclTerraform(struct!.usePublicIp),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesFIREHOSENormalCollectorConfigCollectorsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesFIREHOSENormalCollectorConfigCollectors | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._appliesTo !== undefined) {
      hasAnyValues = true;
      internalValueResult.appliesTo = this._appliesTo;
    }
    if (this._autoBalancedCollectorGroupId !== undefined) {
      hasAnyValues = true;
      internalValueResult.autoBalancedCollectorGroupId = this._autoBalancedCollectorGroupId;
    }
    if (this._collectorId !== undefined) {
      hasAnyValues = true;
      internalValueResult.collectorId = this._collectorId;
    }
    if (this._priority !== undefined) {
      hasAnyValues = true;
      internalValueResult.priority = this._priority;
    }
    if (this._usePublicIp !== undefined) {
      hasAnyValues = true;
      internalValueResult.usePublicIp = this._usePublicIp;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesFIREHOSENormalCollectorConfigCollectors | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._appliesTo = undefined;
      this._autoBalancedCollectorGroupId = undefined;
      this._collectorId = undefined;
      this._priority = undefined;
      this._usePublicIp = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._appliesTo = value.appliesTo;
      this._autoBalancedCollectorGroupId = value.autoBalancedCollectorGroupId;
      this._collectorId = value.collectorId;
      this._priority = value.priority;
      this._usePublicIp = value.usePublicIp;
    }
  }

  // applies_to - computed: false, optional: true, required: false
  private _appliesTo?: string; 
  public get appliesTo() {
    return this.getStringAttribute('applies_to');
  }
  public set appliesTo(value: string) {
    this._appliesTo = value;
  }
  public resetAppliesTo() {
    this._appliesTo = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get appliesToInput() {
    return this._appliesTo;
  }

  // auto_balanced_collector_group_id - computed: false, optional: true, required: false
  private _autoBalancedCollectorGroupId?: number; 
  public get autoBalancedCollectorGroupId() {
    return this.getNumberAttribute('auto_balanced_collector_group_id');
  }
  public set autoBalancedCollectorGroupId(value: number) {
    this._autoBalancedCollectorGroupId = value;
  }
  public resetAutoBalancedCollectorGroupId() {
    this._autoBalancedCollectorGroupId = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get autoBalancedCollectorGroupIdInput() {
    return this._autoBalancedCollectorGroupId;
  }

  // collector_id - computed: false, optional: true, required: false
  private _collectorId?: number; 
  public get collectorId() {
    return this.getNumberAttribute('collector_id');
  }
  public set collectorId(value: number) {
    this._collectorId = value;
  }
  public resetCollectorId() {
    this._collectorId = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get collectorIdInput() {
    return this._collectorId;
  }

  // priority - computed: false, optional: true, required: false
  private _priority?: number; 
  public get priority() {
    return this.getNumberAttribute('priority');
  }
  public set priority(value: number) {
    this._priority = value;
  }
  public resetPriority() {
    this._priority = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get priorityInput() {
    return this._priority;
  }

  // use_public_ip - computed: false, optional: true, required: false
  private _usePublicIp?: boolean | cdktf.IResolvable; 
  public get usePublicIp() {
    return this.getBooleanAttribute('use_public_ip');
  }
  public set usePublicIp(value: boolean | cdktf.IResolvable) {
    this._usePublicIp = value;
  }
  public resetUsePublicIp() {
    this._usePublicIp = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get usePublicIpInput() {
    return this._usePublicIp;
  }
}

export class DeviceGroupExtraServicesFIREHOSENormalCollectorConfigCollectorsList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesFIREHOSENormalCollectorConfigCollectors[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesFIREHOSENormalCollectorConfigCollectorsOutputReference {
    return new DeviceGroupExtraServicesFIREHOSENormalCollectorConfigCollectorsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesFIREHOSENormalCollectorConfig {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#collectors DeviceGroup#collectors}
  */
  readonly collectors?: DeviceGroupExtraServicesFIREHOSENormalCollectorConfigCollectors[] | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#enabled DeviceGroup#enabled}
  */
  readonly enabled: boolean | cdktf.IResolvable;
}

export function deviceGroupExtraServicesFIREHOSENormalCollectorConfigToTerraform(struct?: DeviceGroupExtraServicesFIREHOSENormalCollectorConfig | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    collectors: cdktf.listMapper(deviceGroupExtraServicesFIREHOSENormalCollectorConfigCollectorsToTerraform, false)(struct!.collectors),
    enabled: cdktf.booleanToTerraform(struct!.enabled),
  }
}


export function deviceGroupExtraServicesFIREHOSENormalCollectorConfigToHclTerraform(struct?: DeviceGroupExtraServicesFIREHOSENormalCollectorConfig | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    collectors: {
      value: cdktf.listMapperHcl(deviceGroupExtraServicesFIREHOSENormalCollectorConfigCollectorsToHclTerraform, false)(struct!.collectors),
      isBlock: true,
      type: "list",
      storageClassType: "DeviceGroupExtraServicesFIREHOSENormalCollectorConfigCollectorsList",
    },
    enabled: {
      value: cdktf.booleanToHclTerraform(struct!.enabled),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesFIREHOSENormalCollectorConfigOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesFIREHOSENormalCollectorConfig | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._collectors?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.collectors = this._collectors?.internalValue;
    }
    if (this._enabled !== undefined) {
      hasAnyValues = true;
      internalValueResult.enabled = this._enabled;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesFIREHOSENormalCollectorConfig | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._collectors.internalValue = undefined;
      this._enabled = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._collectors.internalValue = value.collectors;
      this._enabled = value.enabled;
    }
  }

  // collectors - computed: false, optional: true, required: false
  private _collectors = new DeviceGroupExtraServicesFIREHOSENormalCollectorConfigCollectorsList(this, "collectors", false);
  public get collectors() {
    return this._collectors;
  }
  public putCollectors(value: DeviceGroupExtraServicesFIREHOSENormalCollectorConfigCollectors[] | cdktf.IResolvable) {
    this._collectors.internalValue = value;
  }
  public resetCollectors() {
    this._collectors.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get collectorsInput() {
    return this._collectors.internalValue;
  }

  // enabled - computed: false, optional: false, required: true
  private _enabled?: boolean | cdktf.IResolvable; 
  public get enabled() {
    return this.getBooleanAttribute('enabled');
  }
  public set enabled(value: boolean | cdktf.IResolvable) {
    this._enabled = value;
  }
  // Temporarily expose input value. Use with caution.
  public get enabledInput() {
    return this._enabled;
  }
}

export class DeviceGroupExtraServicesFIREHOSENormalCollectorConfigList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesFIREHOSENormalCollectorConfig[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesFIREHOSENormalCollectorConfigOutputReference {
    return new DeviceGroupExtraServicesFIREHOSENormalCollectorConfigOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesFIREHOSE {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#custom_n_s_p_schedule DeviceGroup#custom_n_s_p_schedule}
  */
  readonly customNSPSchedule?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#dead_operation DeviceGroup#dead_operation}
  */
  readonly deadOperation?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#device_display_name_template DeviceGroup#device_display_name_template}
  */
  readonly deviceDisplayNameTemplate?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#disable_stop_terminate_host_monitor DeviceGroup#disable_stop_terminate_host_monitor}
  */
  readonly disableStopTerminateHostMonitor?: boolean | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#disable_terminated_host_alerting DeviceGroup#disable_terminated_host_alerting}
  */
  readonly disableTerminatedHostAlerting?: boolean | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#monitoring_region_infos DeviceGroup#monitoring_region_infos}
  */
  readonly monitoringRegionInfos?: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#monitoring_regions DeviceGroup#monitoring_regions}
  */
  readonly monitoringRegions?: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#name_filter DeviceGroup#name_filter}
  */
  readonly nameFilter?: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#select_all DeviceGroup#select_all}
  */
  readonly selectAll?: boolean | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#tags DeviceGroup#tags}
  */
  readonly tags?: DeviceGroupExtraServicesFIREHOSETags[] | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#use_default DeviceGroup#use_default}
  */
  readonly useDefault: boolean | cdktf.IResolvable;
  /**
  * normal_collector_config block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#normal_collector_config DeviceGroup#normal_collector_config}
  */
  readonly normalCollectorConfig?: DeviceGroupExtraServicesFIREHOSENormalCollectorConfig[] | cdktf.IResolvable;
}

export function deviceGroupExtraServicesFIREHOSEToTerraform(struct?: DeviceGroupExtraServicesFIREHOSE | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    custom_n_s_p_schedule: cdktf.stringToTerraform(struct!.customNSPSchedule),
    dead_operation: cdktf.stringToTerraform(struct!.deadOperation),
    device_display_name_template: cdktf.stringToTerraform(struct!.deviceDisplayNameTemplate),
    disable_stop_terminate_host_monitor: cdktf.booleanToTerraform(struct!.disableStopTerminateHostMonitor),
    disable_terminated_host_alerting: cdktf.booleanToTerraform(struct!.disableTerminatedHostAlerting),
    monitoring_region_infos: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.monitoringRegionInfos),
    monitoring_regions: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.monitoringRegions),
    name_filter: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.nameFilter),
    select_all: cdktf.booleanToTerraform(struct!.selectAll),
    tags: cdktf.listMapper(deviceGroupExtraServicesFIREHOSETagsToTerraform, false)(struct!.tags),
    use_default: cdktf.booleanToTerraform(struct!.useDefault),
    normal_collector_config: cdktf.listMapper(deviceGroupExtraServicesFIREHOSENormalCollectorConfigToTerraform, true)(struct!.normalCollectorConfig),
  }
}


export function deviceGroupExtraServicesFIREHOSEToHclTerraform(struct?: DeviceGroupExtraServicesFIREHOSE | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    custom_n_s_p_schedule: {
      value: cdktf.stringToHclTerraform(struct!.customNSPSchedule),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    dead_operation: {
      value: cdktf.stringToHclTerraform(struct!.deadOperation),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    device_display_name_template: {
      value: cdktf.stringToHclTerraform(struct!.deviceDisplayNameTemplate),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    disable_stop_terminate_host_monitor: {
      value: cdktf.booleanToHclTerraform(struct!.disableStopTerminateHostMonitor),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    disable_terminated_host_alerting: {
      value: cdktf.booleanToHclTerraform(struct!.disableTerminatedHostAlerting),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    monitoring_region_infos: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.monitoringRegionInfos),
      isBlock: false,
      type: "set",
      storageClassType: "stringList",
    },
    monitoring_regions: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.monitoringRegions),
      isBlock: false,
      type: "set",
      storageClassType: "stringList",
    },
    name_filter: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.nameFilter),
      isBlock: false,
      type: "set",
      storageClassType: "stringList",
    },
    select_all: {
      value: cdktf.booleanToHclTerraform(struct!.selectAll),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    tags: {
      value: cdktf.listMapperHcl(deviceGroupExtraServicesFIREHOSETagsToHclTerraform, false)(struct!.tags),
      isBlock: true,
      type: "list",
      storageClassType: "DeviceGroupExtraServicesFIREHOSETagsList",
    },
    use_default: {
      value: cdktf.booleanToHclTerraform(struct!.useDefault),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    normal_collector_config: {
      value: cdktf.listMapperHcl(deviceGroupExtraServicesFIREHOSENormalCollectorConfigToHclTerraform, true)(struct!.normalCollectorConfig),
      isBlock: true,
      type: "list",
      storageClassType: "DeviceGroupExtraServicesFIREHOSENormalCollectorConfigList",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesFIREHOSEOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesFIREHOSE | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._customNSPSchedule !== undefined) {
      hasAnyValues = true;
      internalValueResult.customNSPSchedule = this._customNSPSchedule;
    }
    if (this._deadOperation !== undefined) {
      hasAnyValues = true;
      internalValueResult.deadOperation = this._deadOperation;
    }
    if (this._deviceDisplayNameTemplate !== undefined) {
      hasAnyValues = true;
      internalValueResult.deviceDisplayNameTemplate = this._deviceDisplayNameTemplate;
    }
    if (this._disableStopTerminateHostMonitor !== undefined) {
      hasAnyValues = true;
      internalValueResult.disableStopTerminateHostMonitor = this._disableStopTerminateHostMonitor;
    }
    if (this._disableTerminatedHostAlerting !== undefined) {
      hasAnyValues = true;
      internalValueResult.disableTerminatedHostAlerting = this._disableTerminatedHostAlerting;
    }
    if (this._monitoringRegionInfos !== undefined) {
      hasAnyValues = true;
      internalValueResult.monitoringRegionInfos = this._monitoringRegionInfos;
    }
    if (this._monitoringRegions !== undefined) {
      hasAnyValues = true;
      internalValueResult.monitoringRegions = this._monitoringRegions;
    }
    if (this._nameFilter !== undefined) {
      hasAnyValues = true;
      internalValueResult.nameFilter = this._nameFilter;
    }
    if (this._selectAll !== undefined) {
      hasAnyValues = true;
      internalValueResult.selectAll = this._selectAll;
    }
    if (this._tags?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.tags = this._tags?.internalValue;
    }
    if (this._useDefault !== undefined) {
      hasAnyValues = true;
      internalValueResult.useDefault = this._useDefault;
    }
    if (this._normalCollectorConfig?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.normalCollectorConfig = this._normalCollectorConfig?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesFIREHOSE | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._customNSPSchedule = undefined;
      this._deadOperation = undefined;
      this._deviceDisplayNameTemplate = undefined;
      this._disableStopTerminateHostMonitor = undefined;
      this._disableTerminatedHostAlerting = undefined;
      this._monitoringRegionInfos = undefined;
      this._monitoringRegions = undefined;
      this._nameFilter = undefined;
      this._selectAll = undefined;
      this._tags.internalValue = undefined;
      this._useDefault = undefined;
      this._normalCollectorConfig.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._customNSPSchedule = value.customNSPSchedule;
      this._deadOperation = value.deadOperation;
      this._deviceDisplayNameTemplate = value.deviceDisplayNameTemplate;
      this._disableStopTerminateHostMonitor = value.disableStopTerminateHostMonitor;
      this._disableTerminatedHostAlerting = value.disableTerminatedHostAlerting;
      this._monitoringRegionInfos = value.monitoringRegionInfos;
      this._monitoringRegions = value.monitoringRegions;
      this._nameFilter = value.nameFilter;
      this._selectAll = value.selectAll;
      this._tags.internalValue = value.tags;
      this._useDefault = value.useDefault;
      this._normalCollectorConfig.internalValue = value.normalCollectorConfig;
    }
  }

  // custom_n_s_p_schedule - computed: false, optional: true, required: false
  private _customNSPSchedule?: string; 
  public get customNSPSchedule() {
    return this.getStringAttribute('custom_n_s_p_schedule');
  }
  public set customNSPSchedule(value: string) {
    this._customNSPSchedule = value;
  }
  public resetCustomNSPSchedule() {
    this._customNSPSchedule = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get customNSPScheduleInput() {
    return this._customNSPSchedule;
  }

  // dead_operation - computed: false, optional: true, required: false
  private _deadOperation?: string; 
  public get deadOperation() {
    return this.getStringAttribute('dead_operation');
  }
  public set deadOperation(value: string) {
    this._deadOperation = value;
  }
  public resetDeadOperation() {
    this._deadOperation = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get deadOperationInput() {
    return this._deadOperation;
  }

  // device_display_name_template - computed: false, optional: true, required: false
  private _deviceDisplayNameTemplate?: string; 
  public get deviceDisplayNameTemplate() {
    return this.getStringAttribute('device_display_name_template');
  }
  public set deviceDisplayNameTemplate(value: string) {
    this._deviceDisplayNameTemplate = value;
  }
  public resetDeviceDisplayNameTemplate() {
    this._deviceDisplayNameTemplate = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get deviceDisplayNameTemplateInput() {
    return this._deviceDisplayNameTemplate;
  }

  // disable_stop_terminate_host_monitor - computed: false, optional: true, required: false
  private _disableStopTerminateHostMonitor?: boolean | cdktf.IResolvable; 
  public get disableStopTerminateHostMonitor() {
    return this.getBooleanAttribute('disable_stop_terminate_host_monitor');
  }
  public set disableStopTerminateHostMonitor(value: boolean | cdktf.IResolvable) {
    this._disableStopTerminateHostMonitor = value;
  }
  public resetDisableStopTerminateHostMonitor() {
    this._disableStopTerminateHostMonitor = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get disableStopTerminateHostMonitorInput() {
    return this._disableStopTerminateHostMonitor;
  }

  // disable_terminated_host_alerting - computed: false, optional: true, required: false
  private _disableTerminatedHostAlerting?: boolean | cdktf.IResolvable; 
  public get disableTerminatedHostAlerting() {
    return this.getBooleanAttribute('disable_terminated_host_alerting');
  }
  public set disableTerminatedHostAlerting(value: boolean | cdktf.IResolvable) {
    this._disableTerminatedHostAlerting = value;
  }
  public resetDisableTerminatedHostAlerting() {
    this._disableTerminatedHostAlerting = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get disableTerminatedHostAlertingInput() {
    return this._disableTerminatedHostAlerting;
  }

  // monitoring_region_infos - computed: false, optional: true, required: false
  private _monitoringRegionInfos?: string[]; 
  public get monitoringRegionInfos() {
    return cdktf.Fn.tolist(this.getListAttribute('monitoring_region_infos'));
  }
  public set monitoringRegionInfos(value: string[]) {
    this._monitoringRegionInfos = value;
  }
  public resetMonitoringRegionInfos() {
    this._monitoringRegionInfos = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get monitoringRegionInfosInput() {
    return this._monitoringRegionInfos;
  }

  // monitoring_regions - computed: false, optional: true, required: false
  private _monitoringRegions?: string[]; 
  public get monitoringRegions() {
    return cdktf.Fn.tolist(this.getListAttribute('monitoring_regions'));
  }
  public set monitoringRegions(value: string[]) {
    this._monitoringRegions = value;
  }
  public resetMonitoringRegions() {
    this._monitoringRegions = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get monitoringRegionsInput() {
    return this._monitoringRegions;
  }

  // name_filter - computed: false, optional: true, required: false
  private _nameFilter?: string[]; 
  public get nameFilter() {
    return cdktf.Fn.tolist(this.getListAttribute('name_filter'));
  }
  public set nameFilter(value: string[]) {
    this._nameFilter = value;
  }
  public resetNameFilter() {
    this._nameFilter = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get nameFilterInput() {
    return this._nameFilter;
  }

  // select_all - computed: false, optional: true, required: false
  private _selectAll?: boolean | cdktf.IResolvable; 
  public get selectAll() {
    return this.getBooleanAttribute('select_all');
  }
  public set selectAll(value: boolean | cdktf.IResolvable) {
    this._selectAll = value;
  }
  public resetSelectAll() {
    this._selectAll = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get selectAllInput() {
    return this._selectAll;
  }

  // tags - computed: false, optional: true, required: false
  private _tags = new DeviceGroupExtraServicesFIREHOSETagsList(this, "tags", false);
  public get tags() {
    return this._tags;
  }
  public putTags(value: DeviceGroupExtraServicesFIREHOSETags[] | cdktf.IResolvable) {
    this._tags.internalValue = value;
  }
  public resetTags() {
    this._tags.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get tagsInput() {
    return this._tags.internalValue;
  }

  // use_default - computed: false, optional: false, required: true
  private _useDefault?: boolean | cdktf.IResolvable; 
  public get useDefault() {
    return this.getBooleanAttribute('use_default');
  }
  public set useDefault(value: boolean | cdktf.IResolvable) {
    this._useDefault = value;
  }
  // Temporarily expose input value. Use with caution.
  public get useDefaultInput() {
    return this._useDefault;
  }

  // normal_collector_config - computed: false, optional: true, required: false
  private _normalCollectorConfig = new DeviceGroupExtraServicesFIREHOSENormalCollectorConfigList(this, "normal_collector_config", false);
  public get normalCollectorConfig() {
    return this._normalCollectorConfig;
  }
  public putNormalCollectorConfig(value: DeviceGroupExtraServicesFIREHOSENormalCollectorConfig[] | cdktf.IResolvable) {
    this._normalCollectorConfig.internalValue = value;
  }
  public resetNormalCollectorConfig() {
    this._normalCollectorConfig.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get normalCollectorConfigInput() {
    return this._normalCollectorConfig.internalValue;
  }
}

export class DeviceGroupExtraServicesFIREHOSEList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesFIREHOSE[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesFIREHOSEOutputReference {
    return new DeviceGroupExtraServicesFIREHOSEOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesFIREWALLTags {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#name DeviceGroup#name}
  */
  readonly name?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#operation DeviceGroup#operation}
  */
  readonly operation?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#value DeviceGroup#value}
  */
  readonly value?: string;
}

export function deviceGroupExtraServicesFIREWALLTagsToTerraform(struct?: DeviceGroupExtraServicesFIREWALLTags | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    name: cdktf.stringToTerraform(struct!.name),
    operation: cdktf.stringToTerraform(struct!.operation),
    value: cdktf.stringToTerraform(struct!.value),
  }
}


export function deviceGroupExtraServicesFIREWALLTagsToHclTerraform(struct?: DeviceGroupExtraServicesFIREWALLTags | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    name: {
      value: cdktf.stringToHclTerraform(struct!.name),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    operation: {
      value: cdktf.stringToHclTerraform(struct!.operation),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    value: {
      value: cdktf.stringToHclTerraform(struct!.value),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesFIREWALLTagsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesFIREWALLTags | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._name !== undefined) {
      hasAnyValues = true;
      internalValueResult.name = this._name;
    }
    if (this._operation !== undefined) {
      hasAnyValues = true;
      internalValueResult.operation = this._operation;
    }
    if (this._value !== undefined) {
      hasAnyValues = true;
      internalValueResult.value = this._value;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesFIREWALLTags | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._name = undefined;
      this._operation = undefined;
      this._value = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._name = value.name;
      this._operation = value.operation;
      this._value = value.value;
    }
  }

  // name - computed: false, optional: true, required: false
  private _name?: string; 
  public get name() {
    return this.getStringAttribute('name');
  }
  public set name(value: string) {
    this._name = value;
  }
  public resetName() {
    this._name = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get nameInput() {
    return this._name;
  }

  // operation - computed: false, optional: true, required: false
  private _operation?: string; 
  public get operation() {
    return this.getStringAttribute('operation');
  }
  public set operation(value: string) {
    this._operation = value;
  }
  public resetOperation() {
    this._operation = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get operationInput() {
    return this._operation;
  }

  // value - computed: false, optional: true, required: false
  private _value?: string; 
  public get value() {
    return this.getStringAttribute('value');
  }
  public set value(value: string) {
    this._value = value;
  }
  public resetValue() {
    this._value = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get valueInput() {
    return this._value;
  }
}

export class DeviceGroupExtraServicesFIREWALLTagsList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesFIREWALLTags[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesFIREWALLTagsOutputReference {
    return new DeviceGroupExtraServicesFIREWALLTagsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesFIREWALLNormalCollectorConfigCollectors {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#applies_to DeviceGroup#applies_to}
  */
  readonly appliesTo?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#auto_balanced_collector_group_id DeviceGroup#auto_balanced_collector_group_id}
  */
  readonly autoBalancedCollectorGroupId?: number;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#collector_id DeviceGroup#collector_id}
  */
  readonly collectorId?: number;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#priority DeviceGroup#priority}
  */
  readonly priority?: number;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#use_public_ip DeviceGroup#use_public_ip}
  */
  readonly usePublicIp?: boolean | cdktf.IResolvable;
}

export function deviceGroupExtraServicesFIREWALLNormalCollectorConfigCollectorsToTerraform(struct?: DeviceGroupExtraServicesFIREWALLNormalCollectorConfigCollectors | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    applies_to: cdktf.stringToTerraform(struct!.appliesTo),
    auto_balanced_collector_group_id: cdktf.numberToTerraform(struct!.autoBalancedCollectorGroupId),
    collector_id: cdktf.numberToTerraform(struct!.collectorId),
    priority: cdktf.numberToTerraform(struct!.priority),
    use_public_ip: cdktf.booleanToTerraform(struct!.usePublicIp),
  }
}


export function deviceGroupExtraServicesFIREWALLNormalCollectorConfigCollectorsToHclTerraform(struct?: DeviceGroupExtraServicesFIREWALLNormalCollectorConfigCollectors | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    applies_to: {
      value: cdktf.stringToHclTerraform(struct!.appliesTo),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    auto_balanced_collector_group_id: {
      value: cdktf.numberToHclTerraform(struct!.autoBalancedCollectorGroupId),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    collector_id: {
      value: cdktf.numberToHclTerraform(struct!.collectorId),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    priority: {
      value: cdktf.numberToHclTerraform(struct!.priority),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    use_public_ip: {
      value: cdktf.booleanToHclTerraform(struct!.usePublicIp),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesFIREWALLNormalCollectorConfigCollectorsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesFIREWALLNormalCollectorConfigCollectors | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._appliesTo !== undefined) {
      hasAnyValues = true;
      internalValueResult.appliesTo = this._appliesTo;
    }
    if (this._autoBalancedCollectorGroupId !== undefined) {
      hasAnyValues = true;
      internalValueResult.autoBalancedCollectorGroupId = this._autoBalancedCollectorGroupId;
    }
    if (this._collectorId !== undefined) {
      hasAnyValues = true;
      internalValueResult.collectorId = this._collectorId;
    }
    if (this._priority !== undefined) {
      hasAnyValues = true;
      internalValueResult.priority = this._priority;
    }
    if (this._usePublicIp !== undefined) {
      hasAnyValues = true;
      internalValueResult.usePublicIp = this._usePublicIp;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesFIREWALLNormalCollectorConfigCollectors | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._appliesTo = undefined;
      this._autoBalancedCollectorGroupId = undefined;
      this._collectorId = undefined;
      this._priority = undefined;
      this._usePublicIp = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._appliesTo = value.appliesTo;
      this._autoBalancedCollectorGroupId = value.autoBalancedCollectorGroupId;
      this._collectorId = value.collectorId;
      this._priority = value.priority;
      this._usePublicIp = value.usePublicIp;
    }
  }

  // applies_to - computed: false, optional: true, required: false
  private _appliesTo?: string; 
  public get appliesTo() {
    return this.getStringAttribute('applies_to');
  }
  public set appliesTo(value: string) {
    this._appliesTo = value;
  }
  public resetAppliesTo() {
    this._appliesTo = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get appliesToInput() {
    return this._appliesTo;
  }

  // auto_balanced_collector_group_id - computed: false, optional: true, required: false
  private _autoBalancedCollectorGroupId?: number; 
  public get autoBalancedCollectorGroupId() {
    return this.getNumberAttribute('auto_balanced_collector_group_id');
  }
  public set autoBalancedCollectorGroupId(value: number) {
    this._autoBalancedCollectorGroupId = value;
  }
  public resetAutoBalancedCollectorGroupId() {
    this._autoBalancedCollectorGroupId = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get autoBalancedCollectorGroupIdInput() {
    return this._autoBalancedCollectorGroupId;
  }

  // collector_id - computed: false, optional: true, required: false
  private _collectorId?: number; 
  public get collectorId() {
    return this.getNumberAttribute('collector_id');
  }
  public set collectorId(value: number) {
    this._collectorId = value;
  }
  public resetCollectorId() {
    this._collectorId = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get collectorIdInput() {
    return this._collectorId;
  }

  // priority - computed: false, optional: true, required: false
  private _priority?: number; 
  public get priority() {
    return this.getNumberAttribute('priority');
  }
  public set priority(value: number) {
    this._priority = value;
  }
  public resetPriority() {
    this._priority = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get priorityInput() {
    return this._priority;
  }

  // use_public_ip - computed: false, optional: true, required: false
  private _usePublicIp?: boolean | cdktf.IResolvable; 
  public get usePublicIp() {
    return this.getBooleanAttribute('use_public_ip');
  }
  public set usePublicIp(value: boolean | cdktf.IResolvable) {
    this._usePublicIp = value;
  }
  public resetUsePublicIp() {
    this._usePublicIp = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get usePublicIpInput() {
    return this._usePublicIp;
  }
}

export class DeviceGroupExtraServicesFIREWALLNormalCollectorConfigCollectorsList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesFIREWALLNormalCollectorConfigCollectors[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesFIREWALLNormalCollectorConfigCollectorsOutputReference {
    return new DeviceGroupExtraServicesFIREWALLNormalCollectorConfigCollectorsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesFIREWALLNormalCollectorConfig {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#collectors DeviceGroup#collectors}
  */
  readonly collectors?: DeviceGroupExtraServicesFIREWALLNormalCollectorConfigCollectors[] | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#enabled DeviceGroup#enabled}
  */
  readonly enabled: boolean | cdktf.IResolvable;
}

export function deviceGroupExtraServicesFIREWALLNormalCollectorConfigToTerraform(struct?: DeviceGroupExtraServicesFIREWALLNormalCollectorConfig | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    collectors: cdktf.listMapper(deviceGroupExtraServicesFIREWALLNormalCollectorConfigCollectorsToTerraform, false)(struct!.collectors),
    enabled: cdktf.booleanToTerraform(struct!.enabled),
  }
}


export function deviceGroupExtraServicesFIREWALLNormalCollectorConfigToHclTerraform(struct?: DeviceGroupExtraServicesFIREWALLNormalCollectorConfig | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    collectors: {
      value: cdktf.listMapperHcl(deviceGroupExtraServicesFIREWALLNormalCollectorConfigCollectorsToHclTerraform, false)(struct!.collectors),
      isBlock: true,
      type: "list",
      storageClassType: "DeviceGroupExtraServicesFIREWALLNormalCollectorConfigCollectorsList",
    },
    enabled: {
      value: cdktf.booleanToHclTerraform(struct!.enabled),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesFIREWALLNormalCollectorConfigOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesFIREWALLNormalCollectorConfig | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._collectors?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.collectors = this._collectors?.internalValue;
    }
    if (this._enabled !== undefined) {
      hasAnyValues = true;
      internalValueResult.enabled = this._enabled;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesFIREWALLNormalCollectorConfig | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._collectors.internalValue = undefined;
      this._enabled = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._collectors.internalValue = value.collectors;
      this._enabled = value.enabled;
    }
  }

  // collectors - computed: false, optional: true, required: false
  private _collectors = new DeviceGroupExtraServicesFIREWALLNormalCollectorConfigCollectorsList(this, "collectors", false);
  public get collectors() {
    return this._collectors;
  }
  public putCollectors(value: DeviceGroupExtraServicesFIREWALLNormalCollectorConfigCollectors[] | cdktf.IResolvable) {
    this._collectors.internalValue = value;
  }
  public resetCollectors() {
    this._collectors.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get collectorsInput() {
    return this._collectors.internalValue;
  }

  // enabled - computed: false, optional: false, required: true
  private _enabled?: boolean | cdktf.IResolvable; 
  public get enabled() {
    return this.getBooleanAttribute('enabled');
  }
  public set enabled(value: boolean | cdktf.IResolvable) {
    this._enabled = value;
  }
  // Temporarily expose input value. Use with caution.
  public get enabledInput() {
    return this._enabled;
  }
}

export class DeviceGroupExtraServicesFIREWALLNormalCollectorConfigList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesFIREWALLNormalCollectorConfig[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesFIREWALLNormalCollectorConfigOutputReference {
    return new DeviceGroupExtraServicesFIREWALLNormalCollectorConfigOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesFIREWALL {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#custom_n_s_p_schedule DeviceGroup#custom_n_s_p_schedule}
  */
  readonly customNSPSchedule?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#dead_operation DeviceGroup#dead_operation}
  */
  readonly deadOperation?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#device_display_name_template DeviceGroup#device_display_name_template}
  */
  readonly deviceDisplayNameTemplate?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#disable_stop_terminate_host_monitor DeviceGroup#disable_stop_terminate_host_monitor}
  */
  readonly disableStopTerminateHostMonitor?: boolean | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#disable_terminated_host_alerting DeviceGroup#disable_terminated_host_alerting}
  */
  readonly disableTerminatedHostAlerting?: boolean | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#monitoring_region_infos DeviceGroup#monitoring_region_infos}
  */
  readonly monitoringRegionInfos?: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#monitoring_regions DeviceGroup#monitoring_regions}
  */
  readonly monitoringRegions?: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#name_filter DeviceGroup#name_filter}
  */
  readonly nameFilter?: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#select_all DeviceGroup#select_all}
  */
  readonly selectAll?: boolean | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#tags DeviceGroup#tags}
  */
  readonly tags?: DeviceGroupExtraServicesFIREWALLTags[] | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#use_default DeviceGroup#use_default}
  */
  readonly useDefault: boolean | cdktf.IResolvable;
  /**
  * normal_collector_config block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#normal_collector_config DeviceGroup#normal_collector_config}
  */
  readonly normalCollectorConfig?: DeviceGroupExtraServicesFIREWALLNormalCollectorConfig[] | cdktf.IResolvable;
}

export function deviceGroupExtraServicesFIREWALLToTerraform(struct?: DeviceGroupExtraServicesFIREWALL | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    custom_n_s_p_schedule: cdktf.stringToTerraform(struct!.customNSPSchedule),
    dead_operation: cdktf.stringToTerraform(struct!.deadOperation),
    device_display_name_template: cdktf.stringToTerraform(struct!.deviceDisplayNameTemplate),
    disable_stop_terminate_host_monitor: cdktf.booleanToTerraform(struct!.disableStopTerminateHostMonitor),
    disable_terminated_host_alerting: cdktf.booleanToTerraform(struct!.disableTerminatedHostAlerting),
    monitoring_region_infos: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.monitoringRegionInfos),
    monitoring_regions: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.monitoringRegions),
    name_filter: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.nameFilter),
    select_all: cdktf.booleanToTerraform(struct!.selectAll),
    tags: cdktf.listMapper(deviceGroupExtraServicesFIREWALLTagsToTerraform, false)(struct!.tags),
    use_default: cdktf.booleanToTerraform(struct!.useDefault),
    normal_collector_config: cdktf.listMapper(deviceGroupExtraServicesFIREWALLNormalCollectorConfigToTerraform, true)(struct!.normalCollectorConfig),
  }
}


export function deviceGroupExtraServicesFIREWALLToHclTerraform(struct?: DeviceGroupExtraServicesFIREWALL | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    custom_n_s_p_schedule: {
      value: cdktf.stringToHclTerraform(struct!.customNSPSchedule),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    dead_operation: {
      value: cdktf.stringToHclTerraform(struct!.deadOperation),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    device_display_name_template: {
      value: cdktf.stringToHclTerraform(struct!.deviceDisplayNameTemplate),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    disable_stop_terminate_host_monitor: {
      value: cdktf.booleanToHclTerraform(struct!.disableStopTerminateHostMonitor),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    disable_terminated_host_alerting: {
      value: cdktf.booleanToHclTerraform(struct!.disableTerminatedHostAlerting),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    monitoring_region_infos: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.monitoringRegionInfos),
      isBlock: false,
      type: "set",
      storageClassType: "stringList",
    },
    monitoring_regions: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.monitoringRegions),
      isBlock: false,
      type: "set",
      storageClassType: "stringList",
    },
    name_filter: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.nameFilter),
      isBlock: false,
      type: "set",
      storageClassType: "stringList",
    },
    select_all: {
      value: cdktf.booleanToHclTerraform(struct!.selectAll),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    tags: {
      value: cdktf.listMapperHcl(deviceGroupExtraServicesFIREWALLTagsToHclTerraform, false)(struct!.tags),
      isBlock: true,
      type: "list",
      storageClassType: "DeviceGroupExtraServicesFIREWALLTagsList",
    },
    use_default: {
      value: cdktf.booleanToHclTerraform(struct!.useDefault),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    normal_collector_config: {
      value: cdktf.listMapperHcl(deviceGroupExtraServicesFIREWALLNormalCollectorConfigToHclTerraform, true)(struct!.normalCollectorConfig),
      isBlock: true,
      type: "list",
      storageClassType: "DeviceGroupExtraServicesFIREWALLNormalCollectorConfigList",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesFIREWALLOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesFIREWALL | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._customNSPSchedule !== undefined) {
      hasAnyValues = true;
      internalValueResult.customNSPSchedule = this._customNSPSchedule;
    }
    if (this._deadOperation !== undefined) {
      hasAnyValues = true;
      internalValueResult.deadOperation = this._deadOperation;
    }
    if (this._deviceDisplayNameTemplate !== undefined) {
      hasAnyValues = true;
      internalValueResult.deviceDisplayNameTemplate = this._deviceDisplayNameTemplate;
    }
    if (this._disableStopTerminateHostMonitor !== undefined) {
      hasAnyValues = true;
      internalValueResult.disableStopTerminateHostMonitor = this._disableStopTerminateHostMonitor;
    }
    if (this._disableTerminatedHostAlerting !== undefined) {
      hasAnyValues = true;
      internalValueResult.disableTerminatedHostAlerting = this._disableTerminatedHostAlerting;
    }
    if (this._monitoringRegionInfos !== undefined) {
      hasAnyValues = true;
      internalValueResult.monitoringRegionInfos = this._monitoringRegionInfos;
    }
    if (this._monitoringRegions !== undefined) {
      hasAnyValues = true;
      internalValueResult.monitoringRegions = this._monitoringRegions;
    }
    if (this._nameFilter !== undefined) {
      hasAnyValues = true;
      internalValueResult.nameFilter = this._nameFilter;
    }
    if (this._selectAll !== undefined) {
      hasAnyValues = true;
      internalValueResult.selectAll = this._selectAll;
    }
    if (this._tags?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.tags = this._tags?.internalValue;
    }
    if (this._useDefault !== undefined) {
      hasAnyValues = true;
      internalValueResult.useDefault = this._useDefault;
    }
    if (this._normalCollectorConfig?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.normalCollectorConfig = this._normalCollectorConfig?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesFIREWALL | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._customNSPSchedule = undefined;
      this._deadOperation = undefined;
      this._deviceDisplayNameTemplate = undefined;
      this._disableStopTerminateHostMonitor = undefined;
      this._disableTerminatedHostAlerting = undefined;
      this._monitoringRegionInfos = undefined;
      this._monitoringRegions = undefined;
      this._nameFilter = undefined;
      this._selectAll = undefined;
      this._tags.internalValue = undefined;
      this._useDefault = undefined;
      this._normalCollectorConfig.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._customNSPSchedule = value.customNSPSchedule;
      this._deadOperation = value.deadOperation;
      this._deviceDisplayNameTemplate = value.deviceDisplayNameTemplate;
      this._disableStopTerminateHostMonitor = value.disableStopTerminateHostMonitor;
      this._disableTerminatedHostAlerting = value.disableTerminatedHostAlerting;
      this._monitoringRegionInfos = value.monitoringRegionInfos;
      this._monitoringRegions = value.monitoringRegions;
      this._nameFilter = value.nameFilter;
      this._selectAll = value.selectAll;
      this._tags.internalValue = value.tags;
      this._useDefault = value.useDefault;
      this._normalCollectorConfig.internalValue = value.normalCollectorConfig;
    }
  }

  // custom_n_s_p_schedule - computed: false, optional: true, required: false
  private _customNSPSchedule?: string; 
  public get customNSPSchedule() {
    return this.getStringAttribute('custom_n_s_p_schedule');
  }
  public set customNSPSchedule(value: string) {
    this._customNSPSchedule = value;
  }
  public resetCustomNSPSchedule() {
    this._customNSPSchedule = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get customNSPScheduleInput() {
    return this._customNSPSchedule;
  }

  // dead_operation - computed: false, optional: true, required: false
  private _deadOperation?: string; 
  public get deadOperation() {
    return this.getStringAttribute('dead_operation');
  }
  public set deadOperation(value: string) {
    this._deadOperation = value;
  }
  public resetDeadOperation() {
    this._deadOperation = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get deadOperationInput() {
    return this._deadOperation;
  }

  // device_display_name_template - computed: false, optional: true, required: false
  private _deviceDisplayNameTemplate?: string; 
  public get deviceDisplayNameTemplate() {
    return this.getStringAttribute('device_display_name_template');
  }
  public set deviceDisplayNameTemplate(value: string) {
    this._deviceDisplayNameTemplate = value;
  }
  public resetDeviceDisplayNameTemplate() {
    this._deviceDisplayNameTemplate = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get deviceDisplayNameTemplateInput() {
    return this._deviceDisplayNameTemplate;
  }

  // disable_stop_terminate_host_monitor - computed: false, optional: true, required: false
  private _disableStopTerminateHostMonitor?: boolean | cdktf.IResolvable; 
  public get disableStopTerminateHostMonitor() {
    return this.getBooleanAttribute('disable_stop_terminate_host_monitor');
  }
  public set disableStopTerminateHostMonitor(value: boolean | cdktf.IResolvable) {
    this._disableStopTerminateHostMonitor = value;
  }
  public resetDisableStopTerminateHostMonitor() {
    this._disableStopTerminateHostMonitor = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get disableStopTerminateHostMonitorInput() {
    return this._disableStopTerminateHostMonitor;
  }

  // disable_terminated_host_alerting - computed: false, optional: true, required: false
  private _disableTerminatedHostAlerting?: boolean | cdktf.IResolvable; 
  public get disableTerminatedHostAlerting() {
    return this.getBooleanAttribute('disable_terminated_host_alerting');
  }
  public set disableTerminatedHostAlerting(value: boolean | cdktf.IResolvable) {
    this._disableTerminatedHostAlerting = value;
  }
  public resetDisableTerminatedHostAlerting() {
    this._disableTerminatedHostAlerting = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get disableTerminatedHostAlertingInput() {
    return this._disableTerminatedHostAlerting;
  }

  // monitoring_region_infos - computed: false, optional: true, required: false
  private _monitoringRegionInfos?: string[]; 
  public get monitoringRegionInfos() {
    return cdktf.Fn.tolist(this.getListAttribute('monitoring_region_infos'));
  }
  public set monitoringRegionInfos(value: string[]) {
    this._monitoringRegionInfos = value;
  }
  public resetMonitoringRegionInfos() {
    this._monitoringRegionInfos = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get monitoringRegionInfosInput() {
    return this._monitoringRegionInfos;
  }

  // monitoring_regions - computed: false, optional: true, required: false
  private _monitoringRegions?: string[]; 
  public get monitoringRegions() {
    return cdktf.Fn.tolist(this.getListAttribute('monitoring_regions'));
  }
  public set monitoringRegions(value: string[]) {
    this._monitoringRegions = value;
  }
  public resetMonitoringRegions() {
    this._monitoringRegions = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get monitoringRegionsInput() {
    return this._monitoringRegions;
  }

  // name_filter - computed: false, optional: true, required: false
  private _nameFilter?: string[]; 
  public get nameFilter() {
    return cdktf.Fn.tolist(this.getListAttribute('name_filter'));
  }
  public set nameFilter(value: string[]) {
    this._nameFilter = value;
  }
  public resetNameFilter() {
    this._nameFilter = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get nameFilterInput() {
    return this._nameFilter;
  }

  // select_all - computed: false, optional: true, required: false
  private _selectAll?: boolean | cdktf.IResolvable; 
  public get selectAll() {
    return this.getBooleanAttribute('select_all');
  }
  public set selectAll(value: boolean | cdktf.IResolvable) {
    this._selectAll = value;
  }
  public resetSelectAll() {
    this._selectAll = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get selectAllInput() {
    return this._selectAll;
  }

  // tags - computed: false, optional: true, required: false
  private _tags = new DeviceGroupExtraServicesFIREWALLTagsList(this, "tags", false);
  public get tags() {
    return this._tags;
  }
  public putTags(value: DeviceGroupExtraServicesFIREWALLTags[] | cdktf.IResolvable) {
    this._tags.internalValue = value;
  }
  public resetTags() {
    this._tags.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get tagsInput() {
    return this._tags.internalValue;
  }

  // use_default - computed: false, optional: false, required: true
  private _useDefault?: boolean | cdktf.IResolvable; 
  public get useDefault() {
    return this.getBooleanAttribute('use_default');
  }
  public set useDefault(value: boolean | cdktf.IResolvable) {
    this._useDefault = value;
  }
  // Temporarily expose input value. Use with caution.
  public get useDefaultInput() {
    return this._useDefault;
  }

  // normal_collector_config - computed: false, optional: true, required: false
  private _normalCollectorConfig = new DeviceGroupExtraServicesFIREWALLNormalCollectorConfigList(this, "normal_collector_config", false);
  public get normalCollectorConfig() {
    return this._normalCollectorConfig;
  }
  public putNormalCollectorConfig(value: DeviceGroupExtraServicesFIREWALLNormalCollectorConfig[] | cdktf.IResolvable) {
    this._normalCollectorConfig.internalValue = value;
  }
  public resetNormalCollectorConfig() {
    this._normalCollectorConfig.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get normalCollectorConfigInput() {
    return this._normalCollectorConfig.internalValue;
  }
}

export class DeviceGroupExtraServicesFIREWALLList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesFIREWALL[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesFIREWALLOutputReference {
    return new DeviceGroupExtraServicesFIREWALLOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesFRONTDOORSTags {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#name DeviceGroup#name}
  */
  readonly name?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#operation DeviceGroup#operation}
  */
  readonly operation?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#value DeviceGroup#value}
  */
  readonly value?: string;
}

export function deviceGroupExtraServicesFRONTDOORSTagsToTerraform(struct?: DeviceGroupExtraServicesFRONTDOORSTags | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    name: cdktf.stringToTerraform(struct!.name),
    operation: cdktf.stringToTerraform(struct!.operation),
    value: cdktf.stringToTerraform(struct!.value),
  }
}


export function deviceGroupExtraServicesFRONTDOORSTagsToHclTerraform(struct?: DeviceGroupExtraServicesFRONTDOORSTags | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    name: {
      value: cdktf.stringToHclTerraform(struct!.name),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    operation: {
      value: cdktf.stringToHclTerraform(struct!.operation),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    value: {
      value: cdktf.stringToHclTerraform(struct!.value),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesFRONTDOORSTagsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesFRONTDOORSTags | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._name !== undefined) {
      hasAnyValues = true;
      internalValueResult.name = this._name;
    }
    if (this._operation !== undefined) {
      hasAnyValues = true;
      internalValueResult.operation = this._operation;
    }
    if (this._value !== undefined) {
      hasAnyValues = true;
      internalValueResult.value = this._value;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesFRONTDOORSTags | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._name = undefined;
      this._operation = undefined;
      this._value = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._name = value.name;
      this._operation = value.operation;
      this._value = value.value;
    }
  }

  // name - computed: false, optional: true, required: false
  private _name?: string; 
  public get name() {
    return this.getStringAttribute('name');
  }
  public set name(value: string) {
    this._name = value;
  }
  public resetName() {
    this._name = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get nameInput() {
    return this._name;
  }

  // operation - computed: false, optional: true, required: false
  private _operation?: string; 
  public get operation() {
    return this.getStringAttribute('operation');
  }
  public set operation(value: string) {
    this._operation = value;
  }
  public resetOperation() {
    this._operation = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get operationInput() {
    return this._operation;
  }

  // value - computed: false, optional: true, required: false
  private _value?: string; 
  public get value() {
    return this.getStringAttribute('value');
  }
  public set value(value: string) {
    this._value = value;
  }
  public resetValue() {
    this._value = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get valueInput() {
    return this._value;
  }
}

export class DeviceGroupExtraServicesFRONTDOORSTagsList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesFRONTDOORSTags[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesFRONTDOORSTagsOutputReference {
    return new DeviceGroupExtraServicesFRONTDOORSTagsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesFRONTDOORSNormalCollectorConfigCollectors {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#applies_to DeviceGroup#applies_to}
  */
  readonly appliesTo?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#auto_balanced_collector_group_id DeviceGroup#auto_balanced_collector_group_id}
  */
  readonly autoBalancedCollectorGroupId?: number;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#collector_id DeviceGroup#collector_id}
  */
  readonly collectorId?: number;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#priority DeviceGroup#priority}
  */
  readonly priority?: number;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#use_public_ip DeviceGroup#use_public_ip}
  */
  readonly usePublicIp?: boolean | cdktf.IResolvable;
}

export function deviceGroupExtraServicesFRONTDOORSNormalCollectorConfigCollectorsToTerraform(struct?: DeviceGroupExtraServicesFRONTDOORSNormalCollectorConfigCollectors | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    applies_to: cdktf.stringToTerraform(struct!.appliesTo),
    auto_balanced_collector_group_id: cdktf.numberToTerraform(struct!.autoBalancedCollectorGroupId),
    collector_id: cdktf.numberToTerraform(struct!.collectorId),
    priority: cdktf.numberToTerraform(struct!.priority),
    use_public_ip: cdktf.booleanToTerraform(struct!.usePublicIp),
  }
}


export function deviceGroupExtraServicesFRONTDOORSNormalCollectorConfigCollectorsToHclTerraform(struct?: DeviceGroupExtraServicesFRONTDOORSNormalCollectorConfigCollectors | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    applies_to: {
      value: cdktf.stringToHclTerraform(struct!.appliesTo),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    auto_balanced_collector_group_id: {
      value: cdktf.numberToHclTerraform(struct!.autoBalancedCollectorGroupId),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    collector_id: {
      value: cdktf.numberToHclTerraform(struct!.collectorId),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    priority: {
      value: cdktf.numberToHclTerraform(struct!.priority),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    use_public_ip: {
      value: cdktf.booleanToHclTerraform(struct!.usePublicIp),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesFRONTDOORSNormalCollectorConfigCollectorsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesFRONTDOORSNormalCollectorConfigCollectors | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._appliesTo !== undefined) {
      hasAnyValues = true;
      internalValueResult.appliesTo = this._appliesTo;
    }
    if (this._autoBalancedCollectorGroupId !== undefined) {
      hasAnyValues = true;
      internalValueResult.autoBalancedCollectorGroupId = this._autoBalancedCollectorGroupId;
    }
    if (this._collectorId !== undefined) {
      hasAnyValues = true;
      internalValueResult.collectorId = this._collectorId;
    }
    if (this._priority !== undefined) {
      hasAnyValues = true;
      internalValueResult.priority = this._priority;
    }
    if (this._usePublicIp !== undefined) {
      hasAnyValues = true;
      internalValueResult.usePublicIp = this._usePublicIp;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesFRONTDOORSNormalCollectorConfigCollectors | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._appliesTo = undefined;
      this._autoBalancedCollectorGroupId = undefined;
      this._collectorId = undefined;
      this._priority = undefined;
      this._usePublicIp = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._appliesTo = value.appliesTo;
      this._autoBalancedCollectorGroupId = value.autoBalancedCollectorGroupId;
      this._collectorId = value.collectorId;
      this._priority = value.priority;
      this._usePublicIp = value.usePublicIp;
    }
  }

  // applies_to - computed: false, optional: true, required: false
  private _appliesTo?: string; 
  public get appliesTo() {
    return this.getStringAttribute('applies_to');
  }
  public set appliesTo(value: string) {
    this._appliesTo = value;
  }
  public resetAppliesTo() {
    this._appliesTo = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get appliesToInput() {
    return this._appliesTo;
  }

  // auto_balanced_collector_group_id - computed: false, optional: true, required: false
  private _autoBalancedCollectorGroupId?: number; 
  public get autoBalancedCollectorGroupId() {
    return this.getNumberAttribute('auto_balanced_collector_group_id');
  }
  public set autoBalancedCollectorGroupId(value: number) {
    this._autoBalancedCollectorGroupId = value;
  }
  public resetAutoBalancedCollectorGroupId() {
    this._autoBalancedCollectorGroupId = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get autoBalancedCollectorGroupIdInput() {
    return this._autoBalancedCollectorGroupId;
  }

  // collector_id - computed: false, optional: true, required: false
  private _collectorId?: number; 
  public get collectorId() {
    return this.getNumberAttribute('collector_id');
  }
  public set collectorId(value: number) {
    this._collectorId = value;
  }
  public resetCollectorId() {
    this._collectorId = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get collectorIdInput() {
    return this._collectorId;
  }

  // priority - computed: false, optional: true, required: false
  private _priority?: number; 
  public get priority() {
    return this.getNumberAttribute('priority');
  }
  public set priority(value: number) {
    this._priority = value;
  }
  public resetPriority() {
    this._priority = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get priorityInput() {
    return this._priority;
  }

  // use_public_ip - computed: false, optional: true, required: false
  private _usePublicIp?: boolean | cdktf.IResolvable; 
  public get usePublicIp() {
    return this.getBooleanAttribute('use_public_ip');
  }
  public set usePublicIp(value: boolean | cdktf.IResolvable) {
    this._usePublicIp = value;
  }
  public resetUsePublicIp() {
    this._usePublicIp = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get usePublicIpInput() {
    return this._usePublicIp;
  }
}

export class DeviceGroupExtraServicesFRONTDOORSNormalCollectorConfigCollectorsList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesFRONTDOORSNormalCollectorConfigCollectors[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesFRONTDOORSNormalCollectorConfigCollectorsOutputReference {
    return new DeviceGroupExtraServicesFRONTDOORSNormalCollectorConfigCollectorsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesFRONTDOORSNormalCollectorConfig {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#collectors DeviceGroup#collectors}
  */
  readonly collectors?: DeviceGroupExtraServicesFRONTDOORSNormalCollectorConfigCollectors[] | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#enabled DeviceGroup#enabled}
  */
  readonly enabled: boolean | cdktf.IResolvable;
}

export function deviceGroupExtraServicesFRONTDOORSNormalCollectorConfigToTerraform(struct?: DeviceGroupExtraServicesFRONTDOORSNormalCollectorConfig | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    collectors: cdktf.listMapper(deviceGroupExtraServicesFRONTDOORSNormalCollectorConfigCollectorsToTerraform, false)(struct!.collectors),
    enabled: cdktf.booleanToTerraform(struct!.enabled),
  }
}


export function deviceGroupExtraServicesFRONTDOORSNormalCollectorConfigToHclTerraform(struct?: DeviceGroupExtraServicesFRONTDOORSNormalCollectorConfig | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    collectors: {
      value: cdktf.listMapperHcl(deviceGroupExtraServicesFRONTDOORSNormalCollectorConfigCollectorsToHclTerraform, false)(struct!.collectors),
      isBlock: true,
      type: "list",
      storageClassType: "DeviceGroupExtraServicesFRONTDOORSNormalCollectorConfigCollectorsList",
    },
    enabled: {
      value: cdktf.booleanToHclTerraform(struct!.enabled),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesFRONTDOORSNormalCollectorConfigOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesFRONTDOORSNormalCollectorConfig | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._collectors?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.collectors = this._collectors?.internalValue;
    }
    if (this._enabled !== undefined) {
      hasAnyValues = true;
      internalValueResult.enabled = this._enabled;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesFRONTDOORSNormalCollectorConfig | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._collectors.internalValue = undefined;
      this._enabled = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._collectors.internalValue = value.collectors;
      this._enabled = value.enabled;
    }
  }

  // collectors - computed: false, optional: true, required: false
  private _collectors = new DeviceGroupExtraServicesFRONTDOORSNormalCollectorConfigCollectorsList(this, "collectors", false);
  public get collectors() {
    return this._collectors;
  }
  public putCollectors(value: DeviceGroupExtraServicesFRONTDOORSNormalCollectorConfigCollectors[] | cdktf.IResolvable) {
    this._collectors.internalValue = value;
  }
  public resetCollectors() {
    this._collectors.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get collectorsInput() {
    return this._collectors.internalValue;
  }

  // enabled - computed: false, optional: false, required: true
  private _enabled?: boolean | cdktf.IResolvable; 
  public get enabled() {
    return this.getBooleanAttribute('enabled');
  }
  public set enabled(value: boolean | cdktf.IResolvable) {
    this._enabled = value;
  }
  // Temporarily expose input value. Use with caution.
  public get enabledInput() {
    return this._enabled;
  }
}

export class DeviceGroupExtraServicesFRONTDOORSNormalCollectorConfigList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesFRONTDOORSNormalCollectorConfig[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesFRONTDOORSNormalCollectorConfigOutputReference {
    return new DeviceGroupExtraServicesFRONTDOORSNormalCollectorConfigOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesFRONTDOORS {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#custom_n_s_p_schedule DeviceGroup#custom_n_s_p_schedule}
  */
  readonly customNSPSchedule?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#dead_operation DeviceGroup#dead_operation}
  */
  readonly deadOperation?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#device_display_name_template DeviceGroup#device_display_name_template}
  */
  readonly deviceDisplayNameTemplate?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#disable_stop_terminate_host_monitor DeviceGroup#disable_stop_terminate_host_monitor}
  */
  readonly disableStopTerminateHostMonitor?: boolean | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#disable_terminated_host_alerting DeviceGroup#disable_terminated_host_alerting}
  */
  readonly disableTerminatedHostAlerting?: boolean | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#monitoring_region_infos DeviceGroup#monitoring_region_infos}
  */
  readonly monitoringRegionInfos?: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#monitoring_regions DeviceGroup#monitoring_regions}
  */
  readonly monitoringRegions?: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#name_filter DeviceGroup#name_filter}
  */
  readonly nameFilter?: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#select_all DeviceGroup#select_all}
  */
  readonly selectAll?: boolean | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#tags DeviceGroup#tags}
  */
  readonly tags?: DeviceGroupExtraServicesFRONTDOORSTags[] | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#use_default DeviceGroup#use_default}
  */
  readonly useDefault: boolean | cdktf.IResolvable;
  /**
  * normal_collector_config block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#normal_collector_config DeviceGroup#normal_collector_config}
  */
  readonly normalCollectorConfig?: DeviceGroupExtraServicesFRONTDOORSNormalCollectorConfig[] | cdktf.IResolvable;
}

export function deviceGroupExtraServicesFRONTDOORSToTerraform(struct?: DeviceGroupExtraServicesFRONTDOORS | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    custom_n_s_p_schedule: cdktf.stringToTerraform(struct!.customNSPSchedule),
    dead_operation: cdktf.stringToTerraform(struct!.deadOperation),
    device_display_name_template: cdktf.stringToTerraform(struct!.deviceDisplayNameTemplate),
    disable_stop_terminate_host_monitor: cdktf.booleanToTerraform(struct!.disableStopTerminateHostMonitor),
    disable_terminated_host_alerting: cdktf.booleanToTerraform(struct!.disableTerminatedHostAlerting),
    monitoring_region_infos: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.monitoringRegionInfos),
    monitoring_regions: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.monitoringRegions),
    name_filter: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.nameFilter),
    select_all: cdktf.booleanToTerraform(struct!.selectAll),
    tags: cdktf.listMapper(deviceGroupExtraServicesFRONTDOORSTagsToTerraform, false)(struct!.tags),
    use_default: cdktf.booleanToTerraform(struct!.useDefault),
    normal_collector_config: cdktf.listMapper(deviceGroupExtraServicesFRONTDOORSNormalCollectorConfigToTerraform, true)(struct!.normalCollectorConfig),
  }
}


export function deviceGroupExtraServicesFRONTDOORSToHclTerraform(struct?: DeviceGroupExtraServicesFRONTDOORS | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    custom_n_s_p_schedule: {
      value: cdktf.stringToHclTerraform(struct!.customNSPSchedule),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    dead_operation: {
      value: cdktf.stringToHclTerraform(struct!.deadOperation),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    device_display_name_template: {
      value: cdktf.stringToHclTerraform(struct!.deviceDisplayNameTemplate),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    disable_stop_terminate_host_monitor: {
      value: cdktf.booleanToHclTerraform(struct!.disableStopTerminateHostMonitor),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    disable_terminated_host_alerting: {
      value: cdktf.booleanToHclTerraform(struct!.disableTerminatedHostAlerting),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    monitoring_region_infos: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.monitoringRegionInfos),
      isBlock: false,
      type: "set",
      storageClassType: "stringList",
    },
    monitoring_regions: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.monitoringRegions),
      isBlock: false,
      type: "set",
      storageClassType: "stringList",
    },
    name_filter: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.nameFilter),
      isBlock: false,
      type: "set",
      storageClassType: "stringList",
    },
    select_all: {
      value: cdktf.booleanToHclTerraform(struct!.selectAll),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    tags: {
      value: cdktf.listMapperHcl(deviceGroupExtraServicesFRONTDOORSTagsToHclTerraform, false)(struct!.tags),
      isBlock: true,
      type: "list",
      storageClassType: "DeviceGroupExtraServicesFRONTDOORSTagsList",
    },
    use_default: {
      value: cdktf.booleanToHclTerraform(struct!.useDefault),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    normal_collector_config: {
      value: cdktf.listMapperHcl(deviceGroupExtraServicesFRONTDOORSNormalCollectorConfigToHclTerraform, true)(struct!.normalCollectorConfig),
      isBlock: true,
      type: "list",
      storageClassType: "DeviceGroupExtraServicesFRONTDOORSNormalCollectorConfigList",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesFRONTDOORSOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesFRONTDOORS | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._customNSPSchedule !== undefined) {
      hasAnyValues = true;
      internalValueResult.customNSPSchedule = this._customNSPSchedule;
    }
    if (this._deadOperation !== undefined) {
      hasAnyValues = true;
      internalValueResult.deadOperation = this._deadOperation;
    }
    if (this._deviceDisplayNameTemplate !== undefined) {
      hasAnyValues = true;
      internalValueResult.deviceDisplayNameTemplate = this._deviceDisplayNameTemplate;
    }
    if (this._disableStopTerminateHostMonitor !== undefined) {
      hasAnyValues = true;
      internalValueResult.disableStopTerminateHostMonitor = this._disableStopTerminateHostMonitor;
    }
    if (this._disableTerminatedHostAlerting !== undefined) {
      hasAnyValues = true;
      internalValueResult.disableTerminatedHostAlerting = this._disableTerminatedHostAlerting;
    }
    if (this._monitoringRegionInfos !== undefined) {
      hasAnyValues = true;
      internalValueResult.monitoringRegionInfos = this._monitoringRegionInfos;
    }
    if (this._monitoringRegions !== undefined) {
      hasAnyValues = true;
      internalValueResult.monitoringRegions = this._monitoringRegions;
    }
    if (this._nameFilter !== undefined) {
      hasAnyValues = true;
      internalValueResult.nameFilter = this._nameFilter;
    }
    if (this._selectAll !== undefined) {
      hasAnyValues = true;
      internalValueResult.selectAll = this._selectAll;
    }
    if (this._tags?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.tags = this._tags?.internalValue;
    }
    if (this._useDefault !== undefined) {
      hasAnyValues = true;
      internalValueResult.useDefault = this._useDefault;
    }
    if (this._normalCollectorConfig?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.normalCollectorConfig = this._normalCollectorConfig?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesFRONTDOORS | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._customNSPSchedule = undefined;
      this._deadOperation = undefined;
      this._deviceDisplayNameTemplate = undefined;
      this._disableStopTerminateHostMonitor = undefined;
      this._disableTerminatedHostAlerting = undefined;
      this._monitoringRegionInfos = undefined;
      this._monitoringRegions = undefined;
      this._nameFilter = undefined;
      this._selectAll = undefined;
      this._tags.internalValue = undefined;
      this._useDefault = undefined;
      this._normalCollectorConfig.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._customNSPSchedule = value.customNSPSchedule;
      this._deadOperation = value.deadOperation;
      this._deviceDisplayNameTemplate = value.deviceDisplayNameTemplate;
      this._disableStopTerminateHostMonitor = value.disableStopTerminateHostMonitor;
      this._disableTerminatedHostAlerting = value.disableTerminatedHostAlerting;
      this._monitoringRegionInfos = value.monitoringRegionInfos;
      this._monitoringRegions = value.monitoringRegions;
      this._nameFilter = value.nameFilter;
      this._selectAll = value.selectAll;
      this._tags.internalValue = value.tags;
      this._useDefault = value.useDefault;
      this._normalCollectorConfig.internalValue = value.normalCollectorConfig;
    }
  }

  // custom_n_s_p_schedule - computed: false, optional: true, required: false
  private _customNSPSchedule?: string; 
  public get customNSPSchedule() {
    return this.getStringAttribute('custom_n_s_p_schedule');
  }
  public set customNSPSchedule(value: string) {
    this._customNSPSchedule = value;
  }
  public resetCustomNSPSchedule() {
    this._customNSPSchedule = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get customNSPScheduleInput() {
    return this._customNSPSchedule;
  }

  // dead_operation - computed: false, optional: true, required: false
  private _deadOperation?: string; 
  public get deadOperation() {
    return this.getStringAttribute('dead_operation');
  }
  public set deadOperation(value: string) {
    this._deadOperation = value;
  }
  public resetDeadOperation() {
    this._deadOperation = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get deadOperationInput() {
    return this._deadOperation;
  }

  // device_display_name_template - computed: false, optional: true, required: false
  private _deviceDisplayNameTemplate?: string; 
  public get deviceDisplayNameTemplate() {
    return this.getStringAttribute('device_display_name_template');
  }
  public set deviceDisplayNameTemplate(value: string) {
    this._deviceDisplayNameTemplate = value;
  }
  public resetDeviceDisplayNameTemplate() {
    this._deviceDisplayNameTemplate = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get deviceDisplayNameTemplateInput() {
    return this._deviceDisplayNameTemplate;
  }

  // disable_stop_terminate_host_monitor - computed: false, optional: true, required: false
  private _disableStopTerminateHostMonitor?: boolean | cdktf.IResolvable; 
  public get disableStopTerminateHostMonitor() {
    return this.getBooleanAttribute('disable_stop_terminate_host_monitor');
  }
  public set disableStopTerminateHostMonitor(value: boolean | cdktf.IResolvable) {
    this._disableStopTerminateHostMonitor = value;
  }
  public resetDisableStopTerminateHostMonitor() {
    this._disableStopTerminateHostMonitor = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get disableStopTerminateHostMonitorInput() {
    return this._disableStopTerminateHostMonitor;
  }

  // disable_terminated_host_alerting - computed: false, optional: true, required: false
  private _disableTerminatedHostAlerting?: boolean | cdktf.IResolvable; 
  public get disableTerminatedHostAlerting() {
    return this.getBooleanAttribute('disable_terminated_host_alerting');
  }
  public set disableTerminatedHostAlerting(value: boolean | cdktf.IResolvable) {
    this._disableTerminatedHostAlerting = value;
  }
  public resetDisableTerminatedHostAlerting() {
    this._disableTerminatedHostAlerting = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get disableTerminatedHostAlertingInput() {
    return this._disableTerminatedHostAlerting;
  }

  // monitoring_region_infos - computed: false, optional: true, required: false
  private _monitoringRegionInfos?: string[]; 
  public get monitoringRegionInfos() {
    return cdktf.Fn.tolist(this.getListAttribute('monitoring_region_infos'));
  }
  public set monitoringRegionInfos(value: string[]) {
    this._monitoringRegionInfos = value;
  }
  public resetMonitoringRegionInfos() {
    this._monitoringRegionInfos = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get monitoringRegionInfosInput() {
    return this._monitoringRegionInfos;
  }

  // monitoring_regions - computed: false, optional: true, required: false
  private _monitoringRegions?: string[]; 
  public get monitoringRegions() {
    return cdktf.Fn.tolist(this.getListAttribute('monitoring_regions'));
  }
  public set monitoringRegions(value: string[]) {
    this._monitoringRegions = value;
  }
  public resetMonitoringRegions() {
    this._monitoringRegions = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get monitoringRegionsInput() {
    return this._monitoringRegions;
  }

  // name_filter - computed: false, optional: true, required: false
  private _nameFilter?: string[]; 
  public get nameFilter() {
    return cdktf.Fn.tolist(this.getListAttribute('name_filter'));
  }
  public set nameFilter(value: string[]) {
    this._nameFilter = value;
  }
  public resetNameFilter() {
    this._nameFilter = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get nameFilterInput() {
    return this._nameFilter;
  }

  // select_all - computed: false, optional: true, required: false
  private _selectAll?: boolean | cdktf.IResolvable; 
  public get selectAll() {
    return this.getBooleanAttribute('select_all');
  }
  public set selectAll(value: boolean | cdktf.IResolvable) {
    this._selectAll = value;
  }
  public resetSelectAll() {
    this._selectAll = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get selectAllInput() {
    return this._selectAll;
  }

  // tags - computed: false, optional: true, required: false
  private _tags = new DeviceGroupExtraServicesFRONTDOORSTagsList(this, "tags", false);
  public get tags() {
    return this._tags;
  }
  public putTags(value: DeviceGroupExtraServicesFRONTDOORSTags[] | cdktf.IResolvable) {
    this._tags.internalValue = value;
  }
  public resetTags() {
    this._tags.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get tagsInput() {
    return this._tags.internalValue;
  }

  // use_default - computed: false, optional: false, required: true
  private _useDefault?: boolean | cdktf.IResolvable; 
  public get useDefault() {
    return this.getBooleanAttribute('use_default');
  }
  public set useDefault(value: boolean | cdktf.IResolvable) {
    this._useDefault = value;
  }
  // Temporarily expose input value. Use with caution.
  public get useDefaultInput() {
    return this._useDefault;
  }

  // normal_collector_config - computed: false, optional: true, required: false
  private _normalCollectorConfig = new DeviceGroupExtraServicesFRONTDOORSNormalCollectorConfigList(this, "normal_collector_config", false);
  public get normalCollectorConfig() {
    return this._normalCollectorConfig;
  }
  public putNormalCollectorConfig(value: DeviceGroupExtraServicesFRONTDOORSNormalCollectorConfig[] | cdktf.IResolvable) {
    this._normalCollectorConfig.internalValue = value;
  }
  public resetNormalCollectorConfig() {
    this._normalCollectorConfig.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get normalCollectorConfigInput() {
    return this._normalCollectorConfig.internalValue;
  }
}

export class DeviceGroupExtraServicesFRONTDOORSList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesFRONTDOORS[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesFRONTDOORSOutputReference {
    return new DeviceGroupExtraServicesFRONTDOORSOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesFSXTags {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#name DeviceGroup#name}
  */
  readonly name?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#operation DeviceGroup#operation}
  */
  readonly operation?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#value DeviceGroup#value}
  */
  readonly value?: string;
}

export function deviceGroupExtraServicesFSXTagsToTerraform(struct?: DeviceGroupExtraServicesFSXTags | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    name: cdktf.stringToTerraform(struct!.name),
    operation: cdktf.stringToTerraform(struct!.operation),
    value: cdktf.stringToTerraform(struct!.value),
  }
}


export function deviceGroupExtraServicesFSXTagsToHclTerraform(struct?: DeviceGroupExtraServicesFSXTags | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    name: {
      value: cdktf.stringToHclTerraform(struct!.name),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    operation: {
      value: cdktf.stringToHclTerraform(struct!.operation),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    value: {
      value: cdktf.stringToHclTerraform(struct!.value),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesFSXTagsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesFSXTags | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._name !== undefined) {
      hasAnyValues = true;
      internalValueResult.name = this._name;
    }
    if (this._operation !== undefined) {
      hasAnyValues = true;
      internalValueResult.operation = this._operation;
    }
    if (this._value !== undefined) {
      hasAnyValues = true;
      internalValueResult.value = this._value;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesFSXTags | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._name = undefined;
      this._operation = undefined;
      this._value = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._name = value.name;
      this._operation = value.operation;
      this._value = value.value;
    }
  }

  // name - computed: false, optional: true, required: false
  private _name?: string; 
  public get name() {
    return this.getStringAttribute('name');
  }
  public set name(value: string) {
    this._name = value;
  }
  public resetName() {
    this._name = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get nameInput() {
    return this._name;
  }

  // operation - computed: false, optional: true, required: false
  private _operation?: string; 
  public get operation() {
    return this.getStringAttribute('operation');
  }
  public set operation(value: string) {
    this._operation = value;
  }
  public resetOperation() {
    this._operation = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get operationInput() {
    return this._operation;
  }

  // value - computed: false, optional: true, required: false
  private _value?: string; 
  public get value() {
    return this.getStringAttribute('value');
  }
  public set value(value: string) {
    this._value = value;
  }
  public resetValue() {
    this._value = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get valueInput() {
    return this._value;
  }
}

export class DeviceGroupExtraServicesFSXTagsList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesFSXTags[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesFSXTagsOutputReference {
    return new DeviceGroupExtraServicesFSXTagsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesFSXNormalCollectorConfigCollectors {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#applies_to DeviceGroup#applies_to}
  */
  readonly appliesTo?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#auto_balanced_collector_group_id DeviceGroup#auto_balanced_collector_group_id}
  */
  readonly autoBalancedCollectorGroupId?: number;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#collector_id DeviceGroup#collector_id}
  */
  readonly collectorId?: number;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#priority DeviceGroup#priority}
  */
  readonly priority?: number;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#use_public_ip DeviceGroup#use_public_ip}
  */
  readonly usePublicIp?: boolean | cdktf.IResolvable;
}

export function deviceGroupExtraServicesFSXNormalCollectorConfigCollectorsToTerraform(struct?: DeviceGroupExtraServicesFSXNormalCollectorConfigCollectors | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    applies_to: cdktf.stringToTerraform(struct!.appliesTo),
    auto_balanced_collector_group_id: cdktf.numberToTerraform(struct!.autoBalancedCollectorGroupId),
    collector_id: cdktf.numberToTerraform(struct!.collectorId),
    priority: cdktf.numberToTerraform(struct!.priority),
    use_public_ip: cdktf.booleanToTerraform(struct!.usePublicIp),
  }
}


export function deviceGroupExtraServicesFSXNormalCollectorConfigCollectorsToHclTerraform(struct?: DeviceGroupExtraServicesFSXNormalCollectorConfigCollectors | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    applies_to: {
      value: cdktf.stringToHclTerraform(struct!.appliesTo),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    auto_balanced_collector_group_id: {
      value: cdktf.numberToHclTerraform(struct!.autoBalancedCollectorGroupId),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    collector_id: {
      value: cdktf.numberToHclTerraform(struct!.collectorId),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    priority: {
      value: cdktf.numberToHclTerraform(struct!.priority),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    use_public_ip: {
      value: cdktf.booleanToHclTerraform(struct!.usePublicIp),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesFSXNormalCollectorConfigCollectorsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesFSXNormalCollectorConfigCollectors | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._appliesTo !== undefined) {
      hasAnyValues = true;
      internalValueResult.appliesTo = this._appliesTo;
    }
    if (this._autoBalancedCollectorGroupId !== undefined) {
      hasAnyValues = true;
      internalValueResult.autoBalancedCollectorGroupId = this._autoBalancedCollectorGroupId;
    }
    if (this._collectorId !== undefined) {
      hasAnyValues = true;
      internalValueResult.collectorId = this._collectorId;
    }
    if (this._priority !== undefined) {
      hasAnyValues = true;
      internalValueResult.priority = this._priority;
    }
    if (this._usePublicIp !== undefined) {
      hasAnyValues = true;
      internalValueResult.usePublicIp = this._usePublicIp;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesFSXNormalCollectorConfigCollectors | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._appliesTo = undefined;
      this._autoBalancedCollectorGroupId = undefined;
      this._collectorId = undefined;
      this._priority = undefined;
      this._usePublicIp = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._appliesTo = value.appliesTo;
      this._autoBalancedCollectorGroupId = value.autoBalancedCollectorGroupId;
      this._collectorId = value.collectorId;
      this._priority = value.priority;
      this._usePublicIp = value.usePublicIp;
    }
  }

  // applies_to - computed: false, optional: true, required: false
  private _appliesTo?: string; 
  public get appliesTo() {
    return this.getStringAttribute('applies_to');
  }
  public set appliesTo(value: string) {
    this._appliesTo = value;
  }
  public resetAppliesTo() {
    this._appliesTo = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get appliesToInput() {
    return this._appliesTo;
  }

  // auto_balanced_collector_group_id - computed: false, optional: true, required: false
  private _autoBalancedCollectorGroupId?: number; 
  public get autoBalancedCollectorGroupId() {
    return this.getNumberAttribute('auto_balanced_collector_group_id');
  }
  public set autoBalancedCollectorGroupId(value: number) {
    this._autoBalancedCollectorGroupId = value;
  }
  public resetAutoBalancedCollectorGroupId() {
    this._autoBalancedCollectorGroupId = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get autoBalancedCollectorGroupIdInput() {
    return this._autoBalancedCollectorGroupId;
  }

  // collector_id - computed: false, optional: true, required: false
  private _collectorId?: number; 
  public get collectorId() {
    return this.getNumberAttribute('collector_id');
  }
  public set collectorId(value: number) {
    this._collectorId = value;
  }
  public resetCollectorId() {
    this._collectorId = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get collectorIdInput() {
    return this._collectorId;
  }

  // priority - computed: false, optional: true, required: false
  private _priority?: number; 
  public get priority() {
    return this.getNumberAttribute('priority');
  }
  public set priority(value: number) {
    this._priority = value;
  }
  public resetPriority() {
    this._priority = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get priorityInput() {
    return this._priority;
  }

  // use_public_ip - computed: false, optional: true, required: false
  private _usePublicIp?: boolean | cdktf.IResolvable; 
  public get usePublicIp() {
    return this.getBooleanAttribute('use_public_ip');
  }
  public set usePublicIp(value: boolean | cdktf.IResolvable) {
    this._usePublicIp = value;
  }
  public resetUsePublicIp() {
    this._usePublicIp = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get usePublicIpInput() {
    return this._usePublicIp;
  }
}

export class DeviceGroupExtraServicesFSXNormalCollectorConfigCollectorsList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesFSXNormalCollectorConfigCollectors[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesFSXNormalCollectorConfigCollectorsOutputReference {
    return new DeviceGroupExtraServicesFSXNormalCollectorConfigCollectorsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesFSXNormalCollectorConfig {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#collectors DeviceGroup#collectors}
  */
  readonly collectors?: DeviceGroupExtraServicesFSXNormalCollectorConfigCollectors[] | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#enabled DeviceGroup#enabled}
  */
  readonly enabled: boolean | cdktf.IResolvable;
}

export function deviceGroupExtraServicesFSXNormalCollectorConfigToTerraform(struct?: DeviceGroupExtraServicesFSXNormalCollectorConfig | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    collectors: cdktf.listMapper(deviceGroupExtraServicesFSXNormalCollectorConfigCollectorsToTerraform, false)(struct!.collectors),
    enabled: cdktf.booleanToTerraform(struct!.enabled),
  }
}


export function deviceGroupExtraServicesFSXNormalCollectorConfigToHclTerraform(struct?: DeviceGroupExtraServicesFSXNormalCollectorConfig | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    collectors: {
      value: cdktf.listMapperHcl(deviceGroupExtraServicesFSXNormalCollectorConfigCollectorsToHclTerraform, false)(struct!.collectors),
      isBlock: true,
      type: "list",
      storageClassType: "DeviceGroupExtraServicesFSXNormalCollectorConfigCollectorsList",
    },
    enabled: {
      value: cdktf.booleanToHclTerraform(struct!.enabled),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesFSXNormalCollectorConfigOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesFSXNormalCollectorConfig | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._collectors?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.collectors = this._collectors?.internalValue;
    }
    if (this._enabled !== undefined) {
      hasAnyValues = true;
      internalValueResult.enabled = this._enabled;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesFSXNormalCollectorConfig | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._collectors.internalValue = undefined;
      this._enabled = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._collectors.internalValue = value.collectors;
      this._enabled = value.enabled;
    }
  }

  // collectors - computed: false, optional: true, required: false
  private _collectors = new DeviceGroupExtraServicesFSXNormalCollectorConfigCollectorsList(this, "collectors", false);
  public get collectors() {
    return this._collectors;
  }
  public putCollectors(value: DeviceGroupExtraServicesFSXNormalCollectorConfigCollectors[] | cdktf.IResolvable) {
    this._collectors.internalValue = value;
  }
  public resetCollectors() {
    this._collectors.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get collectorsInput() {
    return this._collectors.internalValue;
  }

  // enabled - computed: false, optional: false, required: true
  private _enabled?: boolean | cdktf.IResolvable; 
  public get enabled() {
    return this.getBooleanAttribute('enabled');
  }
  public set enabled(value: boolean | cdktf.IResolvable) {
    this._enabled = value;
  }
  // Temporarily expose input value. Use with caution.
  public get enabledInput() {
    return this._enabled;
  }
}

export class DeviceGroupExtraServicesFSXNormalCollectorConfigList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesFSXNormalCollectorConfig[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesFSXNormalCollectorConfigOutputReference {
    return new DeviceGroupExtraServicesFSXNormalCollectorConfigOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesFSX {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#custom_n_s_p_schedule DeviceGroup#custom_n_s_p_schedule}
  */
  readonly customNSPSchedule?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#dead_operation DeviceGroup#dead_operation}
  */
  readonly deadOperation?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#device_display_name_template DeviceGroup#device_display_name_template}
  */
  readonly deviceDisplayNameTemplate?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#disable_stop_terminate_host_monitor DeviceGroup#disable_stop_terminate_host_monitor}
  */
  readonly disableStopTerminateHostMonitor?: boolean | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#disable_terminated_host_alerting DeviceGroup#disable_terminated_host_alerting}
  */
  readonly disableTerminatedHostAlerting?: boolean | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#monitoring_region_infos DeviceGroup#monitoring_region_infos}
  */
  readonly monitoringRegionInfos?: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#monitoring_regions DeviceGroup#monitoring_regions}
  */
  readonly monitoringRegions?: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#name_filter DeviceGroup#name_filter}
  */
  readonly nameFilter?: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#select_all DeviceGroup#select_all}
  */
  readonly selectAll?: boolean | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#tags DeviceGroup#tags}
  */
  readonly tags?: DeviceGroupExtraServicesFSXTags[] | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#use_default DeviceGroup#use_default}
  */
  readonly useDefault: boolean | cdktf.IResolvable;
  /**
  * normal_collector_config block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#normal_collector_config DeviceGroup#normal_collector_config}
  */
  readonly normalCollectorConfig?: DeviceGroupExtraServicesFSXNormalCollectorConfig[] | cdktf.IResolvable;
}

export function deviceGroupExtraServicesFSXToTerraform(struct?: DeviceGroupExtraServicesFSX | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    custom_n_s_p_schedule: cdktf.stringToTerraform(struct!.customNSPSchedule),
    dead_operation: cdktf.stringToTerraform(struct!.deadOperation),
    device_display_name_template: cdktf.stringToTerraform(struct!.deviceDisplayNameTemplate),
    disable_stop_terminate_host_monitor: cdktf.booleanToTerraform(struct!.disableStopTerminateHostMonitor),
    disable_terminated_host_alerting: cdktf.booleanToTerraform(struct!.disableTerminatedHostAlerting),
    monitoring_region_infos: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.monitoringRegionInfos),
    monitoring_regions: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.monitoringRegions),
    name_filter: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.nameFilter),
    select_all: cdktf.booleanToTerraform(struct!.selectAll),
    tags: cdktf.listMapper(deviceGroupExtraServicesFSXTagsToTerraform, false)(struct!.tags),
    use_default: cdktf.booleanToTerraform(struct!.useDefault),
    normal_collector_config: cdktf.listMapper(deviceGroupExtraServicesFSXNormalCollectorConfigToTerraform, true)(struct!.normalCollectorConfig),
  }
}


export function deviceGroupExtraServicesFSXToHclTerraform(struct?: DeviceGroupExtraServicesFSX | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    custom_n_s_p_schedule: {
      value: cdktf.stringToHclTerraform(struct!.customNSPSchedule),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    dead_operation: {
      value: cdktf.stringToHclTerraform(struct!.deadOperation),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    device_display_name_template: {
      value: cdktf.stringToHclTerraform(struct!.deviceDisplayNameTemplate),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    disable_stop_terminate_host_monitor: {
      value: cdktf.booleanToHclTerraform(struct!.disableStopTerminateHostMonitor),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    disable_terminated_host_alerting: {
      value: cdktf.booleanToHclTerraform(struct!.disableTerminatedHostAlerting),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    monitoring_region_infos: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.monitoringRegionInfos),
      isBlock: false,
      type: "set",
      storageClassType: "stringList",
    },
    monitoring_regions: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.monitoringRegions),
      isBlock: false,
      type: "set",
      storageClassType: "stringList",
    },
    name_filter: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.nameFilter),
      isBlock: false,
      type: "set",
      storageClassType: "stringList",
    },
    select_all: {
      value: cdktf.booleanToHclTerraform(struct!.selectAll),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    tags: {
      value: cdktf.listMapperHcl(deviceGroupExtraServicesFSXTagsToHclTerraform, false)(struct!.tags),
      isBlock: true,
      type: "list",
      storageClassType: "DeviceGroupExtraServicesFSXTagsList",
    },
    use_default: {
      value: cdktf.booleanToHclTerraform(struct!.useDefault),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    normal_collector_config: {
      value: cdktf.listMapperHcl(deviceGroupExtraServicesFSXNormalCollectorConfigToHclTerraform, true)(struct!.normalCollectorConfig),
      isBlock: true,
      type: "list",
      storageClassType: "DeviceGroupExtraServicesFSXNormalCollectorConfigList",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesFSXOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesFSX | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._customNSPSchedule !== undefined) {
      hasAnyValues = true;
      internalValueResult.customNSPSchedule = this._customNSPSchedule;
    }
    if (this._deadOperation !== undefined) {
      hasAnyValues = true;
      internalValueResult.deadOperation = this._deadOperation;
    }
    if (this._deviceDisplayNameTemplate !== undefined) {
      hasAnyValues = true;
      internalValueResult.deviceDisplayNameTemplate = this._deviceDisplayNameTemplate;
    }
    if (this._disableStopTerminateHostMonitor !== undefined) {
      hasAnyValues = true;
      internalValueResult.disableStopTerminateHostMonitor = this._disableStopTerminateHostMonitor;
    }
    if (this._disableTerminatedHostAlerting !== undefined) {
      hasAnyValues = true;
      internalValueResult.disableTerminatedHostAlerting = this._disableTerminatedHostAlerting;
    }
    if (this._monitoringRegionInfos !== undefined) {
      hasAnyValues = true;
      internalValueResult.monitoringRegionInfos = this._monitoringRegionInfos;
    }
    if (this._monitoringRegions !== undefined) {
      hasAnyValues = true;
      internalValueResult.monitoringRegions = this._monitoringRegions;
    }
    if (this._nameFilter !== undefined) {
      hasAnyValues = true;
      internalValueResult.nameFilter = this._nameFilter;
    }
    if (this._selectAll !== undefined) {
      hasAnyValues = true;
      internalValueResult.selectAll = this._selectAll;
    }
    if (this._tags?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.tags = this._tags?.internalValue;
    }
    if (this._useDefault !== undefined) {
      hasAnyValues = true;
      internalValueResult.useDefault = this._useDefault;
    }
    if (this._normalCollectorConfig?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.normalCollectorConfig = this._normalCollectorConfig?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesFSX | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._customNSPSchedule = undefined;
      this._deadOperation = undefined;
      this._deviceDisplayNameTemplate = undefined;
      this._disableStopTerminateHostMonitor = undefined;
      this._disableTerminatedHostAlerting = undefined;
      this._monitoringRegionInfos = undefined;
      this._monitoringRegions = undefined;
      this._nameFilter = undefined;
      this._selectAll = undefined;
      this._tags.internalValue = undefined;
      this._useDefault = undefined;
      this._normalCollectorConfig.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._customNSPSchedule = value.customNSPSchedule;
      this._deadOperation = value.deadOperation;
      this._deviceDisplayNameTemplate = value.deviceDisplayNameTemplate;
      this._disableStopTerminateHostMonitor = value.disableStopTerminateHostMonitor;
      this._disableTerminatedHostAlerting = value.disableTerminatedHostAlerting;
      this._monitoringRegionInfos = value.monitoringRegionInfos;
      this._monitoringRegions = value.monitoringRegions;
      this._nameFilter = value.nameFilter;
      this._selectAll = value.selectAll;
      this._tags.internalValue = value.tags;
      this._useDefault = value.useDefault;
      this._normalCollectorConfig.internalValue = value.normalCollectorConfig;
    }
  }

  // custom_n_s_p_schedule - computed: false, optional: true, required: false
  private _customNSPSchedule?: string; 
  public get customNSPSchedule() {
    return this.getStringAttribute('custom_n_s_p_schedule');
  }
  public set customNSPSchedule(value: string) {
    this._customNSPSchedule = value;
  }
  public resetCustomNSPSchedule() {
    this._customNSPSchedule = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get customNSPScheduleInput() {
    return this._customNSPSchedule;
  }

  // dead_operation - computed: false, optional: true, required: false
  private _deadOperation?: string; 
  public get deadOperation() {
    return this.getStringAttribute('dead_operation');
  }
  public set deadOperation(value: string) {
    this._deadOperation = value;
  }
  public resetDeadOperation() {
    this._deadOperation = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get deadOperationInput() {
    return this._deadOperation;
  }

  // device_display_name_template - computed: false, optional: true, required: false
  private _deviceDisplayNameTemplate?: string; 
  public get deviceDisplayNameTemplate() {
    return this.getStringAttribute('device_display_name_template');
  }
  public set deviceDisplayNameTemplate(value: string) {
    this._deviceDisplayNameTemplate = value;
  }
  public resetDeviceDisplayNameTemplate() {
    this._deviceDisplayNameTemplate = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get deviceDisplayNameTemplateInput() {
    return this._deviceDisplayNameTemplate;
  }

  // disable_stop_terminate_host_monitor - computed: false, optional: true, required: false
  private _disableStopTerminateHostMonitor?: boolean | cdktf.IResolvable; 
  public get disableStopTerminateHostMonitor() {
    return this.getBooleanAttribute('disable_stop_terminate_host_monitor');
  }
  public set disableStopTerminateHostMonitor(value: boolean | cdktf.IResolvable) {
    this._disableStopTerminateHostMonitor = value;
  }
  public resetDisableStopTerminateHostMonitor() {
    this._disableStopTerminateHostMonitor = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get disableStopTerminateHostMonitorInput() {
    return this._disableStopTerminateHostMonitor;
  }

  // disable_terminated_host_alerting - computed: false, optional: true, required: false
  private _disableTerminatedHostAlerting?: boolean | cdktf.IResolvable; 
  public get disableTerminatedHostAlerting() {
    return this.getBooleanAttribute('disable_terminated_host_alerting');
  }
  public set disableTerminatedHostAlerting(value: boolean | cdktf.IResolvable) {
    this._disableTerminatedHostAlerting = value;
  }
  public resetDisableTerminatedHostAlerting() {
    this._disableTerminatedHostAlerting = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get disableTerminatedHostAlertingInput() {
    return this._disableTerminatedHostAlerting;
  }

  // monitoring_region_infos - computed: false, optional: true, required: false
  private _monitoringRegionInfos?: string[]; 
  public get monitoringRegionInfos() {
    return cdktf.Fn.tolist(this.getListAttribute('monitoring_region_infos'));
  }
  public set monitoringRegionInfos(value: string[]) {
    this._monitoringRegionInfos = value;
  }
  public resetMonitoringRegionInfos() {
    this._monitoringRegionInfos = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get monitoringRegionInfosInput() {
    return this._monitoringRegionInfos;
  }

  // monitoring_regions - computed: false, optional: true, required: false
  private _monitoringRegions?: string[]; 
  public get monitoringRegions() {
    return cdktf.Fn.tolist(this.getListAttribute('monitoring_regions'));
  }
  public set monitoringRegions(value: string[]) {
    this._monitoringRegions = value;
  }
  public resetMonitoringRegions() {
    this._monitoringRegions = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get monitoringRegionsInput() {
    return this._monitoringRegions;
  }

  // name_filter - computed: false, optional: true, required: false
  private _nameFilter?: string[]; 
  public get nameFilter() {
    return cdktf.Fn.tolist(this.getListAttribute('name_filter'));
  }
  public set nameFilter(value: string[]) {
    this._nameFilter = value;
  }
  public resetNameFilter() {
    this._nameFilter = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get nameFilterInput() {
    return this._nameFilter;
  }

  // select_all - computed: false, optional: true, required: false
  private _selectAll?: boolean | cdktf.IResolvable; 
  public get selectAll() {
    return this.getBooleanAttribute('select_all');
  }
  public set selectAll(value: boolean | cdktf.IResolvable) {
    this._selectAll = value;
  }
  public resetSelectAll() {
    this._selectAll = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get selectAllInput() {
    return this._selectAll;
  }

  // tags - computed: false, optional: true, required: false
  private _tags = new DeviceGroupExtraServicesFSXTagsList(this, "tags", false);
  public get tags() {
    return this._tags;
  }
  public putTags(value: DeviceGroupExtraServicesFSXTags[] | cdktf.IResolvable) {
    this._tags.internalValue = value;
  }
  public resetTags() {
    this._tags.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get tagsInput() {
    return this._tags.internalValue;
  }

  // use_default - computed: false, optional: false, required: true
  private _useDefault?: boolean | cdktf.IResolvable; 
  public get useDefault() {
    return this.getBooleanAttribute('use_default');
  }
  public set useDefault(value: boolean | cdktf.IResolvable) {
    this._useDefault = value;
  }
  // Temporarily expose input value. Use with caution.
  public get useDefaultInput() {
    return this._useDefault;
  }

  // normal_collector_config - computed: false, optional: true, required: false
  private _normalCollectorConfig = new DeviceGroupExtraServicesFSXNormalCollectorConfigList(this, "normal_collector_config", false);
  public get normalCollectorConfig() {
    return this._normalCollectorConfig;
  }
  public putNormalCollectorConfig(value: DeviceGroupExtraServicesFSXNormalCollectorConfig[] | cdktf.IResolvable) {
    this._normalCollectorConfig.internalValue = value;
  }
  public resetNormalCollectorConfig() {
    this._normalCollectorConfig.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get normalCollectorConfigInput() {
    return this._normalCollectorConfig.internalValue;
  }
}

export class DeviceGroupExtraServicesFSXList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesFSX[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesFSXOutputReference {
    return new DeviceGroupExtraServicesFSXOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesGLUETags {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#name DeviceGroup#name}
  */
  readonly name?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#operation DeviceGroup#operation}
  */
  readonly operation?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#value DeviceGroup#value}
  */
  readonly value?: string;
}

export function deviceGroupExtraServicesGLUETagsToTerraform(struct?: DeviceGroupExtraServicesGLUETags | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    name: cdktf.stringToTerraform(struct!.name),
    operation: cdktf.stringToTerraform(struct!.operation),
    value: cdktf.stringToTerraform(struct!.value),
  }
}


export function deviceGroupExtraServicesGLUETagsToHclTerraform(struct?: DeviceGroupExtraServicesGLUETags | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    name: {
      value: cdktf.stringToHclTerraform(struct!.name),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    operation: {
      value: cdktf.stringToHclTerraform(struct!.operation),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    value: {
      value: cdktf.stringToHclTerraform(struct!.value),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesGLUETagsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesGLUETags | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._name !== undefined) {
      hasAnyValues = true;
      internalValueResult.name = this._name;
    }
    if (this._operation !== undefined) {
      hasAnyValues = true;
      internalValueResult.operation = this._operation;
    }
    if (this._value !== undefined) {
      hasAnyValues = true;
      internalValueResult.value = this._value;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesGLUETags | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._name = undefined;
      this._operation = undefined;
      this._value = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._name = value.name;
      this._operation = value.operation;
      this._value = value.value;
    }
  }

  // name - computed: false, optional: true, required: false
  private _name?: string; 
  public get name() {
    return this.getStringAttribute('name');
  }
  public set name(value: string) {
    this._name = value;
  }
  public resetName() {
    this._name = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get nameInput() {
    return this._name;
  }

  // operation - computed: false, optional: true, required: false
  private _operation?: string; 
  public get operation() {
    return this.getStringAttribute('operation');
  }
  public set operation(value: string) {
    this._operation = value;
  }
  public resetOperation() {
    this._operation = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get operationInput() {
    return this._operation;
  }

  // value - computed: false, optional: true, required: false
  private _value?: string; 
  public get value() {
    return this.getStringAttribute('value');
  }
  public set value(value: string) {
    this._value = value;
  }
  public resetValue() {
    this._value = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get valueInput() {
    return this._value;
  }
}

export class DeviceGroupExtraServicesGLUETagsList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesGLUETags[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesGLUETagsOutputReference {
    return new DeviceGroupExtraServicesGLUETagsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesGLUENormalCollectorConfigCollectors {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#applies_to DeviceGroup#applies_to}
  */
  readonly appliesTo?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#auto_balanced_collector_group_id DeviceGroup#auto_balanced_collector_group_id}
  */
  readonly autoBalancedCollectorGroupId?: number;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#collector_id DeviceGroup#collector_id}
  */
  readonly collectorId?: number;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#priority DeviceGroup#priority}
  */
  readonly priority?: number;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#use_public_ip DeviceGroup#use_public_ip}
  */
  readonly usePublicIp?: boolean | cdktf.IResolvable;
}

export function deviceGroupExtraServicesGLUENormalCollectorConfigCollectorsToTerraform(struct?: DeviceGroupExtraServicesGLUENormalCollectorConfigCollectors | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    applies_to: cdktf.stringToTerraform(struct!.appliesTo),
    auto_balanced_collector_group_id: cdktf.numberToTerraform(struct!.autoBalancedCollectorGroupId),
    collector_id: cdktf.numberToTerraform(struct!.collectorId),
    priority: cdktf.numberToTerraform(struct!.priority),
    use_public_ip: cdktf.booleanToTerraform(struct!.usePublicIp),
  }
}


export function deviceGroupExtraServicesGLUENormalCollectorConfigCollectorsToHclTerraform(struct?: DeviceGroupExtraServicesGLUENormalCollectorConfigCollectors | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    applies_to: {
      value: cdktf.stringToHclTerraform(struct!.appliesTo),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    auto_balanced_collector_group_id: {
      value: cdktf.numberToHclTerraform(struct!.autoBalancedCollectorGroupId),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    collector_id: {
      value: cdktf.numberToHclTerraform(struct!.collectorId),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    priority: {
      value: cdktf.numberToHclTerraform(struct!.priority),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    use_public_ip: {
      value: cdktf.booleanToHclTerraform(struct!.usePublicIp),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesGLUENormalCollectorConfigCollectorsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesGLUENormalCollectorConfigCollectors | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._appliesTo !== undefined) {
      hasAnyValues = true;
      internalValueResult.appliesTo = this._appliesTo;
    }
    if (this._autoBalancedCollectorGroupId !== undefined) {
      hasAnyValues = true;
      internalValueResult.autoBalancedCollectorGroupId = this._autoBalancedCollectorGroupId;
    }
    if (this._collectorId !== undefined) {
      hasAnyValues = true;
      internalValueResult.collectorId = this._collectorId;
    }
    if (this._priority !== undefined) {
      hasAnyValues = true;
      internalValueResult.priority = this._priority;
    }
    if (this._usePublicIp !== undefined) {
      hasAnyValues = true;
      internalValueResult.usePublicIp = this._usePublicIp;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesGLUENormalCollectorConfigCollectors | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._appliesTo = undefined;
      this._autoBalancedCollectorGroupId = undefined;
      this._collectorId = undefined;
      this._priority = undefined;
      this._usePublicIp = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._appliesTo = value.appliesTo;
      this._autoBalancedCollectorGroupId = value.autoBalancedCollectorGroupId;
      this._collectorId = value.collectorId;
      this._priority = value.priority;
      this._usePublicIp = value.usePublicIp;
    }
  }

  // applies_to - computed: false, optional: true, required: false
  private _appliesTo?: string; 
  public get appliesTo() {
    return this.getStringAttribute('applies_to');
  }
  public set appliesTo(value: string) {
    this._appliesTo = value;
  }
  public resetAppliesTo() {
    this._appliesTo = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get appliesToInput() {
    return this._appliesTo;
  }

  // auto_balanced_collector_group_id - computed: false, optional: true, required: false
  private _autoBalancedCollectorGroupId?: number; 
  public get autoBalancedCollectorGroupId() {
    return this.getNumberAttribute('auto_balanced_collector_group_id');
  }
  public set autoBalancedCollectorGroupId(value: number) {
    this._autoBalancedCollectorGroupId = value;
  }
  public resetAutoBalancedCollectorGroupId() {
    this._autoBalancedCollectorGroupId = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get autoBalancedCollectorGroupIdInput() {
    return this._autoBalancedCollectorGroupId;
  }

  // collector_id - computed: false, optional: true, required: false
  private _collectorId?: number; 
  public get collectorId() {
    return this.getNumberAttribute('collector_id');
  }
  public set collectorId(value: number) {
    this._collectorId = value;
  }
  public resetCollectorId() {
    this._collectorId = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get collectorIdInput() {
    return this._collectorId;
  }

  // priority - computed: false, optional: true, required: false
  private _priority?: number; 
  public get priority() {
    return this.getNumberAttribute('priority');
  }
  public set priority(value: number) {
    this._priority = value;
  }
  public resetPriority() {
    this._priority = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get priorityInput() {
    return this._priority;
  }

  // use_public_ip - computed: false, optional: true, required: false
  private _usePublicIp?: boolean | cdktf.IResolvable; 
  public get usePublicIp() {
    return this.getBooleanAttribute('use_public_ip');
  }
  public set usePublicIp(value: boolean | cdktf.IResolvable) {
    this._usePublicIp = value;
  }
  public resetUsePublicIp() {
    this._usePublicIp = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get usePublicIpInput() {
    return this._usePublicIp;
  }
}

export class DeviceGroupExtraServicesGLUENormalCollectorConfigCollectorsList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesGLUENormalCollectorConfigCollectors[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesGLUENormalCollectorConfigCollectorsOutputReference {
    return new DeviceGroupExtraServicesGLUENormalCollectorConfigCollectorsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesGLUENormalCollectorConfig {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#collectors DeviceGroup#collectors}
  */
  readonly collectors?: DeviceGroupExtraServicesGLUENormalCollectorConfigCollectors[] | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#enabled DeviceGroup#enabled}
  */
  readonly enabled: boolean | cdktf.IResolvable;
}

export function deviceGroupExtraServicesGLUENormalCollectorConfigToTerraform(struct?: DeviceGroupExtraServicesGLUENormalCollectorConfig | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    collectors: cdktf.listMapper(deviceGroupExtraServicesGLUENormalCollectorConfigCollectorsToTerraform, false)(struct!.collectors),
    enabled: cdktf.booleanToTerraform(struct!.enabled),
  }
}


export function deviceGroupExtraServicesGLUENormalCollectorConfigToHclTerraform(struct?: DeviceGroupExtraServicesGLUENormalCollectorConfig | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    collectors: {
      value: cdktf.listMapperHcl(deviceGroupExtraServicesGLUENormalCollectorConfigCollectorsToHclTerraform, false)(struct!.collectors),
      isBlock: true,
      type: "list",
      storageClassType: "DeviceGroupExtraServicesGLUENormalCollectorConfigCollectorsList",
    },
    enabled: {
      value: cdktf.booleanToHclTerraform(struct!.enabled),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesGLUENormalCollectorConfigOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesGLUENormalCollectorConfig | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._collectors?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.collectors = this._collectors?.internalValue;
    }
    if (this._enabled !== undefined) {
      hasAnyValues = true;
      internalValueResult.enabled = this._enabled;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesGLUENormalCollectorConfig | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._collectors.internalValue = undefined;
      this._enabled = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._collectors.internalValue = value.collectors;
      this._enabled = value.enabled;
    }
  }

  // collectors - computed: false, optional: true, required: false
  private _collectors = new DeviceGroupExtraServicesGLUENormalCollectorConfigCollectorsList(this, "collectors", false);
  public get collectors() {
    return this._collectors;
  }
  public putCollectors(value: DeviceGroupExtraServicesGLUENormalCollectorConfigCollectors[] | cdktf.IResolvable) {
    this._collectors.internalValue = value;
  }
  public resetCollectors() {
    this._collectors.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get collectorsInput() {
    return this._collectors.internalValue;
  }

  // enabled - computed: false, optional: false, required: true
  private _enabled?: boolean | cdktf.IResolvable; 
  public get enabled() {
    return this.getBooleanAttribute('enabled');
  }
  public set enabled(value: boolean | cdktf.IResolvable) {
    this._enabled = value;
  }
  // Temporarily expose input value. Use with caution.
  public get enabledInput() {
    return this._enabled;
  }
}

export class DeviceGroupExtraServicesGLUENormalCollectorConfigList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesGLUENormalCollectorConfig[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesGLUENormalCollectorConfigOutputReference {
    return new DeviceGroupExtraServicesGLUENormalCollectorConfigOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesGLUE {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#custom_n_s_p_schedule DeviceGroup#custom_n_s_p_schedule}
  */
  readonly customNSPSchedule?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#dead_operation DeviceGroup#dead_operation}
  */
  readonly deadOperation?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#device_display_name_template DeviceGroup#device_display_name_template}
  */
  readonly deviceDisplayNameTemplate?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#disable_stop_terminate_host_monitor DeviceGroup#disable_stop_terminate_host_monitor}
  */
  readonly disableStopTerminateHostMonitor?: boolean | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#disable_terminated_host_alerting DeviceGroup#disable_terminated_host_alerting}
  */
  readonly disableTerminatedHostAlerting?: boolean | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#monitoring_region_infos DeviceGroup#monitoring_region_infos}
  */
  readonly monitoringRegionInfos?: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#monitoring_regions DeviceGroup#monitoring_regions}
  */
  readonly monitoringRegions?: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#name_filter DeviceGroup#name_filter}
  */
  readonly nameFilter?: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#select_all DeviceGroup#select_all}
  */
  readonly selectAll?: boolean | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#tags DeviceGroup#tags}
  */
  readonly tags?: DeviceGroupExtraServicesGLUETags[] | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#use_default DeviceGroup#use_default}
  */
  readonly useDefault: boolean | cdktf.IResolvable;
  /**
  * normal_collector_config block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#normal_collector_config DeviceGroup#normal_collector_config}
  */
  readonly normalCollectorConfig?: DeviceGroupExtraServicesGLUENormalCollectorConfig[] | cdktf.IResolvable;
}

export function deviceGroupExtraServicesGLUEToTerraform(struct?: DeviceGroupExtraServicesGLUE | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    custom_n_s_p_schedule: cdktf.stringToTerraform(struct!.customNSPSchedule),
    dead_operation: cdktf.stringToTerraform(struct!.deadOperation),
    device_display_name_template: cdktf.stringToTerraform(struct!.deviceDisplayNameTemplate),
    disable_stop_terminate_host_monitor: cdktf.booleanToTerraform(struct!.disableStopTerminateHostMonitor),
    disable_terminated_host_alerting: cdktf.booleanToTerraform(struct!.disableTerminatedHostAlerting),
    monitoring_region_infos: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.monitoringRegionInfos),
    monitoring_regions: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.monitoringRegions),
    name_filter: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.nameFilter),
    select_all: cdktf.booleanToTerraform(struct!.selectAll),
    tags: cdktf.listMapper(deviceGroupExtraServicesGLUETagsToTerraform, false)(struct!.tags),
    use_default: cdktf.booleanToTerraform(struct!.useDefault),
    normal_collector_config: cdktf.listMapper(deviceGroupExtraServicesGLUENormalCollectorConfigToTerraform, true)(struct!.normalCollectorConfig),
  }
}


export function deviceGroupExtraServicesGLUEToHclTerraform(struct?: DeviceGroupExtraServicesGLUE | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    custom_n_s_p_schedule: {
      value: cdktf.stringToHclTerraform(struct!.customNSPSchedule),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    dead_operation: {
      value: cdktf.stringToHclTerraform(struct!.deadOperation),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    device_display_name_template: {
      value: cdktf.stringToHclTerraform(struct!.deviceDisplayNameTemplate),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    disable_stop_terminate_host_monitor: {
      value: cdktf.booleanToHclTerraform(struct!.disableStopTerminateHostMonitor),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    disable_terminated_host_alerting: {
      value: cdktf.booleanToHclTerraform(struct!.disableTerminatedHostAlerting),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    monitoring_region_infos: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.monitoringRegionInfos),
      isBlock: false,
      type: "set",
      storageClassType: "stringList",
    },
    monitoring_regions: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.monitoringRegions),
      isBlock: false,
      type: "set",
      storageClassType: "stringList",
    },
    name_filter: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.nameFilter),
      isBlock: false,
      type: "set",
      storageClassType: "stringList",
    },
    select_all: {
      value: cdktf.booleanToHclTerraform(struct!.selectAll),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    tags: {
      value: cdktf.listMapperHcl(deviceGroupExtraServicesGLUETagsToHclTerraform, false)(struct!.tags),
      isBlock: true,
      type: "list",
      storageClassType: "DeviceGroupExtraServicesGLUETagsList",
    },
    use_default: {
      value: cdktf.booleanToHclTerraform(struct!.useDefault),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    normal_collector_config: {
      value: cdktf.listMapperHcl(deviceGroupExtraServicesGLUENormalCollectorConfigToHclTerraform, true)(struct!.normalCollectorConfig),
      isBlock: true,
      type: "list",
      storageClassType: "DeviceGroupExtraServicesGLUENormalCollectorConfigList",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesGLUEOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesGLUE | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._customNSPSchedule !== undefined) {
      hasAnyValues = true;
      internalValueResult.customNSPSchedule = this._customNSPSchedule;
    }
    if (this._deadOperation !== undefined) {
      hasAnyValues = true;
      internalValueResult.deadOperation = this._deadOperation;
    }
    if (this._deviceDisplayNameTemplate !== undefined) {
      hasAnyValues = true;
      internalValueResult.deviceDisplayNameTemplate = this._deviceDisplayNameTemplate;
    }
    if (this._disableStopTerminateHostMonitor !== undefined) {
      hasAnyValues = true;
      internalValueResult.disableStopTerminateHostMonitor = this._disableStopTerminateHostMonitor;
    }
    if (this._disableTerminatedHostAlerting !== undefined) {
      hasAnyValues = true;
      internalValueResult.disableTerminatedHostAlerting = this._disableTerminatedHostAlerting;
    }
    if (this._monitoringRegionInfos !== undefined) {
      hasAnyValues = true;
      internalValueResult.monitoringRegionInfos = this._monitoringRegionInfos;
    }
    if (this._monitoringRegions !== undefined) {
      hasAnyValues = true;
      internalValueResult.monitoringRegions = this._monitoringRegions;
    }
    if (this._nameFilter !== undefined) {
      hasAnyValues = true;
      internalValueResult.nameFilter = this._nameFilter;
    }
    if (this._selectAll !== undefined) {
      hasAnyValues = true;
      internalValueResult.selectAll = this._selectAll;
    }
    if (this._tags?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.tags = this._tags?.internalValue;
    }
    if (this._useDefault !== undefined) {
      hasAnyValues = true;
      internalValueResult.useDefault = this._useDefault;
    }
    if (this._normalCollectorConfig?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.normalCollectorConfig = this._normalCollectorConfig?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesGLUE | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._customNSPSchedule = undefined;
      this._deadOperation = undefined;
      this._deviceDisplayNameTemplate = undefined;
      this._disableStopTerminateHostMonitor = undefined;
      this._disableTerminatedHostAlerting = undefined;
      this._monitoringRegionInfos = undefined;
      this._monitoringRegions = undefined;
      this._nameFilter = undefined;
      this._selectAll = undefined;
      this._tags.internalValue = undefined;
      this._useDefault = undefined;
      this._normalCollectorConfig.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._customNSPSchedule = value.customNSPSchedule;
      this._deadOperation = value.deadOperation;
      this._deviceDisplayNameTemplate = value.deviceDisplayNameTemplate;
      this._disableStopTerminateHostMonitor = value.disableStopTerminateHostMonitor;
      this._disableTerminatedHostAlerting = value.disableTerminatedHostAlerting;
      this._monitoringRegionInfos = value.monitoringRegionInfos;
      this._monitoringRegions = value.monitoringRegions;
      this._nameFilter = value.nameFilter;
      this._selectAll = value.selectAll;
      this._tags.internalValue = value.tags;
      this._useDefault = value.useDefault;
      this._normalCollectorConfig.internalValue = value.normalCollectorConfig;
    }
  }

  // custom_n_s_p_schedule - computed: false, optional: true, required: false
  private _customNSPSchedule?: string; 
  public get customNSPSchedule() {
    return this.getStringAttribute('custom_n_s_p_schedule');
  }
  public set customNSPSchedule(value: string) {
    this._customNSPSchedule = value;
  }
  public resetCustomNSPSchedule() {
    this._customNSPSchedule = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get customNSPScheduleInput() {
    return this._customNSPSchedule;
  }

  // dead_operation - computed: false, optional: true, required: false
  private _deadOperation?: string; 
  public get deadOperation() {
    return this.getStringAttribute('dead_operation');
  }
  public set deadOperation(value: string) {
    this._deadOperation = value;
  }
  public resetDeadOperation() {
    this._deadOperation = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get deadOperationInput() {
    return this._deadOperation;
  }

  // device_display_name_template - computed: false, optional: true, required: false
  private _deviceDisplayNameTemplate?: string; 
  public get deviceDisplayNameTemplate() {
    return this.getStringAttribute('device_display_name_template');
  }
  public set deviceDisplayNameTemplate(value: string) {
    this._deviceDisplayNameTemplate = value;
  }
  public resetDeviceDisplayNameTemplate() {
    this._deviceDisplayNameTemplate = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get deviceDisplayNameTemplateInput() {
    return this._deviceDisplayNameTemplate;
  }

  // disable_stop_terminate_host_monitor - computed: false, optional: true, required: false
  private _disableStopTerminateHostMonitor?: boolean | cdktf.IResolvable; 
  public get disableStopTerminateHostMonitor() {
    return this.getBooleanAttribute('disable_stop_terminate_host_monitor');
  }
  public set disableStopTerminateHostMonitor(value: boolean | cdktf.IResolvable) {
    this._disableStopTerminateHostMonitor = value;
  }
  public resetDisableStopTerminateHostMonitor() {
    this._disableStopTerminateHostMonitor = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get disableStopTerminateHostMonitorInput() {
    return this._disableStopTerminateHostMonitor;
  }

  // disable_terminated_host_alerting - computed: false, optional: true, required: false
  private _disableTerminatedHostAlerting?: boolean | cdktf.IResolvable; 
  public get disableTerminatedHostAlerting() {
    return this.getBooleanAttribute('disable_terminated_host_alerting');
  }
  public set disableTerminatedHostAlerting(value: boolean | cdktf.IResolvable) {
    this._disableTerminatedHostAlerting = value;
  }
  public resetDisableTerminatedHostAlerting() {
    this._disableTerminatedHostAlerting = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get disableTerminatedHostAlertingInput() {
    return this._disableTerminatedHostAlerting;
  }

  // monitoring_region_infos - computed: false, optional: true, required: false
  private _monitoringRegionInfos?: string[]; 
  public get monitoringRegionInfos() {
    return cdktf.Fn.tolist(this.getListAttribute('monitoring_region_infos'));
  }
  public set monitoringRegionInfos(value: string[]) {
    this._monitoringRegionInfos = value;
  }
  public resetMonitoringRegionInfos() {
    this._monitoringRegionInfos = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get monitoringRegionInfosInput() {
    return this._monitoringRegionInfos;
  }

  // monitoring_regions - computed: false, optional: true, required: false
  private _monitoringRegions?: string[]; 
  public get monitoringRegions() {
    return cdktf.Fn.tolist(this.getListAttribute('monitoring_regions'));
  }
  public set monitoringRegions(value: string[]) {
    this._monitoringRegions = value;
  }
  public resetMonitoringRegions() {
    this._monitoringRegions = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get monitoringRegionsInput() {
    return this._monitoringRegions;
  }

  // name_filter - computed: false, optional: true, required: false
  private _nameFilter?: string[]; 
  public get nameFilter() {
    return cdktf.Fn.tolist(this.getListAttribute('name_filter'));
  }
  public set nameFilter(value: string[]) {
    this._nameFilter = value;
  }
  public resetNameFilter() {
    this._nameFilter = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get nameFilterInput() {
    return this._nameFilter;
  }

  // select_all - computed: false, optional: true, required: false
  private _selectAll?: boolean | cdktf.IResolvable; 
  public get selectAll() {
    return this.getBooleanAttribute('select_all');
  }
  public set selectAll(value: boolean | cdktf.IResolvable) {
    this._selectAll = value;
  }
  public resetSelectAll() {
    this._selectAll = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get selectAllInput() {
    return this._selectAll;
  }

  // tags - computed: false, optional: true, required: false
  private _tags = new DeviceGroupExtraServicesGLUETagsList(this, "tags", false);
  public get tags() {
    return this._tags;
  }
  public putTags(value: DeviceGroupExtraServicesGLUETags[] | cdktf.IResolvable) {
    this._tags.internalValue = value;
  }
  public resetTags() {
    this._tags.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get tagsInput() {
    return this._tags.internalValue;
  }

  // use_default - computed: false, optional: false, required: true
  private _useDefault?: boolean | cdktf.IResolvable; 
  public get useDefault() {
    return this.getBooleanAttribute('use_default');
  }
  public set useDefault(value: boolean | cdktf.IResolvable) {
    this._useDefault = value;
  }
  // Temporarily expose input value. Use with caution.
  public get useDefaultInput() {
    return this._useDefault;
  }

  // normal_collector_config - computed: false, optional: true, required: false
  private _normalCollectorConfig = new DeviceGroupExtraServicesGLUENormalCollectorConfigList(this, "normal_collector_config", false);
  public get normalCollectorConfig() {
    return this._normalCollectorConfig;
  }
  public putNormalCollectorConfig(value: DeviceGroupExtraServicesGLUENormalCollectorConfig[] | cdktf.IResolvable) {
    this._normalCollectorConfig.internalValue = value;
  }
  public resetNormalCollectorConfig() {
    this._normalCollectorConfig.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get normalCollectorConfigInput() {
    return this._normalCollectorConfig.internalValue;
  }
}

export class DeviceGroupExtraServicesGLUEList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesGLUE[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesGLUEOutputReference {
    return new DeviceGroupExtraServicesGLUEOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesKEYVAULTTags {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#name DeviceGroup#name}
  */
  readonly name?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#operation DeviceGroup#operation}
  */
  readonly operation?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#value DeviceGroup#value}
  */
  readonly value?: string;
}

export function deviceGroupExtraServicesKEYVAULTTagsToTerraform(struct?: DeviceGroupExtraServicesKEYVAULTTags | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    name: cdktf.stringToTerraform(struct!.name),
    operation: cdktf.stringToTerraform(struct!.operation),
    value: cdktf.stringToTerraform(struct!.value),
  }
}


export function deviceGroupExtraServicesKEYVAULTTagsToHclTerraform(struct?: DeviceGroupExtraServicesKEYVAULTTags | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    name: {
      value: cdktf.stringToHclTerraform(struct!.name),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    operation: {
      value: cdktf.stringToHclTerraform(struct!.operation),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    value: {
      value: cdktf.stringToHclTerraform(struct!.value),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesKEYVAULTTagsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesKEYVAULTTags | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._name !== undefined) {
      hasAnyValues = true;
      internalValueResult.name = this._name;
    }
    if (this._operation !== undefined) {
      hasAnyValues = true;
      internalValueResult.operation = this._operation;
    }
    if (this._value !== undefined) {
      hasAnyValues = true;
      internalValueResult.value = this._value;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesKEYVAULTTags | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._name = undefined;
      this._operation = undefined;
      this._value = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._name = value.name;
      this._operation = value.operation;
      this._value = value.value;
    }
  }

  // name - computed: false, optional: true, required: false
  private _name?: string; 
  public get name() {
    return this.getStringAttribute('name');
  }
  public set name(value: string) {
    this._name = value;
  }
  public resetName() {
    this._name = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get nameInput() {
    return this._name;
  }

  // operation - computed: false, optional: true, required: false
  private _operation?: string; 
  public get operation() {
    return this.getStringAttribute('operation');
  }
  public set operation(value: string) {
    this._operation = value;
  }
  public resetOperation() {
    this._operation = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get operationInput() {
    return this._operation;
  }

  // value - computed: false, optional: true, required: false
  private _value?: string; 
  public get value() {
    return this.getStringAttribute('value');
  }
  public set value(value: string) {
    this._value = value;
  }
  public resetValue() {
    this._value = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get valueInput() {
    return this._value;
  }
}

export class DeviceGroupExtraServicesKEYVAULTTagsList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesKEYVAULTTags[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesKEYVAULTTagsOutputReference {
    return new DeviceGroupExtraServicesKEYVAULTTagsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesKEYVAULTNormalCollectorConfigCollectors {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#applies_to DeviceGroup#applies_to}
  */
  readonly appliesTo?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#auto_balanced_collector_group_id DeviceGroup#auto_balanced_collector_group_id}
  */
  readonly autoBalancedCollectorGroupId?: number;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#collector_id DeviceGroup#collector_id}
  */
  readonly collectorId?: number;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#priority DeviceGroup#priority}
  */
  readonly priority?: number;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#use_public_ip DeviceGroup#use_public_ip}
  */
  readonly usePublicIp?: boolean | cdktf.IResolvable;
}

export function deviceGroupExtraServicesKEYVAULTNormalCollectorConfigCollectorsToTerraform(struct?: DeviceGroupExtraServicesKEYVAULTNormalCollectorConfigCollectors | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    applies_to: cdktf.stringToTerraform(struct!.appliesTo),
    auto_balanced_collector_group_id: cdktf.numberToTerraform(struct!.autoBalancedCollectorGroupId),
    collector_id: cdktf.numberToTerraform(struct!.collectorId),
    priority: cdktf.numberToTerraform(struct!.priority),
    use_public_ip: cdktf.booleanToTerraform(struct!.usePublicIp),
  }
}


export function deviceGroupExtraServicesKEYVAULTNormalCollectorConfigCollectorsToHclTerraform(struct?: DeviceGroupExtraServicesKEYVAULTNormalCollectorConfigCollectors | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    applies_to: {
      value: cdktf.stringToHclTerraform(struct!.appliesTo),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    auto_balanced_collector_group_id: {
      value: cdktf.numberToHclTerraform(struct!.autoBalancedCollectorGroupId),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    collector_id: {
      value: cdktf.numberToHclTerraform(struct!.collectorId),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    priority: {
      value: cdktf.numberToHclTerraform(struct!.priority),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    use_public_ip: {
      value: cdktf.booleanToHclTerraform(struct!.usePublicIp),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesKEYVAULTNormalCollectorConfigCollectorsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesKEYVAULTNormalCollectorConfigCollectors | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._appliesTo !== undefined) {
      hasAnyValues = true;
      internalValueResult.appliesTo = this._appliesTo;
    }
    if (this._autoBalancedCollectorGroupId !== undefined) {
      hasAnyValues = true;
      internalValueResult.autoBalancedCollectorGroupId = this._autoBalancedCollectorGroupId;
    }
    if (this._collectorId !== undefined) {
      hasAnyValues = true;
      internalValueResult.collectorId = this._collectorId;
    }
    if (this._priority !== undefined) {
      hasAnyValues = true;
      internalValueResult.priority = this._priority;
    }
    if (this._usePublicIp !== undefined) {
      hasAnyValues = true;
      internalValueResult.usePublicIp = this._usePublicIp;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesKEYVAULTNormalCollectorConfigCollectors | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._appliesTo = undefined;
      this._autoBalancedCollectorGroupId = undefined;
      this._collectorId = undefined;
      this._priority = undefined;
      this._usePublicIp = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._appliesTo = value.appliesTo;
      this._autoBalancedCollectorGroupId = value.autoBalancedCollectorGroupId;
      this._collectorId = value.collectorId;
      this._priority = value.priority;
      this._usePublicIp = value.usePublicIp;
    }
  }

  // applies_to - computed: false, optional: true, required: false
  private _appliesTo?: string; 
  public get appliesTo() {
    return this.getStringAttribute('applies_to');
  }
  public set appliesTo(value: string) {
    this._appliesTo = value;
  }
  public resetAppliesTo() {
    this._appliesTo = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get appliesToInput() {
    return this._appliesTo;
  }

  // auto_balanced_collector_group_id - computed: false, optional: true, required: false
  private _autoBalancedCollectorGroupId?: number; 
  public get autoBalancedCollectorGroupId() {
    return this.getNumberAttribute('auto_balanced_collector_group_id');
  }
  public set autoBalancedCollectorGroupId(value: number) {
    this._autoBalancedCollectorGroupId = value;
  }
  public resetAutoBalancedCollectorGroupId() {
    this._autoBalancedCollectorGroupId = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get autoBalancedCollectorGroupIdInput() {
    return this._autoBalancedCollectorGroupId;
  }

  // collector_id - computed: false, optional: true, required: false
  private _collectorId?: number; 
  public get collectorId() {
    return this.getNumberAttribute('collector_id');
  }
  public set collectorId(value: number) {
    this._collectorId = value;
  }
  public resetCollectorId() {
    this._collectorId = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get collectorIdInput() {
    return this._collectorId;
  }

  // priority - computed: false, optional: true, required: false
  private _priority?: number; 
  public get priority() {
    return this.getNumberAttribute('priority');
  }
  public set priority(value: number) {
    this._priority = value;
  }
  public resetPriority() {
    this._priority = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get priorityInput() {
    return this._priority;
  }

  // use_public_ip - computed: false, optional: true, required: false
  private _usePublicIp?: boolean | cdktf.IResolvable; 
  public get usePublicIp() {
    return this.getBooleanAttribute('use_public_ip');
  }
  public set usePublicIp(value: boolean | cdktf.IResolvable) {
    this._usePublicIp = value;
  }
  public resetUsePublicIp() {
    this._usePublicIp = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get usePublicIpInput() {
    return this._usePublicIp;
  }
}

export class DeviceGroupExtraServicesKEYVAULTNormalCollectorConfigCollectorsList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesKEYVAULTNormalCollectorConfigCollectors[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesKEYVAULTNormalCollectorConfigCollectorsOutputReference {
    return new DeviceGroupExtraServicesKEYVAULTNormalCollectorConfigCollectorsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesKEYVAULTNormalCollectorConfig {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#collectors DeviceGroup#collectors}
  */
  readonly collectors?: DeviceGroupExtraServicesKEYVAULTNormalCollectorConfigCollectors[] | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#enabled DeviceGroup#enabled}
  */
  readonly enabled: boolean | cdktf.IResolvable;
}

export function deviceGroupExtraServicesKEYVAULTNormalCollectorConfigToTerraform(struct?: DeviceGroupExtraServicesKEYVAULTNormalCollectorConfig | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    collectors: cdktf.listMapper(deviceGroupExtraServicesKEYVAULTNormalCollectorConfigCollectorsToTerraform, false)(struct!.collectors),
    enabled: cdktf.booleanToTerraform(struct!.enabled),
  }
}


export function deviceGroupExtraServicesKEYVAULTNormalCollectorConfigToHclTerraform(struct?: DeviceGroupExtraServicesKEYVAULTNormalCollectorConfig | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    collectors: {
      value: cdktf.listMapperHcl(deviceGroupExtraServicesKEYVAULTNormalCollectorConfigCollectorsToHclTerraform, false)(struct!.collectors),
      isBlock: true,
      type: "list",
      storageClassType: "DeviceGroupExtraServicesKEYVAULTNormalCollectorConfigCollectorsList",
    },
    enabled: {
      value: cdktf.booleanToHclTerraform(struct!.enabled),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesKEYVAULTNormalCollectorConfigOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesKEYVAULTNormalCollectorConfig | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._collectors?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.collectors = this._collectors?.internalValue;
    }
    if (this._enabled !== undefined) {
      hasAnyValues = true;
      internalValueResult.enabled = this._enabled;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesKEYVAULTNormalCollectorConfig | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._collectors.internalValue = undefined;
      this._enabled = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._collectors.internalValue = value.collectors;
      this._enabled = value.enabled;
    }
  }

  // collectors - computed: false, optional: true, required: false
  private _collectors = new DeviceGroupExtraServicesKEYVAULTNormalCollectorConfigCollectorsList(this, "collectors", false);
  public get collectors() {
    return this._collectors;
  }
  public putCollectors(value: DeviceGroupExtraServicesKEYVAULTNormalCollectorConfigCollectors[] | cdktf.IResolvable) {
    this._collectors.internalValue = value;
  }
  public resetCollectors() {
    this._collectors.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get collectorsInput() {
    return this._collectors.internalValue;
  }

  // enabled - computed: false, optional: false, required: true
  private _enabled?: boolean | cdktf.IResolvable; 
  public get enabled() {
    return this.getBooleanAttribute('enabled');
  }
  public set enabled(value: boolean | cdktf.IResolvable) {
    this._enabled = value;
  }
  // Temporarily expose input value. Use with caution.
  public get enabledInput() {
    return this._enabled;
  }
}

export class DeviceGroupExtraServicesKEYVAULTNormalCollectorConfigList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesKEYVAULTNormalCollectorConfig[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesKEYVAULTNormalCollectorConfigOutputReference {
    return new DeviceGroupExtraServicesKEYVAULTNormalCollectorConfigOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesKEYVAULT {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#custom_n_s_p_schedule DeviceGroup#custom_n_s_p_schedule}
  */
  readonly customNSPSchedule?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#dead_operation DeviceGroup#dead_operation}
  */
  readonly deadOperation?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#device_display_name_template DeviceGroup#device_display_name_template}
  */
  readonly deviceDisplayNameTemplate?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#disable_stop_terminate_host_monitor DeviceGroup#disable_stop_terminate_host_monitor}
  */
  readonly disableStopTerminateHostMonitor?: boolean | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#disable_terminated_host_alerting DeviceGroup#disable_terminated_host_alerting}
  */
  readonly disableTerminatedHostAlerting?: boolean | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#monitoring_region_infos DeviceGroup#monitoring_region_infos}
  */
  readonly monitoringRegionInfos?: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#monitoring_regions DeviceGroup#monitoring_regions}
  */
  readonly monitoringRegions?: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#name_filter DeviceGroup#name_filter}
  */
  readonly nameFilter?: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#select_all DeviceGroup#select_all}
  */
  readonly selectAll?: boolean | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#tags DeviceGroup#tags}
  */
  readonly tags?: DeviceGroupExtraServicesKEYVAULTTags[] | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#use_default DeviceGroup#use_default}
  */
  readonly useDefault: boolean | cdktf.IResolvable;
  /**
  * normal_collector_config block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#normal_collector_config DeviceGroup#normal_collector_config}
  */
  readonly normalCollectorConfig?: DeviceGroupExtraServicesKEYVAULTNormalCollectorConfig[] | cdktf.IResolvable;
}

export function deviceGroupExtraServicesKEYVAULTToTerraform(struct?: DeviceGroupExtraServicesKEYVAULT | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    custom_n_s_p_schedule: cdktf.stringToTerraform(struct!.customNSPSchedule),
    dead_operation: cdktf.stringToTerraform(struct!.deadOperation),
    device_display_name_template: cdktf.stringToTerraform(struct!.deviceDisplayNameTemplate),
    disable_stop_terminate_host_monitor: cdktf.booleanToTerraform(struct!.disableStopTerminateHostMonitor),
    disable_terminated_host_alerting: cdktf.booleanToTerraform(struct!.disableTerminatedHostAlerting),
    monitoring_region_infos: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.monitoringRegionInfos),
    monitoring_regions: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.monitoringRegions),
    name_filter: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.nameFilter),
    select_all: cdktf.booleanToTerraform(struct!.selectAll),
    tags: cdktf.listMapper(deviceGroupExtraServicesKEYVAULTTagsToTerraform, false)(struct!.tags),
    use_default: cdktf.booleanToTerraform(struct!.useDefault),
    normal_collector_config: cdktf.listMapper(deviceGroupExtraServicesKEYVAULTNormalCollectorConfigToTerraform, true)(struct!.normalCollectorConfig),
  }
}


export function deviceGroupExtraServicesKEYVAULTToHclTerraform(struct?: DeviceGroupExtraServicesKEYVAULT | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    custom_n_s_p_schedule: {
      value: cdktf.stringToHclTerraform(struct!.customNSPSchedule),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    dead_operation: {
      value: cdktf.stringToHclTerraform(struct!.deadOperation),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    device_display_name_template: {
      value: cdktf.stringToHclTerraform(struct!.deviceDisplayNameTemplate),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    disable_stop_terminate_host_monitor: {
      value: cdktf.booleanToHclTerraform(struct!.disableStopTerminateHostMonitor),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    disable_terminated_host_alerting: {
      value: cdktf.booleanToHclTerraform(struct!.disableTerminatedHostAlerting),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    monitoring_region_infos: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.monitoringRegionInfos),
      isBlock: false,
      type: "set",
      storageClassType: "stringList",
    },
    monitoring_regions: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.monitoringRegions),
      isBlock: false,
      type: "set",
      storageClassType: "stringList",
    },
    name_filter: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.nameFilter),
      isBlock: false,
      type: "set",
      storageClassType: "stringList",
    },
    select_all: {
      value: cdktf.booleanToHclTerraform(struct!.selectAll),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    tags: {
      value: cdktf.listMapperHcl(deviceGroupExtraServicesKEYVAULTTagsToHclTerraform, false)(struct!.tags),
      isBlock: true,
      type: "list",
      storageClassType: "DeviceGroupExtraServicesKEYVAULTTagsList",
    },
    use_default: {
      value: cdktf.booleanToHclTerraform(struct!.useDefault),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    normal_collector_config: {
      value: cdktf.listMapperHcl(deviceGroupExtraServicesKEYVAULTNormalCollectorConfigToHclTerraform, true)(struct!.normalCollectorConfig),
      isBlock: true,
      type: "list",
      storageClassType: "DeviceGroupExtraServicesKEYVAULTNormalCollectorConfigList",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesKEYVAULTOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesKEYVAULT | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._customNSPSchedule !== undefined) {
      hasAnyValues = true;
      internalValueResult.customNSPSchedule = this._customNSPSchedule;
    }
    if (this._deadOperation !== undefined) {
      hasAnyValues = true;
      internalValueResult.deadOperation = this._deadOperation;
    }
    if (this._deviceDisplayNameTemplate !== undefined) {
      hasAnyValues = true;
      internalValueResult.deviceDisplayNameTemplate = this._deviceDisplayNameTemplate;
    }
    if (this._disableStopTerminateHostMonitor !== undefined) {
      hasAnyValues = true;
      internalValueResult.disableStopTerminateHostMonitor = this._disableStopTerminateHostMonitor;
    }
    if (this._disableTerminatedHostAlerting !== undefined) {
      hasAnyValues = true;
      internalValueResult.disableTerminatedHostAlerting = this._disableTerminatedHostAlerting;
    }
    if (this._monitoringRegionInfos !== undefined) {
      hasAnyValues = true;
      internalValueResult.monitoringRegionInfos = this._monitoringRegionInfos;
    }
    if (this._monitoringRegions !== undefined) {
      hasAnyValues = true;
      internalValueResult.monitoringRegions = this._monitoringRegions;
    }
    if (this._nameFilter !== undefined) {
      hasAnyValues = true;
      internalValueResult.nameFilter = this._nameFilter;
    }
    if (this._selectAll !== undefined) {
      hasAnyValues = true;
      internalValueResult.selectAll = this._selectAll;
    }
    if (this._tags?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.tags = this._tags?.internalValue;
    }
    if (this._useDefault !== undefined) {
      hasAnyValues = true;
      internalValueResult.useDefault = this._useDefault;
    }
    if (this._normalCollectorConfig?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.normalCollectorConfig = this._normalCollectorConfig?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesKEYVAULT | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._customNSPSchedule = undefined;
      this._deadOperation = undefined;
      this._deviceDisplayNameTemplate = undefined;
      this._disableStopTerminateHostMonitor = undefined;
      this._disableTerminatedHostAlerting = undefined;
      this._monitoringRegionInfos = undefined;
      this._monitoringRegions = undefined;
      this._nameFilter = undefined;
      this._selectAll = undefined;
      this._tags.internalValue = undefined;
      this._useDefault = undefined;
      this._normalCollectorConfig.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._customNSPSchedule = value.customNSPSchedule;
      this._deadOperation = value.deadOperation;
      this._deviceDisplayNameTemplate = value.deviceDisplayNameTemplate;
      this._disableStopTerminateHostMonitor = value.disableStopTerminateHostMonitor;
      this._disableTerminatedHostAlerting = value.disableTerminatedHostAlerting;
      this._monitoringRegionInfos = value.monitoringRegionInfos;
      this._monitoringRegions = value.monitoringRegions;
      this._nameFilter = value.nameFilter;
      this._selectAll = value.selectAll;
      this._tags.internalValue = value.tags;
      this._useDefault = value.useDefault;
      this._normalCollectorConfig.internalValue = value.normalCollectorConfig;
    }
  }

  // custom_n_s_p_schedule - computed: false, optional: true, required: false
  private _customNSPSchedule?: string; 
  public get customNSPSchedule() {
    return this.getStringAttribute('custom_n_s_p_schedule');
  }
  public set customNSPSchedule(value: string) {
    this._customNSPSchedule = value;
  }
  public resetCustomNSPSchedule() {
    this._customNSPSchedule = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get customNSPScheduleInput() {
    return this._customNSPSchedule;
  }

  // dead_operation - computed: false, optional: true, required: false
  private _deadOperation?: string; 
  public get deadOperation() {
    return this.getStringAttribute('dead_operation');
  }
  public set deadOperation(value: string) {
    this._deadOperation = value;
  }
  public resetDeadOperation() {
    this._deadOperation = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get deadOperationInput() {
    return this._deadOperation;
  }

  // device_display_name_template - computed: false, optional: true, required: false
  private _deviceDisplayNameTemplate?: string; 
  public get deviceDisplayNameTemplate() {
    return this.getStringAttribute('device_display_name_template');
  }
  public set deviceDisplayNameTemplate(value: string) {
    this._deviceDisplayNameTemplate = value;
  }
  public resetDeviceDisplayNameTemplate() {
    this._deviceDisplayNameTemplate = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get deviceDisplayNameTemplateInput() {
    return this._deviceDisplayNameTemplate;
  }

  // disable_stop_terminate_host_monitor - computed: false, optional: true, required: false
  private _disableStopTerminateHostMonitor?: boolean | cdktf.IResolvable; 
  public get disableStopTerminateHostMonitor() {
    return this.getBooleanAttribute('disable_stop_terminate_host_monitor');
  }
  public set disableStopTerminateHostMonitor(value: boolean | cdktf.IResolvable) {
    this._disableStopTerminateHostMonitor = value;
  }
  public resetDisableStopTerminateHostMonitor() {
    this._disableStopTerminateHostMonitor = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get disableStopTerminateHostMonitorInput() {
    return this._disableStopTerminateHostMonitor;
  }

  // disable_terminated_host_alerting - computed: false, optional: true, required: false
  private _disableTerminatedHostAlerting?: boolean | cdktf.IResolvable; 
  public get disableTerminatedHostAlerting() {
    return this.getBooleanAttribute('disable_terminated_host_alerting');
  }
  public set disableTerminatedHostAlerting(value: boolean | cdktf.IResolvable) {
    this._disableTerminatedHostAlerting = value;
  }
  public resetDisableTerminatedHostAlerting() {
    this._disableTerminatedHostAlerting = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get disableTerminatedHostAlertingInput() {
    return this._disableTerminatedHostAlerting;
  }

  // monitoring_region_infos - computed: false, optional: true, required: false
  private _monitoringRegionInfos?: string[]; 
  public get monitoringRegionInfos() {
    return cdktf.Fn.tolist(this.getListAttribute('monitoring_region_infos'));
  }
  public set monitoringRegionInfos(value: string[]) {
    this._monitoringRegionInfos = value;
  }
  public resetMonitoringRegionInfos() {
    this._monitoringRegionInfos = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get monitoringRegionInfosInput() {
    return this._monitoringRegionInfos;
  }

  // monitoring_regions - computed: false, optional: true, required: false
  private _monitoringRegions?: string[]; 
  public get monitoringRegions() {
    return cdktf.Fn.tolist(this.getListAttribute('monitoring_regions'));
  }
  public set monitoringRegions(value: string[]) {
    this._monitoringRegions = value;
  }
  public resetMonitoringRegions() {
    this._monitoringRegions = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get monitoringRegionsInput() {
    return this._monitoringRegions;
  }

  // name_filter - computed: false, optional: true, required: false
  private _nameFilter?: string[]; 
  public get nameFilter() {
    return cdktf.Fn.tolist(this.getListAttribute('name_filter'));
  }
  public set nameFilter(value: string[]) {
    this._nameFilter = value;
  }
  public resetNameFilter() {
    this._nameFilter = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get nameFilterInput() {
    return this._nameFilter;
  }

  // select_all - computed: false, optional: true, required: false
  private _selectAll?: boolean | cdktf.IResolvable; 
  public get selectAll() {
    return this.getBooleanAttribute('select_all');
  }
  public set selectAll(value: boolean | cdktf.IResolvable) {
    this._selectAll = value;
  }
  public resetSelectAll() {
    this._selectAll = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get selectAllInput() {
    return this._selectAll;
  }

  // tags - computed: false, optional: true, required: false
  private _tags = new DeviceGroupExtraServicesKEYVAULTTagsList(this, "tags", false);
  public get tags() {
    return this._tags;
  }
  public putTags(value: DeviceGroupExtraServicesKEYVAULTTags[] | cdktf.IResolvable) {
    this._tags.internalValue = value;
  }
  public resetTags() {
    this._tags.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get tagsInput() {
    return this._tags.internalValue;
  }

  // use_default - computed: false, optional: false, required: true
  private _useDefault?: boolean | cdktf.IResolvable; 
  public get useDefault() {
    return this.getBooleanAttribute('use_default');
  }
  public set useDefault(value: boolean | cdktf.IResolvable) {
    this._useDefault = value;
  }
  // Temporarily expose input value. Use with caution.
  public get useDefaultInput() {
    return this._useDefault;
  }

  // normal_collector_config - computed: false, optional: true, required: false
  private _normalCollectorConfig = new DeviceGroupExtraServicesKEYVAULTNormalCollectorConfigList(this, "normal_collector_config", false);
  public get normalCollectorConfig() {
    return this._normalCollectorConfig;
  }
  public putNormalCollectorConfig(value: DeviceGroupExtraServicesKEYVAULTNormalCollectorConfig[] | cdktf.IResolvable) {
    this._normalCollectorConfig.internalValue = value;
  }
  public resetNormalCollectorConfig() {
    this._normalCollectorConfig.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get normalCollectorConfigInput() {
    return this._normalCollectorConfig.internalValue;
  }
}

export class DeviceGroupExtraServicesKEYVAULTList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesKEYVAULT[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesKEYVAULTOutputReference {
    return new DeviceGroupExtraServicesKEYVAULTOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesKINESISTags {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#name DeviceGroup#name}
  */
  readonly name?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#operation DeviceGroup#operation}
  */
  readonly operation?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#value DeviceGroup#value}
  */
  readonly value?: string;
}

export function deviceGroupExtraServicesKINESISTagsToTerraform(struct?: DeviceGroupExtraServicesKINESISTags | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    name: cdktf.stringToTerraform(struct!.name),
    operation: cdktf.stringToTerraform(struct!.operation),
    value: cdktf.stringToTerraform(struct!.value),
  }
}


export function deviceGroupExtraServicesKINESISTagsToHclTerraform(struct?: DeviceGroupExtraServicesKINESISTags | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    name: {
      value: cdktf.stringToHclTerraform(struct!.name),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    operation: {
      value: cdktf.stringToHclTerraform(struct!.operation),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    value: {
      value: cdktf.stringToHclTerraform(struct!.value),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesKINESISTagsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesKINESISTags | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._name !== undefined) {
      hasAnyValues = true;
      internalValueResult.name = this._name;
    }
    if (this._operation !== undefined) {
      hasAnyValues = true;
      internalValueResult.operation = this._operation;
    }
    if (this._value !== undefined) {
      hasAnyValues = true;
      internalValueResult.value = this._value;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesKINESISTags | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._name = undefined;
      this._operation = undefined;
      this._value = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._name = value.name;
      this._operation = value.operation;
      this._value = value.value;
    }
  }

  // name - computed: false, optional: true, required: false
  private _name?: string; 
  public get name() {
    return this.getStringAttribute('name');
  }
  public set name(value: string) {
    this._name = value;
  }
  public resetName() {
    this._name = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get nameInput() {
    return this._name;
  }

  // operation - computed: false, optional: true, required: false
  private _operation?: string; 
  public get operation() {
    return this.getStringAttribute('operation');
  }
  public set operation(value: string) {
    this._operation = value;
  }
  public resetOperation() {
    this._operation = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get operationInput() {
    return this._operation;
  }

  // value - computed: false, optional: true, required: false
  private _value?: string; 
  public get value() {
    return this.getStringAttribute('value');
  }
  public set value(value: string) {
    this._value = value;
  }
  public resetValue() {
    this._value = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get valueInput() {
    return this._value;
  }
}

export class DeviceGroupExtraServicesKINESISTagsList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesKINESISTags[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesKINESISTagsOutputReference {
    return new DeviceGroupExtraServicesKINESISTagsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesKINESISNormalCollectorConfigCollectors {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#applies_to DeviceGroup#applies_to}
  */
  readonly appliesTo?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#auto_balanced_collector_group_id DeviceGroup#auto_balanced_collector_group_id}
  */
  readonly autoBalancedCollectorGroupId?: number;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#collector_id DeviceGroup#collector_id}
  */
  readonly collectorId?: number;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#priority DeviceGroup#priority}
  */
  readonly priority?: number;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#use_public_ip DeviceGroup#use_public_ip}
  */
  readonly usePublicIp?: boolean | cdktf.IResolvable;
}

export function deviceGroupExtraServicesKINESISNormalCollectorConfigCollectorsToTerraform(struct?: DeviceGroupExtraServicesKINESISNormalCollectorConfigCollectors | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    applies_to: cdktf.stringToTerraform(struct!.appliesTo),
    auto_balanced_collector_group_id: cdktf.numberToTerraform(struct!.autoBalancedCollectorGroupId),
    collector_id: cdktf.numberToTerraform(struct!.collectorId),
    priority: cdktf.numberToTerraform(struct!.priority),
    use_public_ip: cdktf.booleanToTerraform(struct!.usePublicIp),
  }
}


export function deviceGroupExtraServicesKINESISNormalCollectorConfigCollectorsToHclTerraform(struct?: DeviceGroupExtraServicesKINESISNormalCollectorConfigCollectors | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    applies_to: {
      value: cdktf.stringToHclTerraform(struct!.appliesTo),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    auto_balanced_collector_group_id: {
      value: cdktf.numberToHclTerraform(struct!.autoBalancedCollectorGroupId),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    collector_id: {
      value: cdktf.numberToHclTerraform(struct!.collectorId),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    priority: {
      value: cdktf.numberToHclTerraform(struct!.priority),
      isBlock: false,
      type: "simple",
      storageClassType: "number",
    },
    use_public_ip: {
      value: cdktf.booleanToHclTerraform(struct!.usePublicIp),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesKINESISNormalCollectorConfigCollectorsOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesKINESISNormalCollectorConfigCollectors | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._appliesTo !== undefined) {
      hasAnyValues = true;
      internalValueResult.appliesTo = this._appliesTo;
    }
    if (this._autoBalancedCollectorGroupId !== undefined) {
      hasAnyValues = true;
      internalValueResult.autoBalancedCollectorGroupId = this._autoBalancedCollectorGroupId;
    }
    if (this._collectorId !== undefined) {
      hasAnyValues = true;
      internalValueResult.collectorId = this._collectorId;
    }
    if (this._priority !== undefined) {
      hasAnyValues = true;
      internalValueResult.priority = this._priority;
    }
    if (this._usePublicIp !== undefined) {
      hasAnyValues = true;
      internalValueResult.usePublicIp = this._usePublicIp;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesKINESISNormalCollectorConfigCollectors | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._appliesTo = undefined;
      this._autoBalancedCollectorGroupId = undefined;
      this._collectorId = undefined;
      this._priority = undefined;
      this._usePublicIp = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._appliesTo = value.appliesTo;
      this._autoBalancedCollectorGroupId = value.autoBalancedCollectorGroupId;
      this._collectorId = value.collectorId;
      this._priority = value.priority;
      this._usePublicIp = value.usePublicIp;
    }
  }

  // applies_to - computed: false, optional: true, required: false
  private _appliesTo?: string; 
  public get appliesTo() {
    return this.getStringAttribute('applies_to');
  }
  public set appliesTo(value: string) {
    this._appliesTo = value;
  }
  public resetAppliesTo() {
    this._appliesTo = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get appliesToInput() {
    return this._appliesTo;
  }

  // auto_balanced_collector_group_id - computed: false, optional: true, required: false
  private _autoBalancedCollectorGroupId?: number; 
  public get autoBalancedCollectorGroupId() {
    return this.getNumberAttribute('auto_balanced_collector_group_id');
  }
  public set autoBalancedCollectorGroupId(value: number) {
    this._autoBalancedCollectorGroupId = value;
  }
  public resetAutoBalancedCollectorGroupId() {
    this._autoBalancedCollectorGroupId = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get autoBalancedCollectorGroupIdInput() {
    return this._autoBalancedCollectorGroupId;
  }

  // collector_id - computed: false, optional: true, required: false
  private _collectorId?: number; 
  public get collectorId() {
    return this.getNumberAttribute('collector_id');
  }
  public set collectorId(value: number) {
    this._collectorId = value;
  }
  public resetCollectorId() {
    this._collectorId = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get collectorIdInput() {
    return this._collectorId;
  }

  // priority - computed: false, optional: true, required: false
  private _priority?: number; 
  public get priority() {
    return this.getNumberAttribute('priority');
  }
  public set priority(value: number) {
    this._priority = value;
  }
  public resetPriority() {
    this._priority = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get priorityInput() {
    return this._priority;
  }

  // use_public_ip - computed: false, optional: true, required: false
  private _usePublicIp?: boolean | cdktf.IResolvable; 
  public get usePublicIp() {
    return this.getBooleanAttribute('use_public_ip');
  }
  public set usePublicIp(value: boolean | cdktf.IResolvable) {
    this._usePublicIp = value;
  }
  public resetUsePublicIp() {
    this._usePublicIp = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get usePublicIpInput() {
    return this._usePublicIp;
  }
}

export class DeviceGroupExtraServicesKINESISNormalCollectorConfigCollectorsList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesKINESISNormalCollectorConfigCollectors[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesKINESISNormalCollectorConfigCollectorsOutputReference {
    return new DeviceGroupExtraServicesKINESISNormalCollectorConfigCollectorsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesKINESISNormalCollectorConfig {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#collectors DeviceGroup#collectors}
  */
  readonly collectors?: DeviceGroupExtraServicesKINESISNormalCollectorConfigCollectors[] | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#enabled DeviceGroup#enabled}
  */
  readonly enabled: boolean | cdktf.IResolvable;
}

export function deviceGroupExtraServicesKINESISNormalCollectorConfigToTerraform(struct?: DeviceGroupExtraServicesKINESISNormalCollectorConfig | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    collectors: cdktf.listMapper(deviceGroupExtraServicesKINESISNormalCollectorConfigCollectorsToTerraform, false)(struct!.collectors),
    enabled: cdktf.booleanToTerraform(struct!.enabled),
  }
}


export function deviceGroupExtraServicesKINESISNormalCollectorConfigToHclTerraform(struct?: DeviceGroupExtraServicesKINESISNormalCollectorConfig | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    collectors: {
      value: cdktf.listMapperHcl(deviceGroupExtraServicesKINESISNormalCollectorConfigCollectorsToHclTerraform, false)(struct!.collectors),
      isBlock: true,
      type: "list",
      storageClassType: "DeviceGroupExtraServicesKINESISNormalCollectorConfigCollectorsList",
    },
    enabled: {
      value: cdktf.booleanToHclTerraform(struct!.enabled),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesKINESISNormalCollectorConfigOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesKINESISNormalCollectorConfig | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._collectors?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.collectors = this._collectors?.internalValue;
    }
    if (this._enabled !== undefined) {
      hasAnyValues = true;
      internalValueResult.enabled = this._enabled;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesKINESISNormalCollectorConfig | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._collectors.internalValue = undefined;
      this._enabled = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._collectors.internalValue = value.collectors;
      this._enabled = value.enabled;
    }
  }

  // collectors - computed: false, optional: true, required: false
  private _collectors = new DeviceGroupExtraServicesKINESISNormalCollectorConfigCollectorsList(this, "collectors", false);
  public get collectors() {
    return this._collectors;
  }
  public putCollectors(value: DeviceGroupExtraServicesKINESISNormalCollectorConfigCollectors[] | cdktf.IResolvable) {
    this._collectors.internalValue = value;
  }
  public resetCollectors() {
    this._collectors.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get collectorsInput() {
    return this._collectors.internalValue;
  }

  // enabled - computed: false, optional: false, required: true
  private _enabled?: boolean | cdktf.IResolvable; 
  public get enabled() {
    return this.getBooleanAttribute('enabled');
  }
  public set enabled(value: boolean | cdktf.IResolvable) {
    this._enabled = value;
  }
  // Temporarily expose input value. Use with caution.
  public get enabledInput() {
    return this._enabled;
  }
}

export class DeviceGroupExtraServicesKINESISNormalCollectorConfigList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesKINESISNormalCollectorConfig[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesKINESISNormalCollectorConfigOutputReference {
    return new DeviceGroupExtraServicesKINESISNormalCollectorConfigOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
export interface DeviceGroupExtraServicesKINESIS {
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#custom_n_s_p_schedule DeviceGroup#custom_n_s_p_schedule}
  */
  readonly customNSPSchedule?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#dead_operation DeviceGroup#dead_operation}
  */
  readonly deadOperation?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#device_display_name_template DeviceGroup#device_display_name_template}
  */
  readonly deviceDisplayNameTemplate?: string;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#disable_stop_terminate_host_monitor DeviceGroup#disable_stop_terminate_host_monitor}
  */
  readonly disableStopTerminateHostMonitor?: boolean | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#disable_terminated_host_alerting DeviceGroup#disable_terminated_host_alerting}
  */
  readonly disableTerminatedHostAlerting?: boolean | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#monitoring_region_infos DeviceGroup#monitoring_region_infos}
  */
  readonly monitoringRegionInfos?: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#monitoring_regions DeviceGroup#monitoring_regions}
  */
  readonly monitoringRegions?: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#name_filter DeviceGroup#name_filter}
  */
  readonly nameFilter?: string[];
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#select_all DeviceGroup#select_all}
  */
  readonly selectAll?: boolean | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#tags DeviceGroup#tags}
  */
  readonly tags?: DeviceGroupExtraServicesKINESISTags[] | cdktf.IResolvable;
  /**
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#use_default DeviceGroup#use_default}
  */
  readonly useDefault: boolean | cdktf.IResolvable;
  /**
  * normal_collector_config block
  *
  * Docs at Terraform Registry: {@link https://registry.terraform.io/providers/logicmonitor/logicmonitor/2.0.25/docs/resources/device_group#normal_collector_config DeviceGroup#normal_collector_config}
  */
  readonly normalCollectorConfig?: DeviceGroupExtraServicesKINESISNormalCollectorConfig[] | cdktf.IResolvable;
}

export function deviceGroupExtraServicesKINESISToTerraform(struct?: DeviceGroupExtraServicesKINESIS | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  return {
    custom_n_s_p_schedule: cdktf.stringToTerraform(struct!.customNSPSchedule),
    dead_operation: cdktf.stringToTerraform(struct!.deadOperation),
    device_display_name_template: cdktf.stringToTerraform(struct!.deviceDisplayNameTemplate),
    disable_stop_terminate_host_monitor: cdktf.booleanToTerraform(struct!.disableStopTerminateHostMonitor),
    disable_terminated_host_alerting: cdktf.booleanToTerraform(struct!.disableTerminatedHostAlerting),
    monitoring_region_infos: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.monitoringRegionInfos),
    monitoring_regions: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.monitoringRegions),
    name_filter: cdktf.listMapper(cdktf.stringToTerraform, false)(struct!.nameFilter),
    select_all: cdktf.booleanToTerraform(struct!.selectAll),
    tags: cdktf.listMapper(deviceGroupExtraServicesKINESISTagsToTerraform, false)(struct!.tags),
    use_default: cdktf.booleanToTerraform(struct!.useDefault),
    normal_collector_config: cdktf.listMapper(deviceGroupExtraServicesKINESISNormalCollectorConfigToTerraform, true)(struct!.normalCollectorConfig),
  }
}


export function deviceGroupExtraServicesKINESISToHclTerraform(struct?: DeviceGroupExtraServicesKINESIS | cdktf.IResolvable): any {
  if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) { return struct; }
  if (cdktf.isComplexElement(struct)) {
    throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
  }
  const attrs = {
    custom_n_s_p_schedule: {
      value: cdktf.stringToHclTerraform(struct!.customNSPSchedule),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    dead_operation: {
      value: cdktf.stringToHclTerraform(struct!.deadOperation),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    device_display_name_template: {
      value: cdktf.stringToHclTerraform(struct!.deviceDisplayNameTemplate),
      isBlock: false,
      type: "simple",
      storageClassType: "string",
    },
    disable_stop_terminate_host_monitor: {
      value: cdktf.booleanToHclTerraform(struct!.disableStopTerminateHostMonitor),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    disable_terminated_host_alerting: {
      value: cdktf.booleanToHclTerraform(struct!.disableTerminatedHostAlerting),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    monitoring_region_infos: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.monitoringRegionInfos),
      isBlock: false,
      type: "set",
      storageClassType: "stringList",
    },
    monitoring_regions: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.monitoringRegions),
      isBlock: false,
      type: "set",
      storageClassType: "stringList",
    },
    name_filter: {
      value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct!.nameFilter),
      isBlock: false,
      type: "set",
      storageClassType: "stringList",
    },
    select_all: {
      value: cdktf.booleanToHclTerraform(struct!.selectAll),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    tags: {
      value: cdktf.listMapperHcl(deviceGroupExtraServicesKINESISTagsToHclTerraform, false)(struct!.tags),
      isBlock: true,
      type: "list",
      storageClassType: "DeviceGroupExtraServicesKINESISTagsList",
    },
    use_default: {
      value: cdktf.booleanToHclTerraform(struct!.useDefault),
      isBlock: false,
      type: "simple",
      storageClassType: "boolean",
    },
    normal_collector_config: {
      value: cdktf.listMapperHcl(deviceGroupExtraServicesKINESISNormalCollectorConfigToHclTerraform, true)(struct!.normalCollectorConfig),
      isBlock: true,
      type: "list",
      storageClassType: "DeviceGroupExtraServicesKINESISNormalCollectorConfigList",
    },
  };

  // remove undefined attributes
  return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}

export class DeviceGroupExtraServicesKINESISOutputReference extends cdktf.ComplexObject {
  private isEmptyObject = false;
  private resolvableValue?: cdktf.IResolvable;

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param complexObjectIndex the index of this item in the list
  * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  public constructor(terraformResource: cdktf.IInterpolatingParent, terraformAttribute: string, complexObjectIndex: number, complexObjectIsFromSet: boolean) {
    super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
  }

  public get internalValue(): DeviceGroupExtraServicesKINESIS | cdktf.IResolvable | undefined {
    if (this.resolvableValue) {
      return this.resolvableValue;
    }
    let hasAnyValues = this.isEmptyObject;
    const internalValueResult: any = {};
    if (this._customNSPSchedule !== undefined) {
      hasAnyValues = true;
      internalValueResult.customNSPSchedule = this._customNSPSchedule;
    }
    if (this._deadOperation !== undefined) {
      hasAnyValues = true;
      internalValueResult.deadOperation = this._deadOperation;
    }
    if (this._deviceDisplayNameTemplate !== undefined) {
      hasAnyValues = true;
      internalValueResult.deviceDisplayNameTemplate = this._deviceDisplayNameTemplate;
    }
    if (this._disableStopTerminateHostMonitor !== undefined) {
      hasAnyValues = true;
      internalValueResult.disableStopTerminateHostMonitor = this._disableStopTerminateHostMonitor;
    }
    if (this._disableTerminatedHostAlerting !== undefined) {
      hasAnyValues = true;
      internalValueResult.disableTerminatedHostAlerting = this._disableTerminatedHostAlerting;
    }
    if (this._monitoringRegionInfos !== undefined) {
      hasAnyValues = true;
      internalValueResult.monitoringRegionInfos = this._monitoringRegionInfos;
    }
    if (this._monitoringRegions !== undefined) {
      hasAnyValues = true;
      internalValueResult.monitoringRegions = this._monitoringRegions;
    }
    if (this._nameFilter !== undefined) {
      hasAnyValues = true;
      internalValueResult.nameFilter = this._nameFilter;
    }
    if (this._selectAll !== undefined) {
      hasAnyValues = true;
      internalValueResult.selectAll = this._selectAll;
    }
    if (this._tags?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.tags = this._tags?.internalValue;
    }
    if (this._useDefault !== undefined) {
      hasAnyValues = true;
      internalValueResult.useDefault = this._useDefault;
    }
    if (this._normalCollectorConfig?.internalValue !== undefined) {
      hasAnyValues = true;
      internalValueResult.normalCollectorConfig = this._normalCollectorConfig?.internalValue;
    }
    return hasAnyValues ? internalValueResult : undefined;
  }

  public set internalValue(value: DeviceGroupExtraServicesKINESIS | cdktf.IResolvable | undefined) {
    if (value === undefined) {
      this.isEmptyObject = false;
      this.resolvableValue = undefined;
      this._customNSPSchedule = undefined;
      this._deadOperation = undefined;
      this._deviceDisplayNameTemplate = undefined;
      this._disableStopTerminateHostMonitor = undefined;
      this._disableTerminatedHostAlerting = undefined;
      this._monitoringRegionInfos = undefined;
      this._monitoringRegions = undefined;
      this._nameFilter = undefined;
      this._selectAll = undefined;
      this._tags.internalValue = undefined;
      this._useDefault = undefined;
      this._normalCollectorConfig.internalValue = undefined;
    }
    else if (cdktf.Tokenization.isResolvable(value)) {
      this.isEmptyObject = false;
      this.resolvableValue = value;
    }
    else {
      this.isEmptyObject = Object.keys(value).length === 0;
      this.resolvableValue = undefined;
      this._customNSPSchedule = value.customNSPSchedule;
      this._deadOperation = value.deadOperation;
      this._deviceDisplayNameTemplate = value.deviceDisplayNameTemplate;
      this._disableStopTerminateHostMonitor = value.disableStopTerminateHostMonitor;
      this._disableTerminatedHostAlerting = value.disableTerminatedHostAlerting;
      this._monitoringRegionInfos = value.monitoringRegionInfos;
      this._monitoringRegions = value.monitoringRegions;
      this._nameFilter = value.nameFilter;
      this._selectAll = value.selectAll;
      this._tags.internalValue = value.tags;
      this._useDefault = value.useDefault;
      this._normalCollectorConfig.internalValue = value.normalCollectorConfig;
    }
  }

  // custom_n_s_p_schedule - computed: false, optional: true, required: false
  private _customNSPSchedule?: string; 
  public get customNSPSchedule() {
    return this.getStringAttribute('custom_n_s_p_schedule');
  }
  public set customNSPSchedule(value: string) {
    this._customNSPSchedule = value;
  }
  public resetCustomNSPSchedule() {
    this._customNSPSchedule = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get customNSPScheduleInput() {
    return this._customNSPSchedule;
  }

  // dead_operation - computed: false, optional: true, required: false
  private _deadOperation?: string; 
  public get deadOperation() {
    return this.getStringAttribute('dead_operation');
  }
  public set deadOperation(value: string) {
    this._deadOperation = value;
  }
  public resetDeadOperation() {
    this._deadOperation = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get deadOperationInput() {
    return this._deadOperation;
  }

  // device_display_name_template - computed: false, optional: true, required: false
  private _deviceDisplayNameTemplate?: string; 
  public get deviceDisplayNameTemplate() {
    return this.getStringAttribute('device_display_name_template');
  }
  public set deviceDisplayNameTemplate(value: string) {
    this._deviceDisplayNameTemplate = value;
  }
  public resetDeviceDisplayNameTemplate() {
    this._deviceDisplayNameTemplate = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get deviceDisplayNameTemplateInput() {
    return this._deviceDisplayNameTemplate;
  }

  // disable_stop_terminate_host_monitor - computed: false, optional: true, required: false
  private _disableStopTerminateHostMonitor?: boolean | cdktf.IResolvable; 
  public get disableStopTerminateHostMonitor() {
    return this.getBooleanAttribute('disable_stop_terminate_host_monitor');
  }
  public set disableStopTerminateHostMonitor(value: boolean | cdktf.IResolvable) {
    this._disableStopTerminateHostMonitor = value;
  }
  public resetDisableStopTerminateHostMonitor() {
    this._disableStopTerminateHostMonitor = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get disableStopTerminateHostMonitorInput() {
    return this._disableStopTerminateHostMonitor;
  }

  // disable_terminated_host_alerting - computed: false, optional: true, required: false
  private _disableTerminatedHostAlerting?: boolean | cdktf.IResolvable; 
  public get disableTerminatedHostAlerting() {
    return this.getBooleanAttribute('disable_terminated_host_alerting');
  }
  public set disableTerminatedHostAlerting(value: boolean | cdktf.IResolvable) {
    this._disableTerminatedHostAlerting = value;
  }
  public resetDisableTerminatedHostAlerting() {
    this._disableTerminatedHostAlerting = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get disableTerminatedHostAlertingInput() {
    return this._disableTerminatedHostAlerting;
  }

  // monitoring_region_infos - computed: false, optional: true, required: false
  private _monitoringRegionInfos?: string[]; 
  public get monitoringRegionInfos() {
    return cdktf.Fn.tolist(this.getListAttribute('monitoring_region_infos'));
  }
  public set monitoringRegionInfos(value: string[]) {
    this._monitoringRegionInfos = value;
  }
  public resetMonitoringRegionInfos() {
    this._monitoringRegionInfos = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get monitoringRegionInfosInput() {
    return this._monitoringRegionInfos;
  }

  // monitoring_regions - computed: false, optional: true, required: false
  private _monitoringRegions?: string[]; 
  public get monitoringRegions() {
    return cdktf.Fn.tolist(this.getListAttribute('monitoring_regions'));
  }
  public set monitoringRegions(value: string[]) {
    this._monitoringRegions = value;
  }
  public resetMonitoringRegions() {
    this._monitoringRegions = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get monitoringRegionsInput() {
    return this._monitoringRegions;
  }

  // name_filter - computed: false, optional: true, required: false
  private _nameFilter?: string[]; 
  public get nameFilter() {
    return cdktf.Fn.tolist(this.getListAttribute('name_filter'));
  }
  public set nameFilter(value: string[]) {
    this._nameFilter = value;
  }
  public resetNameFilter() {
    this._nameFilter = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get nameFilterInput() {
    return this._nameFilter;
  }

  // select_all - computed: false, optional: true, required: false
  private _selectAll?: boolean | cdktf.IResolvable; 
  public get selectAll() {
    return this.getBooleanAttribute('select_all');
  }
  public set selectAll(value: boolean | cdktf.IResolvable) {
    this._selectAll = value;
  }
  public resetSelectAll() {
    this._selectAll = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get selectAllInput() {
    return this._selectAll;
  }

  // tags - computed: false, optional: true, required: false
  private _tags = new DeviceGroupExtraServicesKINESISTagsList(this, "tags", false);
  public get tags() {
    return this._tags;
  }
  public putTags(value: DeviceGroupExtraServicesKINESISTags[] | cdktf.IResolvable) {
    this._tags.internalValue = value;
  }
  public resetTags() {
    this._tags.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get tagsInput() {
    return this._tags.internalValue;
  }

  // use_default - computed: false, optional: false, required: true
  private _useDefault?: boolean | cdktf.IResolvable; 
  public get useDefault() {
    return this.getBooleanAttribute('use_default');
  }
  public set useDefault(value: boolean | cdktf.IResolvable) {
    this._useDefault = value;
  }
  // Temporarily expose input value. Use with caution.
  public get useDefaultInput() {
    return this._useDefault;
  }

  // normal_collector_config - computed: false, optional: true, required: false
  private _normalCollectorConfig = new DeviceGroupExtraServicesKINESISNormalCollectorConfigList(this, "normal_collector_config", false);
  public get normalCollectorConfig() {
    return this._normalCollectorConfig;
  }
  public putNormalCollectorConfig(value: DeviceGroupExtraServicesKINESISNormalCollectorConfig[] | cdktf.IResolvable) {
    this._normalCollectorConfig.internalValue = value;
  }
  public resetNormalCollectorConfig() {
    this._normalCollectorConfig.internalValue = undefined;
  }
  // Temporarily expose input value. Use with caution.
  public get normalCollectorConfigInput() {
    return this._normalCollectorConfig.internalValue;
  }
}

export class DeviceGroupExtraServicesKINESISList extends cdktf.ComplexList {
  public internalValue? : DeviceGroupExtraServicesKINESIS[] | cdktf.IResolvable

  /**
  * @param terraformResource The parent resource
  * @param terraformAttribute The attribute on the parent resource this class is referencing
  * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
  */
  constructor(protected terraformResource: cdktf.IInterpolatingParent, protected terraformAttribute: string, protected wrapsSet: boolean) {
    super(terraformResource, terraformAttribute, wrapsSet)
  }

  /**
  * @param index the index of the item to return
  */
  public get(index: number): DeviceGroupExtraServicesKINESISOutputReference {
    return new DeviceGroupExtraServicesKINESISOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
  }
}
